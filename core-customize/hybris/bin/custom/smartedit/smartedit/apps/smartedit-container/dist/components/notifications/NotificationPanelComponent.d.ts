import { AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { INotificationConfiguration, SystemEventService, WindowUtils, YJQuery } from 'smarteditcommons';
import { IframeManagerService } from '../../services/iframe/IframeManagerService';
import { NotificationMouseLeaveDetectionService, NotificationService } from '../../services/notifications';
export declare class NotificationPanelComponent implements OnInit, AfterViewInit, OnDestroy {
    private notificationService;
    private notificationMouseLeaveDetectionService;
    private systemEventService;
    private iframeManagerService;
    private windowUtils;
    private element;
    private yjQuery;
    private cd;
    isMouseOver: boolean;
    notifications$: Observable<INotificationConfiguration[]>;
    private notificationPanelBounds;
    private iFrameNotificationPanelBounds;
    private addMouseMoveEventListenerTimeout;
    private unRegisterNotificationChangedEventHandler;
    private $element;
    constructor(notificationService: NotificationService, notificationMouseLeaveDetectionService: NotificationMouseLeaveDetectionService, systemEventService: SystemEventService, iframeManagerService: IframeManagerService, windowUtils: WindowUtils, element: ElementRef, yjQuery: YJQuery, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onMouseEnter(): void;
    private onMouseLeave;
    private getIFrame;
    private getNotificationPanel;
    private calculateNotificationPanelBounds;
    private calculateIFrameNotificationPanelBounds;
    private calculateBounds;
    private invalidateBounds;
    private hasBounds;
    private cancelDetection;
    private onResize;
    private onNotificationChanged;
    private addMouseMoveEventListener;
}
