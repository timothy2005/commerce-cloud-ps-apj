/**
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 * @module smartutils
 */
import { Page, Pageable, Payload, Primitive, TypedMap } from '../../dtos';
import { IReflectable } from './i-reflectable';
export interface IRestOptions {
    headers?: TypedMap<string>;
}
export interface SearchParams {
    [param: string]: Primitive | Primitive[];
}
export interface BodyWithHeaders {
    headers?: TypedMap<string>;
}
/**
 * @ngdoc interface
 * @name @smartutils.interfaces:IRestService
 *
 * @description
 * Common interface of smartedit REST services generated by calls to {@link @smartutils.interfaces:restServiceFactory restServiceFactory#get<T>}
 * IRestService<T> has strongly typed methods in both signature and return type
 * When used in the smartedit application (as opposed to smarteditContainer) calls are proxied to the smarteditContainer
 * in order to prevent cross-origin issues in the case where smartEdit and the embedded storefront are in different domains.
 */
export interface IRestService<T> extends IReflectable<T> {
    readonly url?: string;
    activateMetadata?(): void;
    /**
     * @ngdoc service
     * @name @smartutils.interfaces:IRestService#getById
     * @methodOf @smartutils.interfaces:IRestService
     *
     * @description
     * Loads a component based on its identifier.
     *
     * @param {String} identifier The value of the object identifier.
     * @param {IRestOptions} options Options allowing to customize request
     * @param {Object} options.headers Custom http headers.
     * @returns {Object} A Promise of T
     */
    getById<S extends T = T>(identifier: string, options?: IRestOptions): Promise<S | null>;
    /**
     * @ngdoc service
     * @name @smartutils.interfaces:IRestService#get
     * @methodOf @smartutils.interfaces:IRestService
     *
     * @description
     * Loads a unique component based on its identifier that must match the specified get parameters.
     * <br/>The REST Service Factory evaluates placeholders in the URI, if any are provided, to verify if they
     * match the search parameters.
     *
     * @param {object} searchParams The object that contains the query parameters, which are then mapped to the
     * query string
     * @param {IRestOptions} options Options allowing to customize request
     * @param {Object} options.headers Custom http headers.
     *
     * @returns {object} A Promise of T
     */
    get<S extends T = T>(searchParams?: SearchParams, options?: IRestOptions): Promise<S | null>;
    /**
     * @ngdoc service
     * @name @smartutils.interfaces:IRestService#query
     * @methodOf @smartutils.interfaces:IRestService
     *
     * @description
     * Loads a list of components that match the specified search parameters.
     * <br/>The REST service evaluates the placeholders in the URI, if any are provided, to verify if
     * they match the search parameters.
     *
     * @param {object} searchParams The object that contains the query parameters, which are then mapped to the
     * query string
     * @param {IRestOptions} options Options allowing to customize request
     * @param {Object} options.headers Custom http headers.
     *
     * @returns {object} A Promise of T[]
     */
    query<S extends T = T>(searchParams?: SearchParams, options?: IRestOptions): Promise<S[]>;
    /**
     * @ngdoc service
     * @name @smartutils.interfaces:IRestService#page
     * @methodOf @smartutils.interfaces:IRestService
     * @description
     * To be called instead of {@link @smartutils.interfaces:IRestService#query query} when the list is wrapped by server in an object (ex: Page).
     * <br/>The service will evaluate any placeholder in the URI with matching search params.
     * @param {object} searchParams The object that contains the query parameters, which are then mapped to the
     * query string
     * @param {IRestOptions} options Options allowing to customize request
     * @param {Object} options.headers Custom http headers.
     *
     * @returns {object} a Promise of <Page<T>>
     */
    page<S extends Page<T>>(searchParams: Pageable, options?: IRestOptions): Promise<S>;
    /**
     * @ngdoc service
     * @name @smartutils.interfaces:IRestService#update
     * @methodOf @smartutils.interfaces:IRestService
     *
     * @description
     * Updates a component.  It appends the value of the identifier to the URI.
     *
     * @param {object} payload The object to be updated. <br/>The promise will be rejected if the payload does not contain the identifier.
     * @param {IRestOptions} options Options allowing to customize request
     * @param {Object} options.headers Custom http headers.
     *
     * @returns {object} A Promise of T
     */
    update<S extends T = T>(payload: Payload, options?: IRestOptions): Promise<S>;
    /**
     * @ngdoc service
     * @name @smartutils.interfaces:IRestService#patch
     * @methodOf @smartutils.interfaces:IRestService
     *
     * @description
     * Updates a component. It appends the value of the identifier to the URI.
     *
     * @param {object} payload The object to be updated. <br/>The promise will be rejected if the payload does not contain the identifier.
     * @param {IRestOptions} options Options allowing to customize request
     * @param {Object} options.headers Custom http headers.
     *
     * @returns {object} Promise<T>
     */
    patch<S extends T = T>(payload: Payload, options?: IRestOptions): Promise<S>;
    /**
     * @ngdoc service
     * @name @smartutils.interfaces:IRestService#save
     * @methodOf @smartutils.interfaces:IRestService
     *
     * @description
     * Saves a component. It appends the value of the identifier to the URI.
     *
     * @param {object} payload The object to be saved.
     * <br/>The promise will be rejected if the payload does not contain the identifier.
     * @param {IRestOptions} options Options allowing to customize request
     * @param {Object} options.headers Custom http headers.
     *
     * @returns {object} A Promise of T
     * to what the server returns.
     */
    save<S extends T = T>(payload: Payload, options?: IRestOptions): Promise<S>;
    /**
     * @ngdoc service
     * @name @smartutils.interfaces:IRestService#remove
     * @methodOf @smartutils.interfaces:IRestService
     *
     * @description
     * Deletes a component. It appends the value of the identifier to the URI.
     *
     * @param {object} payload The object to be updated.
     * <br/>The promise will be rejected if the payload does not contain the identifier.
     * @param {IRestOptions} options Options allowing to customize request
     * @param {Object} options.headers Custom http headers.
     *
     * @returns {object} A Promise of void
     */
    remove<S extends T = T>(payload: Payload, options?: IRestOptions): Promise<void>;
    /**
     * @description
     * Query permissionswebservices APIs must use httpclient POST method, now it only used to query permissionswebservices
     * <br/>The REST Service Factory evaluates placeholders in the URI, if any are provided, to verify if they
     * match the search parameters.
     */
    queryByPost<S extends T = T>(payload: Payload, searchParams?: SearchParams, options?: IRestOptions): Promise<S | null>;
}
