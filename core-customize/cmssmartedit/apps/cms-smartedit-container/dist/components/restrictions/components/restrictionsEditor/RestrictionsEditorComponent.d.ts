import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, Type, ChangeDetectorRef } from '@angular/core';
import { CMSItem, IContextAwareEditableItemService, CmsitemsRestService } from 'cmscommons';
import { FetchStrategy, GenericEditorFieldMessage, IUriContext, LogService, SliderPanelConfiguration, SystemEventService } from 'smarteditcommons';
import { IRestrictionType } from '../../../../dao/RestrictionTypesRestService';
import { IPageRestrictionCriteria, PageRestrictionsCriteriaService } from '../../../../services/pageRestrictions/PageRestrictionsCriteriaService';
import { RestrictionsDTO } from '../../../pages/pageWizard';
import { EditingRestrictionConfig, RestrictionPickerConfigService, SelectingRestrictionConfig } from '../../services';
import { RestrictionCMSItem } from '../../types';
import { RestrictionEditorCriteriaSelectItemComponent } from './restrictionEditorCriteriaSelectItem/RestrictionEditorCriteriaSelectItemComponent';
export declare class RestrictionsEditorComponent implements OnInit, OnDestroy, OnChanges {
    private readonly logService;
    private readonly systemEventService;
    private readonly restrictionPickerConfigService;
    private readonly pageRestrictionsCriteriaService;
    private readonly contextAwareEditableItemService;
    private readonly cmsitemsRestService;
    private readonly cdr;
    item: CMSItem;
    editable: boolean;
    resetFn: () => boolean;
    cancelFn: () => Promise<void>;
    isDirtyFn: () => boolean;
    getRestrictionTypes: () => Promise<IRestrictionType[]>;
    getSupportedRestrictionTypes: () => Promise<string[]>;
    removeValidationMessages: () => void;
    restrictionUuids: string[];
    onRestrictionsChange: EventEmitter<RestrictionsDTO>;
    resetFnChange: EventEmitter<() => boolean>;
    cancelFnChange: EventEmitter<() => Promise<boolean>>;
    isDirtyFnChange: EventEmitter<() => boolean>;
    restrictions: RestrictionCMSItem[];
    originalRestrictions: RestrictionCMSItem[];
    isRestrictionsReady: boolean;
    showRestrictionPicker: boolean;
    disableAddButton: boolean;
    sliderPanelConfiguration: SliderPanelConfiguration;
    restrictionManagement: {
        config: EditingRestrictionConfig | SelectingRestrictionConfig;
        uriContext: IUriContext;
        submitFn: () => Promise<RestrictionCMSItem>;
        isDirtyFn: () => boolean;
    };
    criteriaOptions: IPageRestrictionCriteria[];
    criteria: IPageRestrictionCriteria;
    originalCriteria: IPageRestrictionCriteria;
    matchCriteriaIsDirty: boolean;
    criteriaFetchStrategy: FetchStrategy;
    itemComponent: Type<RestrictionEditorCriteriaSelectItemComponent>;
    errors: GenericEditorFieldMessage[];
    sliderPanelHide: () => Promise<void>;
    sliderPanelShow: () => Promise<void>;
    isSliderVisible: boolean;
    private restrictionsArrayIsDirty;
    private unregisterErrorListener;
    private unregisterErrorPropagationEvent;
    constructor(logService: LogService, systemEventService: SystemEventService, restrictionPickerConfigService: RestrictionPickerConfigService, pageRestrictionsCriteriaService: PageRestrictionsCriteriaService, contextAwareEditableItemService: IContextAwareEditableItemService, cmsitemsRestService: CmsitemsRestService, cdr: ChangeDetectorRef);
    ngOnInit(): Promise<void>;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): Promise<void>;
    onAddRestriction(): void;
    onEditRestriction(restriction: RestrictionCMSItem): void;
    onRemoveRestriction(restrictionIndex: number): void;
    removeAllRestrictions(): void;
    showRemoveAllButton(): boolean;
    matchCriteriaChanged(selectedCriteriaId: string): void;
    onSliderVisibilityChange(isVisible: boolean): void;
    private setupResults;
    private updateRestrictionsData;
    private prepareRestrictionsCriteria;
    private isRestrictionRelatedError;
    private formatRestrictionRelatedError;
    private handleUnrelatedValidationErrors;
    private propagateErrors;
    private indexRestrictions;
    private cloneRestrictions;
    private initEvents;
    private clearEvents;
    private applyIsRestrictionEditable;
    private setSliderConfigForAddOrCreate;
    private setSliderConfigForEditing;
}
