import { ChangeDetectorRef, EventEmitter, Type } from '@angular/core';
import { CMSItem } from 'cmscommons';
import { FetchStrategy, IUriContext, SelectReset, SystemEventService } from 'smarteditcommons';
import { IRestrictionType } from '../../../../dao/RestrictionTypesRestService';
import { RestrictionsService } from '../../../../services/RestrictionsService';
import { RestrictionManagementSelectModel, RestrictionManagementSelectModelFactory } from '../../services/RestrictionManagementSelectModelFactory';
import { RestrictionManagementSelectItemComponent } from './restrictionManagementSelectItem/RestrictionManagementSelectItemComponent';
export declare class RestrictionManagementSelectComponent {
    private restrictionManagementSelectModelFactory;
    private restrictionsService;
    private systemEventService;
    private cdr;
    uriContext: IUriContext;
    existingRestrictions: CMSItem[];
    fetchRestrictionTypes: () => Promise<IRestrictionType[]>;
    getSupportedRestrictionTypes: () => Promise<string[]>;
    isDirtyFn: () => boolean;
    submitFn: () => Promise<CMSItem>;
    isDirtyFnChange: EventEmitter<() => boolean>;
    submitFnChange: EventEmitter<() => Promise<CMSItem>>;
    readonly RESTRICTION_CREATE_BUTTON_PRESSED_EVENT_ID = "RESTRICTION_CREATE_BUTTON_PRESSED_EVENT_ID";
    reset: SelectReset;
    submitInternal: () => Promise<CMSItem>;
    isDirtyInternal: () => boolean;
    disableRestrictionChoice: (restriction: CMSItem) => boolean;
    itemComponent: Type<RestrictionManagementSelectItemComponent>;
    resultsHeaderLabel: string;
    editorHeader: string;
    selectModel: RestrictionManagementSelectModel;
    fetchOptions: FetchStrategy<CMSItem>;
    fetchStrategy: FetchStrategy<IRestrictionType>;
    viewConfig: {
        showRestrictionSelector: boolean;
        showRestrictionEditor: boolean;
        mode: string;
        contentApi: string;
        structureApi?: string;
    };
    private createButtonUnsubscribe;
    constructor(restrictionManagementSelectModelFactory: RestrictionManagementSelectModelFactory, restrictionsService: RestrictionsService, systemEventService: SystemEventService, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    selectRestrictionType(): void;
    selectRestriction(): void;
    createRestriction(name: string): Promise<void>;
    showWarningMessage(): boolean;
    private createButtonEventHandler;
    private resetSelector;
    private setViewConfig;
}
