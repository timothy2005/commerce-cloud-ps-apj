import { CMSPageTypes, ICMSPage } from 'cmscommons';
import { GenericEditorStructure, IConfirmationModalService, IExperienceService, IUriContext, SystemEventService, WizardConfig, WizardService, WizardStep } from 'smarteditcommons';
import { PageType } from '../../../../dao/PageTypeService';
import { IRestrictionType } from '../../../../dao/RestrictionTypesRestService';
import { PageFacade } from '../../../../facades';
import { RestrictionTypesService } from '../../../../services/pageRestrictions/RestrictionTypesService';
import { PageBuilder, PageBuilderFactory } from '../../../../services/pages/PageBuilderFactory';
import { RestrictionsStepHandler, RestrictionsStepHandlerFactory } from '../../../../services/pages/RestrictionsStepHandlerFactory';
import { PageTemplateType, RestrictionsEditorFunctionBindings } from '../../../../services/pages/types';
import { RestrictionsService } from '../../../../services/RestrictionsService';
import { RestrictionsDTO, WizardCallbacks, WizardStepApi } from '../../pageWizard';
export declare class AddPageWizardComponent implements WizardStepApi {
    private wizardManager;
    private pageBuilderFactory;
    private restrictionsStepHandlerFactory;
    private experienceService;
    private confirmationModalService;
    private systemEventService;
    private restrictionTypesService;
    private restrictionsService;
    private pageFacade;
    callbacks: WizardCallbacks;
    pageBuilder: PageBuilder;
    restrictionsEditorFunctionBindings: RestrictionsEditorFunctionBindings;
    restrictionsStepHandler: RestrictionsStepHandler;
    restrictionStepProperties: WizardStep;
    uriContext: IUriContext;
    saveInProgress: boolean;
    typeChanged: boolean;
    private readonly ADD_PAGE_WIZARD_STEPS;
    constructor(wizardManager: WizardService, pageBuilderFactory: PageBuilderFactory, restrictionsStepHandlerFactory: RestrictionsStepHandlerFactory, experienceService: IExperienceService, confirmationModalService: IConfirmationModalService, systemEventService: SystemEventService, restrictionTypesService: RestrictionTypesService, restrictionsService: RestrictionsService, pageFacade: PageFacade);
    getWizardConfig: () => WizardConfig;
    getRestrictionTypes: () => Promise<IRestrictionType[]>;
    getSupportedRestrictionTypes: () => Promise<string[]>;
    variationResult: (displayConditionResult: ICMSPage) => void;
    typeSelected(pageType: PageType): void;
    templateSelected(pageTemplate: PageTemplateType): void;
    getPageTypeCode(): CMSPageTypes;
    restrictionsResult(data: RestrictionsDTO): void;
    isRestrictionsActive(): boolean;
    getPageInfo(): ICMSPage;
    getPageRestrictions(): string[];
    getPageInfoStructure(): GenericEditorStructure;
    isPageInfoActive(): boolean;
    onNext(): Promise<boolean>;
    onCancel(): Promise<any>;
    isFormValid(stepId: string): boolean;
    onDone(): Promise<any>;
}
