'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var angular$1 = require('angular');
var cmscommons = require('cmscommons');
var smarteditcommons = require('smarteditcommons');
var core = require('@angular/core');
var lodash = require('lodash');
var smarteditcontainer = require('smarteditcontainer');
var router = require('@angular/router');
var core$1 = require('@ngx-translate/core');
var operators = require('rxjs/operators');
var rxjs = require('rxjs');
var core$2 = require('@fundamental-ngx/core');
var common = require('@angular/common');
var forms = require('@angular/forms');
var http = require('@angular/common/http');
var platformBrowser = require('@angular/platform-browser');
var _static = require('@angular/upgrade/static');
var operators$1 = require('rxjs/internal/operators');
var Subject = require('rxjs/internal/Subject');

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
angular
    .module('cmsItemDropdownModule', ['smarteditServicesModule', 'genericEditorModule'])
    .constant('ON_EDIT_NESTED_COMPONENT_EVENT', 'ON_EDIT_NESTED_COMPONENT')
    .controller('cmsItemDropdownController', ["CONTEXT_CATALOG", "CONTEXT_CATALOG_VERSION", "ON_EDIT_NESTED_COMPONENT_EVENT", "systemEventService", "genericEditorStackService", "nestedComponentManagementService", "selectComponentTypeModalService", "$log", function (
        CONTEXT_CATALOG,
        CONTEXT_CATALOG_VERSION,
        ON_EDIT_NESTED_COMPONENT_EVENT,
        systemEventService,
        genericEditorStackService,
        nestedComponentManagementService,
        selectComponentTypeModalService,
        $log
    ) {
        // -------------------------------------------------------------------------------------------------
        // Constants
        // -------------------------------------------------------------------------------------------------
        const CREATE_COMPONENT_BUTTON_PRESSED_EVENT_ID =
            'CREATE_NESTED_COMPONENT_BUTTON_PRESSED_EVENT';

        // -------------------------------------------------------------------------------------------------
        // Variables
        // -------------------------------------------------------------------------------------------------

        // -------------------------------------------------------------------------------------------------
        // Lifecyle Methods
        // -------------------------------------------------------------------------------------------------
        // TODO: check CmsDropdownItemComponent.scss for removing encapsulation
        this.$onInit = function () {
            this.itemTemplateUrl = 'cmsItemSearchTemplate.html';

            this.field.params = this.field.params || {};
            this.field.editorStackId = this.editorStackId;

            this.field.params.catalogId = CONTEXT_CATALOG;
            this.field.params.catalogVersion = CONTEXT_CATALOG_VERSION;

            this._recompileDom = function () {};

            // Register event handlers.
            this.componentButtonPressedEventId =
                CREATE_COMPONENT_BUTTON_PRESSED_EVENT_ID + '_' + this.qualifier;
            this.createComponentButtonUnRegFn = systemEventService.subscribe(
                this.componentButtonPressedEventId,
                this.onCreateComponentButtonPressed.bind(this)
            );
            this.editComponentClickedUnRegFn = systemEventService.subscribe(
                ON_EDIT_NESTED_COMPONENT_EVENT,
                this.onEditComponentClicked.bind(this)
            );
        };

        this.$onDestroy = function () {
            this.createComponentButtonUnRegFn();
            this.editComponentClickedUnRegFn();
        };

        // -------------------------------------------------------------------------------------------------
        // Event Handlers
        // -------------------------------------------------------------------------------------------------
        this.onCreateComponentButtonPressed = function (eventId, textTyped) {
            this.textTyped = textTyped;
            if (genericEditorStackService.isTopEditorInStack(this.editorStackId, this.id)) {
                if (this.field.subTypes) {
                    const keys = Object.keys(this.field.subTypes);
                    if (keys.length > 1) {
                        selectComponentTypeModalService.open(this.field.subTypes).then(
                            function (subTypeId) {
                                if (!!subTypeId) {
                                    this.createNestedComponent(subTypeId);
                                }
                            }.bind(this)
                        );
                    } else {
                        this.createNestedComponent(keys[0]);
                    }
                }
            }
        };

        this.onEditComponentClicked = function (eventId, payload) {
            if (genericEditorStackService.isTopEditorInStack(this.editorStackId, this.id)) {
                if (this.qualifier === payload.qualifier) {
                    this.editComponent(payload.item);
                }
            }
        };

        // -------------------------------------------------------------------------------------------------
        // Helper Methods
        // -------------------------------------------------------------------------------------------------
        this.configureSeDropdown = function ($api) {
            // Template configuration
            if (Object.keys(this.field.subTypes).length) {
                const template =
                    "<y-actionable-search-item data-event-id='" +
                    this.componentButtonPressedEventId +
                    "'></y-actionable-search-item>";
                $api.setResultsHeaderTemplate(template);
            }
        }.bind(this);

        this.createNestedComponent = function (componentType) {
            const componentInfo = {
                componentId: null,
                componentUuid: null,
                componentType,
                content: {
                    name: this.textTyped,
                    catalogVersion: this.model.catalogVersion
                }
            };

            return nestedComponentManagementService
                .openNestedComponentEditor(componentInfo, this.editorStackId)
                .then(
                    function (item) {
                        if (this.field.collection) {
                            if (!this.model[this.qualifier]) {
                                this.model[this.qualifier] = [];
                            }

                            this.model[this.qualifier].push(item.uuid);
                        } else {
                            this.model[this.qualifier] = item.uuid;
                        }

                        this._recompileDom();
                        this.textTyped = '';
                    }.bind(this)
                )
                .catch((error) => {
                    $log.warn('Something went wrong with openNestedComponentEditor method.', error);
                });
        };

        this.editComponent = function (itemToEdit) {
            const componentInfo = {
                componentId: itemToEdit.uid,
                componentUuid: itemToEdit.uuid,
                componentType: itemToEdit.typeCode || itemToEdit.itemtype,
                content: itemToEdit
            };

            nestedComponentManagementService
                .openNestedComponentEditor(componentInfo, this.editorStackId)
                .then(
                    function () {
                        this._recompileDom();
                    }.bind(this)
                );
        };
    }])
    /**
     * @name cmsItemDropdownModule.directive:cmsItemDropdown
     * @scope
     * @restrict E
     * @element cms-item-dropdown
     *
     * @description
     * Component wrapper for CMS Item's on top of seDropdown component that upon selection of an option, will print the CMSItem
     * in the provided format.
     *
     * @param {=Object} field The component field
     * @param {=String} id The component id
     * @param {=Object} model The component model
     * @param {=String} qualifier The qualifier within the structure attribute
     */
    .component('cmsItemDropdown', {
        templateUrl: 'cmsItemDropdownTemplate.html',
        controller: 'cmsItemDropdownController',
        controllerAs: 'cmsItemDropdownCtrl',
        bindings: {
            field: '=',
            qualifier: '=',
            editorStackId: '=',
            model: '=',
            id: '='
        }
    });

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
angular
    .module('componentMenuModule', [
        'smarteditServicesModule',
        'componentTypesTabModule',
        'componentsTabModule'
    ])
    .controller('componentMenuController', ["$q", "crossFrameEventService", "componentMenuService", "SMARTEDIT_DRAG_AND_DROP_EVENTS", "EVENTS", "DRAG_AND_DROP_CROSS_ORIGIN_BEFORE_TIME", function (
        $q,
        crossFrameEventService,
        componentMenuService,
        SMARTEDIT_DRAG_AND_DROP_EVENTS,
        EVENTS,
        DRAG_AND_DROP_CROSS_ORIGIN_BEFORE_TIME
    ) {
        // --------------------------------------------------------------------------------------------------
        // Constants
        // --------------------------------------------------------------------------------------------------
        const OPEN_COMPONENT_EVENT = 'ySEComponentMenuOpen';
        const OVERLAY_DISABLED_EVENT = 'OVERLAY_DISABLED';
        const RESET_COMPONENT_MENU_EVENT = 'RESET_COMPONENT_MENU_EVENT';

        const TAB_IDS = {
            COMPONENT_TYPES_TAB_ID: 'componentTypesTab',
            COMPONENTS_TAB_ID: 'componentsTab'
        };

        // --------------------------------------------------------------------------------------------------
        // Instance Variables
        // --------------------------------------------------------------------------------------------------
        this.isDragging = false;
        this.model = {};

        // --------------------------------------------------------------------------------------------------
        // Methods
        // --------------------------------------------------------------------------------------------------
        this.$onInit = function () {
            this._recompileDom = function () {};
            this._initializeComponentMenu();
            this.removePageChangeEventHandler = crossFrameEventService.subscribe(
                EVENTS.PAGE_CHANGE,
                this._initializeComponentMenu
            );
            this.removeOpenComponentEventHandler = crossFrameEventService.subscribe(
                OPEN_COMPONENT_EVENT,
                this._resetComponentMenu
            );
            this.removeDropdownEvent = crossFrameEventService.subscribe(
                SMARTEDIT_DRAG_AND_DROP_EVENTS.DRAG_DROP_START,
                function () {
                    this.isDragging = true;
                    this._closeMenu();
                }.bind(this)
            );
            this.removeOverlapEvent = crossFrameEventService.subscribe(
                OVERLAY_DISABLED_EVENT,
                this._closeMenu
            );
            this.removeDragEndEvent = crossFrameEventService.subscribe(
                SMARTEDIT_DRAG_AND_DROP_EVENTS.DRAG_DROP_END,
                function () {
                    this.isDragging = false;
                    crossFrameEventService.publish(DRAG_AND_DROP_CROSS_ORIGIN_BEFORE_TIME.END);
                }.bind(this)
            );
        };

        this.$onDestroy = function () {
            this.removePageChangeEventHandler();
            this.removeOpenComponentEventHandler();
            this.removeDropdownEvent();
            this.removeOverlapEvent();
            this.removeDragEndEvent();
        };

        // --------------------------------------------------------------------------------------------------
        // Helper Methods
        // --------------------------------------------------------------------------------------------------
        this._initializeComponentMenu = function () {
            // This is to ensure that the component menu DOM is completely clean, even after a page change.
            this.tabsList = null;
            this._recompileDom();

            componentMenuService.hasMultipleContentCatalogs().then(
                function (hasMultipleContentCatalogs) {
                    this.hasMultipleContentCatalogs = hasMultipleContentCatalogs;

                    const componentTypesTab = {
                        id: TAB_IDS.COMPONENT_TYPES_TAB_ID,
                        title: 'se.cms.compomentmenu.tabs.componenttypes',
                        templateUrl: 'componentTypesTabWrapperTemplate.html'
                    };
                    const componentsTab = {
                        id: TAB_IDS.COMPONENTS_TAB_ID,
                        title: 'se.cms.compomentmenu.tabs.customizedcomp',
                        templateUrl: 'componentsTabWrapperTemplate.html'
                    };

                    this.model = {
                        componentsTab: { hasMultipleContentCatalogs },
                        isOpen: this.actionItem.isOpen
                    };
                    this.tabsList = [componentTypesTab, componentsTab];

                    // This variable is assigned in the tabsList to make sure there's no
                    // tight coupling with the view (instead of relying on a position in the array).
                    this._resetComponentMenu();
                }.bind(this)
            );
        }.bind(this);

        this._resetComponentMenu = function () {
            if (this.tabsList) {
                // Reset component menu only when it is opened. It is required to set the specific tab as an active.
                // OPEN_COMPONENT_EVENT is called before toolbar updates item.isOpen property.
                if (!this.actionItem.isOpen) {
                    this.tabsList = this.tabsList.map(function (tab) {
                        return Object.assign(tab, {
                            active: tab.id === TAB_IDS.COMPONENT_TYPES_TAB_ID
                        });
                    });
                }

                // Reset tab contents.
                crossFrameEventService.publish(RESET_COMPONENT_MENU_EVENT);
            }
        }.bind(this);

        this._closeMenu = function () {
            if (this.actionItem) {
                this.actionItem.isOpen = false;
            }
        }.bind(this);

        this.$onChanges = function () {
            this.model.isOpen = this.actionItem.isOpen;
            if (this.actionItem.isOpen) {
                crossFrameEventService.publish(DRAG_AND_DROP_CROSS_ORIGIN_BEFORE_TIME.START);
            } else if (!this.actionItem.isOpen && !this.isDragging) {
                crossFrameEventService.publish(DRAG_AND_DROP_CROSS_ORIGIN_BEFORE_TIME.END);
            }
        };
    }])
    .component('componentMenu', {
        templateUrl: 'componentMenuTemplate.html',
        controller: 'componentMenuController',
        bindings: {
            actionItem: '<'
        }
    });

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
angular
    .module('componentItemModule', ['cmsSmarteditServicesModule', 'translationServiceModule'])
    .controller('componentItemController', ["assetsService", "componentSharedService", "$translate", function (
        assetsService,
        componentSharedService,
        $translate
    ) {
        this.$onInit = function () {
            componentSharedService.isComponentShared(this.componentInfo).then(
                function (isSharedComponent) {
                    this.isSharedComponent = isSharedComponent;
                }.bind(this)
            );
        };

        this.getTemplateInfoForNonCloneableComponent = function () {
            const message = $translate.instant('se.cms.component.non.cloneable.tooltip', {
                componentName: this.componentInfo.name
            });
            return "<div class='se-popover--inner-content'>" + message + '</div>';
        };

        this.$onChanges = function (changesObj) {
            if (changesObj.cloneOnDrop) {
                this.componentDisabled = this.cloneOnDrop && !this.componentInfo.cloneable;
            }
        };
    }])
    .component('componentItem', {
        templateUrl: 'componentItemTemplate.html',
        controller: 'componentItemController',
        bindings: {
            componentInfo: '<',
            cloneOnDrop: '<'
        }
    });

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
angular
    .module('componentSearchModule', ['smarteditServicesModule'])
    .controller('componentSearchController', ["systemEventService", function (systemEventService) {
        // Constants
        const RESET_COMPONENT_MENU_EVENT = 'RESET_COMPONENT_MENU_EVENT';

        // Methods
        this.$onInit = function () {
            this._oldValue = '';
            this._resetSearchBox();

            this.removeResetEventListener = systemEventService.subscribe(
                RESET_COMPONENT_MENU_EVENT,
                this._resetSearchBox
            );
        };

        this.$onDestroy = function () {
            this.removeResetEventListener();
        };

        this.$doCheck = function () {
            if (this.searchTerm !== this._oldValue) {
                this._oldValue = this.searchTerm;
                this.showResetButton = this.searchTerm !== '';
                this.onChange({
                    searchTerm: this.searchTerm
                });
            }
        };

        // Helper Methods
        this._resetSearchBox = function () {
            this.searchTerm = '';
        }.bind(this);
    }])
    .component('componentSearch', {
        templateUrl: 'componentSearchTemplate.html',
        controller: 'componentSearchController',
        bindings: {
            onChange: '&',
            placeholder: '@'
        }
    });

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
angular
    .module('componentTypeModule', ['cmsSmarteditServicesModule'])
    .controller('componentTypeController', function () {
        this.$onInit = function () {};
    })
    .component('componentType', {
        templateUrl: 'componentTypeTemplate.html',
        controller: 'componentTypeController',
        bindings: {
            typeInfo: '<'
        }
    });

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
angular
    .module('componentTypesTabModule', [
        'smarteditServicesModule',
        'componentSearchModule',
        'componentTypeModule',
        'cmsSmarteditServicesModule'
    ])
    .controller('componentTypesTabController', ["$q", "$log", "componentService", "pageService", "catalogService", "languageService", "crossFrameEventService", function (
        $q,
        $log,
        componentService,
        pageService,
        catalogService,
        languageService,
        crossFrameEventService
    ) {
        // --------------------------------------------------------------------------------------------------
        // Constants
        // --------------------------------------------------------------------------------------------------
        this.pageInfo = null;
        this.uriContext = null;
        const SWITCH_LANGUAGE_EVENT = 'SWITCH_LANGUAGE_EVENT';

        // --------------------------------------------------------------------------------------------------
        // Event Handlers
        // --------------------------------------------------------------------------------------------------
        this.onSearchTermChanged = function (searchTerm) {
            this.searchTerm = searchTerm;
        }.bind(this);

        this.$onInit = function () {
            this.unRegisterEventService = crossFrameEventService.subscribe(
                SWITCH_LANGUAGE_EVENT,
                function () {
                    // for trigger search when language changed.
                    this.searchTerm = this.searchTerm !== undefined ? undefined : '';
                }.bind(this)
            );
        };

        this.loadPageContext = function () {
            if (this.pageInfo) {
                return $q.when();
            }

            return $q
                .all([
                    pageService.getCurrentPageInfo(),
                    $q.when(catalogService.retrieveUriContext())
                ])
                .then(
                    function (dataRetrieved) {
                        this.pageInfo = dataRetrieved[0];
                        this.uriContext = dataRetrieved[1];
                    }.bind(this)
                );
        };

        this.loadComponentTypes = function (mask, pageSize, currentPage) {
            return $q
                .all([languageService.getResolveLocale(), this.loadPageContext()])
                .then(
                    function (dataReceived) {
                        const payload = {
                            pageId: this.pageInfo.uid,
                            catalogId: this.uriContext.CURRENT_CONTEXT_CATALOG,
                            catalogVersion: this.uriContext.CURRENT_CONTEXT_CATALOG_VERSION,
                            mask,
                            langIsoCode: dataReceived[0],
                            pageSize,
                            currentPage
                        };

                        return componentService.getSupportedComponentTypesForCurrentPage(payload);
                    }.bind(this)
                )
                .then(
                    function (pageLoaded) {
                        return pageLoaded;
                    }.bind(this)
                )
                .catch(function (errData) {
                    $log.error(
                        'ComponentMenuController.$onInit() - error loading types. ' + errData
                    );
                });
        }.bind(this);

        this.$onDestroy = function () {
            this.unRegisterEventService();
        };
    }])
    .component('componentTypesTab', {
        templateUrl: 'componentTypesTabTemplate.html',
        controller: 'componentTypesTabController',
        bindings: {
            isTabActive: '<',
            isMenuOpen: '<'
        }
    });

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
angular
    .module('componentsTabModule', ['componentItemModule'])

    .constant('ENABLE_CLONE_ON_DROP', 'enableCloneComponentOnDrop')

    .controller('componentsTabController', ["$q", "lodash", "componentMenuService", "componentService", "sharedDataService", "ENABLE_CLONE_ON_DROP", function (
        $q,
        lodash,
        componentMenuService,
        componentService,
        sharedDataService,
        ENABLE_CLONE_ON_DROP
    ) {
        // --------------------------------------------------------------------------------------------------
        // Constants
        // --------------------------------------------------------------------------------------------------

        // --------------------------------------------------------------------------------------------------
        // Lifecycle Methods
        // --------------------------------------------------------------------------------------------------
        this.$onInit = function () {
            // Catalog Version Selector
            this.catalogVersions = null;
            this.selectedCatalogVersionId = null;
            this.selectedCatalogVersion = null;
            this.catalogVersionTemplate = 'catalogVersionTemplate.html';

            // clone on drop
            sharedDataService.get(ENABLE_CLONE_ON_DROP).then(
                function (cloneOnDrop) {
                    this.cloneOnDrop = cloneOnDrop || false;
                }.bind(this)
            );

            if (this.hasMultipleContentCatalogs) {
                this.catalogVersionsFetchStrategy = {
                    fetchAll: this.fetchCatalogVersions
                };
            } else {
                this.fetchCatalogVersions().then(
                    function () {
                        this.onCatalogVersionChange();
                    }.bind(this)
                );
            }

            // Infinite Scrolling
            this.resetComponentsList = function () {};
            this.searchTerm = '';
        };

        // --------------------------------------------------------------------------------------------------
        // Event Handlers
        // --------------------------------------------------------------------------------------------------
        this.onCatalogVersionChange = function () {
            if (this.selectedCatalogVersionId) {
                this.selectedCatalogVersion = this.catalogVersions.filter(
                    function (catalogVersion) {
                        return catalogVersion.id === this.selectedCatalogVersionId;
                    }.bind(this)
                )[0];

                componentMenuService.persistCatalogVersion(this.selectedCatalogVersionId);
                this.resetComponentsList();
            }
        }.bind(this);

        this.onSearchTermChanged = function (searchTerm) {
            this.searchTerm = searchTerm;
        }.bind(this);

        // --------------------------------------------------------------------------------------------------
        // Helper Methods
        // --------------------------------------------------------------------------------------------------
        this.fetchCatalogVersions = function () {
            return componentMenuService.getValidContentCatalogVersions().then(
                function (catalogVersions) {
                    this.catalogVersions = catalogVersions;

                    return componentMenuService.getInitialCatalogVersion(this.catalogVersions).then(
                        function (selectedCatalogVersion) {
                            this.selectedCatalogVersion = selectedCatalogVersion;
                            this.selectedCatalogVersionId = this.selectedCatalogVersion
                                ? this.selectedCatalogVersion.id
                                : undefined;

                            return catalogVersions;
                        }.bind(this)
                    );
                }.bind(this)
            );
        }.bind(this);

        this.loadComponentItems = function (mask, pageSize, currentPage) {
            if (!this.selectedCatalogVersion) {
                return $q.when({
                    results: []
                });
            }

            const payload = {
                catalogId: this.selectedCatalogVersion.catalogId,
                catalogVersion: this.selectedCatalogVersion.catalogVersionId,
                mask,
                pageSize,
                page: currentPage
            };

            return componentService.loadPagedComponentItemsByCatalogVersion(payload).then(
                function (_loadedPage) {
                    const loadedPage = lodash.cloneDeep(_loadedPage);
                    loadedPage.results = loadedPage.response;
                    delete loadedPage.response;
                    return loadedPage;
                }.bind(this)
            );
        }.bind(this);

        this.onComponentCloneOnDropChange = function () {
            sharedDataService.set(ENABLE_CLONE_ON_DROP, this.cloneOnDrop);
        };
    }])
    .component('componentsTab', {
        templateUrl: 'componentsTabTemplate.html',
        controller: 'componentsTabController',
        bindings: {
            hasMultipleContentCatalogs: '<',
            isActive: '<'
        }
    });

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
angular
    .module('genericTabModule', [
        'genericEditorModule',
        'resourceLocationsModule',
        'componentEditorModule',
        'smarteditServicesModule'
    ])
    .controller('genericTabCtrl', ["TYPES_RESOURCE_URI", "systemEventService", function (TYPES_RESOURCE_URI, systemEventService) {
        const CMS_LINK_TO_RELOAD_STRUCTURE_EVENT_ID = 'cms-link-to-reload-structure'; // TODO: replace with import
        const STRUCTURE_API_BASE_URL =
            TYPES_RESOURCE_URI + '?code=:smarteditComponentType&mode=:structureApiMode';

        this.$onInit = function () {
            this.structureApi = this.getStructureApiByMode('DEFAULT');
            this.changeStructureEventListener = systemEventService.subscribe(
                CMS_LINK_TO_RELOAD_STRUCTURE_EVENT_ID,
                this.onChangeStructureEvent.bind(this)
            );
        };

        this.onChangeStructureEvent = function (eventId, payload) {
            if (payload.structureApiMode) {
                this.tabStructure = null;
                this.structureApi = this.getStructureApiByMode(payload.structureApiMode);
            } else if (payload.structure) {
                this.structureApi = null;
                this.tabStructure = payload.structure.attributes;
            }
            this.content = payload.content;
        };

        this.$onDestroy = function () {
            this.changeStructureEventListener();
        };

        this.getStructureApiByMode = function (structureApiMode) {
            return STRUCTURE_API_BASE_URL.replace(/:structureApiMode/gi, structureApiMode);
        };
    }])
    .component('genericTab', {
        transclude: false,
        templateUrl: 'componentEditorWrapperTemplate.html',
        controller: 'genericTabCtrl',
        bindings: {
            saveTab: '=',
            resetTab: '=',
            cancelTab: '=',
            isDirtyTab: '=',
            componentId: '<',
            componentType: '<',
            tabId: '<',
            componentInfo: '<',
            content: '<'
        }
    });

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
/**
 * @ngdoc overview
 * @name catalogAwareSelectorModule
 * @description
 * # The catalogAwareSelectorModule
 *
 * The catalogAwareSelectorModule contains a directive that allows users to select items that depend on a catalog.
 *
 */
angular
    .module('catalogAwareSelectorModule', ['yEditableListModule'])
    .controller('CatalogAwareSelectorController', ["$q", "$log", "$translate", "lodash", function ($q, $log, $translate, lodash) {
        // Constants
        const DEFAULT_ITEM_TYPE_KEY = 'se.cms.catalogaware.catalogitemtype.default';

        // Variables
        this.model = [];
        this.currentOptions = {};
        this.itemsList = [];

        // Initialization
        this.$onInit = function () {
            if (this.editable === undefined) {
                this.editable = true;
            }

            // First, connect with the outside model.
            this.exposedModel.$viewChangeListeners.push(this._syncFromExternalModel);
            this.exposedModel.$render = this._syncFromExternalModel;

            this.catalogItemTypeKey = this.catalogItemTypeKey
                ? this.catalogItemTypeKey
                : DEFAULT_ITEM_TYPE_KEY;
            $translate(this.catalogItemTypeKey).then(
                function (itemType) {
                    this.catalogItemType = itemType;
                }.bind(this)
            );
        };

        // Basic Functions
        /**
         * This method is used to sync the internal model with the changes happening outside. It is mostly used when
         * the component first opens and we need to synchronize the internal model with the items that have already
         * been selected.
         */
        this._syncFromExternalModel = function () {
            if (this.model.length === 0) {
                this.model.push.apply(this.model, this.exposedModel.$modelValue);
                this._syncFromModelToItemsList();
            }
        }.bind(this);

        /**
         * This method is used to synchronize changes that happen in the yEditableList with the internal model.
         */
        this._syncFromItemsListToModel = function () {
            this.model.length = 0;
            this.itemsList.map(
                function (item) {
                    this.model.push(item.id);
                }.bind(this)
            );
        };

        /**
         * This method is used to synchronize changes that happen in the panel with the internal model.
         */
        this._syncFromModelToItemsList = function () {
            const itemsFound = {};
            const itemsMissing = [];

            // Find which items have already been retrieved and which ones are missing.
            this.model.map(
                function (itemKey) {
                    const match = lodash.find(this.itemsList, function (item) {
                        return item.id === itemKey;
                    });

                    if (match) {
                        itemsFound[itemKey] = match;
                    } else {
                        itemsMissing.push(itemKey);
                    }
                }.bind(this)
            );

            // Get the missing items
            this._fetchItems(itemsMissing, itemsFound).then(
                function () {
                    // Update the itemsList with the new items. They are added in the order of the model.
                    this.itemsList.length = 0;
                    this.model.map(
                        function (itemKey) {
                            const item = itemsFound[itemKey];
                            if (!item) {
                                $log.warn(
                                    '[seCatalogAwareSelector] - Cannot find item with key ',
                                    itemKey
                                );
                            } else {
                                this.itemsList.push(item);
                            }
                        }.bind(this)
                    );

                    if (this._refreshListWidget && lodash.isFunction(this._refreshListWidget)) {
                        this._refreshListWidget();
                    }
                }.bind(this)
            );
        };

        this._fetchItems = function (itemsToRetrieve, itemsFound) {
            let result = $q.when(null);

            if (itemsToRetrieve.length > 0) {
                if (this.itemsFetchStrategy.fetchAll) {
                    result = this.itemsFetchStrategy.fetchAll().then(function (itemsList) {
                        itemsToRetrieve.map(
                            function (itemKey) {
                                itemsFound[itemKey] = itemsList.find(function (itemInList) {
                                    return itemInList.id === itemKey;
                                });
                            }.bind(this)
                        );
                    });
                } else if (this.itemsFetchStrategy.fetchEntities) {
                    result = this.itemsFetchStrategy.fetchEntities(this.model).then(
                        function (itemsList) {
                            itemsList.map(function (itemInList) {
                                itemsFound[itemInList.id] = itemInList;
                            });
                        }.bind(this)
                    );
                } else if (this.itemsFetchStrategy.fetchEntity) {
                    const promises = [];
                    itemsToRetrieve.map(
                        function (itemKey) {
                            promises.push(this.itemsFetchStrategy.fetchEntity(itemKey));
                        }.bind(this)
                    );

                    return $q.all(promises).then(function (itemsList) {
                        itemsList.map(function (itemInList) {
                            itemsFound[itemInList.id] = itemInList;
                        });
                    });
                } else {
                    throw Error(
                        '[seCatalogAwareSelector] Invalid items fetch strategy. Cannot retrieve information.'
                    );
                }
            }

            return result;
        };

        // Helper Functions
        this.listIsEmpty = function () {
            return this.model.length === 0;
        };

        this.openEditingPanel = function () {
            this.showPanel();
        };

        this.setShowPanel = function (showPanel) {
            this.showPanel = showPanel;
        };

        this.onPanelChange = function (selectedItems) {
            this._syncFromModelToItemsList();

            // Sync with the outside
            this.exposedModel.$setViewValue(this.model);
        }.bind(this);

        this.onListChange = function () {
            this._syncFromItemsListToModel();

            // Sync with the outside
            this.exposedModel.$setViewValue(this.model);
        }.bind(this);
    }])

    /**
     * @ngdoc directive
     * @name catalogAwareSelectorModule.directive:seCatalogAwareSelector
     * @scope
     * @restrict E
     * @element ANY
     *
     * @description
     * A component that allows users to select items from one or more catalogs. This component is catalog aware; the list
     * of items displayed is dependent on the catalog and catalog version selected by the user within the component.
     *
     * @param {@String} id Identifier used to track the component in the page.
     * @param {<Function} getCatalogs Function called with no arguments by the component to retrieve the list of catalogs
     * where the items to select reside.
     * @param {<Object} itemsFetchStrategy Object that defines the strategies necessary to retrieve the items from a
     * particular catalog. There are three possible scenarios:
     * - Provide a fetchAll function in the itemsFetchStrategy. This function must retrieve all items from the catalog
     * at once. No pagination is performed.
     * - Provide fetchPage + fetchEntity functions in the itemsFetchStrategy. Information about items already selected
     * are retrieved one by one with fetchEntity. Items to choose from, on the other hand, are retrieved in a page fashion.
     * - Provide fetchPage + fetchEntities Information about items already selected are retrieved in one call with
     * fetchEntities. Items to choose from, on the other hand, are retrieved in a page fashion.
     * @param {Function} catalogItemsFetchStrategy.fetchAll (Optional)
     * @param {Function} catalogItemsFetchStrategy.fetchPage (Optional)
     * @param {Function} catalogItemsFetchStrategy.fetchEntity (Optional)
     * @param {Function} catalogItemsFetchStrategy.fetchEntities (Optional)
     * @param {<String=} itemTemplate The URL of the template used to display the items in the selector. If none is chosen
     * a default one is used (it shows the property name of each item).
     * @param {@String=} catalogItemTypeKey This property is a localized key. It is used to display the type of item being
     * selected in the component. If no key is provided, the type defaults to item.
     * @param {<Boolean=} editable This property specifies whether the selector can be edited or not. If this flag is false,
     * then the selector is treated as read-only; the selection cannot be modified in any way.
     * @param {<maxNumItems=} maxNumItems The maximum number of items that can be selected in the control.
     */
    .component('seCatalogAwareSelector', {
        templateUrl: 'catalogAwareSelectorTemplate.html',
        controller: 'CatalogAwareSelectorController',
        controllerAs: 'ctrl',
        require: {
            exposedModel: 'ngModel'
        },
        bindings: {
            id: '@',
            getCatalogs: '<',
            itemsFetchStrategy: '<',
            itemComponent: '<?',
            nodeComponent: '<?',
            catalogItemTypeKey: '@?',
            editable: '<?',
            maxNumItems: '<?'
        }
    });

(function(){
      var angular = angular || window.angular;
      var SE_NG_TEMPLATE_MODULE = null;
      
      try {
        SE_NG_TEMPLATE_MODULE = angular.module('cmssmarteditContainerTemplates');
      } catch (err) {}
      SE_NG_TEMPLATE_MODULE = SE_NG_TEMPLATE_MODULE || angular.module('cmssmarteditContainerTemplates', []);
      SE_NG_TEMPLATE_MODULE.run(['$templateCache', function($templateCache) {
         
    $templateCache.put(
        "ItemManagerComponent.html", 
        "<div><se-generic-editor [id]=\"editorId\" [smarteditComponentId]=\"itemId\" [smarteditComponentType]=\"componentType\" [structureApi]=\"structureApi\" [content]=\"item\" [contentApi]=\"contentApi\" [(isDirty)]=\"isDirtyInternal\" [(submit)]=\"submit\" [uriContext]=\"uriContext\" [reset]=\"reset\"></se-generic-editor></div>"
    );
     
    $templateCache.put(
        "NavigationManagementPageComponent.html", 
        "<div class=\"se-navigation-management-page-list-template\"><div class=\"se-toolbar-group\"><se-toolbar cssClass=\"se-toolbar--shell\" imageRoot=\"imageRoot\" toolbarName=\"smartEditHeaderToolbar\"></se-toolbar><se-toolbar cssClass=\"se-toolbar--shell se-toolbar--shortcut\" imageRoot=\"imageRoot\" toolbarName=\"smartEditNavigationToolbar\"></se-toolbar></div><div class=\"se-navigation-editor-wrapper\" *ngIf=\"readOnly !== undefined\"><div class=\"se-navigation-editor-header\"><h1 class=\"se-navigation-editor-header__title\" translate=\"se.cms.navigationmanagement.title\"></h1><h4 class=\"se-navigation-editor-header__sub-title\">{{ catalogName | seL10n | async }} - {{ catalogVersion }}</h4></div><se-navigation-editor-tree [uriContext]=\"uriContext\" [readOnly]=\"readOnly\"></se-navigation-editor-tree></div></div>"
    );
     
    $templateCache.put(
        "revertBackSlotConfirmationTemplate.html", 
        "<se-message [type]=\"'info'\" [message-id]=\"'revertBackSlotYMessage'\"><ng-container se-message-description><translate>se.cms.slot.revert.sync.ymessage</translate></ng-container></se-message><div data-translate=\"se.cms.slot.revert.description\" class=\"fd-has-margin-top-small\"></div>"
    );
     
    $templateCache.put(
        "pageInWorkflowNotificationTemplate.html", 
        "<div><span data-translate=\"se.cms.workflow.page.in.workflow\"></span></div>"
    );
     
    $templateCache.put(
        "cmsItemDropdownTemplate.html", 
        "<div class=\"cms-nested-component-template\"><div data-recompile-dom=\"cmsItemDropdownCtrl._recompileDom\" class=\"cms-nested-component-select\"><se-dropdown data-field=\"cmsItemDropdownCtrl.field\" data-qualifier=\"cmsItemDropdownCtrl.qualifier\" data-model=\"cmsItemDropdownCtrl.model\" data-id=\"cmsItemDropdownCtrl.id\" data-item-template-url=\"cmsItemDropdownCtrl.itemTemplateUrl\" data-get-api=\"cmsItemDropdownCtrl.configureSeDropdown($api)\" data-show-remove-button=\"true\"></se-dropdown></div></div>"
    );
     
    $templateCache.put(
        "cmsItemDropdownWrapperTemplate.html", 
        "<cms-item-dropdown data-field=\"field\" data-qualifier=\"qualifier\" data-model=\"model\" data-editor-stack-id=\"editorStackId\" data-id=\"id\"></cms-item-dropdown>"
    );
     
    $templateCache.put(
        "componentMenuTemplate.html", 
        "<div class=\"se-component-menu\" data-recompile-dom=\"$ctrl._recompileDom\" data-ng-class=\"{ 'se-component-menu__localized': $ctrl.hasMultipleContentCatalogs }\"><div data-translate=\"se.cms.componentmenu.dropdown.header\" class=\"se-component-menu__title\"></div><div class=\"se-component-menu__tip\" data-translate=\"se.cms.componentmenu.label.draganddrop\"></div><se-tabs class=\"se-component-menu__tabs\" [tabs-list]=\"$ctrl.tabsList\" [model]=\"$ctrl.model\" [num-tabs-displayed]=\"2\"></se-tabs></div>"
    );
     
    $templateCache.put(
        "componentMenuWrapperTemplate.html", 
        "<component-menu data-action-item=\"item\"></component-menu>"
    );
     
    $templateCache.put(
        "CmsLinkToSelectComponent.html", 
        "<se-generic-editor-dropdown [id]=\"id\" [field]=\"field\" [qualifier]=\"qualifier\" [model]=\"optionModel\"></se-generic-editor-dropdown>"
    );
     
    $templateCache.put(
        "RestrictionsListComponent.html", 
        "<div class=\"restrictions-list\"><div class=\"restrictions-list__info\"><label translate=\"se.cms.restrictions.criteria\"></label> <span>&nbsp;{{ pageInfo.restrictionsCriteria }}</span></div><div class=\"restrictions-list__items\" *ngFor=\"let restriction of restrictions\"><div class=\"restrictions-list__item\"><div class=\"restrictions-list__item-name\">{{ restriction.name }}</div><div class=\"restrictions-list__item-type\">{{ restriction.type | seL10n | async }}</div><div class=\"restrictions-list__item-description\">{{ restriction.description }}</div></div></div></div>"
    );
     
    $templateCache.put(
        "SlotSharedCloneActionFieldComponent.html", 
        "<div class=\"fd-form__set\"><div class=\"fd-form__item fd-form__item--check\"><label for=\"components-in-slot-options\" class=\"se-control-label\" [translate]=\"'se.cms.slot.shared.replace.editor.componentsinslot'\"></label><div id=\"components-in-slot-options\"><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"componentsInSlot\" id=\"clone-all\" [(ngModel)]=\"page.cloneAction\" [value]=\"cloneAction.clone\"/> <label for=\"clone-all\" [translate]=\"'se.cms.slot.shared.replace.editor.componentsinslot.cloneall'\"></label></div><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"componentsInSlot\" id=\"remove-all\" [(ngModel)]=\"page.cloneAction\" [value]=\"cloneAction.remove\"/> <label for=\"remove-all\" [translate]=\"'se.cms.slot.shared.replace.editor.componentsinslot.removeall'\"></label></div></div></div></div>"
    );
     
    $templateCache.put(
        "SlotSharedSlotTypeFieldComponent.html", 
        "<div class=\"fd-form__set\"><div class=\"fd-form__item fd-form__item--check\"><label for=\"slot-replacement-type-options\" class=\"se-control-label\" [translate]=\"'se.cms.slot.shared.replace.editor.slotreplacementtype'\"></label><div id=\"slot-replacement-type-options\"><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"slotReplacementType\" id=\"slot-type-custom\" [(ngModel)]=\"page.isSlotCustom\" [value]=\"true\"/> <label for=\"slot-type-custom\" [translate]=\"'se.cms.slot.shared.replace.editor.slotreplacementtype.custom'\"></label></div><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"slotReplacementType\" id=\"slot-type-local\" [(ngModel)]=\"page.isSlotCustom\" [value]=\"false\"/> <label for=\"slot-type-local\" [translate]=\"'se.cms.slot.shared.replace.editor.slotreplacementtype.local'\"></label></div></div></div></div>"
    );
     
    $templateCache.put(
        "WorkflowCreateVersionFieldComponent.html", 
        "<div class=\"fd-form__set\"><div class=\"fd-form__item fd-form__item--check\"><label class=\"fd-form__label\"><input type=\"checkbox\" class=\"fd-form__control\" name=\"createVersion\" [(ngModel)]=\"model.createVersion\"/> {{ 'se.cms.workflow.editor.create.version' | translate }}</label></div><div class=\"fd-form__item\" *ngIf=\"model.createVersion\"><label class=\"fd-form__label version-label__title\" for=\"versionLabel\" translate=\"se.cms.workflow.editor.create.version.label\"></label> <input type=\"text\" name=\"versionLabel\" class=\"fd-form__control\" [class.has-error]=\"field.hasErrors\" [(ngModel)]=\"model.versionLabel\"/></div></div>"
    );
     
    $templateCache.put(
        "InfoPageNameComponent.html", 
        "<div class=\"se-page-info__name\"><se-homepage-icon *ngIf=\"field.qualifier === 'name'\" [cmsPage]=\"cmsPage\" [uriContext]=\"uriContext\"></se-homepage-icon><div id=\"{{ field.qualifier }}-homepage\" class=\"se-page-info__name-value fd-form-control\" [title]=\"field.qualifier\">{{ model[qualifier] }}</div></div>"
    );
     
    $templateCache.put(
        "LinkToggleComponent.html", 
        "<div class=\"se-link-toggle\"><div class=\"se-link-toggle__row\"><div class=\"se-form-control-row se-form-control-row--action\"><label class=\"se-control-label se-link-toggle__label\" for=\"external-link\"><input class=\"fd-form__control se-link-toggle__input\" id=\"external-link\" name=\"linktoggle\" type=\"radio\" [(ngModel)]=\"model.linkToggle.external\" (ngModelChange)=\"clearUrlLink()\" [value]=\"true\"/> {{ 'se.editor.linkto.external.label' | translate}}</label></div><div class=\"se-form-control-row se-form-control-row--action\"><label class=\"se-control-label se-link-toggle__label\" for=\"internal-link\"><input class=\"fd-form__control se-link-toggle__input\" id=\"internal-link\" name=\"linktoggle\" type=\"radio\" [(ngModel)]=\"model.linkToggle.external\" (ngModelChange)=\"clearUrlLink()\" [value]=\"false\"/> {{ 'se.editor.linkto.internal.label' | translate}}</label></div></div><input class=\"fd-form-control\" id=\"urlLink\" name=\"urlLink\" type=\"text\" [(ngModel)]=\"model.linkToggle.urlLink\" [ngClass]=\"{ 'has-error': field.hasErrors }\"/></div>"
    );
     
    $templateCache.put(
        "PageTypeEditorComponent.html", 
        "<div class=\"se-edit-page-info__basic-tab\"><div class=\"se-edit-page-info__page-type\"><label class=\"se-control-label\" translate=\"se.cms.pageinfo.page.type\"></label><div class=\"form-readonly-text form-readonly-text__tight\">{{ model.typeCode }}</div></div><div class=\"se-edit-page-info__page-template\"><label class=\"se-control-label\" translate=\"se.cms.pageinfo.page.template\"></label><div class=\"form-readonly-text form-readonly-text__tight\">{{ model.template }}</div></div></div>"
    );
     
    $templateCache.put(
        "NavigationEditorTreeComponent.html", 
        "<div class=\"se-navigation-editor-tree__header\" *ngIf=\"!readOnly\"><button class=\"se-navigation-editor-tree__btn fd-button\" (click)=\"actions.addTopLevelNode()\"><span [translate]=\"'se.cms.navigationmanagement.add.top.level.node'\" class=\"se-navigation-editor-tree__btn--text\"></span></button></div><div class=\"se-navigation-editor-tree categoryTable\"><div class=\"tablehead clearfix hidden-xs se-navigation-editor-tree__head\"><div [translate]=\"'se.ytree.template.header.name'\" class=\"se-navigation-editor-tree__name col-xs-3\"></div><div [translate]=\"'se.ytree.template.header.title'\" class=\"se-navigation-editor-tree__title col-xs-3\"></div><div class=\"col-xs-1 pull-right\"></div><div [translate]=\"'se.ytree.template.header.entry'\" class=\"se-navigation-editor-tree__entry col-xs-5 pull-right\"></div></div><se-tree [nodeUri]=\"nodeURI\" [rootNodeUid]=\"rootNodeUid\" [nodeComponent]=\"nodeComponent\" [removeDefaultTemplate]=\"true\" [nodeActions]=\"actions\" [dragOptions]=\"dragOptions\"></se-tree></div>"
    );
     
    $templateCache.put(
        "NavigationNodeComponent.html", 
        "<div class=\"pull-right dropdown tree-node se-tree-node__actions col-sm-1\" [hidden]=\"isReadOnly\"><se-dropdown-menu [dropdownItems]=\"dropdownItems\" [selectedItem]=\"node\" class=\"pull-right se-tree-node__actions--more-menu\"></se-dropdown-menu></div><div class=\"se-tree-node__name col-xs-3\" [title]=\"node.name | seL10n | async\"><span>{{ node.name | seL10n | async }}</span></div><div class=\"pull-right tree-node se-tree-node__entry col-xs-5\"><se-tooltip class=\"se-dropdown-item__delete-page-popover\" [triggers]=\"['mouseenter', 'mouseleave']\" [isChevronVisible]=\"true\" [appendTo]=\"'body'\"><span se-tooltip-trigger class=\"se-tree-node__popover\"><span>{{ entryString }} </span></span><span se-tooltip-body>{{ entryString }}</span></se-tooltip></div><div class=\"se-tree-node__title col-xs-2\"><span [hidden]=\"!node.title\">{{ node.title | seL10n | async }}</span></div>"
    );
     
    $templateCache.put(
        "SingleActiveCatalogAwareItemSelectorComponent.html", 
        "<div *ngIf=\"propertyType\"><div id=\"product-catalog\"><label class=\"se-control-label\" [ngClass]=\"{ 'required': field.required }\" *ngIf=\"catalogs.length === 1\">{{ catalogName | seL10n | async }}</label><se-generic-editor-dropdown id=\"se-catalog-selector-dropdown\" *ngIf=\"catalogs.length > 1\" [field]=\"productCatalogField\" [qualifier]=\"'productCatalog'\" [model]=\"model\"></se-generic-editor-dropdown></div><div><label class=\"se-control-label\" [translate]=\"mainDropDownI18nKey\"></label><se-generic-editor-dropdown id=\"se-items-selector-dropdown\" [field]=\"field\" [qualifier]=\"qualifier\" [model]=\"model\" [itemComponent]=\"itemComponent\" [(reset)]=\"reset\"></se-generic-editor-dropdown></div></div><div class=\"product-catalog-item-type-missing\" *ngIf=\"!propertyType\" translate=\"se.cms.catalogawareitem.itemtype.notsupported\"></div>"
    );
     
    $templateCache.put(
        "DeletePageToolbarItemComponent.html", 
        "<div class=\"toolbar-action\" *ngIf=\"isReady\" [attr.data-item-key]=\"toolbarItem.key\"><button type=\"button\" class=\"btn toolbar-action--button\" [disabled]=\"isDeletePageDisabled\" [ngClass]=\"{ 'toolbar-action__disabled' : isDeletePageDisabled }\" (click)=\"deletePage()\"><span class=\"icon-delete se-toolbar-menu-ddlb--button__icon\"></span><div class=\"toolbar-action-button__txt\" translate=\"se.cms.actionitem.page.trash\"></div></button><se-tooltip *ngIf=\"isDeletePageDisabled\" [appendTo]=\"'body'\" [isChevronVisible]=\"true\" [placement]=\"'bottom'\" [triggers]=\"['mouseenter', 'mouseleave']\" [additionalClasses]=\"['se-tooltip--stretched']\"><div se-tooltip-body><span [translate]=\"tooltipMessage\"></span></div></se-tooltip></div>"
    );
     
    $templateCache.put(
        "HomepageIconComponent.html", 
        "<se-tooltip *ngIf=\"isVisible()\" [isChevronVisible]=\"true\" [triggers]=\"['mouseenter', 'mouseleave']\"><span se-tooltip-trigger class=\"sap-icon--home se-homepage-icon\" [ngClass]=\"getIconClass()\"></span> <span se-tooltip-body [translate]=\"getTooltipMessage()\"></span></se-tooltip>"
    );
     
    $templateCache.put(
        "PageInfoMenuComponent.html", 
        "<div class=\"toolbar-action\" data-item-key=\"se.cms.pageInfoMenu\"><fd-popover [(isOpen)]=\"toolbarItem.isOpen\" (isOpenChange)=\"onDropdownToggle($event)\" [closeOnOutsideClick]=\"true\"><fd-popover-control><button type=\"button\" class=\"btn toolbar-action--button\" [attr.aria-pressed]=\"toolbarItem.isOpen\"><span class=\"hyicon hyicon-pageinfo se-toolbar-menu-ddlb--button__icon\"></span><div class=\"se-toolbar-page-info-wrapper\"><span class=\"toolbar-action-button__txt\" [translate]=\"toolbarItem.name\"></span></div></button></fd-popover-control><fd-popover-body><div class=\"se-page-info__dropdown-menu toolbar-action--include\"><div class=\"se-page-info-menu\" *ngIf=\"toolbarItem.isOpen\"><se-prevent-vertical-overflow><div class=\"se-page-info-menu__header\"><span class=\"se-page-info-menu__header-title\" translate=\"se.cms.pageinfo.information.title\"></span><div *seHasOperationPermission=\"editPagePermission\"><button class=\"se-page-info__edit-btn fd-button--compact\" *ngIf=\"isReady\" translate=\"se.cms.contextmenu.title.edit\" (click)=\"onEditPageClick()\"></button></div></div><div *ngIf=\"isReady\" class=\"se-page-info-menu__body\"><se-generic-editor [smarteditComponentId]=\"pageInfo.uid\" [smarteditComponentType]=\"pageInfo.typeCode\" [structure]=\"pageStructure\" [content]=\"pageInfo\"></se-generic-editor></div></se-prevent-vertical-overflow></div></div></fd-popover-body></fd-popover></div>"
    );
     
    $templateCache.put(
        "PageListComponent.html", 
        "<div class=\"se-page-list\"><se-toolbar cssClass=\"se-toolbar--shell\" imageRoot=\"imageRoot\" toolbarName=\"smartEditHeaderToolbar\"></se-toolbar><se-toolbar cssClass=\"se-toolbar--shell se-toolbar--shortcut\" imageRoot=\"imageRoot\" toolbarName=\"smartEditPagesToolbar\"></se-toolbar><div *ngIf=\"isReady\"><div class=\"se-page-list__header\"><span class=\"se-page-list__catalog-name\" translate=\"se.cms.pagelist.title\"></span><p class=\"se-page-list__sub-title\">{{ catalogName | seL10n | async }} - {{ catalogVersion }}</p></div><div class=\"se-page-list__body\"><div class=\"se-page-list__table-header\"><span class=\"se-paged-list__page-count-wrapper\"><span class=\"span-page-list__page-count-text\" translate=\"se.pagelist.countsearchresult\"></span> <span>&nbsp;</span> <span class=\"se-page-list__page-count\">({{ count }})</span></span><div class=\"se-page-list__table-header--right\"><div class=\"fd-form__group se-page-list__search\"><div class=\"se-input-group\"><input type=\"search\" class=\"se-input-group__input-area ySEPage-list-search-input\" maxlength=\"255\" name=\"query\" [ngModel]=\"query\" (ngModelChange)=\"onQueryChange($event)\" [placeholder]=\"'se.cms.pagelist.searchplaceholder' | translate\"/> <span class=\"sap-icon--search se-input-group__addon\"></span><div *ngIf=\"query\" aria-label=\"clear\" class=\"se-input-group__addon se-input-group__clear-btn\" (click)=\"reset()\"><span class=\"sap-icon--decline\"></span></div></div></div><button class=\"fd-button se-page-list__add\" (click)=\"openAddPageWizard()\" translate=\"se.cms.addpagewizard.addpage\"></button></div></div><div class=\"se-page-list__table-body\"><se-dynamic-paged-list [config]=\"pageListConfig\" [mask]=\"query\" (getApi)=\"getApi($event);\" (onItemsUpdate)=\"onPageItemsUpdate($event.pagination)\"></se-dynamic-paged-list></div></div></div></div>"
    );
     
    $templateCache.put(
        "PageListLinkComponent.html", 
        "<div><a class=\"page-list-link-item__link\" [href]=\"getLink()\" translate=\"se.cms.cataloginfo.pagelist\"></a></div>"
    );
     
    $templateCache.put(
        "PagesLinkComponent.html", 
        "<div class=\"se-page-list__page-link--left\" (click)=\"backToPagelist()\"><span class=\"se-page-list__page-link-icon icon-navigation-left-arrow\"></span> <a class=\"se-page-list__page-link-anchor\">{{ 'se.cms.back.to.pagelist' | translate }}</a></div>"
    );
     
    $templateCache.put(
        "RestrictionsModalComponent.html", 
        "<div class=\"se-restrictions-list fd-menu__list fd-menu__list--separated\"><div class=\"se-restriction__item fd-menu__item\" *ngFor=\"let restriction of restrictions\"><div class=\"se-restrictions-list__item-content\"><div class=\"se-restriction__item-name\">{{ restriction.name }}</div><div class=\"se-restriction__item-type-and-id\">{{ restriction.type | seL10n | async }}</div><div class=\"se-restriction__item-description\">{{ restriction.description }}</div></div></div></div>"
    );
     
    $templateCache.put(
        "RestrictionsViewerComponent.html", 
        "<div *ngIf=\"restrictions?.length > 0; else noRestrictions\"><a href=\"\" class=\"show-restrictions-btn\" (click)=\"showRestrictions($event)\">{{restrictions.length}}</a></div><ng-template #noRestrictions><div>-</div></ng-template>"
    );
     
    $templateCache.put(
        "TrashLinkComponent.html", 
        "<div *ngIf=\"isNonActiveCatalog\" (click)=\"goToTrash()\" class=\"se-page-list__page-link--right\"><a translate=\"se.cms.pagelist.trashcan.link.text\" [translateParams]=\"trashedPagesTranslationData\" class=\"se-page-list__page-link-anchor\"></a> <span class=\"se-page-list__page-link-icon sap-icon--navigation-right-arrow\"></span></div>"
    );
     
    $templateCache.put(
        "TrashedPageListComponent.html", 
        "<div class=\"se-page-list\"><se-toolbar cssClass=\"se-toolbar--shell\" imageRoot=\"imageRoot\" toolbarName=\"smartEditHeaderToolbar\"></se-toolbar><se-toolbar cssClass=\"se-toolbar--shell ySmartEditTrashPageToolbar\" imageRoot=\"imageRoot\" toolbarName=\"smartEditTrashPageToolbar\"></se-toolbar><div class=\"se-page-list__header\"><span class=\"se-page-list__catalog-name\" translate=\"se.cms.trashedpagelist.title\"></span><p class=\"se-page-list__sub-title\">{{ catalogName | seL10n | async }} - {{ catalogVersion }}</p></div><div class=\"se-page-list__body\"><div class=\"se-page-list__table-header\"><span class=\"se-paged-list__page-count-wrapper\"><span class=\"span-page-list__page-count-text\" translate=\"se.pagelist.countsearchresult\"></span> <span>&nbsp;</span> <span class=\"se-page-list__page-count\">({{ count }})</span></span><div class=\"fd-form__group se-page-list__search\"><div class=\"se-input-group\"><input type=\"search\" class=\"se-input-group__input-area ySEPage-list-search-input\" placeholder=\"{{ 'se.cms.pagelist.searchplaceholder' | translate }}\" [ngModel]=\"mask\" (ngModelChange)=\"onMaskChange($event)\" name=\"mask\"/> <span class=\"sap-icon--search se-input-group__addon\"></span><div *ngIf=\"mask\" aria-label=\"clear\" class=\"se-input-group__addon se-input-group__clear-btn\" (click)=\"reset()\"><span class=\"sap-icon--decline\"></span></div></div></div></div><div class=\"se-page-list__table-body\"><se-dynamic-paged-list class=\"se-trashed-pages\" [config]=\"trashedPageListConfig\" [mask]=\"mask\" (getApi)=\"getApi($event);\" (onItemsUpdate)=\"onPageItemsUpdate($event.pagination)\"></se-dynamic-paged-list></div></div></div>"
    );
     
    $templateCache.put(
        "catalogDetailsSyncTemplate.html", 
        "<se-synchronize-catalog [catalog]=\"$ctrl.catalog\" [catalog-version]=\"$ctrl.catalogVersion\" [active-catalog-version]=\"$ctrl.activeCatalogVersion\"></se-synchronize-catalog>"
    );
     
    $templateCache.put(
        "CmsDropdownItemComponent.html", 
        "<div class=\"cms-nested-component\" *ngIf=\"item\" [attr.data-component-id]=\"item.uid\"><span class=\"cms-nested-component__item\" *ngIf=\"isSelected\" (click)=\"onClick($event);\"><span class=\"sap-icon--card cms-nested-component__item-icon\"></span><div class=\"cms-nested-component__item-data\"><p class=\"cms-nested-component__item-name\" [title]=\"item.name\">{{ item.name }}</p><p class=\"cms-nested-component__item-type\" [title]=\"item.typeCode\">{{ item.typeCode }}</p></div></span><div class=\"cms-nested-component__result-item\" *ngIf=\"!isSelected\"><span class=\"cms-nested-component__result-name\" [title]=\"item.name\">{{ item.name }}</span> <span class=\"cms-nested-component__result-code\" [title]=\"item.typeCode\">{{ item.typeCode }}</span></div></div>"
    );
     
    $templateCache.put(
        "cmsItemSearchTemplate.html", 
        "<se-cms-dropdown-item [item]=\"item\" [qualifier]=\"ySelect.id\" [is-selected]=\"selected\"></se-cms-dropdown-item>"
    );
     
    $templateCache.put(
        "catalogVersionTemplate.html", 
        "<div class=\"se-component-menu__select-local\"><span class=\"hyicon hyicon-globe se-component-menu__select-globe\" data-ng-if=\"item.isCurrentCatalog == false\"></span> <span class=\"se-component-menu__select-text\">{{item.catalogName | l10n}} - {{item.catalogVersionId}}</span></div>"
    );
     
    $templateCache.put(
        "componentInfoPopoverTemplate.html", 
        "<div data-translate=\"se.cms.component.display.off.tooltip\"></div>"
    );
     
    $templateCache.put(
        "componentItemTemplate.html", 
        "<div class=\"se-component-item\" data-ng-class='{        \"se-component-item--disabled\": $ctrl.componentDisabled,        \"smartEditComponent\": !$ctrl.componentDisabled }' data-smartedit-component-id=\"{{$ctrl.componentInfo.uid}}\" data-smartedit-component-uuid=\"{{$ctrl.componentInfo.uuid}}\" data-smartedit-component-type=\"{{$ctrl.componentInfo.typeCode}}\"><div class=\"se-component-item--disabled-overlay\" data-ng-if=\"$ctrl.componentDisabled\" data-y-popover data-trigger=\"'hover'\" data-placement=\"'bottom'\" data-template=\"$ctrl.getTemplateInfoForNonCloneableComponent()\"></div><div class=\"se-component-item--image\"><span class=\"sap-icon--card\"></span><div data-ng-if=\"$ctrl.isSharedComponent\"><span class=\"se-component-item--image-shared--background\"></span> <span class=\"glyphicon glyphicon-link se-component-item--image-shared\"></span></div></div><div class=\"se-component-item--details-container\"><div class=\"se-component-item--details\" title=\"{{$ctrl.componentInfo.name}} - {{$ctrl.componentInfo.typeCode}}\"><div class=\"se-component-item--details-name\">{{$ctrl.componentInfo.name}}</div><div class=\"se-component-item--details-type\">{{$ctrl.componentInfo.typeCode}}</div></div><div data-ng-if=\"!$ctrl.componentInfo.visible\" class=\"se-component-item--visibility\" data-y-popover data-trigger=\"'hover'\" data-placement=\"'bottom'\" data-template-url=\"'componentInfoPopoverTemplate.html'\"><span class=\"hyicon hyicon-unpowered\"></span></div></div></div>"
    );
     
    $templateCache.put(
        "componentSearchTemplate.html", 
        "<div class=\"se-input-group se-component-menu__input-group\"><input type=\"text\" class=\"se-input-group__input-area\" name=\"search-term\" data-ng-model=\"$ctrl.searchTerm\" data-ng-model-options=\"{debounce: 500}\" placeholder=\"{{$ctrl.placeholder | translate}}\"/> <span class=\"sap-icon--search se-input-group__addon\"></span><div data-ng-show=\"$ctrl.showResetButton\" class=\"se-input-group__addon se-input-group__clear-btn\" data-ng-click=\"$ctrl._resetSearchBox()\"><span class=\"sap-icon--decline\"></span></div></div>"
    );
     
    $templateCache.put(
        "componentTypeTemplate.html", 
        "<div class=\"se-component-item smartEditComponent\" data-smartedit-component-type=\"{{$ctrl.typeInfo.code}}\"><div class=\"se-component-item--image\"><span class=\"sap-icon--card\"></span></div><div class=\"se-component-item--details-type\" title=\"{{$ctrl.typeInfo.i18nKey | translate}}\">{{$ctrl.typeInfo.name}}</div></div>"
    );
     
    $templateCache.put(
        "componentTypesTabTemplate.html", 
        "<div class=\"se-component-menu__types-header\"><component-search data-on-change=\"$ctrl.onSearchTermChanged(searchTerm)\" class=\"se-component-menu__type-search\" data-placeholder=\"se.cms.componentmenu.search.type.placeholder\"></component-search></div><div class=\"se-component-menu__result-container\"><se-infinite-scrolling class=\"se-component-menu__infinite-scroll\" data-ng-if=\"$ctrl.isMenuOpen || $ctrl.isTabActive\" drop-down-class=\"ySEComponents\" [page-size]=\"10\" [mask]=\"$ctrl.searchTerm\" [fetch-page]=\"$ctrl.loadComponentTypes\" [context]=\"$ctrl\"><div class=\"se-component-menu__result se-component-menu__result--types\"><div class=\"se-component-menu__item-wrap\" data-ng-repeat=\"componentType in $ctrl.items\"><component-type data-type-info=\"componentType\"></component-type></div></div></se-infinite-scrolling></div>"
    );
     
    $templateCache.put(
        "componentTypesTabWrapperTemplate.html", 
        "<component-types-tab is-tab-active=\"tab.active\" is-menu-open=\"model.isOpen\"></component-types-tab>"
    );
     
    $templateCache.put(
        "componentsTabTemplate.html", 
        "<div class=\"se-component-menu__tabs-header\"><div class=\"se-component-menu__tabs-header--upper\" data-ng-if=\"$ctrl.hasMultipleContentCatalogs == true\"><y-select class=\"se-component-menu__select\" data-id=\"uuid\" data-ng-model=\"$ctrl.selectedCatalogVersionId\" data-on-change=\"$ctrl.onCatalogVersionChange\" data-fetch-strategy=\"$ctrl.catalogVersionsFetchStrategy\" data-item-template=\"::$ctrl.catalogVersionTemplate\" data-search-enabled=\"false\"/></div><div class=\"se-component-menu__tabs-header--lower\"><component-search data-on-change=\"$ctrl.onSearchTermChanged(searchTerm)\" class=\"se-component-menu__tabs-search\" data-placeholder=\"se.cms.componentmenu.search.placeholder\"></component-search><fieldset class=\"fd-form__set\"><div class=\"fd-form__item fd-form__item--check se-component-menu__clone-on-drop\"><input type=\"checkbox\" class=\"fd-form__control se-component-menu__clone-check-box\" id=\"component-clone-checkbox\" name=\"clone-on-drop\" data-ng-model=\"$ctrl.cloneOnDrop\" data-ng-change=\"$ctrl.onComponentCloneOnDropChange()\"/> <label class=\"fd-form__label se-component-menu__clone-label\" for=\"component-clone-checkbox\" data-translate=\"se.cms.component.clone.on.drop.label\"></label></div></fieldset></div></div><div class=\"se-component-menu__result-container\" recompile-dom=\"$ctrl.resetComponentsList\"><se-infinite-scrolling data-ng-if=\"$ctrl.isActive\" class=\"se-component-menu__infinite-scroll\" data-ng-class=\"{'se-component-menu__infinite-scroll--short': $ctrl.hasMultipleContentCatalogs == true}\" drop-down-class=\"ySEComponents\" [page-size]=\"10\" [mask]=\"$ctrl.searchTerm\" [fetch-page]=\"$ctrl.loadComponentItems\" [context]=\"$ctrl\"><div class=\"se-component-menu__result\"><component-item class=\"se-component-menu__item-wrap\" data-component-info=\"item\" data-clone-on-drop=\"$ctrl.cloneOnDrop\" data-ng-repeat=\"item in $ctrl.items track by item.uid\"></component-item></div></se-infinite-scrolling></div>"
    );
     
    $templateCache.put(
        "componentsTabWrapperTemplate.html", 
        "<div><components-tab has-multiple-content-catalogs=\"model.componentsTab.hasMultipleContentCatalogs\" is-active=\"tab.active\"></components-tab></div>"
    );
     
    $templateCache.put(
        "basicTabTemplate.html", 
        "<basic-tab class=\"sm-tab-content\" save-tab=\"onSave\" reset-tab=\"onReset\" cancel-tab=\"onCancel\" is-dirty-tab=\"isDirty\" data-tab-id=\"tabId\" data-component-info=\"model\" data-content=\"model.content\" component-id=\"model.componentUuid\" component-type=\"model.componentType\"></basic-tab>"
    );
     
    $templateCache.put(
        "ComponentRestrictionsEditorComponent.html", 
        "<se-restrictions-editor [editable]=\"isEditable\" [getRestrictionTypes]=\"getRestrictionTypes\" [getSupportedRestrictionTypes]=\"getSupportedRestrictionTypes\" [item]=\"model\" [restrictionUuids]=\"model.restrictions\" (onRestrictionsChange)=\"onRestrictionsChange($event)\"></se-restrictions-editor>"
    );
     
    $templateCache.put(
        "DuplicatePrimaryContentPageLabelComponent.html", 
        "<div><div class=\"fd-form__item fd-form__item--check\"><input class=\"fd-form__control\" type=\"radio\" name=\"duplicateResolution\" id=\"overwritePrimaryPageOption\" [(ngModel)]=\"conflictResolution\" (click)=\"selectResolution(RESOLUTION_OPTIONS.overwritePage)\" [value]=\"RESOLUTION_OPTIONS.overwritePage\"/> <label for=\"overwritePrimaryPageOption\" class=\"fd-form__label\" [translate]=\"'se.cms.page.restore.content.duplicate.primaryforvariation.option.overwrite'\"></label></div><div class=\"fd-form__item fd-form__item--check\"><input class=\"fd-form__control\" type=\"radio\" name=\"duplicateResolution\" id=\"renamePrimaryPageOption\" [(ngModel)]=\"conflictResolution\" (click)=\"selectResolution(RESOLUTION_OPTIONS.renamePageLabel)\" [value]=\"RESOLUTION_OPTIONS.renamePageLabel\"/> <label for=\"renamePrimaryPageOption\" class=\"fd-form__label\" [translate]=\"'se.cms.page.restore.content.duplicate.primaryforvariation.option.rename'\"></label></div><div class=\"rename-label-section\" *ngIf=\"conflictResolution === RESOLUTION_OPTIONS.renamePageLabel\"><label [translate]=\"'se.cms.page.restore.page.label'\"></label> <input type=\"text\" class=\"form-control\" [(ngModel)]=\"page['label']\"/></div></div>"
    );
     
    $templateCache.put(
        "DuplicatePrimaryNonContentPageComponent.html", 
        "<div><label [translate]=\"label\"></label></div>"
    );
     
    $templateCache.put(
        "MissingPrimaryContentPageComponent.html", 
        "<div><div><label class=\"missing-primary-content-page-message__label\" [translate]=\"'se.cms.page.restore.content.page.noprimaryforvariation.msg'\"></label></div><se-select id=\"se-page-restore-change-primary-selector-dropdown\" [(model)]=\"cmsPage.label\" [fetchStrategy]=\"fetchStrategy\"></se-select></div>"
    );
     
    $templateCache.put(
        "RestrictionManagementComponent.html", 
        "<div *ngIf=\"isReady\"><div *ngIf=\"isEditMode\"><se-restriction-management-edit [restriction]=\"config?.restriction\" [getSupportedRestrictionTypes]=\"config?.getSupportedRestrictionTypesFn\" [uriContext]=\"uriContext\" [(isDirtyFn)]=\"isDirtyInternal\" [(submitFn)]=\"submitInternal\"></se-restriction-management-edit></div><div *ngIf=\"!isEditMode\"><se-restriction-management-select [existingRestrictions]=\"config?.existingRestrictions\" [fetchRestrictionTypes]=\"config?.getRestrictionTypesFn\" [getSupportedRestrictionTypes]=\"config?.getSupportedRestrictionTypesFn\" [uriContext]=\"uriContext\" [(isDirtyFn)]=\"isDirtyInternal\" [(submitFn)]=\"submitInternal\"></se-restriction-management-select></div></div>"
    );
     
    $templateCache.put(
        "RestrictionManagementEditComponent.html", 
        "<div *ngIf=\"ready\"><div *ngIf=\"isTypeSupported\"><div class=\"se-restriction-management-edit__header\"><div>{{ restriction.name }}</div><div>{{ restriction.typeCode }}</div></div><div><se-item-manager [item]=\"restriction\" [mode]=\"itemManagementMode\" [structureApi]=\"structureApi\" [contentApi]=\"contentApi\" [uriContext]=\"uriContext\" [componentType]=\"restriction.itemtype\" [(submitFunction)]=\"submitInternal\" [(isDirty)]=\"isDirtyInternal\"></se-item-manager></div></div><div *ngIf=\"!isTypeSupported\"><div class=\"se-restrictions-list__item-content\"><div translate=\"se.cms.restriction.management.select.type.not.supported.warning\"></div><p class=\"se-restriction__item-name\">{{ restriction.name }}</p><div class=\"se-restriction__item-description\">{{ restriction.description }}</div></div></div></div>"
    );
     
    $templateCache.put(
        "RestrictionManagementSelectComponent.html", 
        "<div><se-message [style.display]=\"showWarningMessage() ? 'block' : 'none'\" [type]=\"'warning'\"><span se-message-title translate=\"se.cms.restriction.management.select.type.not.supported.warning\"></span></se-message><div class=\"se-restriction-management-select__select\"><label class=\"se-control-label\">{{ 'se.cms.restriction.management.select.type.label' | translate }}</label><se-select id=\"restriction-type\" [fetchStrategy]=\"fetchStrategy\" [itemComponent]=\"itemComponent\" [placeholder]=\"'se.cms.restriction.management.select.type.placeholder'\" [(model)]=\"selectModel.selectedIds.restrictionType\" (modelChange)=\"selectRestrictionType()\" [searchEnabled]=\"false\"></se-select></div><div *ngIf=\"viewConfig.showRestrictionSelector\" class=\"se-restriction-management-select__restriction-info\"><label class=\"se-control-label\" translate=\"se.cms.restriction.management.select.restriction.label\"></label><se-select id=\"restriction-name\" [fetchStrategy]=\"fetchOptions\" [(model)]=\"selectModel.selectedIds.restriction\" (modelChange)=\"selectRestriction()\" [placeholder]=\"'se.cms.restriction.management.select.restriction.placeholder'\" [disableChoiceFn]=\"disableRestrictionChoice\" [itemComponent]=\"itemComponent\" [resultsHeaderLabel]=\"resultsHeaderLabel\" [actionableSearchItem]=\"{ eventId: RESTRICTION_CREATE_BUTTON_PRESSED_EVENT_ID }\" [(reset)]=\"reset\"></se-select></div><div class=\"se-restriction-management-select__restriction-editor\" *ngIf=\"viewConfig.showRestrictionEditor\"><p class=\"se-restriction-management-select__new-restriction-message\" [translate]=\"editorHeader\"></p><div *ngIf=\"selectModel.isTypeSupported()\"><se-item-manager [item]=\"selectModel.getRestriction()\" [mode]=\"viewConfig.mode\" [structureApi]=\"viewConfig.structureApi\" [contentApi]=\"viewConfig.contentApi\" [uriContext]=\"uriContext\" [componentType]=\"selectModel.getRestrictionTypeCode()\" [(submitFunction)]=\"submitInternal\" [(isDirty)]=\"isDirtyInternal\"></se-item-manager></div><div *ngIf=\"!selectModel.isTypeSupported()\"><p class=\"se-restriction__item-name\">{{ selectModel.getRestriction().name }}</p><div class=\"se-restriction__item-description\">{{ selectModel.getRestriction().description }}</div></div></div></div>"
    );
     
    $templateCache.put(
        "RestrictionsEditorComponent.html", 
        "<div class=\"se-restrictions-container\"><div class=\"se-restrictions-container__header\" [ngClass]=\"{ 'se-restrictions-container__header--empty': restrictions.length === 0 }\"><label class=\"se-restrictions__sub-header\" translate=\"se.cms.restrictions.list.title\"></label><div class=\"se-restrictions-container__header--right\"><div *ngIf=\"restrictions.length > 1\"><div *ngIf=\"editable\"><se-select id=\"criteria-type\" [fetchStrategy]=\"criteriaFetchStrategy\" [itemComponent]=\"itemComponent\" [placeholder]=\"'se.cms.restrictions.picker.type.placeholder'\" [model]=\"criteria.id\" (modelChange)=\"matchCriteriaChanged($event)\" [searchEnabled]=\"false\"></se-select></div><div *ngIf=\"!editable\">{{ 'se.cms.restrictions.criteria' | translate }} {{ criteria.label | translate }}</div></div><button class=\"cms-clean-btn se-restriction__clear-all__btn fd-button--light fd-button--compact\" *ngIf=\"showRemoveAllButton()\" (click)=\"removeAllRestrictions()\" translate=\"se.cms.restrictions.list.clear.all\"></button> <button *ngIf=\"!showRestrictionPicker\" type=\"button\" class=\"se-restrictions__add-restriction-btn fd-button--compact\" [disabled]=\"!editable\" (click)=\"onAddRestriction()\"><span translate=\"se.cms.restrictions.editor.button.add.new\"></span></button></div></div><se-slider-panel [sliderPanelConfiguration]=\"sliderPanelConfiguration\" [(sliderPanelHide)]=\"sliderPanelHide\" [(sliderPanelShow)]=\"sliderPanelShow\" (isShownChange)=\"onSliderVisibilityChange($event)\" class=\"se-add-restriction-panel\"><se-restriction-management *ngIf=\"isSliderVisible\" class=\"se-se-add-restriction-panel__restriction-management\" [config]=\"restrictionManagement.config\" [uriContext]=\"restrictionManagement.uriContext\" [(submitFn)]=\"restrictionManagement.submitFn\" [(isDirtyFn)]=\"restrictionManagement.isDirtyFn\"></se-restriction-management></se-slider-panel><div *ngIf=\"errors.length > 0\"><span class=\"se-help-block--has-error help-block fd-form__message fd-form__message--error\" *ngFor=\"let error of errors\" [translate]=\"error.message\"></span></div><se-restrictions-table *ngIf=\"isRestrictionsReady\" [editable]=\"editable\" [restrictions]=\"restrictions\" [restrictionCriteria]=\"criteria\" [errors]=\"errors\" [customClass]=\"'ySERestrictionListLink'\" (onEdit)=\"onEditRestriction($event)\" (onRemove)=\"onRemoveRestriction($event)\"></se-restrictions-table></div>"
    );
     
    $templateCache.put(
        "RestrictionsTableComponent.html", 
        "<div class=\"se-restriction-table-wrapper se-restriction-table-left\" [ngClass]=\"customClass\"><div class=\"se-restrictions-list fd-menu__list fd-menu__list--separated\" *ngIf=\"restrictions.length > 0\"><div id=\"restriction-{{ index + 1 }}\" *ngFor=\"let restriction of restrictions; let index = index\" class=\"se-restriction__item fd-menu__item\"><div class=\"se-restrictions-list__item-content\"><p class=\"se-restriction__item-name\" [ngClass]=\"{ 'error-input': isInError(index) }\">{{ restriction.name }}</p><div class=\"se-restriction__item-type-and-id\" [ngClass]=\"{ 'error-input': isInError(index) }\">{{ restriction.typeCode }}</div><div class=\"se-restriction__item-description\" [ngClass]=\"{ 'error-input': isInError(index) }\" [title]=\"restriction.description\">{{ restriction.description }}</div><div id=\"restrictionPartOfWorkflow\" *ngIf=\"!restriction.canBeEdited\" translate=\"se.cms.restrictions.editor.part.of.workflow\"></div></div><div *ngIf=\"editable\"><se-dropdown-menu [dropdownItems]=\"restriction.actions || defaultActions\" [selectedItem]=\"restriction\" [placement]=\"'bottom-start'\"></se-dropdown-menu></div></div></div><div *ngIf=\"restrictions.length === 0\" class=\"se-restrictions-list--empty\"><span class=\"se-restrictions-list--empty__message\" translate=\"se.cms.restrictions.emptylist.message\"></span></div></div>"
    );
     
    $templateCache.put(
        "clonePageInfoStepTemplate.html", 
        "<se-component-clone-info-form data-ng-if=\"clonePageWizardCtrl.isPageInfoActive()\" [structure]=\"clonePageWizardCtrl.getPageInfoStructure()\" [content]=\"clonePageWizardCtrl.getPageInfo()\" [(submit)]=\"clonePageWizardCtrl.callbacks.savePageInfo\" [(reset)]=\"clonePageWizardCtrl.callbacks.resetPageInfo\" [(is-dirty)]=\"clonePageWizardCtrl.callbacks.isDirtyPageInfo\" [(is-valid)]=\"clonePageWizardCtrl.callbacks.isValidPageInfo\" [page-template]=\"clonePageWizardCtrl.getPageTemplate()\" [page-type-code]=\"clonePageWizardCtrl.getPageTypeCode()\" [uri-context]=\"clonePageWizardCtrl.uriContext\" [target-catalog-version]=\"clonePageWizardCtrl.getTargetCatalogVersion()\"></se-component-clone-info-form>"
    );
     
    $templateCache.put(
        "clonePageOptionsStepTemplate.html", 
        "<se-event-message class=\"existing-homepage__ymessage\" [show-event]=\"'CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO'\" [hide-event]=\"'CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO'\"></se-event-message><se-select-target-catalog-version data-ng-if=\"clonePageWizardCtrl.isBasePageInfoAvailable()\" [page-type-code]=\"clonePageWizardCtrl.getPageTypeCode()\" [page-label]=\"clonePageWizardCtrl.getPageLabel()\" [uri-context]=\"clonePageWizardCtrl.uriContext\" (on-target-catalog-version-selected)=\"clonePageWizardCtrl.onTargetCatalogVersionSelected($event)\"></se-select-target-catalog-version><se-new-page-display-condition [page-type-code]=\"clonePageWizardCtrl.getPageTypeCode()\" [uri-context]=\"clonePageWizardCtrl.uriContext\" [result-fn]=\"clonePageWizardCtrl.variationResult\" [initial-condition-selected-key]=\"'page.displaycondition.variation'\" [initial-primary-page-selected-label]=\"clonePageWizardCtrl.getPageLabel()\" [target-catalog-version]=\"clonePageWizardCtrl.getTargetCatalogVersion()\"></se-new-page-display-condition><se-component-clone-option-form (on-selection-change)=\"clonePageWizardCtrl.triggerUpdateCloneOptionResult($event)\"></se-component-clone-option-form>"
    );
     
    $templateCache.put(
        "clonePageRestrictionsStepTemplate.html", 
        "<span data-ng-if=\"clonePageWizardCtrl.isRestrictionsActive()\" class=\"se-clone-page-restriction-step\"><div data-ng-if=\"clonePageWizardCtrl.getPageRestrictions().length > 1\"><se-page-restrictions-info-message></se-page-restrictions-info-message></div><se-restrictions-editor [editable]=\"true\" [(reset-fn)]=\"clonePageWizardCtrl.restrictionsEditorFunctionBindings.reset\" [(cancel-fn)]=\"clonePageWizardCtrl.restrictionsEditorFunctionBindings.cancel\" [(is-dirty-fn)]=\"clonePageWizardCtrl.restrictionsEditorFunctionBindings.isDirty\" (on-restrictions-change)=\"clonePageWizardCtrl.restrictionsResult($event)\" [get-restriction-types]=\"clonePageWizardCtrl.getRestrictionTypes\" [get-supported-restriction-types]=\"clonePageWizardCtrl.getSupportedRestrictionTypes\" [item]=\"clonePageWizardCtrl.getBasePageInfo()\" [restrictionUuids]=\"clonePageWizardCtrl.model.restrictions\"></se-restrictions-editor></span>"
    );
     
    $templateCache.put(
        "DisplayConditionsEditorComponent.html", 
        "<div><se-event-message class=\"existing-homepage__ymessage\" [showEvent]=\"'CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO'\" [hideEvent]=\"'CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO'\"></se-event-message><se-display-conditions-page-info [pageName]=\"getPageName()\" [pageType]=\"getPageType()\" [isPrimary]=\"isPagePrimary()\"></se-display-conditions-page-info><se-display-conditions-page-variations *ngIf=\"isPagePrimary()\" [variations]=\"getVariations()\"></se-display-conditions-page-variations><se-display-conditions-primary-page *ngIf=\"!isPagePrimary()\" [readOnly]=\"getIsAssociatedPrimaryReadOnly()\" [associatedPrimaryPage]=\"getAssociatedPrimaryPage()\" [pageType]=\"getPageType()\" (onPrimaryPageSelect)=\"onPrimaryPageSelect($event)\"></se-display-conditions-primary-page><div *ngIf=\"showHomePageWidget()\"><div class=\"se-component-homepage\"><label class=\"se-control-label\"><input type=\"checkbox\" id=\"set-homepage-checkbox\" class=\"fd-form__control se-display-conditions__homepage-input\" name=\"clone-on-drop\" [disabled]=\"disableHomepageCheckbox()\" (ngModelChange)=\"homePageChanged($event)\" [ngModel]=\"page.homepage\"/> <span translate=\"se.cms.display.conditions.homepage.set\"></span><se-help *ngIf=\"disableHomepageCheckbox()\"><span translate=\"se.cms.display.conditions.homepage.disabled\"></span></se-help></label></div><div class=\"se-display-conditions__replace-home-message\" *ngIf=\"showReplaceLabel\" translate=\"se.cms.display.conditions.homepage.replace\" [translateParams]=\"{ currentHomepage: currentHomePageName }\"></div></div></div>"
    );
     
    $templateCache.put(
        "DisplayConditionsPageInfoComponent.html", 
        "<div class=\"se-edit-page-info__display-conditions\"><div class=\"se-edit-page-info-display-conditions__basic-info\"><div><label class=\"se-control-label\" translate=\"se.cms.pagelist.headerpagename\"></label><div class=\"form-readonly-text form-readonly-text__tight dc-page-name\">{{ pageName }}</div></div><div><label class=\"se-control-label\" translate=\"se.cms.pagelist.headerpagetype\"></label><div class=\"form-readonly-text form-readonly-text__tight dc-page-type\">{{ pageType }}</div></div></div><label class=\"se-control-label\"><span translate=\"se.cms.display.conditions.label\"></span><se-help><span [translate]=\"getPageDisplayConditionDescriptionI18nKey()\"></span></se-help></label><p class=\"form-readonly-text form-readonly-text__tight dc-page-display-condition\" [translate]=\"getPageDisplayConditionI18nKey()\"></p></div>"
    );
     
    $templateCache.put(
        "DisplayConditionsPageVariationsComponent.html", 
        "<div class=\"form-group dc-page-variations\"><label class=\"se-control-label control-label__margin\"><span translate=\"se.cms.display.conditions.variation.pages.title\"></span><se-help *ngIf=\"variations.length > 0\"><span translate=\"se.cms.display.conditions.variations.description\"></span></se-help></label><div *ngIf=\"variations.length === 0\" class=\"dc-no-variations form-readonly-text form-readonly-text__tight form-readonly-text__inline\" translate=\"se.cms.display.conditions.no.variations\"></div><div *ngIf=\"variations.length > 0\"><se-client-paged-list [items]=\"variations\" [keys]=\"keys\" [itemsPerPage]=\"itemsPerPage\" class=\"dc-page-variations-list\"></se-client-paged-list></div></div>"
    );
     
    $templateCache.put(
        "DisplayConditionsPrimaryPageComponent.html", 
        "<div class=\"form-group form-group__inline\"><label class=\"se-control-label control-label__margin\" translate=\"se.cms.display.conditions.primary.page.label\"></label><div *ngIf=\"readOnly\" class=\"dc-associated-primary-page form-readonly-text form-readonly-text__tight\">{{ associatedPrimaryPage?.name }}</div><div *ngIf=\"!readOnly\"><se-select id=\"display-conditions-primary-association-selector\" [model]=\"associatedPrimaryPageUid\" (modelChange)=\"associatedPrimaryPageUidOnChange($event)\" [fetchStrategy]=\"fetchStrategy\"></se-select><span *ngIf=\"associatedPrimaryPage?.name\" class=\"se-form-help-message\"><span>{{ 'se.cms.page.label.label' | translate }}: {{ associatedPrimaryPage.label }}</span></span></div></div>"
    );
     
    $templateCache.put(
        "ClonePageItemComponent.html", 
        "<div *seHasOperationPermission=\"clonePagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"onClickOnClone()\"><span class=\"se-dropdown-item--label\" translate=\"se.cms.actionitem.page.clone\"></span></a></div>"
    );
     
    $templateCache.put(
        "DeletePageItemComponent.html", 
        "<div *seHasOperationPermission=\"deletePagePermission\"><div class=\"se-dropdown-item__delete-wrapper\"><div class=\"se-dropdown-item__delete-link-wrapper\" [ngClass]=\"{'se-dropdown-item__delete-link-wrapper--disabled': !isDeletePageEnabled}\"><a class=\"se-dropdown-item se-dropdown-item__delete fd-menu__item\" [ngClass]=\"{'se-dropdown-item--disabled': !isDeletePageEnabled}\" (click)=\"isDeletePageEnabled && onClickOnDeletePage()\"><span class=\"se-dropdown-item--label\" translate=\"se.cms.actionitem.page.trash\"></span></a></div><se-tooltip *ngIf=\"!isDeletePageEnabled\" class=\"se-dropdown-item__delete-page-popover\" [placement]=\"'left'\" [triggers]=\"['mouseenter', 'mouseleave']\" [isChevronVisible]=\"true\" [appendTo]=\"'body'\"><span se-tooltip-trigger class=\"sap-icon--message-error\"></span><div se-tooltip-body class=\"popover-tooltip\"><span [translate]=\"tooltipMessage\"></span></div></se-tooltip></div></div>"
    );
     
    $templateCache.put(
        "EditPageItemComponent.html", 
        "<div *seHasOperationPermission=\"editPagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"onClickOnEdit()\"><span class=\"se-dropdown-item--label\" translate=\"se.cms.actionitem.page.edit\"></span></a></div>"
    );
     
    $templateCache.put(
        "PermanentlyDeletePageItemComponent.html", 
        "<div *seHasOperationPermission=\"permanentlyDeletePagePermission\"><div class=\"se-dropdown-item__delete-wrapper\"><div class=\"se-dropdown-item__delete-link-wrapper\" [ngClass]=\"{'se-dropdown-item__delete-link-wrapper--disabled': isDeleteButtonDisabled()}\"><a class=\"se-dropdown-item se-dropdown-item__delete fd-menu__item\" [ngClass]=\"{'se-dropdown-item--disabled': isDeleteButtonDisabled()}\" (click)=\"permanentlyDelete()\"><span [translate]=\"'se.cms.actionitem.page.permanently.delete'\"></span></a></div><se-tooltip class=\"se-dropdown-item__delete-page-popover\" *ngIf=\"isDeleteButtonDisabled()\" [placement]=\"'left'\" [triggers]=\"['mouseenter', 'mouseleave']\" [isChevronVisible]=\"true\" [appendTo]=\"'body'\"><span se-tooltip-trigger class=\"sap-icon--message-error\"></span> <span se-tooltip-body [translate]=\"'se.cms.actionitem.page.permanently.delete.blocked'\"></span></se-tooltip></div></div>"
    );
     
    $templateCache.put(
        "RestorePageItemComponent.html", 
        "<div *seHasOperationPermission=\"restorePagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"restorePage()\"><span [translate]=\"'se.cms.actionitem.page.restore'\"></span></a></div>"
    );
     
    $templateCache.put(
        "SyncPageItemComponent.html", 
        "<div *seHasOperationPermission=\"syncPagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"sync()\" translate=\"se.cms.actionitem.page.sync\"></a></div>"
    );
     
    $templateCache.put(
        "UpdatePageStatusComponent.html", 
        "<div *ngIf=\"showButton\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"onClickOnSync()\"><span [translate]=\"'se.cms.actionitem.page.sync'\"></span></a></div>"
    );
     
    $templateCache.put(
        "PageSyncMenuToolbarItemComponent.html", 
        "<ng-container *seHasOperationPermission=\"'se.sync.catalog'\"><fd-popover [(isOpen)]=\"toolbarItem.isOpen\" [closeOnOutsideClick]=\"true\"><fd-popover-control><button type=\"button\" class=\"btn toolbar-action--button\" [attr.aria-expanded]=\"toolbarItem.isOpen\"><span class=\"icon-synchronize se-toolbar-menu-ddlb--button__icon\"><span *ngIf=\"isNotInSync\" class=\"hyicon hyicon-caution se-toolbar-menu-ddlb--button__caution\"></span> </span><span class=\"toolbar-action-button__txt\" [ngClass]=\"{'se-toolbar-menu-ddlb--button__txt': isNotInSync }\" [translate]=\"toolbarItem.name\"></span></button></fd-popover-control><fd-popover-body><div *ngIf=\"toolbarItem.isOpen && isReady\" class=\"toolbar-action--include se-sync-menu-content__dropdown\"><se-prevent-vertical-overflow><div class=\"se-sync-menu-content__header\"><span class=\"se-sync-menu-content__header-title\" translate=\"se.cms.synchronization.page.title\"></span><se-help *ngIf=\"!syncPageConditions?.canSyncHomepage && !syncPageConditions?.pageHasNoDepOrNoSyncStatus\" class=\"se-page-sync__y-help\"><span>{{ helpText }}</span></se-help></div><se-page-synchronization-panel [cmsPage]=\"cmsPage\" [uriContext]=\"uriContext\"></se-page-synchronization-panel></se-prevent-vertical-overflow></div></fd-popover-body></fd-popover></ng-container>"
    );
     
    $templateCache.put(
        "PageSynchronizationHeaderComponent.html", 
        "<ng-container *ngIf=\"ready\"><div class=\"se-sync-panel-header\"><span class=\"se-sync-panel-header__sub-header\" [translate]=\"getSubHeaderText()\"></span></div><div *ngIf=\"isNewPage()\" class=\"se-sync-panel-new-page\"><div class=\"se-sync-panel-new-page__header\" translate=\"se.cms.synchronization.page.new.header\"></div><div class=\"se-sync-panel-new-page__message\">{{ headerText }}</div></div><div class=\"se-sync-panel-header__timestamp\" *ngIf=\"!isNewPage()\"><div translate=\"se.cms.synchronization.panel.lastsync.text\"></div><span class=\"se-sync-panel-header__timestamp-text\">{{ syncStatus.lastSyncStatus | date: 'M/d/yy h:mm a' }}</span></div></ng-container>"
    );
     
    $templateCache.put(
        "PageSynchronizationPanelComponent.html", 
        "<se-page-synchronization-header class=\"se-sync-panel__sync-status\" [syncStatus]=\"syncStatus\" [pageSyncConditions]=\"pageSyncConditions\"></se-page-synchronization-header><se-synchronization-panel *ngIf=\"!showFooter\" [itemId]=\"cmsPage.uuid\" [showFooter]=\"false\" [getSyncStatus]=\"getSyncStatus\" [performSync]=\"performSync\" (selectedItemsUpdate)=\"onSelectedItemsUpdate($event)\" (syncStatusReady)=\"onSyncStatusReady($event)\" (getApi)=\"onGetApi($event)\"></se-synchronization-panel><se-synchronization-panel *ngIf=\"showFooter\" [itemId]=\"cmsPage.uuid\" [getSyncStatus]=\"getSyncStatus\" [performSync]=\"performSync\" (syncStatusReady)=\"onSyncStatusReady($event)\" (getApi)=\"onGetApi($event)\"></se-synchronization-panel>"
    );
     
    $templateCache.put(
        "SynchronizeCatalogComponent.html", 
        "<div class=\"se-synchronize-catalog\"><div class=\"se-synchronize-catalog__sync-info\"><div *ngIf=\"isSyncJobFinished()\"><label class=\"se-synchronize-catalog__sync-info__sync-label\" *ngIf=\"catalogVersion.active\"><span translate=\"se.cms.cataloginfo.lastsyncedfrom\"></span>&nbsp; <span>{{ syncJobStatus.source }}</span></label> <label class=\"se-synchronize-catalog__sync-info__sync-label\" *ngIf=\"!catalogVersion.active\" translate=\"se.cms.cataloginfo.lastsynced\"></label> <span class=\"se-synchronize-catalog__sync-info__last-synched\">{{ syncJobStatus.syncEndTime | date: 'M/d/yy h:mm a' }}</span></div><span class=\"se-synchronize-catalog__in-progress\" *ngIf=\"isSyncJobInProgress()\" translate=\"se.sync.status.synced.inprogress\"></span> <span class=\"label-error se-synchronize-catalog__sync-failed\" *ngIf=\"isSyncJobFailed()\" translate=\"se.sync.status.synced.syncfailed\"></span></div><ng-container *seHasOperationPermission=\"syncCatalogPermission\"><ng-container *ngIf=\"!catalogVersion.active\"><button class=\"se-synchronize-catalog__sync-btn fd-button--emphasized\" [disabled]=\"!isSyncButtonEnabled()\" (click)=\"syncCatalog()\" translate=\"se.cms.cataloginfo.btn.sync\"></button></ng-container></ng-container></div>"
    );
     
    $templateCache.put(
        "VersionItemContextComponent.html", 
        "<div class=\"se-version-item-context\"><span class=\"sap-icon--navigation-right-arrow\"></span><se-tooltip *ngIf=\"(pageVersion$ | async) as pageVersion\" [triggers]=\"['mouseenter', 'mouseleave']\" [placement]=\"'bottom'\" [isChevronVisible]=\"true\"><div se-tooltip-trigger class=\"se-version-item-context__info\"><div class=\"se-version-item-context__info-label\" [title]=\"pageVersion.label\">{{ pageVersion.label }}</div><div class=\"se-version-item-context__info-date\">{{ pageVersion.creationtime | date: 'M/d/yy h:mm a' }}</div></div><div se-tooltip-body class=\"se-version-item-context__description-wrapper\"><span class=\"se-version-item-context__description\">{{ pageVersion.description || (EMPTY_DESCRIPTION_MSG_KEY | translate) }}</span></div></se-tooltip><button type=\"button\" (click)=\"deselectPageVersion()\" class=\"se-version-item-context__remove-btn fd-button--light sap-icon--decline\"></button></div>"
    );
     
    $templateCache.put(
        "VersionsPanelComponent.html", 
        "<div class=\"se-toolbar-menu-content--wrapper\"><div class=\"se-toolbar-menu-content__header\"><div class=\"se-toolbar-menu-content__header-title\" translate=\"se.cms.actionitem.page.versions\"></div><button class=\"se-versions-panel__manage-btn fd-button fd-button--compact\" *ngIf=\"showManageButton\" (click)=\"switchToVersioningMode()\" translate=\"se.cms.toolbaritem.versioning.manageversions.name\"></button></div><div class=\"se-versions-toolbar-menu-content__body\" [ngClass]=\"{ 'se-versions-toolbar-menu-content__body--narrow': showManageButton }\"><se-versions-search [versionsFoundCount]=\"versionsFound\" [showSearchControls]=\"pageHasVersions()\" (searchTermChange)=\"onSearchTermChanged($event)\"></se-versions-search><div><se-infinite-scrolling class=\"se-versions-panel__infinite-scroll\" *ngIf=\"pageHasVersionsOrIsLoading()\" [pageSize]=\"10\" [mask]=\"searchTerm\" [fetchPage]=\"fetchPageOfVersions\" (itemsChange)=\"onVersionItemsLoaded($event)\"><div *ngFor=\"let item of versionItems; let isLast = last\"><se-version-item [ngClass]=\"{ 'se-version-item--last': isLast }\" [pageVersion]=\"item\"></se-version-item></div></se-infinite-scrolling><div class=\"se-versions-panel__empty-list\" *ngIf=\"!pageHasVersionsOrIsLoading()\"><img src=\"static-resources/images/emptyVersions.svg\" alt=\"no versions\"/> <span class=\"se-versions-panel__no-versions-message\" translate=\"se.cms.toolbaritem.versioning.noversionsfound\"></span> <a class=\"se-versions-panel__manage-link fd-link\" *ngIf=\"showManageLink\" (click)=\"switchToVersioningMode()\" translate=\"se.cms.toolbaritem.versioning.manageversionslink.name\"></a></div></div></div></div>"
    );
     
    $templateCache.put(
        "PageApprovalSelectorComponent.html", 
        "<se-dropdown-menu *ngIf=\"showDropdown\" [useProjectedAnchor]=\"true\" [dropdownItems]=\"pageApprovalOptions$ | async\" [(isOpen)]=\"isOpen\" (isOpenChange)=\"onDropdownToggle($event)\" [additionalClasses]=\"['se-page-approval-selector-list']\"><button class=\"se-page-approval-selector__toggle-btn fd-button--light sap-icon--navigation-down-arrow\"></button></se-dropdown-menu>"
    );
     
    $templateCache.put(
        "PageDisplayStatusComponent.html", 
        "<ng-container *ngIf=\"showLastSyncTime; else pageStatus\"><se-tooltip [triggers]=\"['click']\" [placement]=\"'left'\" [isChevronVisible]=\"true\"><ng-container se-tooltip-trigger *ngTemplateOutlet=\"pageStatus\"></ng-container><div se-tooltip-body class=\"popover-tooltip\"><ng-container *ngIf=\"hasBeenSynchedBefore(); else notPublished\"><span [translate]=\"'se.cms.page.displaystatus.lastpublished.date'\"></span> <span>&ngsp;{{ lastSynchedDate | date: 'M/d/yy h:mm a' }}</span></ng-container><ng-template #notPublished><span [translate]=\"'se.cms.page.displaystatus.not.published'\"></span></ng-template></div></se-tooltip></ng-container><ng-template #pageStatus><se-page-status [uuid]=\"page?.uuid\" [displayStatus]=\"page?.displayStatus\"></se-page-status></ng-template>"
    );
     
    $templateCache.put(
        "PageWorkflowMenuComponent.html", 
        "<div *ngIf=\"isReady\"><div *ngIf=\"!pageHasWorkflow && isWorkflowEnabled\"><ng-container *seHasOperationPermission=\"'se.start.page.workflow'\"><button id=\"smartEditPerspectiveToolbar_option_se.cms.startWorkflow_btn\" class=\"btn toolbar-action--button\" type=\"button\" (click)=\"startWorkflow()\" aria-expanded=\"false\"><span id=\"smartEditPerspectiveToolbar_option_se.cms.startWorkflow_btn_lbl\" class=\"toolbar-action-button__txt\" translate=\"se.cms.workflow.toolbar.start.workflow\"></span></button></ng-container></div><div *seHasOperationPermission=\"'se.view.page.workflowMenu'\"><fd-popover *ngIf=\"pageHasWorkflow\" class=\"toolbar-action\" [closeOnOutsideClick]=\"true\" [isOpen]=\"actionItem.isOpen\" (isOpenChange)=\"onDropdownToggle($event)\"><fd-popover-control><button type=\"button\" class=\"page-tasks-btn toolbar-action--button\" [attr.aria-expanded]=\"actionItem.isOpen\"><span class=\"page-tasks-btn__icon sap-icon--workflow-tasks\"></span> <span class=\"page-tasks-btn__label\" translate=\"se.cms.workflow.toolbar.view.workflow.menu\"></span></button></fd-popover-control><fd-popover-body><div *ngIf=\"actionItem.isOpen\" class=\"toolbar-action--include se-page-workflow-menu\"><div class=\"se-page-workflow-menu__header\"><div class=\"se-page-workflow-menu__header-text\" translate=\"se.cms.workflow.toolbar.view.workflow.menu\"></div><div class=\"se-page-workflow-menu__header-menu\"><se-workflow-item-menu [workflowInfo]=\"workflow\"></se-workflow-item-menu></div></div><div class=\"se-version-toolbar-menu-content__body\"><div class=\"se-page-workflow-menu-tabs\"><se-tabs *ngIf=\"areTabsReady; else spinner\" [tabsList]=\"tabsList\" [model]=\"tabsData\" [numTabsDisplayed]=\"2\"></se-tabs><ng-template #spinner><se-spinner [isSpinning]=\"true\"></se-spinner></ng-template></div></div></div></fd-popover-body></fd-popover></div></div>"
    );
     
    $templateCache.put(
        "WorkflowInboxComponent.html", 
        "<fd-popover class=\"toolbar-action se-workflow-inbox-container dropdown\" [class.open]=\"actionItem.isOpen\" [(isOpen)]=\"actionItem.isOpen\" (isOpenChange)=\"onDropdownToggle(isOpen)\" [closeOnOutsideClick]=\"true\" [triggers]=\"['click']\" [placement]=\"'bottom-' + actionItem.dropdownPosition\"><fd-popover-control class=\"se-workflow-inbox-toggle-control\"><button type=\"button\" class=\"se-workflow-inbox-toggle toolbar-action--button--compact\" [attr.aria-pressed]=\"actionItem.isOpen\"><span class=\"se-toolbar-actions__icon sap-icon--task\"></span><se-workflow-inbox-badge></se-workflow-inbox-badge></button></fd-popover-control><fd-popover-body><div [ngClass]=\"{                'se-toolbar__dropdown--right': actionItem.dropdownPosition === 'right',                'se-toolbar__dropdown--center': actionItem.dropdownPosition === 'center',                'se-toolbar__dropdown--left': actionItem.dropdownPosition === 'left'            }\" class=\"toolbar-action--include--compact\"><div *ngIf=\"actionItem.isOpen\" class=\"se-workflow-inbox\"><div class=\"se-workflow-inbox\"><div class=\"se-workflow-inbox-header\"><div class=\"se-workflow-inbox-header__title\" [translate]=\"'se.cms.workflow.toolbar.inbox'\"></div></div><div class=\"se-workflow-inbox-tasks se-cms-dev-workflow-inbox-tasks fd-panel__body\"><div *ngIf=\"!tasksNotReady && totalNumberOfTasks === 0\" class=\"se-workflow-inbox-tasks__no-tasks\"><img src=\"static-resources/images/Inbox.svg\" alt=\"empty-inbox\"/> <span class=\"se-workflow-inbox__empty-inbox-message\" [translate]=\"'se.cms.workflow.toolbar.inbox.emptyinbox.message'\"></span> <span class=\"se-workflow-inbox__empty-inbox-message-alt\" [translate]=\"'se.cms.workflow.toolbar.inbox.emptyinbox.message.alt'\"></span></div><se-infinite-scrolling class=\"se-version-panel__infinite-scroll se-infinite-scrolling--narrowed\" [pageSize]=\"pageSize\" [fetchPage]=\"fetchPageOfInboxTasks\" (itemsChange)=\"onInboxTasksLoaded($event)\"><div *ngFor=\"let task of workflowTasks; let i = index; let last = last; trackBy: trackByIndex\" class=\"se-workflow-inbox-task se-cms-dev-workflow-inbox-task\"><se-workflow-inbox-task id=\"workflow-inbox-task-{{i}}\" [class.se-workflow-inbox-task-last]=\"last\" [task]=\"task\"></se-workflow-inbox-task></div></se-infinite-scrolling></div></div></div></div></fd-popover-body></fd-popover>"
    );
     
    $templateCache.put(
        "WorkflowInboxBadgeComponent.html", 
        "<ng-container *ngIf=\"inboxCount$ | async as count\"><div *ngIf=\"count > 0\" aria-label=\"Notifications\"><div class=\"fd-counter fd-counter--notification se-inbox-badge\" aria-label=\"Unread count\">{{ stringifyCount(count) }}</div></div></ng-container>"
    );
     
    $templateCache.put(
        "WorkflowInboxMultipleTasksAnnouncementComponent.html", 
        "<div (click)=\"onClick($event)\" class=\"se-announcement__message--multi\">{{ 'se.cms.workflow.tasks.announcement' | translate: count }}</div>"
    );
     
    $templateCache.put(
        "WorkflowInboxSingleTaskAnnouncementComponent.html", 
        "<div (click)=\"onClick($event)\"><div class=\"se-announcement__title\">{{ task.action.name | seL10n | async }}</div><div class=\"se-announcement__message\">{{ task.attachments[0].catalogName | seL10n | async }} | {{ task.attachments[0].pageName }}</div><div class=\"se-announcement__time-stamp\">{{ startedAgo }}</div></div>"
    );
     
    $templateCache.put(
        "WorkflowItemMenuComponent.html", 
        "<se-popup-overlay class=\"popup-anchor\" [ngClass]=\"{ 'popup-anchor--open': isMenuOpen }\" [popupOverlay]=\"popupConfig\" [popupOverlayTrigger]=\"isMenuOpen\" (popupOverlayOnHide)=\"hideMenu()\"><span *ngIf=\"menuItems.length > 0\" (click)=\"toggleMenu()\" class=\"workflow-item-menu__toggle-btn sap-icon--overflow\"></span><div se-popup-overlay-body><div class=\"workflow-item-menu\"><div class=\"workflow-item-menu__item\" *ngFor=\"let dropdownItem of menuItems\"><ng-container class=\"container\" [ngSwitch]=\"dropdownItem.i18nKey\"><div *ngSwitchCase=\"'se.cms.actionitem.page.workflow.description'\" class=\"workflow-description\"><div class=\"se-dropdown-item--label\"><div class=\"workflow-description__label fd-has-type-1 fd-has-margin-bottom-tiny\"><div [translate]=\"dropdownItem.i18nKey\"></div><div *seHasOperationPermission=\"'se.edit.workflow.workflowMenu'\"><a title=\"Edit\" class=\"workflow-description__edit-btn sap-icon--edit fd-has-float-right\" (click)=\"editDescription()\"></a></div></div><div *ngIf=\"workflowInfo.description; else noDescription\" class=\"workflow-description__text\">{{ workflowInfo.description }}</div><ng-template #noDescription><div translate=\"se.cms.actionitem.page.workflow.no.description\"></div></ng-template></div></div><div *ngSwitchCase=\"'se.cms.actionitem.page.workflow.cancel'\" class=\"workflow-cancel-btn fd-has-color-status-3\" [translate]=\"dropdownItem.i18nKey\" (click)=\"cancelWorkflow()\"></div></ng-container></div></div></div></se-popup-overlay>"
    );
     
    $templateCache.put(
        "WorkflowInboxTaskComponent.html", 
        "<div class=\"se-workflow-inbox-task-header\"><a href=\"#\" (click)=\"onClick($event)\">{{ taskName | async }}</a></div><div class=\"se-workflow-inbox-task-desc\">{{ taskDescription | async }}</div><div class=\"se-workflow-inbox-task-body\">{{ getTaskCreatedAgo() }}</div>"
    );
     
    $templateCache.put(
        "SubTypeSelectorComponent.html", 
        "<ul class=\"se-sub-type__selector fd-menu__list\"><li class=\"cms-sub-type__selector-link fd-menu__item\" *ngFor=\"let subType of subTypes\" (click)=\"select(subType)\" [translate]=\"subType.label\"></li></ul>"
    );
     
    $templateCache.put(
        "PageRestrictionsEditorComponent.html", 
        "<se-page-restrictions-info-message *ngIf=\"page.restrictions?.length > 1\"></se-page-restrictions-info-message><se-restrictions-editor [editable]=\"isEditable\" [getRestrictionTypes]=\"getRestrictionTypes\" [getSupportedRestrictionTypes]=\"getSupportedRestrictionTypes\" [item]=\"page\" [restrictionUuids]=\"page.restrictions\" [removeValidationMessages]=\"onRemoveValidationMessages\" (onRestrictionsChange)=\"onRestrictionsChange($event)\"></se-restrictions-editor>"
    );
     
    $templateCache.put(
        "PageRestrictionsInfoMessageComponent.html", 
        "<se-message [type]=\"'info'\" class=\"se-restrictions-info__message\"><ng-container se-message-title>{{ 'se.cms.restrictions.editor.ymessage.title' | translate }}</ng-container><ng-container se-message-description>{{ 'se.cms.restrictions.editor.ymessage.description' | translate }}</ng-container></se-message>"
    );
     
    $templateCache.put(
        "ItemSelectorPanelComponent.html", 
        "<se-slider-panel [sliderPanelConfiguration]=\"panelConfig\" [(sliderPanelHide)]=\"hidePanel\" [(sliderPanelShow)]=\"showPanel\" class=\"se-item-selector-panel\"><div class=\"se-item-selector-panel__content\" *ngIf=\"catalogs.length > 0\"><div *ngIf=\"catalogs.length > 1\" class=\"se-item-selector-panel__content__item\"><label class=\"se-control-label\" translate=\"se.cms.catalogaware.panel.catalogs.label\"></label><se-select id=\"se-catalog-selector-dropdown\" class=\"se-item-selector-panel__content__catalogs__yselect\" [(model)]=\"catalogInfo.catalogId\" [fetchStrategy]=\"catalogSelectorFetchStrategy\" [onChange]=\"onCatalogSelectorChange\"></se-select><label>{{ catalogInfo.name | seL10n | async }}</label></div><div class=\"se-item-selector-panel__content__item\"><label class=\"se-control-label\" translate=\"se.cms.catalogaware.panel.catalogsversion.label\"></label><se-select id=\"se-catalog-version-selector-dropdown\" class=\"se-item-selector-panel__content__catalog-version__yselect\" [(model)]=\"catalogInfo.catalogVersion\" [fetchStrategy]=\"catalogVersionSelectorFetchStrategy\" [onChange]=\"onCatalogVersionSelectorChange\" [searchEnabled]=\"false\" [(reset)]=\"resetCatalogVersionSelector\"></se-select></div><div class=\"se-item-selector-panel__content__item\" *ngIf=\"catalogInfo.catalogVersion\"><label class=\"se-control-label\">{{ catalogItemTypeI18nKey }}</label><se-select id=\"se-items-selector-dropdown\" [multiSelect]=\"true\" [controls]=\"true\" [(model)]=\"internalItemsSelected\" [onChange]=\"onItemsSelectorChange\" [fetchStrategy]=\"itemsSelectorFetchStrategy\" [(reset)]=\"resetItemsListSelector\" [itemComponent]=\"itemComponent\" [isReadOnly]=\"!isItemSelectorEnabled()\"></se-select></div></div></se-slider-panel>"
    );
     
    $templateCache.put(
        "MediaComponent.html", 
        "<div class=\"se-media\"><se-media-selector *ngIf=\"!image\" [id]=\"mediaSelectorId\" [isDisabled]=\"isFieldDisabled\" [mediaId]=\"mediaIdByLang[lang]\" (mediaIdChange)=\"onMediaIdChange($event)\"></se-media-selector><se-media-file-selector *ngIf=\"canShowFileSelector()\" [labelI18nKey]=\"'se.upload.image.to.library'\" [acceptedFileTypes]=\"acceptedFileTypes\" [selectionMode]=\"'upload'\" [disabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelect($event)\"></se-media-file-selector><se-media-upload-form *ngIf=\"image\" class=\"se-media-upload-form-wrapper\" [image]=\"image\" (onCancel)=\"resetImage()\" (onSelect)=\"onFileSelect($event)\" (onUploadSuccess)=\"onMediaUploaded($event)\"></se-media-upload-form><se-media-errors *ngIf=\"fileErrors.length > 0\" [errors]=\"fileErrors\"></se-media-errors></div>"
    );
     
    $templateCache.put(
        "MediaActionLabelComponent.html", 
        "<span class=\"se-media-action-label\" [ngClass]=\"{ 'se-media-action-label--disabled': state === 'disabled' }\" [translate]=\"i18nKey\"></span>"
    );
     
    $templateCache.put(
        "MediaAdvancedPropertiesComponent.html", 
        "<se-tooltip [appendTo]=\"'body'\" [placement]=\"'bottom'\" [isChevronVisible]=\"true\" [triggers]=\"['click']\" class=\"se-media-advanced-info\"><span se-tooltip-trigger class=\"se-media-advanced-info__trigger\"><span class=\"sap-icon--message-information se-media__action-icon se-media__action-icon--basic\" [title]=\"i18nKeys.INFORMATION | translate\"></span><se-media-action-label [i18nKey]=\"i18nKeys.INFORMATION\"></se-media-action-label></span><div se-tooltip-body><div class=\"se-media-advanced-info-body\"><div class=\"se-media-advanced-info-row advanced-information-description\" *ngIf=\"description\"><div class=\"se-media-advanced-info-row__label se-control-label\" [translate]=\"i18nKeys.DESCRIPTION\"></div><div class=\"se-media-advanced-info-row__description\">{{ description }}</div></div><div class=\"se-media-advanced-info-row advanced-information-code\"><div class=\"se-media-advanced-info-row__label se-control-label\" [translate]=\"i18nKeys.CODE\"></div><div class=\"se-media-advanced-info-row__description\">{{ code }}</div></div><div class=\"se-media-advanced-info-row advanced-information-alt-text\" *ngIf=\"altText\"><div class=\"se-media-advanced-info-row__label se-control-label\" [translate]=\"i18nKeys.ALT_TEXT\"></div><div class=\"se-media-advanced-info-row__description\">{{ altText }}</div></div></div></div></se-tooltip>"
    );
     
    $templateCache.put(
        "MediaContainerComponent.html", 
        "<div *ngIf=\"hasReadPermissionOnMediaRelatedTypes && advancedMediaContainerManagementEnabled\"><se-media-container-selector [eventNameAffix]=\"selectorEventNameAffix\" [isAdvancedCloning]=\"isAdvancedCloning()\" [initialName]=\"initialMediaContainerName\" [name]=\"getMediaContainerName()\" (nameChange)=\"onMediaContainerNameChange($event)\" (onCreate)=\"onMediaContainerCreate($event)\" (onRemove)=\"onMediaContainerRemove()\" (onSelect)=\"setMediaContainer($event)\" (onCreationInProgressChange)=\"onMediaContainerCreationInProgressChange($event)\"></se-media-container-selector></div><div class=\"se-media-container-field\" *ngIf=\"canShowMediaFormatWithUploadForm()\"><div class=\"se-media-container-field__media-list\"><se-media-format class=\"se-media-container-cell\" *ngFor=\"let format of field.options\" [ngClass]=\"getMediaContainerCellClassName(format.id)\" [errorMessages]=\"field.messages\" [isEditable]=\"field.editable\" [isUnderEdit]=\"isMediaFormatUnderEdit(format.id)\" [isFieldDisabled]=\"isFieldDisabled()\" [mediaUuid]=\"model[lang].medias[format.id]\" [mediaFormat]=\"format.id\" (onFileSelect)=\"onFileSelect($event, format.id)\" (onDelete)=\"removeMediaByFormat(format.id)\"></se-media-format></div><se-media-upload-form *ngIf=\"image\" class=\"se-media-upload-form-wrapper se-media-upload-form-wrapper--spaced\" [image]=\"image.file\" (onCancel)=\"resetImage()\" (onSelect)=\"onFileSelect($event)\" (onUploadSuccess)=\"onFileUploadSuccess($event, image.format)\"></se-media-upload-form><se-media-errors [errors]=\"fileValidationErrors\"></se-media-errors></div><div *ngIf=\"!hasReadPermissionOnMediaRelatedTypes\"><span translate=\"se.cms.media.typepermissions.error\" [translateParams]=\"{ containedTypes: field.containedTypes }\"></span></div>"
    );
     
    $templateCache.put(
        "MediaErrorsComponent.html", 
        "<div class=\"field-errors\"><div *ngFor=\"let error of errors\">{{ error.message | translate }}</div></div>"
    );
     
    $templateCache.put(
        "MediaFileSelectorComponent.html", 
        "<div class=\"se-file-selector\" [ngClass]=\"customClass\"><label *ngIf=\"!disabled\" class=\"se-file-selector__btn se-button se-button--text\" [ngClass]=\"{ 'se-button--disabled': disabled }\"><span class=\"sap-icon--share se-media__action-icon\" [ngClass]=\"{                'sap-icon--share': isReplaceMode(),                'sap-icon--upload': !isReplaceMode()            }\"></span> <span class=\"se-file-selector__label\" [translate]=\"labelI18nKey\"></span> <input type=\"file\" class=\"hide se-file-selector__input\" [accept]=\"buildAcceptedFileTypesList()\" (change)=\"onSelect($event.target.files)\"/></label></div>"
    );
     
    $templateCache.put(
        "MediaFormatComponent.html", 
        "<div class=\"se-media-format\" [ngClass]=\"mediaFormat\"><div class=\"se-media-format__screen-type\" [translate]=\"mediaFormatI18nKey\"></div><se-media-format-uploaded *ngIf=\"isMediaPreviewEnabled()\" [media]=\"media\" [replaceLabelI18nKey]=\"mediaSelectorI18nKeys.REPLACE\" [acceptedFileTypes]=\"acceptedFileTypes\" [isFieldDisabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelectorFileSelect($event)\" (onDelete)=\"onRemoveButtonClick()\"></se-media-format-uploaded><div class=\"se-media--absent\" *ngIf=\"isMediaAbsent()\"><se-media-file-selector *ngIf=\"isEditable\" [selectionMode]=\"'upload'\" [labelI18nKey]=\"mediaSelectorI18nKeys.UPLOAD\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"isFieldDisabled ? 'file-selector-disabled' : ''\" [disabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector><se-media-file-selector *ngIf=\"!isEditable\" [selectionMode]=\"'upload'\" [labelI18nKey]=\"mediaSelectorI18nKeys.UPLOAD\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"!isEditable ? 'file-selector-disabled' : ''\" [disabled]=\"!isEditable\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector></div><div *ngIf=\"isUnderEdit\" class=\"se-media--edit-wrapper\"><se-media-file-selector class=\"se-media--edit\" [labelI18nKey]=\"mediaSelectorI18nKeys.UPLOAD\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"'file-selector-disabled'\" [disabled]=\"true\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector><span class=\"se-media-preview--edit\" [translate]=\"mediaSelectorI18nKeys.UNDER_EDIT\"></span></div><ng-container *ngIf=\"!isUnderEdit\"><div class=\"error-input se-media-format__error\" *ngFor=\"let error of getErrors()\"><span>{{ error }}</span></div></ng-container></div>"
    );
     
    $templateCache.put(
        "MediaPreviewComponent.html", 
        "<se-tooltip [appendTo]=\"'body'\" [placement]=\"'bottom'\" [isChevronVisible]=\"true\" [triggers]=\"['click']\"><span se-tooltip-trigger><div class=\"sap-icon--search se-media-preview__icon\"></div></span><div se-tooltip-body><img class=\"se-media-preview__image\" [src]=\"imageUrl\"/></div></se-tooltip>"
    );
     
    $templateCache.put(
        "MediaRemoveButtonComponent.html", 
        "<button type=\"button\" class=\"se-media-action-btn se-media-remove-btn\" [disabled]=\"isDisabled\" (click)=\"clickHandler.emit($event)\"><span class=\"se-media__action-icon se-media__action-icon--delete sap-icon--delete\"></span> <span class=\"se-media-remove-btn-txt\" [ngClass]=\"{ 'se-media-remove-btn-txt--disabled': isDisabled }\" translate=\"se.media.format.remove\"></span></button>"
    );
     
    $templateCache.put(
        "MediaSelectorComponent.html", 
        "<div class=\"media-selector\"><se-select [id]=\"id\" [model]=\"mediaId\" (modelChange)=\"onMediaIdChange($event)\" [fetchStrategy]=\"fetchStrategy\" [isReadOnly]=\"isFieldDisabled\" [itemComponent]=\"mediaPrinterComponent\"></se-select></div>"
    );
     
    $templateCache.put(
        "MediaUploadFormComponent.html", 
        "<div class=\"se-media-upload-form\"><div class=\"se-media-upload-form__header\"><div class=\"se-media-upload-form__header-title\" translate=\"se.upload.image.to.library\"></div><div class=\"se-media-upload-form__header-actions\"><button type=\"button\" class=\"fd-button--light se-media-upload-btn__cancel fd-button--compact\" translate=\"se.upload.image.cancel\" (click)=\"cancel()\"></button> <button type=\"button\" class=\"fd-button se-media-upload-btn__submit fd-button--compact\" translate=\"se.upload.image.submit\" (click)=\"uploadMedia()\"></button></div></div><div class=\"se-media-upload-form__replace-file\"><div class=\"se-media-upload-form__file-name\">{{ image.name }}</div><se-media-file-selector [labelI18nKey]=\"'se.upload.image.replace'\" [acceptedFileTypes]=\"acceptedFileTypes\" (onFileSelect)=\"onFileSelect($event)\"></se-media-file-selector></div><form class=\"se-media-upload-form__file-info\"><se-media-upload-field [fieldName]=\"'code'\" [fieldValue]=\"imageParams.code\" [fieldErrors]=\"getErrorsForFieldByCode('code')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.code'\" (fieldValueChange)=\"onChangeFieldValue($event, 'code')\"></se-media-upload-field><se-media-upload-field [fieldName]=\"'description'\" [fieldValue]=\"imageParams.description\" [fieldErrors]=\"getErrorsForFieldByCode('description')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.description'\" (fieldValueChange)=\"onChangeFieldValue($event, 'description')\"></se-media-upload-field><se-media-upload-field [fieldName]=\"'alt-text'\" [fieldValue]=\"imageParams.altText\" [fieldErrors]=\"getErrorsForFieldByCode('altText')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.alt.text'\" (fieldValueChange)=\"onChangeFieldValue($event, 'altText')\"></se-media-upload-field></form><se-spinner [isSpinning]=\"isUploading\"></se-spinner></div>"
    );
     
    $templateCache.put(
        "catalogAwareSelectorTemplate.html", 
        "<div data-ng-if=\"ctrl.listIsEmpty()\"><button id=\"catalog-aware-selector-add-item\" type=\"button\" data-ng-if=\"ctrl.editable\" class=\"fd-button fd-button--compact se-catalog-aware-selector__add-item-btn\" data-ng-click=\"ctrl.openEditingPanel()\"><span translate=\"se.cms.catalogaware.newbutton.title\" translate-values=\"{catalogItemType: ctrl.catalogItemType}\" class=\"se-catalog-aware-selector__add-item-btn-text\"></span></button></div><div data-ng-if=\"!ctrl.listIsEmpty()\" class=\"se-catalog-aware-selector__content\"><div class=\"se-catalog-aware-selector__content__btn-wrapper\" data-ng-if=\"ctrl.editable\"><button type=\"button\" class=\"fd-button--light se-catalog-aware-selector__content__btn\" data-ng-click=\"ctrl.openEditingPanel()\">{{'se.cms.catalogaware.list.addmore' | translate}}</button></div><se-editable-list [id]=\"ctrl.id + '_list'\" [item-component]=\"ctrl.nodeComponent\" [(items)]=\"ctrl.itemsList\" [on-change]=\"ctrl.onListChange\" [editable]=\"ctrl.editable\" [(refresh)]=\"ctrl._refreshListWidget\" class=\"se-catalog-aware-selector__list\"></se-editable-list></div><se-item-selector-panel [default-items-selected]=\"ctrl.model\" [item-component]=\"ctrl.itemComponent\" [get-catalogs]=\"ctrl.getCatalogs\" [items-fetch-strategy]=\"ctrl.itemsFetchStrategy\" [catalog-item-type-i18n-key]=\"ctrl.catalogItemType\" [max-num-items]=\"ctrl.maxNumItems || 0\" (show-panel-change)=\"ctrl.setShowPanel($event)\" (on-change)=\"ctrl.onPanelChange($event)\"></se-item-selector-panel>"
    );
     
    $templateCache.put(
        "BreadcrumbComponent.html", 
        "<div class=\"se-breadcrumb\"><div *ngFor=\"let node of breadcrumb; index as idx; last as isLast\" class=\"se-breadcrumb__node\"><div class=\"se-breadcrumb__info\" [ngClass]=\"{'se-breadcrumb__info--last': isLast}\"><span class=\"se-breadcrumb__info--level\">{{ node.formattedLevel | translate: node }}</span> <span class=\"se-breadcrumb__info--name\">{{ node.name }}</span></div><div class=\"se-breadcrumb__divider\" *ngIf=\"idx < breadcrumb.length - 1\"><span class=\"sap-icon--navigation-right-arrow\"></span></div></div></div>"
    );
     
    $templateCache.put(
        "multiProductSelectorTemplate.html", 
        "<se-product-selector data-id=\"{{field.qualifier}}\" data-model=\"model\" data-qualifier=\"qualifier\" data-editable=\"field.editable\"></se-product-selector>"
    );
     
    $templateCache.put(
        "productSelectorTemplate.html", 
        "<se-catalog-aware-selector data-id=\"{{$ctrl.id}}\" data-ng-model=\"$ctrl.model[$ctrl.qualifier]\" data-item-component=\"$ctrl.productSelectorItemComponent\" data-node-component=\"$ctrl.productNodeComponent\" data-get-catalogs=\"$ctrl.getCatalogs\" data-items-fetch-strategy=\"$ctrl.itemsFetchStrategy\" data-catalog-item-type-key=\"se.cms.catalogaware.catalogitemtype.product\" data-max-num-items=\"$ctrl.maxNumItems\" data-editable=\"$ctrl.editable\"></se-catalog-aware-selector>"
    );
     
    $templateCache.put(
        "categorySelectorTemplate.html", 
        "<se-catalog-aware-selector data-id=\"{{$ctrl.id}}\" data-ng-model=\"$ctrl.model[$ctrl.qualifier]\" data-item-component=\"$ctrl.categorySelectorItemComponent\" data-node-component=\"$ctrl.categoryNodeComponent\" data-get-catalogs=\"$ctrl.getCatalogs\" data-items-fetch-strategy=\"$ctrl.itemsFetchStrategy\" data-catalog-item-type-key=\"se.cms.catalogaware.catalogitemtype.category\" data-editable=\"$ctrl.editable\"></se-catalog-aware-selector>"
    );
     
    $templateCache.put(
        "multiCategorySelectorTemplate.html", 
        "<se-category-selector data-id=\"{{field.qualifier}}\" data-model=\"model\" data-qualifier=\"qualifier\" data-editable=\"field.editable\"></se-category-selector>"
    );
     
    $templateCache.put(
        "NavigationNodePickerComponent.html", 
        "<div class=\"categoryTable\"><div class=\"tablehead clearfix hidden-xs se-navigation-editor-tree__head\"><div translate=\"se.ytree.template.header.name\" class=\"se-navigation-editor-tree__name col-md-offset-1 col-sm-5\"></div></div><se-tree [nodeUri]=\"nodeURI\" [rootNodeUid]=\"rootNodeUid\" [nodeComponent]=\"nodePickerRenderComponent\" [removeDefaultTemplate]=\"removeDefaultTemplate\" [nodeActions]=\"actions\"></se-tree></div>"
    );
     
    $templateCache.put(
        "NavigationNodePickerRenderComponent.html", 
        "<div class=\"se-tree-node__name col-xs-6\" [title]=\"node.name | seL10n | async\"><span>{{ node.name | seL10n | async }}</span></div><div class=\"col-sm-4 pull-right tree-node se-navigation-picker-renderer\" (click)=\"pick(node)\" *ngIf=\"isEditable()\"><a translate=\"se.cms.navigationcomponent.management.node.selection.select.action\" class=\"btn btn-link se-navigation-picker-renderer__btn\"></a></div>"
    );
     
    $templateCache.put(
        "NavigationNodeSelectorComponent.html", 
        "<div *ngIf=\"isReady\"><div *ngIf=\"cmsItem[qualifier]\" class=\"se-navigation-mode\"><div class=\"se-navigation__node\"><se-breadcrumb class=\"se-navigation__node-breadcrumb\" [nodeUuid]=\"cmsItem[qualifier]\" [uriContext]=\"uriContext\"></se-breadcrumb><div class=\"se-navigation__node-button\"><button class=\"btn btn-link btn-block se-navigation__button\" (click)=\"remove($event)\" [disabled]=\"!field.editable\" translate=\"se.cms.navigationcomponent.management.node.selection.remove.action\"></button></div></div><se-navigation-editor-tree [uriContext]=\"uriContext\" [readOnly]=\"true\" [rootNodeUid]=\"nodeUid\"></se-navigation-editor-tree></div><div *ngIf=\"!cmsItem[qualifier]\"><label translate=\"se.cms.navigationcomponent.management.node.selection.invite.action\"></label><se-navigation-node-picker [uriContext]=\"uriContext\" [editable]=\"field.editable\"></se-navigation-node-picker></div></div>"
    );
     
    $templateCache.put(
        "NewPageDisplayConditionComponent.html", 
        "<div *ngIf=\"isReady\"><div class=\"form-group\"><label for=\"page-condition-selector-id\" class=\"se-control-label\" translate=\"se.cms.page.condition.selection.label\"></label><se-select id=\"page-condition-selector-id\" [model]=\"conditionSelected.label\" (modelChange)=\"onConditionChange($event)\" [fetchStrategy]=\"conditionSelectorFetchStrategy\" [onChange]=\"onDataChange\" [searchEnabled]=\"false\"></se-select><span class=\"se-form-help-message\"><span [translate]=\"conditionSelected.description\"></span></span></div><div *ngIf=\"showPrimarySelector()\" class=\"form-group\"><label for=\"page-condition-primary-selector-id\" class=\"se-control-label\" translate=\"se.cms.page.condition.primary.association.label\"></label><se-select id=\"page-condition-primary-selector-id\" [model]=\"primarySelectedModel\" (modelChange)=\"primarySelectedModelOnChange($event)\" [fetchStrategy]=\"primaryPageChoicesFetchStrategy\" [onChange]=\"onDataChange\"></se-select><span *ngIf=\"primarySelected?.label\" class=\"se-form-help-message\"><span>{{ 'se.cms.page.label.label' | translate }}: {{ primarySelected.label }}</span></span></div><div *ngIf=\"showHomePageWidget()\"><div class=\"fd-form__item\"><input type=\"checkbox\" id=\"set-homepage-checkbox\" class=\"se-component-item--details se-component-homepage__checkbox-input fd-form__control\" name=\"clone-on-drop\" (ngModelChange)=\"onHomePageChange($event)\" [ngModel]=\"homepage\"/> <label class=\"se-control-label se-component-homepage--label fd-form__label\" for=\"set-homepage-checkbox\" translate=\"se.cms.display.conditions.homepage.set\"></label></div><label class=\"se-control-label se-component-homepage--label\" for=\"set-homepage-checkbox\" *ngIf=\"showReplaceLabel\">{{ \"se.cms.display.conditions.homepage.replace\" | translate: { currentHomepage: currentHomePageName } }}</label></div></div>"
    );
     
    $templateCache.put(
        "SelectPageTemplateComponent.html", 
        "<div class=\"se-page-type-step-template\"><div class=\"se-add-page__sub-header\"><div class=\"se-add-page__sub-header-title\">{{ 'se.cms.addpagewizard.pagetemplate.description' | translate }}</div><div class=\"se-input-group se-page-type-step-template-list-search\"><input type=\"text\" class=\"se-input-group__input-area ySEPage-list-search-input\" placeholder=\"{{ 'se.cms.pagewizard.templatestep.searchplaceholder' | translate }}\" [ngModel]=\"searchString\" (ngModelChange)=\"onSearchChange($event)\" name=\"query\"/> <span class=\"sap-icon--search se-input-group__addon\"></span><div *ngIf=\"searchString\" class=\"se-input-group__addon se-input-group__clear-btn\" (click)=\"clearSearch()\"><span class=\"sap-icon--decline\"></span></div></div></div><div class=\"se-add-page__list fd-menu\" *ngIf=\"pageTemplates.length > 0\"><div *ngFor=\"let template of filteredPageTemplates\" [ngClass]=\"{ 'is-selected': isSelected(template)}\" (click)=\"templateSelected(template)\" class=\"se-add-page__item se-add-page__item--page-template fd-menu__item\"><div class=\"se-add-page__item-title\">{{ template.name }}</div></div></div></div>"
    );
     
    $templateCache.put(
        "SelectPageTypeComponent.html", 
        "<div><div class=\"se-add-page__sub-header\">{{ 'se.cms.addpagewizard.pagetype.description' | translate }}</div><div class=\"se-add-page__list fd-menu\" *ngIf=\"pageTypes.length > 0\"><div class=\"se-add-page__item fd-menu__item\" *ngFor=\"let pageType of pageTypes\" [ngClass]=\"{ 'is-selected': isSelected(pageType)}\" (click)=\"selectType(pageType)\"><div class=\"se-add-page__item-title\">{{ pageType.name | seL10n | async }}</div><div class=\"se-add-page__item-description\">{{ pageType.description | seL10n | async }}</div></div></div></div>"
    );
     
    $templateCache.put(
        "SelectTargetCatalogVersionComponent.html", 
        "<div class=\"target-catalog-version-selector-wrapper form-group\"><label for=\"target-catalog-version-selector-id\" class=\"se-control-label\" translate=\"se.cms.clonepagewizard.options.targetcatalogversion.label\"></label><se-select *ngIf=\"!!catalogVersions.length\" id=\"se-catalog-version-selector-dropdown\" [(model)]=\"selectedCatalogVersion\" [fetchStrategy]=\"catalogVersionSelectorFetchStrategy\" [onChange]=\"onSelectionChange\" [searchEnabled]=\"false\" (getApi)=\"setSelectApi($event)\"></se-select><div *ngIf=\"catalogVersionContainsPageWithSameLabel\"><span class=\"help-block\" translate=\"se.cms.clonepagewizard.options.targetcatalogversion.label.exists.message\"></span></div><div *ngIf=\"pageAlreadyExists()\"><span class=\"help-block\" translate=\"se.cms.clonepagewizard.options.targetcatalogversion.pagetype.exists.message\"></span></div></div>"
    );
     
    $templateCache.put(
        "ComponentCloneInfoComponent.html", 
        "<se-message *ngIf=\"catalogVersionContainsPageWithSameTypeCode\" type=\"warning\"><span se-message-description translate=\"se.cms.clonepagewizard.pageinfo.targetcatalogversion.pagetype.exists.message\" [translateParams]=\"{ typeCode: pageTypeCode }\"></span></se-message><se-generic-editor [id]=\"genericEditorId\" [structure]=\"structure\" [content]=\"content\" [(submit)]=\"submitInternal\" [(reset)]=\"resetInternal\" [(isDirty)]=\"isDirtyInternal\" [(isValid)]=\"isValidInternal\" (getApi)=\"setGenericEditorApi($event)\"></se-generic-editor>"
    );
     
    $templateCache.put(
        "ComponentCloneOptionFormComponent.html", 
        "<label for=\"components-cloned-selector-id\" class=\"se-control-label\"><span translate=\"se.cms.clonepagewizard.options.title\"></span><se-help><span translate=\"se.cms.clonepagewizard.options.tooltip\"></span></se-help></label><div id=\"components-cloned-selector-id\"><div class=\"se-form-control-row\"><input class=\"components-cloned-option-id fd-form__control\" type=\"radio\" name=\"componentsclone\" id=\"reference-cloning\" [(ngModel)]=\"componentInSlotOption\" (click)=\"updateComponentInSlotOption(CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.REFERENCE_EXISTING)\" [value]=\"CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.REFERENCE_EXISTING\"/> <label for=\"reference-cloning\" translate=\"se.cms.clonepagewizard.options.existing\"></label></div><div class=\"se-form-control-row\"><input class=\"components-cloned-option-id fd-form__control\" type=\"radio\" id=\"deep-cloning\" name=\"componentsclone\" [(ngModel)]=\"componentInSlotOption\" (click)=\"updateComponentInSlotOption(CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.CLONE)\" [value]=\"CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.CLONE\"/> <label for=\"deep-cloning\" translate=\"se.cms.clonepagewizard.options.copies\"></label></div></div>"
    );
     
    $templateCache.put(
        "VersionItemComponent.html", 
        "<div class=\"se-version-item\" [ngClass]=\"{ 'se-version-item--selected': isSelectedVersion() }\"><div class=\"se-version-item__header\" [title]=\"pageVersion.label\"><button class=\"se-version-item__label se-button--text\" (click)=\"selectVersion()\">{{ pageVersion.label }}</button><se-version-item-menu *ngIf=\"isVersionMenuEnabled()\" [item]=\"pageVersion\"></se-version-item-menu></div><div class=\"se-version-item__date\">{{ pageVersion.creationtime | date: 'M/d/yy h:mm a' }}</div><div class=\"se-version-item__description\" *ngIf=\"pageVersion.description\"><se-more-text class=\"se-version-item__description-text\" [text]=\"pageVersion.description\" [limit]=\"32\" [ellipsis]=\"'...'\" [capitalizeLabel]=\"true\"></se-more-text></div></div>"
    );
     
    $templateCache.put(
        "VersionItemMenuComponent.html", 
        "<se-popup-overlay class=\"se-version-item-menu__popup-anchor\" [ngClass]=\"{ 'se-version-item-menu__popup-anchor--open': isMenuOpen }\" [popupOverlay]=\"popupConfig\" [popupOverlayTrigger]=\"isMenuOpen\" (popupOverlayOnHide)=\"hideMenu()\"><div *ngIf=\"menuItems.length > 0\" (click)=\"onButtonClick($event)\" class=\"sap-icon--overflow se-version-item-menu__toggle\"></div><div se-popup-overlay-body class=\"se-version-item-menu fd-menu\"><div class=\"se-version-item-menu__item fd-menu__list\" *ngFor=\"let item of menuItems\" (click)=\"executeItemCallback(item)\"><span class=\"se-version-item-menu__item-link fd-menu__item\">{{ item.i18nKey | translate }}</span></div></div></se-popup-overlay>"
    );
     
    $templateCache.put(
        "VersionsSearchComponent.html", 
        "<div class=\"se-versions-panel__search\" *ngIf=\"showSearchControls\"><div class=\"se-input-group\"><input type=\"text\" class=\"se-input-group__input-area\" name=\"search-term\" [ngModel]=\"searchTerm\" (ngModelChange)=\"onChange($event)\" [placeholder]=\"'se.cms.versions.search.placeholder' | translate\"/> <span class=\"sap-icon--search se-input-group__addon\"></span> <button class=\"se-input-group__addon se-input-group__clear-btn se-button--text\" [style.visibility]=\"showResetButton ? 'visible' : 'hidden'\" (click)=\"resetSearchBox()\"><span class=\"sap-icon--decline\"></span></button></div><span class=\"se-versions-panel__count\" [translate]=\"'se.cms.versions.search.versions.found'\" [translateParams]=\"{ versionsFound: versionsFoundCount }\"></span></div>"
    );
     
    $templateCache.put(
        "PageStatusComponent.html", 
        "<div class=\"se-page-status\"><div class=\"se-page-status__icon\" [ngClass]=\"statusIconCssClass\"></div><div class=\"se-page-status__label\">{{ statusLabel | translate }}</div></div>"
    );
     
    $templateCache.put(
        "WorkflowActionItemComponent.html", 
        "<div class=\"se-workflow-action-item\" [ngClass]=\"getWorkflowActionStatusClass()\"><se-collapsible-container class=\"se-catalog-details__collapse se-collapsible-container--noshadow fd-panel\" [id]=\"workflowAction.code\" (getApi)=\"setCollapsibleContainerApi($event)\"><se-collapsible-container-header><div class=\"fd-panel__header\"><div class=\"fd-panel__head\"><h1 class=\"fd-panel__title\">{{ workflowAction.name | seL10n | async }}</h1><p class=\"fd-panel__description\">{{ getReadableStatus() | translate }} {{ getActiveSince() }}</p></div></div><div class=\"fd-panel__body\">{{ workflowAction.description | seL10n | async }}<div *ngIf=\"canShowDecisionButtons()\" class=\"se-workflow-action-item__decision-buttons fd-dropdown\"><div class=\"fd-popover\"><div class=\"fd-popover__control\"><div [ngClass]=\"{ 'fd-button-split': workflowAction.decisions.length > 1 }\"><button class=\"se-workflow-action-item__decision-button fd-button--compact\" [id]=\"workflowAction.code + '-decision-button'\" (click)=\"onMainButtonClick($event, workflowAction.decisions[0])\" type=\"button\">{{ workflowAction.decisions[0].name | seL10n | async }}</button><se-popup-overlay [popupOverlay]=\"{                                        halign: 'right',                                        valign: 'bottom'                                    }\" [popupOverlayTrigger]=\"isMenuOpen\" (popupOverlayOnHide)=\"onMenuHide()\"><button *ngIf=\"workflowAction.decisions.length > 1\" [id]=\"workflowAction.code + '-decision-split-button'\" class=\"fd-button--compact menu-button sap-icon--slim-arrow-down\" (click)=\"onSplitButtonClick($event)\"></button><div se-popup-overlay-body class=\"fd-popover__body fd-popover__body--right fd-popover__body--no-arrow se-workflow-action-item__decision-list\"><nav class=\"fd-menu\"><ul class=\"fd-menu__list\"><li *ngFor=\"let decision of workflowAction.decisions\"><a class=\"fd-menu__item se-workflow-action-item__decision\" (click)=\"onMainButtonClick($event, decision)\">{{ decision.name | seL10n | async }}</a></li></ul></nav></div></se-popup-overlay></div></div></div></div></div></se-collapsible-container-header><se-collapsible-container-content><div class=\"se-workflow-action-item__content\" *ngIf=\"canShowComments()\"><span *ngIf=\"!hasComments\" class=\"se-workflow-action-item__comment-list fd-has-font-style-italic fd-has-color-text-4\" [translate]=\"'se.cms.actionitem.page.workflow.action.no.comments.available'\"></span><se-infinite-scrolling [pageSize]=\"pageSize\" [fetchPage]=\"fetchPageOfComments\" (itemsChange)=\"onCommentsLoaded($event)\"><div *ngFor=\"let actionComment of workflowActionComments; trackBy: trackByIndex\"><se-workflow-action-comment [workflowAction]=\"workflowAction\" [actionComment]=\"actionComment\"></se-workflow-action-comment></div></se-infinite-scrolling></div></se-collapsible-container-content></se-collapsible-container></div>"
    );
     
    $templateCache.put(
        "WorkflowActionCommentComponent.html", 
        "<ng-container *ngIf=\"isDecisionComment; then decisionComment; else generalComment\"></ng-container><ng-template #decisionComment><div class=\"se-workflow-action-comment\"><div class=\"fd-tile\"><div class=\"fd-tile__content\"><h2 class=\"fd-tile__title se-workflow-action-comment__header sap-icon--workflow-tasks sap-icon--m\" [class.sap-icon--flip-h]=\"!isIncomingDecision()\">{{ actionComment.decisionName }}</h2><p class=\"fd-has-type-minus-1\">{{ actionComment.authorName }} | {{ createdAgo }}</p><p *ngIf=\"!!actionComment.text\"><strong>{{'se.cms.page.workflow.action.item.comment.header' | translate}}:</strong><ng-container *ngTemplateOutlet=\"comment\"></ng-container></p></div></div></div></ng-template><ng-template #generalComment><div class=\"se-workflow-action-comment\"><div class=\"fd-tile\"><div class=\"fd-tile__content\"><h2 class=\"fd-panel__title\">{{'se.cms.page.workflow.action.item.comment.header' | translate}}</h2><p>{{ createdAgo }}</p><p class=\"se-workflow-action-comment__author\">{{ actionComment.authorName }}</p><ng-container *ngTemplateOutlet=\"comment\"></ng-container></div></div></div></ng-template><ng-template #comment><se-more-text class=\"se-workflow-action-comment__body\" [ellipsis]=\"'...'\" [text]=\"actionComment.text\"></se-more-text></ng-template>"
    );
     
    $templateCache.put(
        "MediaContainerSelectorItemComponent.html", 
        "<div class=\"media-container-selector-item__row\"><img class=\"media-container-selector-item__img\" [ngClass]=\"{ 'media-container-selector-item__img--selected': isSelected }\" [src]=\"getThumbnailUrl(item.thumbnailUrl)\"/><div class=\"media-container-selector-item__label\">{{ item.qualifier }}</div></div>"
    );
     
    $templateCache.put(
        "MediaContainerSelectorComponent.html", 
        "<se-generic-editor-dropdown [id]=\"id\" [field]=\"field\" [qualifier]=\"field.qualifier\" [model]=\"mediaContainerNameModel\" [showRemoveButton]=\"true\" [itemComponent]=\"itemComponent\" [actionableSearchItem]=\"actionableSearchItem\"></se-generic-editor-dropdown><div *ngIf=\"isSelected() || creationInProgress\"><label class=\"se-control-label required se-media-container-name-label\">{{ 'se.cms.media.responsive.name' | lowercase | translate }}</label> <input type=\"text\" name=\"media-container-qualifier\" [id]=\"'media-container-qualifier-' + id\" class=\"fd-form-control\" [ngModel]=\"name\" (ngModelChange)=\"onNameChange($event)\" [readOnly]=\"isNameReadOnly()\"/></div>"
    );
     
    $templateCache.put(
        "MediaFormatUploadedComponent.html", 
        "<div class=\"se-media--present\"><div class=\"se-media--present-img-container se-media-preview-container\"><se-media-preview [imageUrl]=\"media.url\"></se-media-preview><div class=\"se-media-preview__image-wrapper\"><img class=\"se-media-preview__image-thumbnail\" [src]=\"media.url\"/></div></div><se-media-advanced-properties [code]=\"media.code\" [description]=\"media.description\" [altText]=\"media.altText\"></se-media-advanced-properties><se-media-file-selector [labelI18nKey]=\"replaceLabelI18nKey\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"'media-format-present-replace' + (isFieldDisabled ? ' file-selector-disabled' : '')\" [disabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector><se-media-remove-button [isDisabled]=\"isFieldDisabled\" (clickHandler)=\"onRemoveButtonClick()\"></se-media-remove-button></div>"
    );
     
    $templateCache.put(
        "MediaPrinterComponent.html", 
        "<div class=\"se-media-selector\" *ngIf=\"isSelected\"><span class=\"se-media-selector__left-section se-media-preview-container\"><se-media-preview [imageUrl]=\"media.url\"></se-media-preview><img class=\"se-media-preview__image-thumbnail\" [src]=\"media.url\"/> </span><span class=\"se-media-selector__right-section\"><se-media-advanced-properties [code]=\"media.code\" [description]=\"media.description\" [altText]=\"media.altText\"></se-media-advanced-properties><button class=\"se-media-action-btn replace-image\" [disabled]=\"isDisabled()\"><span class=\"sap-icon--share se-media__action-icon\"></span><se-media-action-label [state]=\"isDisabled() ? 'disabled' : null\" [i18nKey]=\"'se.upload.image.replace'\"></se-media-action-label></button><se-media-remove-button [isDisabled]=\"isDisabled()\" (clickHandler)=\"select.removeSelectedOption($event, media)\"></se-media-remove-button></span></div><div class=\"se-media-selector__search\" *ngIf=\"!isSelected\"><div class=\"se-media-selector__search-img-wrapper\"><img [src]=\"media.url\" class=\"se-media-selector__search-img\"/></div><div class=\"se-media-selector__search-name\">{{ media.code }}</div></div>"
    );
     
    $templateCache.put(
        "MediaUploadFieldComponent.html", 
        "<div class=\"se-media-upload__file-info-field\" [ngClass]=\"getContainerClassName()\"><label class=\"se-control-label\" [ngClass]=\"{ 'se-media-upload-has-error': hasError(), required: isRequired }\" [translate]=\"labelI18nKey\"></label> <input type=\"text\" [ngClass]=\"{ 'is-invalid': hasError() }\" class=\"fd-form__control\" [attr.name]=\"fieldName\" [ngModel]=\"fieldValue\" (ngModelChange)=\"onChangeValue($event)\"/> <span class=\"upload-field-error fd-form__message fd-form__message--error\" [ngClass]=\"getErrorClassName()\" *ngFor=\"let error of fieldErrors\">{{ error | translate }}</span></div>"
    );
     
    $templateCache.put(
        "ProductNodeComponent.html", 
        "<div class=\"se-product-row\"><div class=\"se-product-node\" [ngClass]=\"{            'se-product-node--no-drag' : !parent.dragEnabled,            'se-product-node--drag': parent.dragEnabled         }\"><img class=\"se-product-row__img\" [src]=\"node.thumbnail.url || '/cmssmartedit/images/product_thumbnail_default.png'\" alt=\"product image\"/><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"node.name | seL10n  | async\">{{ node.name | seL10n | async }}</div><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"node.code\">{{ node.code }}</div><div class=\"se-product-row__catalog se-nowrap-ellipsis\" title=\"{{ node.catalogId }} - {{ node.catalogVersion }}\">{{ node.catalogId }} - {{ node.catalogVersion }}</div><se-dropdown-menu *ngIf=\"parent.dragEnabled\" [dropdownItems]=\"dropdownItems\" [selectedItem]=\"node\" class=\"pull-right se-tree-node__actions--more-menu\"></se-dropdown-menu></div></div>"
    );
     
    $templateCache.put(
        "ProductSelectorItemComponent.html", 
        "<div class=\"se-product-row\"><div class=\"se-product-node\"><img class=\"se-product-row__img\" [src]=\"getThumbnailUrl(item.thumbnail?.url)\" alt=\"product image\"/><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"item.name | seL10n | async\">{{ item.name | seL10n | async }}</div><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"item.code\">{{ item.code }}</div><div class=\"se-product-row__catalog\"><div class=\"se-nowrap-ellipsis\" title=\"{{ item.catalogId }} - {{ item.catalogVersion }}\">{{ item.catalogId }} - {{ item.catalogVersion }}</div></div></div></div>"
    );
     
    $templateCache.put(
        "CategoryNodeComponent.html", 
        "<div class=\"se-product-row\"><div class=\"se-category-node\" [ngClass]=\"{          'se-category-node--no-drag': !parent.dragEnabled,          'se-category-node--drag': parent.dragEnabled        }\"><div class=\"se-product-row__product\" [title]=\"node.name | seL10n | async\">{{ node.name | seL10n | async }}</div><div class=\"se-product-row__product\" [title]=\"node.code\">{{ node.code }}</div><div class=\"se-product-row__catalog\" title=\"{{ node.catalogId }} - {{ node.catalogVersion }}\">{{ node.catalogId }} - {{ node.catalogVersion }}</div><div><se-dropdown-menu *ngIf=\"parent.dragEnabled\" [dropdownItems]=\"dropdownItems\" [selectedItem]=\"node\" class=\"pull-right se-tree-node__actions--more-menu\"></se-dropdown-menu></div></div></div>"
    );
     
    $templateCache.put(
        "CategorySelectorItemComponent.html", 
        "<div class=\"se-product-row\"><div class=\"se-category-row-container--item\"><div class=\"se-product-row__product\" [title]=\"item.name | seL10n | async\">{{ item.name | seL10n | async }}</div><div class=\"se-product-row__product\" [title]=\"item.code\">{{ item.code }}</div><div class=\"se-product-row__catalog\" title=\"{{ item.catalogId }} - {{ item.catalogVersion }}\">{{ item.catalogId }} - {{ item.catalogVersion }}</div></div></div>"
    );
    
      }]);
    })();

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
/**
 * Backwards compatibility for partners and downstream teams
 * The deprecated modules below were moved to cmsSmarteditServicesModule or cmssmarteditContainer
 *
 * IMPORANT: THE DEPRECATED MODULES WILL NOT BE AVAILABLE IN FUTURE RELEASES
 */
/* @internal */
var deprecatedSince1905 = function () {
    angular$1.module('oldModule', ['newModule']);
    angular$1.module('pageServiceModule', ['cmsSmarteditServicesModule']);
};
var deprecatedSince1911 = function () {
    angular$1.module('cmsitemsRestService', ['cmsSmarteditServicesModule']);
};
var deprecatedSince2005 = function () {
    angular$1.module('catalogVersionRestServiceModule', ['cmssmarteditContainer']);
};
var deprecate = function () {
    deprecatedSince1905();
    deprecatedSince1911();
    deprecatedSince2005();
};

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
/**
 * @ngdoc overview
 * @name genericEditorWidgetsModule
 *
 * @description
 * Module containing all the generic editor widgets.
 */
var /* @ngInject */ GenericEditorWidgetsModule = /** @class */ (function () {
    function /* @ngInject */ GenericEditorWidgetsModule() {
    }
    /* @ngInject */ GenericEditorWidgetsModule = __decorate([
        smarteditcommons.SeModule({
            imports: [smarteditcommons.YEditableListModule]
        })
    ], /* @ngInject */ GenericEditorWidgetsModule);
    return /* @ngInject */ GenericEditorWidgetsModule;
}());

window.__smartedit__.addDecoratorPayload("Component", "ProductNodeComponent", {
    selector: 'se-product-node',
    template: "<div class=\"se-product-row\"><div class=\"se-product-node\" [ngClass]=\"{\n            'se-product-node--no-drag' : !parent.dragEnabled,\n            'se-product-node--drag': parent.dragEnabled \n        }\"><img class=\"se-product-row__img\" [src]=\"node.thumbnail.url || '/cmssmartedit/images/product_thumbnail_default.png'\" alt=\"product image\"/><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"node.name | seL10n  | async\">{{ node.name | seL10n | async }}</div><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"node.code\">{{ node.code }}</div><div class=\"se-product-row__catalog se-nowrap-ellipsis\" title=\"{{ node.catalogId }} - {{ node.catalogVersion }}\">{{ node.catalogId }} - {{ node.catalogVersion }}</div><se-dropdown-menu *ngIf=\"parent.dragEnabled\" [dropdownItems]=\"dropdownItems\" [selectedItem]=\"node\" class=\"pull-right se-tree-node__actions--more-menu\"></se-dropdown-menu></div></div>",
    styles: [".se-product-node{display:grid;grid-template-columns:1fr 5fr 5fr 7fr;grid-column-gap:12px;width:100%;align-items:center;padding:0 8px}.se-product-node--no-drag{grid-template-columns:1fr 6fr 6fr 7fr;cursor:default}.se-product-node--drag{grid-template-columns:1fr 5fr 5fr 7fr .5fr}", ".se-product-row__catalog,.se-product-row__product{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;text-align:left}.se-product-row__img{padding:2px;width:36px;height:36px;font-size:.35rem}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ ProductNodeComponent = /** @class */ (function () {
    ProductNodeComponent.$inject = ["node", "parent"];
    function /* @ngInject */ ProductNodeComponent(node, parent) {
        this.node = node;
        this.parent = parent;
        var getDropdownItems = this.parent.nodeActions.getDropdownItems;
        this.dropdownItems = getDropdownItems();
    }
    /* @ngInject */ ProductNodeComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-product-node',
            template: "<div class=\"se-product-row\"><div class=\"se-product-node\" [ngClass]=\"{\n            'se-product-node--no-drag' : !parent.dragEnabled,\n            'se-product-node--drag': parent.dragEnabled \n        }\"><img class=\"se-product-row__img\" [src]=\"node.thumbnail.url || '/cmssmartedit/images/product_thumbnail_default.png'\" alt=\"product image\"/><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"node.name | seL10n  | async\">{{ node.name | seL10n | async }}</div><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"node.code\">{{ node.code }}</div><div class=\"se-product-row__catalog se-nowrap-ellipsis\" title=\"{{ node.catalogId }} - {{ node.catalogVersion }}\">{{ node.catalogId }} - {{ node.catalogVersion }}</div><se-dropdown-menu *ngIf=\"parent.dragEnabled\" [dropdownItems]=\"dropdownItems\" [selectedItem]=\"node\" class=\"pull-right se-tree-node__actions--more-menu\"></se-dropdown-menu></div></div>",
            styles: [".se-product-node{display:grid;grid-template-columns:1fr 5fr 5fr 7fr;grid-column-gap:12px;width:100%;align-items:center;padding:0 8px}.se-product-node--no-drag{grid-template-columns:1fr 6fr 6fr 7fr;cursor:default}.se-product-node--drag{grid-template-columns:1fr 5fr 5fr 7fr .5fr}", ".se-product-row__catalog,.se-product-row__product{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;text-align:left}.se-product-row__img{padding:2px;width:36px;height:36px;font-size:.35rem}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(0, core.Inject(smarteditcommons.TREE_NODE)),
        __param(1, core.Inject(core.forwardRef(function () { return smarteditcommons.TreeComponent; }))),
        __metadata("design:paramtypes", [Object, smarteditcommons.TreeComponent])
    ], /* @ngInject */ ProductNodeComponent);
    return /* @ngInject */ ProductNodeComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "ProductSelectorItemComponent", {
    selector: 'se-product-selector-item',
    template: "<div class=\"se-product-row\"><div class=\"se-product-node\"><img class=\"se-product-row__img\" [src]=\"getThumbnailUrl(item.thumbnail?.url)\" alt=\"product image\"/><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"item.name | seL10n | async\">{{ item.name | seL10n | async }}</div><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"item.code\">{{ item.code }}</div><div class=\"se-product-row__catalog\"><div class=\"se-nowrap-ellipsis\" title=\"{{ item.catalogId }} - {{ item.catalogVersion }}\">{{ item.catalogId }} - {{ item.catalogVersion }}</div></div></div></div>",
    styles: [".se-product-node{display:grid;grid-template-columns:1fr 5fr 5fr 7fr;grid-column-gap:12px;width:100%;align-items:center;padding:0 8px}.se-product-node--no-drag{grid-template-columns:1fr 6fr 6fr 7fr;cursor:default}.se-product-node--drag{grid-template-columns:1fr 5fr 5fr 7fr .5fr}", ".se-product-row__catalog,.se-product-row__product{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;text-align:left}.se-product-row__img{padding:2px;width:36px;height:36px;font-size:.35rem}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ ProductSelectorItemComponent = /** @class */ (function () {
    ProductSelectorItemComponent.$inject = ["data"];
    function /* @ngInject */ ProductSelectorItemComponent(data) {
        this.data = data;
        this.defaultThumbnail = cmscommons.IMAGES_URL + "/product_thumbnail_default.png";
        (this.item = data.item);
    }
    /* @ngInject */ ProductSelectorItemComponent.prototype.getThumbnailUrl = function (url) {
        return url || this.defaultThumbnail;
    };
    ProductSelectorItemComponent.prototype.getThumbnailUrl.$inject = ["url"];
    /* @ngInject */ ProductSelectorItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-product-selector-item',
            template: "<div class=\"se-product-row\"><div class=\"se-product-node\"><img class=\"se-product-row__img\" [src]=\"getThumbnailUrl(item.thumbnail?.url)\" alt=\"product image\"/><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"item.name | seL10n | async\">{{ item.name | seL10n | async }}</div><div class=\"se-product-row__product se-nowrap-ellipsis\" [title]=\"item.code\">{{ item.code }}</div><div class=\"se-product-row__catalog\"><div class=\"se-nowrap-ellipsis\" title=\"{{ item.catalogId }} - {{ item.catalogVersion }}\">{{ item.catalogId }} - {{ item.catalogVersion }}</div></div></div></div>",
            styles: [".se-product-node{display:grid;grid-template-columns:1fr 5fr 5fr 7fr;grid-column-gap:12px;width:100%;align-items:center;padding:0 8px}.se-product-node--no-drag{grid-template-columns:1fr 6fr 6fr 7fr;cursor:default}.se-product-node--drag{grid-template-columns:1fr 5fr 5fr 7fr .5fr}", ".se-product-row__catalog,.se-product-row__product{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;text-align:left}.se-product-row__img{padding:2px;width:36px;height:36px;font-size:.35rem}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(0, core.Inject(smarteditcommons.ITEM_COMPONENT_DATA_TOKEN)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ ProductSelectorItemComponent);
    return /* @ngInject */ ProductSelectorItemComponent;
}());

var PRODUCT_CATEGORY_RESOURCE_BASE_URI = '/cmssmarteditwebservices/v1/sites/:siteUID/categories';
var PRODUCT_CATEGORY_RESOURCE_URI = PRODUCT_CATEGORY_RESOURCE_BASE_URI + "/:categoryUID";
var PRODUCT_CATEGORY_SEARCH_RESOURCE_URI = '/cmssmarteditwebservices/v1/productcatalogs/:catalogId/versions/:catalogVersion/categories';
var /* @ngInject */ ProductCategoryService = /** @class */ (function () {
    ProductCategoryService.$inject = ["restServiceFactory", "languageService"];
    function /* @ngInject */ ProductCategoryService(restServiceFactory, languageService) {
        this.languageService = languageService;
        this.productCategoryService = restServiceFactory.get(PRODUCT_CATEGORY_RESOURCE_URI);
        this.productCategorySearchService = restServiceFactory.get(PRODUCT_CATEGORY_SEARCH_RESOURCE_URI);
    }
    /* @ngInject */ ProductCategoryService.prototype.getCategoryById = function (siteUID, categoryUID) {
        return this.productCategoryService.get({
            siteUID: siteUID,
            categoryUID: categoryUID
        });
    };
    ProductCategoryService.prototype.getCategoryById.$inject = ["siteUID", "categoryUID"];
    /* @ngInject */ ProductCategoryService.prototype.getCategories = function (payload) {
        var _this = this;
        this._validateProductCatalogInfo(payload);
        return this.languageService.getResolveLocale().then(function (langIsoCode) {
            return _this.productCategorySearchService.page({
                catalogId: payload.catalogId,
                catalogVersion: payload.catalogVersion,
                text: payload.mask,
                pageSize: payload.pageSize,
                currentPage: payload.currentPage,
                langIsoCode: langIsoCode
            });
        });
    };
    ProductCategoryService.prototype.getCategories.$inject = ["payload"];
    /* @ngInject */ ProductCategoryService.prototype._validateProductCatalogInfo = function (productCatalogInfo) {
        if (!productCatalogInfo.siteUID) {
            throw Error('[productService] - site UID missing.');
        }
        if (!productCatalogInfo.catalogId) {
            throw Error('[productService] - catalog ID missing.');
        }
        if (!productCatalogInfo.catalogVersion) {
            throw Error('[productService] - catalog version  missing.');
        }
    };
    ProductCategoryService.prototype._validateProductCatalogInfo.$inject = ["productCatalogInfo"];
    /* @ngInject */ ProductCategoryService = __decorate([
        smarteditcommons.SeDowngradeService(),
        core.Injectable(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory, smarteditcommons.LanguageService])
    ], /* @ngInject */ ProductCategoryService);
    return /* @ngInject */ ProductCategoryService;
}());

/**
 * Supplies Fetch Strategies for Product and Category Selectors.
 * These strategies are used to fetch items in a paged way or to fetch an individual item.
 * Ultimately, the strategies are utilized by Select Componnet.
 */
var /* @ngInject */ CatalogInformationService = /** @class */ (function () {
    CatalogInformationService.$inject = ["catalogService", "sharedDataService", "productCategoryService", "productService"];
    function /* @ngInject */ CatalogInformationService(catalogService, sharedDataService, productCategoryService, productService) {
        this.catalogService = catalogService;
        this.sharedDataService = sharedDataService;
        this.productCategoryService = productCategoryService;
        this.productService = productService;
        this.init();
    }
    Object.defineProperty(/* @ngInject */ CatalogInformationService.prototype, "productsFetchStrategy", {
        /**
         * Strategy necessary to display products in a paged way.
         * It contains a method to retrieve pages of products and another method to retrieve individual products.
         * Such strategy is necessary to work with products in SelectComponent.
         */
        get: function () {
            return this._productsFetchStrategy;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(/* @ngInject */ CatalogInformationService.prototype, "categoriesFetchStrategy", {
        /**
         * Strategy necessary to display categories in a paged way.
         * It contains a method to retrieve pages of categories and another method to retrieve individual categories.
         * Such strategy is necessary to work with categories in a SelectComponent.
         */
        get: function () {
            return this._categoriesFetchStrategy;
        },
        enumerable: false,
        configurable: true
    });
    /* @ngInject */ CatalogInformationService.prototype.makeGetProductCatalogsInformation = function () {
        var _this = this;
        return function () { return _this.getProductCatalogsInformation(); };
    };
    /**
     *
     * Retrieves the information of the product catalogs available in the current site.
     *
     * @returns A promise that resolves to an array containing the information of all the product catalogs available in the current site.
     */
    /* @ngInject */ CatalogInformationService.prototype.getProductCatalogsInformation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var siteUid, catalogs, productCatalogById;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSiteUid()];
                    case 1:
                        siteUid = _a.sent();
                        if (!(this.cachedSiteUid === siteUid && this.parsedCatalogs)) return [3 /*break*/, 2];
                        // Return the cached catalogs only if the site hasn't changed
                        // otherwise it's necessary to reload them.
                        return [2 /*return*/, this.parsedCatalogs];
                    case 2:
                        this.cachedSiteUid = siteUid;
                        return [4 /*yield*/, this.catalogService.getProductCatalogsForSite(siteUid)];
                    case 3:
                        catalogs = _a.sent();
                        productCatalogById = this.catalogsToProductCatalogById(catalogs);
                        this.parsedCatalogs = lodash.values(productCatalogById);
                        return [2 /*return*/, this.parsedCatalogs];
                }
            });
        });
    };
    /* @ngInject */ CatalogInformationService.prototype.init = function () {
        var _this = this;
        this._productsFetchStrategy = {
            fetchPage: function (catalogInfo, mask, pageSize, currentPage) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, this.productsFetchPage(catalogInfo, mask, pageSize, currentPage)];
            }); }); },
            fetchEntity: function (productUID) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, this.productsFetchEntity(productUID)];
            }); }); }
        };
        this._categoriesFetchStrategy = {
            fetchPage: function (catalogInfo, mask, pageSize, currentPage) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, this.categoriesFetchPage(catalogInfo, mask, pageSize, currentPage)];
            }); }); },
            fetchEntity: function (categoryUID) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, this.categoriesFetchEntity(categoryUID)];
            }); }); }
        };
    };
    /* @ngInject */ CatalogInformationService.prototype.productsFetchPage = function (catalogInfo, mask, pageSize, currentPage) {
        return __awaiter(this, void 0, void 0, function () {
            var siteUid, _a, products, pagination, items;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getSiteUid()];
                    case 1:
                        siteUid = _b.sent();
                        catalogInfo.siteUID = siteUid;
                        return [4 /*yield*/, this.productService.findProducts(catalogInfo, {
                                mask: mask,
                                pageSize: pageSize,
                                currentPage: currentPage
                            })];
                    case 2:
                        _a = _b.sent(), products = _a.products, pagination = _a.pagination;
                        items = products.map(function (product) { return (__assign(__assign({}, product), { id: product.uid })); });
                        return [2 /*return*/, {
                                pagination: pagination,
                                results: items
                            }];
                }
            });
        });
    };
    CatalogInformationService.prototype.productsFetchPage.$inject = ["catalogInfo", "mask", "pageSize", "currentPage"];
    /* @ngInject */ CatalogInformationService.prototype.productsFetchEntity = function (productUid) {
        return __awaiter(this, void 0, void 0, function () {
            var siteUid, product;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSiteUid()];
                    case 1:
                        siteUid = _a.sent();
                        return [4 /*yield*/, this.productService.getProductById(siteUid, productUid)];
                    case 2:
                        product = _a.sent();
                        return [2 /*return*/, __assign(__assign({}, product), { id: product.uid })];
                }
            });
        });
    };
    CatalogInformationService.prototype.productsFetchEntity.$inject = ["productUid"];
    /* @ngInject */ CatalogInformationService.prototype.categoriesFetchPage = function (catalogInfo, mask, pageSize, currentPage) {
        return __awaiter(this, void 0, void 0, function () {
            var siteUid, _a, productCategories, pagination, items;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getSiteUid()];
                    case 1:
                        siteUid = _b.sent();
                        catalogInfo.siteUID = siteUid;
                        return [4 /*yield*/, this.productCategoryService.getCategories({
                                catalogId: catalogInfo.catalogId,
                                catalogVersion: catalogInfo.catalogVersion,
                                siteUID: catalogInfo.siteUID,
                                mask: mask,
                                pageSize: pageSize,
                                currentPage: currentPage
                            })];
                    case 2:
                        _a = _b.sent(), productCategories = _a.productCategories, pagination = _a.pagination;
                        items = productCategories.map(function (category) { return (__assign(__assign({}, category), { id: category.uid })); });
                        return [2 /*return*/, {
                                pagination: pagination,
                                results: items
                            }];
                }
            });
        });
    };
    CatalogInformationService.prototype.categoriesFetchPage.$inject = ["catalogInfo", "mask", "pageSize", "currentPage"];
    /* @ngInject */ CatalogInformationService.prototype.categoriesFetchEntity = function (categoryUID) {
        return __awaiter(this, void 0, void 0, function () {
            var siteUid, category;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSiteUid()];
                    case 1:
                        siteUid = _a.sent();
                        return [4 /*yield*/, this.productCategoryService.getCategoryById(siteUid, categoryUID)];
                    case 2:
                        category = _a.sent();
                        category.id = category.uid;
                        return [2 /*return*/, category];
                }
            });
        });
    };
    CatalogInformationService.prototype.categoriesFetchEntity.$inject = ["categoryUID"];
    /* @ngInject */ CatalogInformationService.prototype.getSiteUid = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sharedDataService
                        .get(smarteditcommons.EXPERIENCE_STORAGE_KEY)
                        .then(function (_a) {
                        var uid = _a.siteDescriptor.uid;
                        return uid;
                    })];
            });
        });
    };
    /* @ngInject */ CatalogInformationService.prototype.catalogsToProductCatalogById = function (catalogs) {
        var productCatalogById = {};
        catalogs.forEach(function (catalog) {
            productCatalogById[catalog.catalogId] = {
                id: catalog.catalogId,
                name: catalog.name,
                versions: catalog.versions.map(function (_a) {
                    var version = _a.version;
                    return ({
                        id: version,
                        label: version
                    });
                })
            };
        });
        return productCatalogById;
    };
    CatalogInformationService.prototype.catalogsToProductCatalogById.$inject = ["catalogs"];
    /* @ngInject */ CatalogInformationService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.ICatalogService,
            smarteditcommons.ISharedDataService,
            ProductCategoryService,
            smarteditcontainer.ProductService])
    ], /* @ngInject */ CatalogInformationService);
    return /* @ngInject */ CatalogInformationService;
}());

/**
 *  A component that allows users to select products from one or more catalogs.
 *  This component is catalog aware; the list of products displayed is dependent on
 *  the product catalog and catalog version selected by the user within the component.
 */
var /* @ngInject */ ProductSelectorComponent = /** @class */ (function () {
    ProductSelectorComponent.$inject = ["catalogInformationService"];
    function /* @ngInject */ ProductSelectorComponent(catalogInformationService) {
        this.catalogInformationService = catalogInformationService;
        this.maxNumItems = 10;
        this.productNodeComponent = ProductNodeComponent;
        this.productSelectorItemComponent = ProductSelectorItemComponent;
    }
    /* @ngInject */ ProductSelectorComponent.prototype.$onInit = function () {
        this.getCatalogs = this.catalogInformationService.makeGetProductCatalogsInformation();
        this.itemsFetchStrategy = this.catalogInformationService.productsFetchStrategy;
        if (this.editable === undefined) {
            this.editable = true;
        }
    };
    /* @ngInject */ ProductSelectorComponent = __decorate([
        smarteditcommons.SeComponent({
            selector: 'se-product-selector',
            templateUrl: 'productSelectorTemplate.html',
            inputs: ['id:@', 'model:=', 'qualifier', 'editable:?']
        }),
        __metadata("design:paramtypes", [CatalogInformationService])
    ], /* @ngInject */ ProductSelectorComponent);
    return /* @ngInject */ ProductSelectorComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "CategoryNodeComponent", {
    selector: 'se-category-node',
    template: "<div class=\"se-product-row\"><div class=\"se-category-node\" [ngClass]=\"{\n          'se-category-node--no-drag': !parent.dragEnabled,\n          'se-category-node--drag': parent.dragEnabled\n        }\"><div class=\"se-product-row__product\" [title]=\"node.name | seL10n | async\">{{ node.name | seL10n | async }}</div><div class=\"se-product-row__product\" [title]=\"node.code\">{{ node.code }}</div><div class=\"se-product-row__catalog\" title=\"{{ node.catalogId }} - {{ node.catalogVersion }}\">{{ node.catalogId }} - {{ node.catalogVersion }}</div><div><se-dropdown-menu *ngIf=\"parent.dragEnabled\" [dropdownItems]=\"dropdownItems\" [selectedItem]=\"node\" class=\"pull-right se-tree-node__actions--more-menu\"></se-dropdown-menu></div></div></div>",
    styles: [".se-category-node{padding:0 16px;display:grid;grid-column-gap:12px;align-items:center}.se-category-node--no-drag{grid-template-columns:6fr 6fr 8fr}.se-category-node--drag{grid-template-columns:6fr 6fr 7fr 1fr}", ".se-product-row__catalog,.se-product-row__product{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;text-align:left}.se-product-row__img{padding:2px;width:36px;height:36px;font-size:.35rem}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ CategoryNodeComponent = /** @class */ (function () {
    CategoryNodeComponent.$inject = ["node", "parent"];
    function /* @ngInject */ CategoryNodeComponent(node, parent) {
        this.node = node;
        this.parent = parent;
        var getDropdownItems = this.parent.nodeActions.getDropdownItems;
        this.dropdownItems = getDropdownItems();
    }
    /* @ngInject */ CategoryNodeComponent = __decorate([
        smarteditcommons.SeDowngradeService(),
        core.Component({
            selector: 'se-category-node',
            template: "<div class=\"se-product-row\"><div class=\"se-category-node\" [ngClass]=\"{\n          'se-category-node--no-drag': !parent.dragEnabled,\n          'se-category-node--drag': parent.dragEnabled\n        }\"><div class=\"se-product-row__product\" [title]=\"node.name | seL10n | async\">{{ node.name | seL10n | async }}</div><div class=\"se-product-row__product\" [title]=\"node.code\">{{ node.code }}</div><div class=\"se-product-row__catalog\" title=\"{{ node.catalogId }} - {{ node.catalogVersion }}\">{{ node.catalogId }} - {{ node.catalogVersion }}</div><div><se-dropdown-menu *ngIf=\"parent.dragEnabled\" [dropdownItems]=\"dropdownItems\" [selectedItem]=\"node\" class=\"pull-right se-tree-node__actions--more-menu\"></se-dropdown-menu></div></div></div>",
            styles: [".se-category-node{padding:0 16px;display:grid;grid-column-gap:12px;align-items:center}.se-category-node--no-drag{grid-template-columns:6fr 6fr 8fr}.se-category-node--drag{grid-template-columns:6fr 6fr 7fr 1fr}", ".se-product-row__catalog,.se-product-row__product{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;text-align:left}.se-product-row__img{padding:2px;width:36px;height:36px;font-size:.35rem}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(0, core.Inject(smarteditcommons.TREE_NODE)),
        __param(1, core.Inject(core.forwardRef(function () { return smarteditcommons.TreeComponent; }))),
        __metadata("design:paramtypes", [Object, smarteditcommons.TreeComponent])
    ], /* @ngInject */ CategoryNodeComponent);
    return /* @ngInject */ CategoryNodeComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "CategorySelectorItemComponent", {
    selector: 'se-category-selector-item',
    template: "<div class=\"se-product-row\"><div class=\"se-category-row-container--item\"><div class=\"se-product-row__product\" [title]=\"item.name | seL10n | async\">{{ item.name | seL10n | async }}</div><div class=\"se-product-row__product\" [title]=\"item.code\">{{ item.code }}</div><div class=\"se-product-row__catalog\" title=\"{{ item.catalogId }} - {{ item.catalogVersion }}\">{{ item.catalogId }} - {{ item.catalogVersion }}</div></div></div>",
    styles: [".se-category-row-container--item{display:grid;grid-template-columns:6fr 6fr 8fr;grid-column-gap:12px;width:100%;padding:0 8px}", ".se-product-row__catalog,.se-product-row__product{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;text-align:left}.se-product-row__img{padding:2px;width:36px;height:36px;font-size:.35rem}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ CategorySelectorItemComponent = /** @class */ (function () {
    CategorySelectorItemComponent.$inject = ["data"];
    function /* @ngInject */ CategorySelectorItemComponent(data) {
        this.data = data;
        (this.item = data.item);
    }
    /* @ngInject */ CategorySelectorItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-category-selector-item',
            template: "<div class=\"se-product-row\"><div class=\"se-category-row-container--item\"><div class=\"se-product-row__product\" [title]=\"item.name | seL10n | async\">{{ item.name | seL10n | async }}</div><div class=\"se-product-row__product\" [title]=\"item.code\">{{ item.code }}</div><div class=\"se-product-row__catalog\" title=\"{{ item.catalogId }} - {{ item.catalogVersion }}\">{{ item.catalogId }} - {{ item.catalogVersion }}</div></div></div>",
            styles: [".se-category-row-container--item{display:grid;grid-template-columns:6fr 6fr 8fr;grid-column-gap:12px;width:100%;padding:0 8px}", ".se-product-row__catalog,.se-product-row__product{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;text-align:left}.se-product-row__img{padding:2px;width:36px;height:36px;font-size:.35rem}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(0, core.Inject(smarteditcommons.ITEM_COMPONENT_DATA_TOKEN)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ CategorySelectorItemComponent);
    return /* @ngInject */ CategorySelectorItemComponent;
}());

/**
 * A component that allows users to select categories from one or more catalogs.
 * This component is catalog aware; the list of categories displayed is dependent on
 * the product catalog and catalog version selected by the user within the component.
 */
var /* @ngInject */ CategorySelectorComponent = /** @class */ (function () {
    CategorySelectorComponent.$inject = ["catalogInformationService"];
    function /* @ngInject */ CategorySelectorComponent(catalogInformationService) {
        this.catalogInformationService = catalogInformationService;
        this.categoryNodeComponent = CategoryNodeComponent;
        this.categorySelectorItemComponent = CategorySelectorItemComponent;
    }
    /* @ngInject */ CategorySelectorComponent.prototype.$onInit = function () {
        this.getCatalogs = this.catalogInformationService.makeGetProductCatalogsInformation();
        this.itemsFetchStrategy = this.catalogInformationService.categoriesFetchStrategy;
        if (this.editable === undefined) {
            this.editable = true;
        }
    };
    /* @ngInject */ CategorySelectorComponent = __decorate([
        smarteditcommons.SeComponent({
            selector: 'se-category-selector',
            templateUrl: 'categorySelectorTemplate.html',
            inputs: ['id:@', 'model:=', 'qualifier', 'editable:?']
        }),
        __metadata("design:paramtypes", [CatalogInformationService])
    ], /* @ngInject */ CategorySelectorComponent);
    return /* @ngInject */ CategorySelectorComponent;
}());

/* @internal */
var NAVIGATION_NODE_ROOT_NODE_UID = {
    provide: 'NAVIGATION_NODE_ROOT_NODE_UID',
    useValue: 'root'
};
/**
 * @ngdoc object
 * @name NavigationModule.object:NAVIGATION_NODE_TYPECODE
 * @description
 * A constant defining the CMS Navigation Node's typecode.
 */
var NAVIGATION_NODE_TYPECODE = {
    provide: 'NAVIGATION_NODE_TYPECODE',
    useValue: 'CMSNavigationNode'
};
/**
 * @ngdoc overview
 * @name NavigationModule
 * @description
 *
 * The navigation node editor modal service module provides a service that allows opening an editor modal for a given navigation node or an entry. The editor modal is populated with a save and cancel button, and is loaded with the
 * editorTabset of cmssmarteditContainer as its content, providing a way to edit
 * various fields of the given navigation node.
 */
var /* @ngInject */ LegacyNavigationModule = /** @class */ (function () {
    function /* @ngInject */ LegacyNavigationModule() {
    }
    /* @ngInject */ LegacyNavigationModule = __decorate([
        smarteditcommons.SeModule({
            imports: [
                'smarteditServicesModule',
                'functionsModule',
                'resourceLocationsModule',
                'confirmationModalServiceModule',
                'yLoDashModule'
            ],
            providers: [NAVIGATION_NODE_TYPECODE, NAVIGATION_NODE_ROOT_NODE_UID]
        })
    ], /* @ngInject */ LegacyNavigationModule);
    return /* @ngInject */ LegacyNavigationModule;
}());

/**
 * @ngdoc overview
 * @name cmsSmarteditComponentsModule
 *
 * @description
 * Module containing all the components defined within the CmsSmartEdit container.
 */
var /* @ngInject */ CmsSmarteditComponentsModule = /** @class */ (function () {
    function /* @ngInject */ CmsSmarteditComponentsModule() {
    }
    /* @ngInject */ CmsSmarteditComponentsModule = __decorate([
        smarteditcommons.SeModule({
            imports: [GenericEditorWidgetsModule, LegacyNavigationModule, 'catalogAwareSelectorModule'],
            declarations: [ProductSelectorComponent, CategorySelectorComponent]
        })
    ], /* @ngInject */ CmsSmarteditComponentsModule);
    return /* @ngInject */ CmsSmarteditComponentsModule;
}());

/**
 * @ngdoc overview
 * @name cmsSmarteditServicesModule
 *
 * @description
 * Module containing all the services shared within the CmsSmartEdit application.
 */
var /* @ngInject */ CmsSmarteditServicesModule = /** @class */ (function () {
    function /* @ngInject */ CmsSmarteditServicesModule() {
    }
    /* @ngInject */ CmsSmarteditServicesModule = __decorate([
        smarteditcommons.SeModule({
            imports: ['smarteditServicesModule'],
            providers: [smarteditcommons.diNameUtils.makeValueProvider({ cmsitemsUri: cmscommons.cmsitemsUri })]
        })
    ], /* @ngInject */ CmsSmarteditServicesModule);
    return /* @ngInject */ CmsSmarteditServicesModule;
}());

/**
 * @ngdoc service
 * @name CatalogVersionRestService
 * @description
 *
 * Provides REST services for the CMS catalog version endpoint
 */
var /* @ngInject */ CatalogVersionRestService = /** @class */ (function () {
    CatalogVersionRestService.$inject = ["restServiceFactory"];
    function /* @ngInject */ CatalogVersionRestService(restServiceFactory) {
        this.restServiceFactory = restServiceFactory;
        this.URI = "/cmswebservices/v1/sites/:" + smarteditcommons.CONTEXT_SITE_ID + "/catalogs/:" + smarteditcommons.CONTEXT_CATALOG + "/versions/:" + smarteditcommons.CONTEXT_CATALOG_VERSION + "/targets?mode=cloneableTo";
    }
    /**
     * @ngdoc method
     * @name CatalogVersionRestService#getCloneableTargets
     * @methodOf CatalogVersionRestService
     *
     * @description
     * Fetches all cloneable target catalog versions for a given site+catalog+catalogversion
     *
     * @param {Object} uriContext A {@link resourceLocationsModule.object:UriContext UriContext}
     *
     * @returns {Object} A JSON object with a single field 'versions' containing a list of catalog versions, or an empty list.
     */
    /* @ngInject */ CatalogVersionRestService.prototype.getCloneableTargets = function (uriContext) {
        var rest = this.restServiceFactory.get(this.URI);
        return rest.get(uriContext);
    };
    CatalogVersionRestService.prototype.getCloneableTargets.$inject = ["uriContext"];
    /* @ngInject */ CatalogVersionRestService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory])
    ], /* @ngInject */ CatalogVersionRestService);
    return /* @ngInject */ CatalogVersionRestService;
}());

var /* @ngInject */ PageRestrictionsRestService = /** @class */ (function () {
    PageRestrictionsRestService.$inject = ["restServiceFactory"];
    function /* @ngInject */ PageRestrictionsRestService(restServiceFactory) {
        this.restServiceFactory = restServiceFactory;
        this.contextualPageRestrictionsRestService = this.restServiceFactory.get(cmscommons.CONTEXTUAL_PAGES_RESTRICTIONS_RESOURCE_URI);
        this.pageRestrictionsRestService = this.restServiceFactory.get(cmscommons.PAGES_RESTRICTIONS_RESOURCE_URI);
    }
    /* @ngInject */ PageRestrictionsRestService.prototype.getPagesRestrictionsForPageId = function (pageId) {
        return this.contextualPageRestrictionsRestService.get({
            pageId: pageId
        });
    };
    PageRestrictionsRestService.prototype.getPagesRestrictionsForPageId.$inject = ["pageId"];
    /* @ngInject */ PageRestrictionsRestService.prototype.getPagesRestrictionsForCatalogVersion = function (siteUID, catalogId, catalogVersion) {
        return this.pageRestrictionsRestService.get({
            siteUID: siteUID,
            catalogId: catalogId,
            catalogVersion: catalogVersion
        });
    };
    PageRestrictionsRestService.prototype.getPagesRestrictionsForCatalogVersion.$inject = ["siteUID", "catalogId", "catalogVersion"];
    /* @ngInject */ PageRestrictionsRestService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory])
    ], /* @ngInject */ PageRestrictionsRestService);
    return /* @ngInject */ PageRestrictionsRestService;
}());

var /* @ngInject */ PageTypesRestrictionTypesRestService = /** @class */ (function () {
    PageTypesRestrictionTypesRestService.$inject = ["restServiceFactory"];
    function /* @ngInject */ PageTypesRestrictionTypesRestService(restServiceFactory) {
        this.restServiceFactory = restServiceFactory;
        this.restService = this.restServiceFactory.get(cmscommons.PAGE_TYPES_RESTRICTION_TYPES_URI);
    }
    /* @ngInject */ PageTypesRestrictionTypesRestService.prototype.getPageTypesRestrictionTypes = function () {
        return this.restService.get();
    };
    /* @ngInject */ PageTypesRestrictionTypesRestService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory])
    ], /* @ngInject */ PageTypesRestrictionTypesRestService);
    return /* @ngInject */ PageTypesRestrictionTypesRestService;
}());

/**
 * Provides REST API for the CMS variations endpoint.
 *
 * Used on: "Pages" page.
 */
var /* @ngInject */ PagesVariationsRestService = /** @class */ (function () {
    PagesVariationsRestService.$inject = ["restServiceFactory"];
    function /* @ngInject */ PagesVariationsRestService(restServiceFactory) {
        this.URI = "/cmswebservices/v1/sites/" + smarteditcommons.PAGE_CONTEXT_SITE_ID + "/catalogs/" + smarteditcommons.PAGE_CONTEXT_CATALOG + "/versions/" + smarteditcommons.PAGE_CONTEXT_CATALOG_VERSION + "/pages/:pageId/variations";
        this.resource = restServiceFactory.get(this.URI);
    }
    /**
     * @returns A promise resolving to a list of variation page IDs.
     */
    /* @ngInject */ PagesVariationsRestService.prototype.getVariationsForPrimaryPageId = function (pageId) {
        return this.resource.get({ pageId: pageId }).then(function (response) { return response.uids; });
    };
    PagesVariationsRestService.prototype.getVariationsForPrimaryPageId.$inject = ["pageId"];
    /* @ngInject */ PagesVariationsRestService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory])
    ], /* @ngInject */ PagesVariationsRestService);
    return /* @ngInject */ PagesVariationsRestService;
}());

/**
 * Service that concerns business logic tasks related to CMS restrictions for CMS pages.
 */
var /* @ngInject */ PageRestrictionsService = /** @class */ (function () {
    PageRestrictionsService.$inject = ["pageRestrictionsRestService"];
    function /* @ngInject */ PageRestrictionsService(pageRestrictionsRestService) {
        this.pageRestrictionsRestService = pageRestrictionsRestService;
    }
    /**
     * @returns The number of restrictions applied to the page for the given page UID.
     */
    /* @ngInject */ PageRestrictionsService.prototype.getPageRestrictionsCountForPageUID = function (pageUID) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageRestrictionsRestService.getPagesRestrictionsForPageId(pageUID)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.pageRestrictionList.length];
                }
            });
        });
    };
    PageRestrictionsService.prototype.getPageRestrictionsCountForPageUID.$inject = ["pageUID"];
    /* @ngInject */ PageRestrictionsService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [PageRestrictionsRestService])
    ], /* @ngInject */ PageRestrictionsService);
    return /* @ngInject */ PageRestrictionsService;
}());

var /* @ngInject */ DisplayConditionsFacade = /** @class */ (function () {
    DisplayConditionsFacade.$inject = ["pageService", "pageRestrictionsService", "logService"];
    function /* @ngInject */ DisplayConditionsFacade(pageService, pageRestrictionsService, logService) {
        this.pageService = pageService;
        this.pageRestrictionsService = pageRestrictionsService;
        this.logService = logService;
    }
    /* @ngInject */ DisplayConditionsFacade.prototype.getPageInfoForPageUid = function (pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var pagePromise, displayConditionsPromise, _a, page, isPrimary;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        pagePromise = this.pageService.getPageById(pageId);
                        displayConditionsPromise = this.pageService.isPagePrimary(pageId);
                        return [4 /*yield*/, Promise.all([pagePromise, displayConditionsPromise])];
                    case 1:
                        _a = _b.sent(), page = _a[0], isPrimary = _a[1];
                        return [2 /*return*/, {
                                pageName: page.name,
                                pageType: page.typeCode,
                                isPrimary: isPrimary
                            }];
                }
            });
        });
    };
    DisplayConditionsFacade.prototype.getPageInfoForPageUid.$inject = ["pageId"];
    /* @ngInject */ DisplayConditionsFacade.prototype.getVariationsForPageUid = function (primaryPageId) {
        return __awaiter(this, void 0, void 0, function () {
            var variationPages, restrictionCounts;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageService.getVariationPages(primaryPageId)];
                    case 1:
                        variationPages = _a.sent();
                        if (variationPages.length === 0) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, Promise.all(variationPages.map(function (variationPage) {
                                return _this.pageRestrictionsService.getPageRestrictionsCountForPageUID(variationPage.uid);
                            }))];
                    case 2:
                        restrictionCounts = _a.sent();
                        return [2 /*return*/, variationPages.map(function (variationPage, index) { return ({
                                pageName: variationPage.name,
                                creationDate: variationPage.creationtime,
                                restrictions: restrictionCounts[index]
                            }); })];
                }
            });
        });
    };
    DisplayConditionsFacade.prototype.getVariationsForPageUid.$inject = ["primaryPageId"];
    /* @ngInject */ DisplayConditionsFacade.prototype.updatePage = function (pageId, pageData) {
        return this.pageService.updatePageById(pageId, pageData);
    };
    DisplayConditionsFacade.prototype.updatePage.$inject = ["pageId", "pageData"];
    /* @ngInject */ DisplayConditionsFacade.prototype.isPagePrimary = function (pageId) {
        return this.pageService.isPagePrimary(pageId);
    };
    DisplayConditionsFacade.prototype.isPagePrimary.$inject = ["pageId"];
    /* @ngInject */ DisplayConditionsFacade.prototype.getPrimaryPageForVariationPage = function (variationPageId) {
        return this.pageService.getPrimaryPage(variationPageId).then(function (primaryPage) { return ({
            uid: primaryPage.uid,
            name: primaryPage.name,
            label: primaryPage.label
        }); });
    };
    DisplayConditionsFacade.prototype.getPrimaryPageForVariationPage.$inject = ["variationPageId"];
    /* @ngInject */ DisplayConditionsFacade.prototype.getPrimaryPagesForPageType = function (pageTypeCode, uriParams, fetchPageParams) {
        return __awaiter(this, void 0, void 0, function () {
            var page, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.pageService.getPaginatedPrimaryPagesForPageType(pageTypeCode, uriParams, fetchPageParams)];
                    case 1:
                        page = _a.sent();
                        return [2 /*return*/, {
                                pagination: page.pagination,
                                results: page.response.map(function (rawPage) { return ({
                                    id: rawPage.uid,
                                    label: rawPage.name || rawPage.label
                                }); })
                            }];
                    case 2:
                        error_1 = _a.sent();
                        this.logService.warn("[getPrimaryPagesForPageType] - Cannot retrieve list of primary pages. " + error_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DisplayConditionsFacade.prototype.getPrimaryPagesForPageType.$inject = ["pageTypeCode", "uriParams", "fetchPageParams"];
    /* @ngInject */ DisplayConditionsFacade = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [cmscommons.IPageService,
            PageRestrictionsService,
            smarteditcommons.LogService])
    ], /* @ngInject */ DisplayConditionsFacade);
    return /* @ngInject */ DisplayConditionsFacade;
}());

/**
 * Initializes a Page data such as type, name for Primary or Variation Page.
 * Used as a local instance of DisplayConditionsEditor.
 */
var /* @ngInject */ DisplayConditionsEditorModel = /** @class */ (function () {
    DisplayConditionsEditorModel.$inject = ["displayConditionsFacade"];
    function /* @ngInject */ DisplayConditionsEditorModel(displayConditionsFacade) {
        this.displayConditionsFacade = displayConditionsFacade;
        this.variations = [];
    }
    /* @ngInject */ DisplayConditionsEditorModel.prototype.initModel = function (pageUid) {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.pageUid = pageUid;
                        return [4 /*yield*/, this.displayConditionsFacade.getPageInfoForPageUid(pageUid)];
                    case 1:
                        page = _a.sent();
                        (this.pageName = page.pageName, this.pageType = page.pageType, this.isPrimary = page.isPrimary);
                        if (this.isPrimary) {
                            return [2 /*return*/, this.initModelForPrimary(pageUid)];
                        }
                        return [2 /*return*/, this.initModelForVariation(pageUid)];
                }
            });
        });
    };
    DisplayConditionsEditorModel.prototype.initModel.$inject = ["pageUid"];
    /* @ngInject */ DisplayConditionsEditorModel.prototype.initModelForPrimary = function (pageUid) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.displayConditionsFacade.getVariationsForPageUid(pageUid)];
                    case 1:
                        _a.variations = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DisplayConditionsEditorModel.prototype.initModelForPrimary.$inject = ["pageUid"];
    /* @ngInject */ DisplayConditionsEditorModel.prototype.initModelForVariation = function (pageUid) {
        return __awaiter(this, void 0, void 0, function () {
            var associatedPrimaryPage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.isAssociatedPrimaryReadOnly = this.pageType !== 'ContentPage';
                        return [4 /*yield*/, this.displayConditionsFacade.getPrimaryPageForVariationPage(pageUid)];
                    case 1:
                        associatedPrimaryPage = _a.sent();
                        this.associatedPrimaryPage = associatedPrimaryPage;
                        this.originalPrimaryPage = associatedPrimaryPage;
                        return [2 /*return*/];
                }
            });
        });
    };
    DisplayConditionsEditorModel.prototype.initModelForVariation.$inject = ["pageUid"];
    /* @ngInject */ DisplayConditionsEditorModel = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [DisplayConditionsFacade])
    ], /* @ngInject */ DisplayConditionsEditorModel);
    return /* @ngInject */ DisplayConditionsEditorModel;
}());

/**
 * Expose through angular the event for sendEventShowReplaceParentHomePageInfo()
 */
var CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO = 'CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO';
/** @internal */
/**
 * Expose through angular the event for sendEventHideReplaceParentHomePageInfo()
 */
var CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO = 'CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO';
(function (CatalogHomepageDetailsStatus) {
    // Status is being calculated
    CatalogHomepageDetailsStatus["PENDING"] = "PENDING";
    // No current homepage for the given catalog version
    CatalogHomepageDetailsStatus["NO_HOMEPAGE"] = "NO_HOMEPAGE";
    // There is a homepage is in the given catalog version (not inherited)
    CatalogHomepageDetailsStatus["LOCAL"] = "LOCAL";
    // The old homepage is in the given catalog version
    CatalogHomepageDetailsStatus["OLD"] = "OLD";
    // There is a homepage, but it is inherited from a parent catalog
    CatalogHomepageDetailsStatus["PARENT"] = "PARENT";
})(exports.CatalogHomepageDetailsStatus || (exports.CatalogHomepageDetailsStatus = {}));
(function (HomepageType) {
    /**
     * An enum value of type HomepageType describing if a cms page was previously a homepage.
     */
    HomepageType["OLD"] = "old";
    /**
     * An enum value of type HomepageType describing if a cms page is a current homepage.
     */
    HomepageType["CURRENT"] = "current";
    /**
     * An enum value of type HomepageType describing if a cms page is a fallback homepage.
     */
    HomepageType["FALLBACK"] = "fallback";
})(exports.HomepageType || (exports.HomepageType = {}));
/**
 * This service is used to determine if a cms page is a current, a previous homepage, or neither.
 */
var /* @ngInject */ HomepageService = /** @class */ (function () {
    HomepageService.$inject = ["catalogService", "systemEventService"];
    function /* @ngInject */ HomepageService(catalogService, systemEventService) {
        this.catalogService = catalogService;
        this.systemEventService = systemEventService;
    }
    /**
     * Send an event to show info to the user about replacing a homepage from a parent catalog.
     */
    /* @ngInject */ HomepageService.prototype.sendEventHideReplaceParentHomePageInfo = function (data) {
        this.systemEventService.publish(CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO, data);
    };
    HomepageService.prototype.sendEventHideReplaceParentHomePageInfo.$inject = ["data"];
    /**
     * Send an event to hide the info to the user about replacing a homepage from a parent catalog.
     */
    /* @ngInject */ HomepageService.prototype.sendEventShowReplaceParentHomePageInfo = function (data) {
        this.systemEventService.publish(CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO, data);
    };
    HomepageService.prototype.sendEventShowReplaceParentHomePageInfo.$inject = ["data"];
    /**
     * getHomepageDetailsForContext is a mashup of logic needed for the frontend
     * Both the pageDisplayConditions and newPageDisplayConditions components use it for various
     * ui related things, like enable/disable of the homepage checkbox, or show messages on the UI
     *
     * Given a uriContext, basically there are 3 mains return types, mashed into 1 typescript type
     *
     * 1) CatalogHomepageDetailsStatus.NO_HOMEPAGE
     * This means that the given uriContext has no homepage whatsoever. This probably indicates an issue with the data.
     *
     * 2) CatalogHomepageDetailsStatus.PARENT
     * This means that the current homepage for the given uriContext is inherited from a parent catalog.
     * In this case, the returned ICatalogHomepageDetails contains the parentCatalogName, parentCatalogVersion,
     * targetCatalogName, and targetCatalogVersion,
     *
     * 3) CatalogHomepageDetailsStatus.LOCAL
     * This means that the current homepage for the given uriContext belongs to the catalog of that uriContext.
     * In this case, the returned ICatalogHomepageDetails contains the currentHomepageName, currentHomepageUid,
     * and oldHomepageUid
     *
     * @param uriContext A IUriContext object
     *
     * @returns ICatalogHomepageDetails with one of the 3 options as indicated above
     */
    /* @ngInject */ HomepageService.prototype.getHomepageDetailsForContext = function (uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var catalogVersion, homepageForCurrentCatalog;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.getContentCatalogVersion(uriContext)];
                    case 1:
                        catalogVersion = _a.sent();
                        homepageForCurrentCatalog = catalogVersion.homepage
                            ? catalogVersion.homepage.current
                            : null;
                        return [2 /*return*/, this.buildHomepageDetailsForContext(homepageForCurrentCatalog, uriContext)];
                }
            });
        });
    };
    HomepageService.prototype.getHomepageDetailsForContext.$inject = ["uriContext"];
    /**
     * This method checks if the cms page is a current homepage.
     *
     * @param cmsPage The cms page.
     * @param uriContext The uriContext.
     *
     * @returns A promise resolved with a boolean indicating whether the cms page is the current homepage.
     */
    /* @ngInject */ HomepageService.prototype.isCurrentHomepage = function (cmsPage, uriContext) {
        return this.isHomepageType(cmsPage, uriContext, exports.HomepageType.CURRENT);
    };
    HomepageService.prototype.isCurrentHomepage.$inject = ["cmsPage", "uriContext"];
    /**
     * This method checks if the cms page is a current homepage.
     *
     * @param cmsPage The cms page.
     * @param uriContext The uriContext.
     *
     * @returns A promise resolved with a boolean indicating whether the cms page is a previous homepage.
     */
    /* @ngInject */ HomepageService.prototype.isOldHomepage = function (cmsPage, uriContext) {
        return this.isHomepageType(cmsPage, uriContext, exports.HomepageType.OLD);
    };
    HomepageService.prototype.isOldHomepage.$inject = ["cmsPage", "uriContext"];
    /**
     * This method returns the homepage type of a cms page.
     *
     * @param cmsPage The cms page.
     * @param uriContext The uriContext.
     *
     * @returns A promise resolved with a enum type indicating whether the cms page is a current, previous homepage or null if neither.
     */
    /* @ngInject */ HomepageService.prototype.getHomepageType = function (cmsPage, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var catalog;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.getContentCatalogVersion(uriContext)];
                    case 1:
                        catalog = _a.sent();
                        if (!catalog || !catalog.homepage) {
                            return [2 /*return*/, null];
                        }
                        if (catalog.homepage.current &&
                            catalog.homepage.current.uid === cmsPage.uid &&
                            catalog.homepage.current.catalogVersionUuid === cmsPage.catalogVersion) {
                            return [2 /*return*/, exports.HomepageType.CURRENT];
                        }
                        else if (catalog.homepage.old && catalog.homepage.old.uid === cmsPage.uid) {
                            return [2 /*return*/, this.compareCatalogVersions(catalog.homepage.old.catalogVersionUuid, cmsPage.catalogVersion, function (oldHomepageCatalog, pageCatalog) {
                                    return oldHomepageCatalog.catalogId === pageCatalog.catalogId ? exports.HomepageType.OLD : null;
                                })];
                        }
                        else if (catalog.homepage.fallback && catalog.homepage.fallback.uid === cmsPage.uid) {
                            return [2 /*return*/, this.compareCatalogVersions(catalog.homepage.fallback.catalogVersionUuid, cmsPage.catalogVersion, function (fallbackCatalog, pageCatalog) {
                                    return fallbackCatalog.uuid === pageCatalog.uuid ? exports.HomepageType.FALLBACK : null;
                                })];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    HomepageService.prototype.getHomepageType.$inject = ["cmsPage", "uriContext"];
    /**
     * @param uriContext The uriContext.
     *
     * @returns A promise resolved to true when the catalog has a fallback homepage.
     */
    /* @ngInject */ HomepageService.prototype.hasFallbackHomePage = function (uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var catalog;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.getContentCatalogVersion(uriContext)];
                    case 1:
                        catalog = _a.sent();
                        if (!catalog || !catalog.homepage) {
                            throw Error("HomepageService.hasFallbackHomePage - Catalog does not have homepage fallback property");
                        }
                        return [2 /*return*/, !!catalog.homepage.fallback];
                }
            });
        });
    };
    HomepageService.prototype.hasFallbackHomePage.$inject = ["uriContext"];
    /**
     * @param cmsPage The cms page.
     * @param uriContext The uriContext.
     *
     * @returns A promise resolved to true when the page can be synced.
     */
    /* @ngInject */ HomepageService.prototype.canSyncHomepage = function (cmsPage, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var isOld, catalog;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isOldHomepage(cmsPage, uriContext)];
                    case 1:
                        isOld = _a.sent();
                        if (!isOld) {
                            return [2 /*return*/, true];
                        }
                        return [4 /*yield*/, this.catalogService.getContentCatalogVersion(uriContext)];
                    case 2:
                        catalog = _a.sent();
                        return [2 /*return*/, this.compareCatalogVersions(catalog.homepage.current.catalogVersionUuid, cmsPage.catalogVersion, function (currentCatalog, pageCatalog) {
                                return cmsPage.uid !== catalog.homepage.current.uid &&
                                    currentCatalog.catalogId !== pageCatalog.catalogId;
                            })];
                }
            });
        });
    };
    HomepageService.prototype.canSyncHomepage.$inject = ["cmsPage", "uriContext"];
    /* @ngInject */ HomepageService.prototype.compareCatalogVersions = function (catalogAUuid, catalogBUuid, compare) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, catalogVersionA, catalogVersionB;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.catalogService.getCatalogVersionByUuid(catalogAUuid),
                            this.catalogService.getCatalogVersionByUuid(catalogBUuid)
                        ])];
                    case 1:
                        _a = _b.sent(), catalogVersionA = _a[0], catalogVersionB = _a[1];
                        return [2 /*return*/, compare(catalogVersionA, catalogVersionB)];
                }
            });
        });
    };
    HomepageService.prototype.compareCatalogVersions.$inject = ["catalogAUuid", "catalogBUuid", "compare"];
    /* @ngInject */ HomepageService.prototype.isHomepageType = function (cmsPage, uriContext, type) {
        return __awaiter(this, void 0, void 0, function () {
            var homepageType;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getHomepageType(cmsPage, uriContext)];
                    case 1:
                        homepageType = _a.sent();
                        return [2 /*return*/, homepageType === type];
                }
            });
        });
    };
    HomepageService.prototype.isHomepageType.$inject = ["cmsPage", "uriContext", "type"];
    /* @ngInject */ HomepageService.prototype.buildHomepageDetailsForContext = function (homepageForCurrentCatalog, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var homepageCatalogVersion, homepageComesFromParent, currentCatalogVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!homepageForCurrentCatalog) {
                            return [2 /*return*/, {
                                    status: exports.CatalogHomepageDetailsStatus.NO_HOMEPAGE
                                }];
                        }
                        return [4 /*yield*/, this.catalogService.getCatalogVersionByUuid(homepageForCurrentCatalog.catalogVersionUuid)];
                    case 1:
                        homepageCatalogVersion = _a.sent();
                        homepageComesFromParent = homepageCatalogVersion.catalogId !== uriContext[cmscommons.CONTEXT_CATALOG];
                        return [4 /*yield*/, this.catalogService.getContentCatalogVersion(uriContext)];
                    case 2:
                        currentCatalogVersion = _a.sent();
                        if (homepageComesFromParent) {
                            return [2 /*return*/, {
                                    status: exports.CatalogHomepageDetailsStatus.PARENT,
                                    parentCatalogName: homepageCatalogVersion.catalogName,
                                    parentCatalogVersion: homepageCatalogVersion.version,
                                    targetCatalogName: currentCatalogVersion.catalogName,
                                    targetCatalogVersion: currentCatalogVersion.version
                                }];
                        }
                        return [2 /*return*/, {
                                status: exports.CatalogHomepageDetailsStatus.LOCAL,
                                currentHomepageName: homepageForCurrentCatalog.name,
                                currentHomepageUid: homepageForCurrentCatalog.uid,
                                oldHomepageUid: homepageCatalogVersion.homepage
                                    ? homepageCatalogVersion.homepage.old
                                        ? homepageCatalogVersion.homepage.old.uid
                                        : null
                                    : null
                            }];
                }
            });
        });
    };
    HomepageService.prototype.buildHomepageDetailsForContext.$inject = ["homepageForCurrentCatalog", "uriContext"];
    /* @ngInject */ HomepageService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.ICatalogService,
            smarteditcommons.SystemEventService])
    ], /* @ngInject */ HomepageService);
    return /* @ngInject */ HomepageService;
}());

/**
 * The pageDisplayConditionsService provides an abstraction layer for the business logic of
 * primary/variant display conditions of a page
 */
var /* @ngInject */ PageDisplayConditionsService = /** @class */ (function () {
    /**
     * An object representing a page display condition<br/>
     * Structure:<br/>
     * ```
     * {
     *      label: [string] key to be localized to render this condition on a webpage
     *      description: [string] key to be localized to render this condition description on a webpage
     *      isPrimary: [boolean]
     * }
     * ```
     */
    PageDisplayConditionsService.$inject = ["catalogService"];
    function /* @ngInject */ PageDisplayConditionsService(catalogService) {
        this.catalogService = catalogService;
    }
    /**
     * @returns An array of page conditions that are the
     * possible conditions if you wish to create a new page of the given page type that has the given possible primary
     * pages
     */
    /* @ngInject */ PageDisplayConditionsService.prototype.getNewPageConditions = function (pageTypeCode, uriContext) {
        return this.getPageDisplayConditionsByPageType(pageTypeCode, uriContext);
    };
    PageDisplayConditionsService.prototype.getNewPageConditions.$inject = ["pageTypeCode", "uriContext"];
    /* @ngInject */ PageDisplayConditionsService.prototype.fetchDisplayConditionsForPageType = function (pageType, uriContext) {
        return this.catalogService
            .getContentCatalogVersion(uriContext)
            .then(function (catalogVersion) {
            return catalogVersion.pageDisplayConditions.find(function (condition) { return condition.typecode === pageType; });
        });
    };
    PageDisplayConditionsService.prototype.fetchDisplayConditionsForPageType.$inject = ["pageType", "uriContext"];
    /* @ngInject */ PageDisplayConditionsService.prototype.getPageDisplayConditionsByPageType = function (pageType, uriContext) {
        return this.fetchDisplayConditionsForPageType(pageType, uriContext).then(function (obj) {
            if (!obj || !obj.options) {
                return [];
            }
            return obj.options.map(function (option) { return ({
                label: option.label,
                description: option.label + '.description',
                isPrimary: option.id === 'PRIMARY'
            }); });
        });
    };
    PageDisplayConditionsService.prototype.getPageDisplayConditionsByPageType.$inject = ["pageType", "uriContext"];
    /* @ngInject */ PageDisplayConditionsService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.ICatalogService])
    ], /* @ngInject */ PageDisplayConditionsService);
    return /* @ngInject */ PageDisplayConditionsService;
}());

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
var CMS_LINK_TO_RELOAD_STRUCTURE_EVENT_ID = 'cms-link-to-reload-structure';

window.__smartedit__.addDecoratorPayload("Component", "GenericEditorModalComponent", {
    selector: 'se-generic-editor-modal',
    template: "\n        <se-message\n            class=\"se-ge-modal--messages\"\n            *ngIf=\"showDisclaimer\"\n            type=\"info\"\n            messageId=\"VisibilityTab.DisplayComponentOffDisclaimer\"\n        >\n            <ng-container se-message-description>\n                {{ 'se.cms.editortabset.visibilitytab.disclaimer' | translate }}\n            </ng-container>\n        </se-message>\n\n        <ng-container *ngIf=\"data && data.messages\">\n            <se-message\n                class=\"se-ge-modal--messages\"\n                *ngFor=\"let msg of data.messages; let i = index\"\n                [type]=\"msg.type\"\n                messageId=\"generic-editor-model-message-{{ i }}\"\n            >\n                <ng-container se-message-description> {{ msg.message }} </ng-container>\n            </se-message>\n        </ng-container>\n\n        <se-generic-editor\n            *ngIf=\"isSetupCompleted\"\n            [id]=\"genericEditorId\"\n            [smarteditComponentId]=\"data.componentUuid\"\n            [smarteditComponentType]=\"data.componentType\"\n            [structure]=\"structure\"\n            [structureApi]=\"structureApi\"\n            [content]=\"data.content\"\n            [contentApi]=\"contentApi\"\n            [(submit)]=\"controls.submit\"\n            [(reset)]=\"controls.reset\"\n            [(isDirty)]=\"controls.isDirty\"\n            [editorStackId]=\"editorStackId\"\n            (getApi)=\"getApi($event)\"\n        >\n        </se-generic-editor>\n    "
});
var /* @ngInject */ GenericEditorModalComponent = /** @class */ (function () {
    GenericEditorModalComponent.$inject = ["modalManager", "confirmationModalService", "crossFrameEventService", "systemEventService"];
    function /* @ngInject */ GenericEditorModalComponent(modalManager, confirmationModalService, crossFrameEventService, systemEventService) {
        this.modalManager = modalManager;
        this.confirmationModalService = confirmationModalService;
        this.crossFrameEventService = crossFrameEventService;
        this.systemEventService = systemEventService;
        this.data = {};
        this.controls = {};
        this.genericEditorId = smarteditcommons.stringUtils.generateIdentifier();
        this.showDisclaimer = false;
        this.STRUCTURE_API_BASE_URL = cmscommons.TYPES_RESOURCE_URI + "?code=:smarteditComponentType&mode=:structureApiMode";
        this.isSetupCompleted = false;
        this.isReset = false;
        this.isEscapeInProgress = false;
    }
    /* @ngInject */ GenericEditorModalComponent.prototype.onEscapeDown = function () {
        if (this.isEscapeInProgress) {
            return;
        }
        this.onEscapeClicked();
    };
    /* @ngInject */ GenericEditorModalComponent.prototype.getApi = function (genericEditorAPI) {
        this.controls.genericEditorAPI = genericEditorAPI;
        if (this.data.targetedQualifier) {
            genericEditorAPI.switchToTabContainingQualifier(this.data.targetedQualifier);
        }
        if (this.data.initialDirty) {
            genericEditorAPI.considerFormDirty();
        }
    };
    GenericEditorModalComponent.prototype.getApi.$inject = ["genericEditorAPI"];
    /* @ngInject */ GenericEditorModalComponent.prototype.onSave = function () {
        var _this = this;
        return this.controls.submit().then(function (item) {
            _this.crossFrameEventService.publish(cmscommons.CMSITEMS_UPDATE_EVENT);
            if (_this.saveCallback) {
                _this.saveCallback(item);
            }
            _this.removeEventListeners();
            return item;
        });
    };
    /* @ngInject */ GenericEditorModalComponent.prototype.onCancel = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.genericEditorIsDirty() && !_this.isReset) {
                _this.confirmationModalService.confirm({
                    description: 'se.editor.cancel.confirm'
                }).then(function () {
                    _this.controls.reset().then(function () {
                        _this.markAsReset();
                        _this.removeEventListeners();
                        resolve();
                    }, function () {
                        reject();
                    });
                    _this.crossFrameEventService.publish('GENERIC_EDITOR_CANCEL', {
                        confirmed: true
                    });
                }, function () {
                    reject();
                    _this.crossFrameEventService.publish('GENERIC_EDITOR_CANCEL', {
                        confirmed: false
                    });
                });
            }
            else {
                _this.removeEventListeners();
                resolve();
            }
        });
    };
    /* @ngInject */ GenericEditorModalComponent.prototype.setup = function () {
        var _this = this;
        this.structure = this.data.structure;
        if (!this.structure) {
            this.structureApi = this.getStructureApiByMode('DEFAULT');
            if (this.isGenericEditorInReadOnlyMode()) {
                this.structureApi = this.applyReadOnlyModeToStructureApiUrl(this.structureApi);
            }
        }
        else if (this.isGenericEditorInReadOnlyMode()) {
            this.structure = this.makeStructureReadOnly(this.structure);
        }
        this.changeStructureEventListener = this.systemEventService.subscribe(CMS_LINK_TO_RELOAD_STRUCTURE_EVENT_ID, function (event, data) { return _this.onChangeStructureEvent(event, data); });
        this.unrelatedValidationErrorsEvent = this.systemEventService.subscribe(smarteditcommons.GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, function (event, data) {
            return _this.onUnrelatedErrors(event, data);
        });
        this.contentApi =
            this.data.contentApi || "/cmswebservices/v1/sites/" + smarteditcommons.CONTEXT_SITE_ID + "/cmsitems";
        this.modalManager.setDismissCallback(function () { return _this.onCancel(); });
        this.modalManager.addButtons([
            {
                id: 'cancel',
                label: this.data.cancelLabel || 'se.cms.component.confirmation.modal.cancel',
                style: smarteditcommons.FundamentalModalButtonStyle.Default,
                action: smarteditcommons.FundamentalModalButtonAction.Dismiss,
                callback: function () { return rxjs.from(_this.onCancel()); }
            },
            {
                id: 'save',
                label: this.data.saveLabel || 'se.cms.component.confirmation.modal.save',
                style: smarteditcommons.FundamentalModalButtonStyle.Primary,
                action: smarteditcommons.FundamentalModalButtonAction.Close,
                callback: function () {
                    return rxjs.from(_this.onSave());
                },
                disabledFn: function () {
                    return (_this.controls.genericEditorAPI &&
                        _this.controls.genericEditorAPI.isSubmitDisabled()) ||
                        _this.isGenericEditorInReadOnlyMode();
                }
            }
        ]);
        this.isSetupCompleted = true;
    };
    /**
     * Method makes each attribute of the structure non editable.
     */
    /* @ngInject */ GenericEditorModalComponent.prototype.makeStructureReadOnly = function (structure) {
        structure.attributes = structure.attributes || [];
        structure.attributes.forEach(function (element) {
            element.editable = false;
        });
        return structure;
    };
    GenericEditorModalComponent.prototype.makeStructureReadOnly.$inject = ["structure"];
    /**
     * Method verifies whether the generic editor is in read only mode or not.
     * Returns TRUE if the generic editor is in read only mode, FALSE otherwise.
     */
    /* @ngInject */ GenericEditorModalComponent.prototype.isGenericEditorInReadOnlyMode = function () {
        return !!this.data.readOnlyMode;
    };
    /**
     * Method returns generic editor content object.
     */
    /* @ngInject */ GenericEditorModalComponent.prototype.getGenericEditorContent = function () {
        return this.controls.genericEditorAPI && this.controls.genericEditorAPI.getContent();
    };
    /**
     * Method verifies whether the generic editor is in dirty state or not.
     * Returns TRUE if the generic editor is in dirty state, FALSE otherwise.
     */
    /* @ngInject */ GenericEditorModalComponent.prototype.genericEditorIsDirty = function () {
        return this.controls.isDirty && this.controls.isDirty();
    };
    /* @ngInject */ GenericEditorModalComponent.prototype.onChangeStructureEvent = function (eventId, payload) {
        // Structure is reloaded only for the Generic Editor that owns the component where this event came from.
        // This is done to avoid contaminating editors in a nested set-up.
        if (this.genericEditorId === payload.editorId) {
            if (payload.structureApiMode) {
                this.structure = null;
                this.structureApi = this.getStructureApiByMode(payload.structureApiMode);
            }
            else if (payload.structure) {
                this.structureApi = null;
                this.structure = payload.structure;
            }
            this.data.content = payload.content;
        }
    };
    GenericEditorModalComponent.prototype.onChangeStructureEvent.$inject = ["eventId", "payload"];
    /* @ngInject */ GenericEditorModalComponent.prototype.onUnrelatedErrors = function (eventId, eventData) {
        if (eventData.sourceGenericEditorId === this.data.componentUuid && this.errorCallback) {
            this.errorCallback(eventData.messages, this);
        }
    };
    GenericEditorModalComponent.prototype.onUnrelatedErrors.$inject = ["eventId", "eventData"];
    /**
     * Converts the structure api url to read only mode. All fields return in read only mode will not be editable.
     */
    /* @ngInject */ GenericEditorModalComponent.prototype.applyReadOnlyModeToStructureApiUrl = function (structureApiUrl) {
        return structureApiUrl + "&readOnly=true";
    };
    GenericEditorModalComponent.prototype.applyReadOnlyModeToStructureApiUrl.$inject = ["structureApiUrl"];
    /* @ngInject */ GenericEditorModalComponent.prototype.getStructureApiByMode = function (structureApiMode) {
        return this.STRUCTURE_API_BASE_URL.replace(/:structureApiMode/gi, structureApiMode);
    };
    GenericEditorModalComponent.prototype.getStructureApiByMode.$inject = ["structureApiMode"];
    /* @ngInject */ GenericEditorModalComponent.prototype.removeEventListeners = function () {
        this.unrelatedValidationErrorsEvent();
        this.changeStructureEventListener();
    };
    /* @ngInject */ GenericEditorModalComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.modalManager.getModalData().subscribe(function (config) {
            _this.data = config.data;
            _this.saveCallback = config.saveCallback;
            _this.errorCallback = config.errorCallback;
            _this.editorStackId = config.data.editorStackId;
            if (!_this.isSetupCompleted) {
                _this.setup();
            }
        });
    };
    /* @ngInject */ GenericEditorModalComponent.prototype.markAsReset = function () {
        this.isReset = true;
    };
    /* @ngInject */ GenericEditorModalComponent.prototype.onEscapeClicked = function () {
        var _this = this;
        this.isEscapeInProgress = true;
        this.onCancel()
            .then(function () { return _this.modalManager.dismiss(); })
            .finally(function () {
            _this.isEscapeInProgress = false;
        });
    };
    __decorate([
        core.HostListener('document:keyup.escape'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], /* @ngInject */ GenericEditorModalComponent.prototype, "onEscapeDown", null);
    /* @ngInject */ GenericEditorModalComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-generic-editor-modal',
            template: "\n        <se-message\n            class=\"se-ge-modal--messages\"\n            *ngIf=\"showDisclaimer\"\n            type=\"info\"\n            messageId=\"VisibilityTab.DisplayComponentOffDisclaimer\"\n        >\n            <ng-container se-message-description>\n                {{ 'se.cms.editortabset.visibilitytab.disclaimer' | translate }}\n            </ng-container>\n        </se-message>\n\n        <ng-container *ngIf=\"data && data.messages\">\n            <se-message\n                class=\"se-ge-modal--messages\"\n                *ngFor=\"let msg of data.messages; let i = index\"\n                [type]=\"msg.type\"\n                messageId=\"generic-editor-model-message-{{ i }}\"\n            >\n                <ng-container se-message-description> {{ msg.message }} </ng-container>\n            </se-message>\n        </ng-container>\n\n        <se-generic-editor\n            *ngIf=\"isSetupCompleted\"\n            [id]=\"genericEditorId\"\n            [smarteditComponentId]=\"data.componentUuid\"\n            [smarteditComponentType]=\"data.componentType\"\n            [structure]=\"structure\"\n            [structureApi]=\"structureApi\"\n            [content]=\"data.content\"\n            [contentApi]=\"contentApi\"\n            [(submit)]=\"controls.submit\"\n            [(reset)]=\"controls.reset\"\n            [(isDirty)]=\"controls.isDirty\"\n            [editorStackId]=\"editorStackId\"\n            (getApi)=\"getApi($event)\"\n        >\n        </se-generic-editor>\n    "
        }),
        __metadata("design:paramtypes", [smarteditcommons.FundamentalModalManagerService,
            smarteditcommons.IConfirmationModalService,
            smarteditcommons.CrossFrameEventService,
            smarteditcommons.SystemEventService])
    ], /* @ngInject */ GenericEditorModalComponent);
    return /* @ngInject */ GenericEditorModalComponent;
}());

/**
 * The Generic Editor Modal Service is used to open an editor modal window that contains a tabset.
 */
var /* @ngInject */ GenericEditorModalService = /** @class */ (function () {
    GenericEditorModalService.$inject = ["modalService"];
    function /* @ngInject */ GenericEditorModalService(modalService) {
        this.modalService = modalService;
    }
    /**
     * Function that opens an editor modal. For this method, you must specify an object to contain the edited information, and a save
     * callback that will be triggered once the Save button is clicked.
     */
    /* @ngInject */ GenericEditorModalService.prototype.open = function (data, saveCallback, errorCallback, config) {
        var modalConfig = config ? __assign({}, config) : {};
        modalConfig.modalPanelClass = ("modal-lg " + (modalConfig.modalPanelClass || '')).trimRight();
        modalConfig.escKeyCloseable = false;
        var ref = this.modalService.open({
            component: GenericEditorModalComponent,
            data: {
                data: data,
                saveCallback: saveCallback,
                errorCallback: errorCallback
            },
            config: modalConfig,
            templateConfig: {
                title: data.title,
                isDismissButtonVisible: true,
                titleSuffix: 'se.cms.editor.title.suffix'
            }
        });
        return new Promise(function (resolve, reject) { return ref.afterClosed.subscribe(resolve, reject); });
    };
    GenericEditorModalService.prototype.open.$inject = ["data", "saveCallback", "errorCallback", "config"];
    /* @ngInject */ GenericEditorModalService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.IModalService])
    ], /* @ngInject */ GenericEditorModalService);
    return /* @ngInject */ GenericEditorModalService;
}());

var /* @ngInject */ EditorModalService = /** @class */ (function (_super) {
    __extends(/* @ngInject */ EditorModalService, _super);
    EditorModalService.$inject = ["genericEditorModalService", "componentService", "renderService", "contextAwareEditableItemService", "cmsitemsRestService", "translateService", "genericEditorStackService"];
    function /* @ngInject */ EditorModalService(genericEditorModalService, componentService, renderService, contextAwareEditableItemService, cmsitemsRestService, translateService, genericEditorStackService) {
        var _this = _super.call(this) || this;
        _this.genericEditorModalService = genericEditorModalService;
        _this.componentService = componentService;
        _this.renderService = renderService;
        _this.contextAwareEditableItemService = contextAwareEditableItemService;
        _this.cmsitemsRestService = cmsitemsRestService;
        _this.translateService = translateService;
        _this.genericEditorStackService = genericEditorStackService;
        return _this;
    }
    /* @ngInject */ EditorModalService.prototype.openAndRerenderSlot = function (componentType, componentUuid, targetedQualifier, saveCallback, editorStackId) {
        return __awaiter(this, void 0, void 0, function () {
            var componentAttributes, attributes, componentData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        componentAttributes = {
                            smarteditComponentType: componentType,
                            smarteditComponentUuid: componentUuid
                        };
                        return [4 /*yield*/, this.preloadContent(componentUuid, componentAttributes)];
                    case 1:
                        attributes = _a.sent();
                        componentData = this.createComponentData(attributes, {
                            targetedQualifier: targetedQualifier
                        }, editorStackId || smarteditcommons.stringUtils.generateIdentifier());
                        return [2 /*return*/, this.markAndOpenGenericEditor(componentData, saveCallback)];
                }
            });
        });
    };
    EditorModalService.prototype.openAndRerenderSlot.$inject = ["componentType", "componentUuid", "targetedQualifier", "saveCallback", "editorStackId"];
    /* @ngInject */ EditorModalService.prototype.open = function (componentAttributes, targetSlotId, position, targetedQualifier, saveCallback, editorStackId, config) {
        return __awaiter(this, void 0, void 0, function () {
            var attributes, componentData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.preloadContent(componentAttributes.smarteditComponentUuid, componentAttributes)];
                    case 1:
                        attributes = _a.sent();
                        componentData = this.createComponentData(attributes, {
                            slotId: targetSlotId,
                            position: position,
                            targetedQualifier: targetedQualifier
                        }, editorStackId || smarteditcommons.stringUtils.generateIdentifier());
                        return [2 /*return*/, this.markAndOpenGenericEditor(componentData, saveCallback, config)];
                }
            });
        });
    };
    EditorModalService.prototype.open.$inject = ["componentAttributes", "targetSlotId", "position", "targetedQualifier", "saveCallback", "editorStackId", "config"];
    /* @ngInject */ EditorModalService.prototype.openGenericEditor = function (data, saveCallback, errorCallback, config) {
        return this.genericEditorModalService.open(data, saveCallback, errorCallback, config);
    };
    EditorModalService.prototype.openGenericEditor.$inject = ["data", "saveCallback", "errorCallback", "config"];
    /**
     * Loads content of the item by uuid and populates the content attribute of componentAttributes object only if it's not already provided.
     */
    /* @ngInject */ EditorModalService.prototype.preloadContent = function (uuid, componentAttributes) {
        return __awaiter(this, void 0, void 0, function () {
            var component;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getContentByUuid(uuid)];
                    case 1:
                        component = _a.sent();
                        if (component !== null && lodash.isNil(componentAttributes.content)) {
                            componentAttributes.content = component;
                        }
                        return [2 /*return*/, componentAttributes];
                }
            });
        });
    };
    EditorModalService.prototype.preloadContent.$inject = ["uuid", "componentAttributes"];
    /**
     * Opens generic editor.
     *
     * @param componentData Object that contains all parameters for generic editor.
     * Note: if the componentUuid is not provided the generic editor will be opened for creation.
     *
     * @param saveCallback the save callback that is triggered after submit.
     */
    /* @ngInject */ EditorModalService.prototype.markAndOpenGenericEditor = function (componentData, saveCallback, config) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.markComponentAsShared(componentData.content, componentData)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.genericEditorModalService.open(componentData, function (item) {
                                if (saveCallback) {
                                    saveCallback(item);
                                }
                                if (componentData.editorStackId) {
                                    var topEditor = _this.genericEditorStackService.getEditorsStack(componentData.editorStackId)[0];
                                    var uuid = topEditor.component.uuid;
                                    _this.componentService
                                        .getSlotsForComponent(uuid)
                                        .then(function (slotIds) {
                                        _this.renderService.renderSlots(slotIds);
                                    });
                                }
                            }, null, config)];
                }
            });
        });
    };
    EditorModalService.prototype.markAndOpenGenericEditor.$inject = ["componentData", "saveCallback", "config"];
    /**
     * Retrieves a content object by its uuid. If the uuid is undefined, null is returned.
     */
    /* @ngInject */ EditorModalService.prototype.getContentByUuid = function (uuid) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!lodash.isNil(uuid)) {
                    return [2 /*return*/, this.cmsitemsRestService.getById(uuid)];
                }
                return [2 /*return*/, null];
            });
        });
    };
    EditorModalService.prototype.getContentByUuid.$inject = ["uuid"];
    /**
     * Verifies whether the component is shared in workflow context. If yes, then makes the component readonly and adds a message that the component
     * is used in different workflow. If no, checks whether the component is shared in page context and adds a message about it.
     */
    /* @ngInject */ EditorModalService.prototype.markComponentAsShared = function (componentContent, modelServiceParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var componentIsEditable;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(componentContent === null || componentContent === void 0 ? void 0 : componentContent.uid)) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.contextAwareEditableItemService.isItemEditable(componentContent.uid)];
                    case 1:
                        componentIsEditable = _a.sent();
                        modelServiceParameters.readOnlyMode = !componentIsEditable;
                        if (modelServiceParameters.readOnlyMode) {
                            this.addComponentInfoMessage('se.cms.component.workflow.shared.component', modelServiceParameters);
                        }
                        else if (this.componentIsShared(componentContent)) {
                            this.addComponentInfoMessage('se.cms.component.shared.component', modelServiceParameters);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    EditorModalService.prototype.markComponentAsShared.$inject = ["componentContent", "modelServiceParameters"];
    /**
     * Verifies whether the component is shared or not by checking the slots attribute of the component payload.
     */
    /* @ngInject */ EditorModalService.prototype.componentIsShared = function (componentContent) {
        var _a;
        return ((_a = componentContent.slots) === null || _a === void 0 ? void 0 : _a.length) > 1;
    };
    EditorModalService.prototype.componentIsShared.$inject = ["componentContent"];
    /**
     * Adds a message to a messages attribute of IGenericEditorModalServiceComponent. If the attribute is undefined then the new one is created.
     */
    /* @ngInject */ EditorModalService.prototype.addComponentInfoMessage = function (message, modelServiceParameters) {
        modelServiceParameters.messages = modelServiceParameters.messages || [];
        modelServiceParameters.messages.push({
            type: 'info',
            message: this.translateService.instant(message)
        });
    };
    EditorModalService.prototype.addComponentInfoMessage.$inject = ["message", "modelServiceParameters"];
    /* @ngInject */ EditorModalService.prototype.prepareContentForCreate = function (content, componentType, catalogVersionUuid, slotId, position) {
        var preparedContent = content ? Object.assign({}, content) : {};
        preparedContent.position = !smarteditcommons.stringUtils.isBlank(preparedContent.position)
            ? preparedContent.position
            : position;
        preparedContent.slotId = preparedContent.slotId || slotId;
        preparedContent.typeCode = preparedContent.typeCode || componentType;
        preparedContent.itemtype = preparedContent.itemtype || componentType;
        preparedContent.catalogVersion = preparedContent.catalogVersion || catalogVersionUuid;
        preparedContent.visible = !smarteditcommons.stringUtils.isBlank(preparedContent.visible)
            ? preparedContent.visible
            : true;
        return preparedContent;
    };
    EditorModalService.prototype.prepareContentForCreate.$inject = ["content", "componentType", "catalogVersionUuid", "slotId", "position"];
    /* @ngInject */ EditorModalService.prototype.createComponentData = function (componentAttributes, params, editorStackId) {
        var type;
        try {
            type = componentAttributes.smarteditComponentType.toLowerCase();
        }
        catch (error) {
            throw new Error("editorModalService.createComponentData - invalid component type in componentAttributes. " + error);
        }
        var isCreateOperation = lodash.isNil(componentAttributes.smarteditComponentUuid);
        var content;
        if (isCreateOperation) {
            content = this.prepareContentForCreate(componentAttributes.content, componentAttributes.smarteditComponentType, componentAttributes.catalogVersionUuid, params.slotId, params.position);
        }
        else {
            content = componentAttributes.content;
        }
        return {
            componentUuid: componentAttributes.smarteditComponentUuid,
            componentType: componentAttributes.smarteditComponentType,
            title: "type." + type + ".name",
            targetedQualifier: params.targetedQualifier,
            initialDirty: componentAttributes.initialDirty,
            content: content,
            editorStackId: editorStackId
        };
    };
    EditorModalService.prototype.createComponentData.$inject = ["componentAttributes", "params", "editorStackId"];
    /* @ngInject */ EditorModalService = __decorate([
        smarteditcommons.SeDowngradeService(cmscommons.IEditorModalService),
        smarteditcommons.GatewayProxied('open', 'openAndRerenderSlot', 'openGenericEditor'),
        __metadata("design:paramtypes", [GenericEditorModalService,
            cmscommons.ComponentService,
            smarteditcommons.IRenderService,
            cmscommons.IContextAwareEditableItemService,
            cmscommons.CmsitemsRestService,
            core$1.TranslateService,
            smarteditcommons.GenericEditorStackService])
    ], /* @ngInject */ EditorModalService);
    return /* @ngInject */ EditorModalService;
}(cmscommons.IEditorModalService));

/**
 * Used for fetching CMS Item Structures.
 */
var /* @ngInject */ TypeStructureRestService = /** @class */ (function () {
    TypeStructureRestService.$inject = ["restServiceFactory"];
    function /* @ngInject */ TypeStructureRestService(restServiceFactory) {
        this.structureRestService = restServiceFactory.get(smarteditcommons.TYPES_RESOURCE_URI);
    }
    /**
     * Fetches the type structure (fields) for CMS pages for a given Page Type.
     */
    /* @ngInject */ TypeStructureRestService.prototype.getStructureByType = function (typeCode) {
        return this.structureRestService
            .getById(typeCode)
            .then(function (structure) { return structure.attributes; });
    };
    TypeStructureRestService.prototype.getStructureByType.$inject = ["typeCode"];
    /**
     * Fetches the type structure (fields) for CMS pages for a given Page Type and mode.
     */
    /* @ngInject */ TypeStructureRestService.prototype.getStructureByTypeAndMode = function (typeCode, mode, getWholeStructure) {
        if (getWholeStructure === void 0) { getWholeStructure = false; }
        return this.structureRestService
            .get({
            code: typeCode,
            mode: mode
        })
            .then(function (result) {
            var structure = result.componentTypes[0];
            return !structure || getWholeStructure ? structure : structure.attributes;
        });
    };
    TypeStructureRestService.prototype.getStructureByTypeAndMode.$inject = ["typeCode", "mode", "getWholeStructure"];
    /**
     * Fetches structures supported in the given category.
     */
    /* @ngInject */ TypeStructureRestService.prototype.getStructuresByCategory = function (category) {
        return this.structureRestService
            .get({
            category: category
        })
            .then(function (result) { return result.componentTypes; });
    };
    TypeStructureRestService.prototype.getStructuresByCategory.$inject = ["category"];
    /* @ngInject */ TypeStructureRestService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory])
    ], /* @ngInject */ TypeStructureRestService);
    return /* @ngInject */ TypeStructureRestService;
}());

var PAGE_STRUCTURE_PRE_ORDER = [
    'typeCode',
    'template',
    'name',
    'description',
    'label',
    'uid',
    'title',
    'fromName',
    'fromEmail'
];
var PAGE_STRUCTURE_POST_ORDER = ['creationtime', 'modifiedtime'];
var /* @ngInject */ ContextAwarePageStructureService = /** @class */ (function () {
    ContextAwarePageStructureService.$inject = ["typeStructureRestService", "pageService"];
    function /* @ngInject */ ContextAwarePageStructureService(typeStructureRestService, pageService) {
        this.typeStructureRestService = typeStructureRestService;
        this.pageService = pageService;
    }
    /**
     * Return the CMS page structure with some modifications for the context of creating a new page.
     * The field order is modified, the created/modified time fields are removed, and the label field for variation content pages is disabled.
     *
     * @param pageTypeCode The page type of the new page to be created
     * @param isPrimary Flag indicating if the new page will be a primary or variation page
     *
     * @returns A modified page structure
     */
    /* @ngInject */ ContextAwarePageStructureService.prototype.getPageStructureForNewPage = function (pageTypeCode, isPrimary) {
        return __awaiter(this, void 0, void 0, function () {
            var fields;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getFields(pageTypeCode)];
                    case 1:
                        fields = _a.sent();
                        if (pageTypeCode === 'ContentPage') {
                            this.setLabelEditability(fields, isPrimary);
                        }
                        this.removeField(fields, 'creationtime');
                        this.removeField(fields, 'modifiedtime');
                        this.removeField(fields, 'displayCondition');
                        this.removeField(fields, 'restrictions');
                        return [2 /*return*/, {
                                attributes: this.getOrderedFields(fields),
                                category: cmscommons.StructureTypeCategory.PAGE
                            }];
                }
            });
        });
    };
    ContextAwarePageStructureService.prototype.getPageStructureForNewPage.$inject = ["pageTypeCode", "isPrimary"];
    /**
     * Return the CMS page structure with some modifications for the context of editing the info of an existing page.
     * The field order is modified, and the label field for variation content pages is disabled.
     *
     * @param pageTypeCode The page type of the page to be edited
     * @param pageId The ID of the existing page to be modified
     *
     * @returns A modified page structure
     */
    /* @ngInject */ ContextAwarePageStructureService.prototype.getPageStructureForPageEditing = function (pageTypeCode, pageId) {
        return __awaiter(this, void 0, void 0, function () {
            var fields, readOnlyFieldNames, isPrimary;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getFields(pageTypeCode)];
                    case 1:
                        fields = _a.sent();
                        readOnlyFieldNames = ['uid', 'creationtime', 'modifiedtime'];
                        fields
                            .filter(function (field) { return readOnlyFieldNames.indexOf(field.qualifier) >= 0; })
                            .forEach(function (field) {
                            field.editable = false;
                        });
                        if (!(pageTypeCode === 'ContentPage')) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.pageService.isPagePrimary(pageId)];
                    case 2:
                        isPrimary = _a.sent();
                        this.setLabelEditability(fields, isPrimary);
                        return [2 /*return*/, {
                                attributes: this.getOrderedFields(fields),
                                category: cmscommons.StructureTypeCategory.PAGE
                            }];
                    case 3: return [2 /*return*/, {
                            attributes: this.getOrderedFields(fields),
                            category: cmscommons.StructureTypeCategory.PAGE
                        }];
                }
            });
        });
    };
    ContextAwarePageStructureService.prototype.getPageStructureForPageEditing.$inject = ["pageTypeCode", "pageId"];
    /**
     * Return the CMS page structure with some modifications for the context of viewing the info of an existing page.
     * The field order is modified, and the label field for variation content pages is disabled.
     *
     * @param pageTypeCode The page type of the existing page
     *
     * @returns A modified page structure
     */
    /* @ngInject */ ContextAwarePageStructureService.prototype.getPageStructureForViewing = function (pageTypeCode) {
        return __awaiter(this, void 0, void 0, function () {
            var fields;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getFields(pageTypeCode)];
                    case 1:
                        fields = _a.sent();
                        fields.forEach(function (field) {
                            field.editable = false;
                        });
                        this.removeField(fields, 'typeCode');
                        this.removeField(fields, 'template');
                        this.removeField(fields, 'displayCondition');
                        this.removeField(fields, 'restrictions');
                        return [2 /*return*/, {
                                attributes: this.getOrderedFields(fields),
                                category: cmscommons.StructureTypeCategory.PAGE
                            }];
                }
            });
        });
    };
    ContextAwarePageStructureService.prototype.getPageStructureForViewing.$inject = ["pageTypeCode"];
    /* @ngInject */ ContextAwarePageStructureService.prototype.moveElement = function (array, oldPosition, newPosition) {
        if (oldPosition < 0 ||
            oldPosition >= array.length ||
            newPosition < 0 ||
            newPosition >= array.length) {
            return array;
        }
        array.splice(newPosition, 0, array.splice(oldPosition, 1)[0]);
        return array;
    };
    ContextAwarePageStructureService.prototype.moveElement.$inject = ["array", "oldPosition", "newPosition"];
    /* @ngInject */ ContextAwarePageStructureService.prototype.getOrderedFields = function (unorderedFields) {
        var index;
        var _loop_1 = function (i) {
            index = unorderedFields.findIndex(function (field) { return field.qualifier === PAGE_STRUCTURE_PRE_ORDER[i]; });
            this_1.moveElement(unorderedFields, index, 0);
        };
        var this_1 = this;
        for (var i = PAGE_STRUCTURE_PRE_ORDER.length - 1; i >= 0; i--) {
            _loop_1(i);
        }
        var _loop_2 = function (i) {
            index = unorderedFields.findIndex(function (field) { return field.qualifier === PAGE_STRUCTURE_POST_ORDER[i]; });
            this_2.moveElement(unorderedFields, index, unorderedFields.length - 1);
        };
        var this_2 = this;
        for (var i = 0; i < PAGE_STRUCTURE_POST_ORDER.length; i++) {
            _loop_2(i);
        }
        return unorderedFields;
    };
    ContextAwarePageStructureService.prototype.getOrderedFields.$inject = ["unorderedFields"];
    /* @ngInject */ ContextAwarePageStructureService.prototype.setLabelEditability = function (fields, isPrimary) {
        var labelFieldIndex = fields.findIndex(function (field) { return field.qualifier === 'label'; });
        // Leave the attribute uneditable if user does not have "change" attribute permission
        // NOTE: editable field might be undefined, undefined !== false => true
        if (labelFieldIndex !== -1 && fields[labelFieldIndex].editable !== false) {
            fields[labelFieldIndex].editable = isPrimary;
        }
    };
    ContextAwarePageStructureService.prototype.setLabelEditability.$inject = ["fields", "isPrimary"];
    /* @ngInject */ ContextAwarePageStructureService.prototype.getFields = function (pageTypeCode) {
        return __awaiter(this, void 0, void 0, function () {
            var structure;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.typeStructureRestService.getStructureByType(pageTypeCode)];
                    case 1:
                        structure = _a.sent();
                        structure.push({
                            cmsStructureType: 'DisplayConditionEditor',
                            i18nKey: 'type.abstractpage.displayCondition.name',
                            qualifier: 'displayCondition',
                            editable: false
                        }, {
                            cmsStructureType: 'ShortString',
                            i18nKey: 'se.cms.pageinfo.page.type',
                            qualifier: 'typeCode',
                            editable: false
                        });
                        return [2 /*return*/, structure];
                }
            });
        });
    };
    ContextAwarePageStructureService.prototype.getFields.$inject = ["pageTypeCode"];
    /* @ngInject */ ContextAwarePageStructureService.prototype.removeField = function (fields, fieldQualifier) {
        var index = fields.findIndex(function (field) { return field.qualifier === fieldQualifier; });
        if (index !== -1) {
            fields.splice(index, 1);
        }
    };
    ContextAwarePageStructureService.prototype.removeField.$inject = ["fields", "fieldQualifier"];
    /* @ngInject */ ContextAwarePageStructureService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [TypeStructureRestService,
            cmscommons.IPageService])
    ], /* @ngInject */ ContextAwarePageStructureService);
    return /* @ngInject */ ContextAwarePageStructureService;
}());

var AlertTypesMapping;
(function (AlertTypesMapping) {
    AlertTypesMapping["INFO"] = "showInfo";
    AlertTypesMapping["ALERT"] = "showAlert";
    AlertTypesMapping["DANGER"] = "showDanger";
    AlertTypesMapping["WARNING"] = "showWarning";
    AlertTypesMapping["SUCCESS"] = "showSuccess";
})(AlertTypesMapping || (AlertTypesMapping = {}));
/**
 * The actionableAlertService is used by external modules to render an
 * Alert structured around a description, an hyperlink label and a custom
 * controller.
 **/
var /* @ngInject */ ActionableAlertService = /** @class */ (function () {
    ActionableAlertService.$inject = ["alertService"];
    function /* @ngInject */ ActionableAlertService(alertService) {
        this.alertService = alertService;
    }
    /**
     * // TODO: remove and add Breaking Changes when all consumers use displayActionableAlert method.
     * @param alertContent A JSON object containing the specific configuration to be applied on the actionableAlert.
     * @param alertType A string representing the type of alert to display. The string must match one of the types
     * If the alert type is null, or it doesn't match any of the valid types this method will default to
     * INFO.
     */
    /* @ngInject */ ActionableAlertService.prototype.displayActionableAlertAngularJS = function (alertContent, alertType) {
        var alertMethodName = this.getMethodNameByAlertType(alertType);
        return this.alertService[alertMethodName]({
            closeable: true,
            controller: alertContent.controller,
            template: cmscommons.ACTIONABLE_ALERT_CONSTANTS.ALERT_TEMPLATE,
            timeout: alertContent.timeoutDuration || cmscommons.ACTIONABLE_ALERT_CONSTANTS.TIMEOUT_DURATION
        });
    };
    ActionableAlertService.prototype.displayActionableAlertAngularJS.$inject = ["alertContent", "alertType"];
    /**
     * @param alertContent A JSON object containing the specific configuration to be applied on the actionableAlert.
     * @param alertType A string representing the type of alert to display. The string must match one of the types
     * If the alert type is null, or it doesn't match any of the valid types this method will default to INFO.
     */
    /* @ngInject */ ActionableAlertService.prototype.displayActionableAlert = function (alertContent, alertType) {
        var alertMethodName = this.getMethodNameByAlertType(alertType);
        return this.alertService[alertMethodName](alertContent);
    };
    ActionableAlertService.prototype.displayActionableAlert.$inject = ["alertContent", "alertType"];
    /* @ngInject */ ActionableAlertService.prototype.getMethodNameByAlertType = function (alertType) {
        if (alertType && AlertTypesMapping[alertType]) {
            return AlertTypesMapping[alertType];
        }
        return AlertTypesMapping.INFO;
    };
    ActionableAlertService.prototype.getMethodNameByAlertType.$inject = ["alertType"];
    /* @ngInject */ ActionableAlertService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.IAlertService])
    ], /* @ngInject */ ActionableAlertService);
    return /* @ngInject */ ActionableAlertService;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageRestoredAlertComponent", {
    selector: 'se-page-restored-alert-component',
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    template: "<se-actionable-alert\n        [description]=\"message\"\n        [hyperlinkLabel]=\"hyperlinkLabel\"\n        [hyperlinkDetails]=\"hyperLinkDetails\"\n        (hyperLinkClick)=\"onClick()\"\n    ></se-actionable-alert>"
});
var /* @ngInject */ PageRestoredAlertComponent = /** @class */ (function () {
    PageRestoredAlertComponent.$inject = ["alertRef", "experienceService"];
    function /* @ngInject */ PageRestoredAlertComponent(alertRef, experienceService) {
        this.alertRef = alertRef;
        this.experienceService = experienceService;
        this.hyperlinkLabel = 'se.cms.page.restored.alert.info.hyperlink';
        this.message = 'se.cms.page.restored.alert.info.description';
    }
    /* @ngInject */ PageRestoredAlertComponent.prototype.ngOnInit = function () {
        var pageInfo = this.alertRef.data.pageInfo;
        this.hyperLinkDetails = { pageName: pageInfo.name };
    };
    /* @ngInject */ PageRestoredAlertComponent.prototype.onClick = function () {
        var _a = this.alertRef.data, catalogVersion = _a.catalogVersion, pageInfo = _a.pageInfo;
        this.alertRef.dismiss();
        this.experienceService.loadExperience({
            siteId: catalogVersion.siteId,
            catalogId: catalogVersion.catalogId,
            catalogVersion: catalogVersion.version,
            pageId: pageInfo.uid
        });
    };
    /* @ngInject */ PageRestoredAlertComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-restored-alert-component',
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            template: "<se-actionable-alert\n        [description]=\"message\"\n        [hyperlinkLabel]=\"hyperlinkLabel\"\n        [hyperlinkDetails]=\"hyperLinkDetails\"\n        (hyperLinkClick)=\"onClick()\"\n    ></se-actionable-alert>"
        }),
        __metadata("design:paramtypes", [core$2.AlertRef, smarteditcommons.IExperienceService])
    ], /* @ngInject */ PageRestoredAlertComponent);
    return /* @ngInject */ PageRestoredAlertComponent;
}());

var /* @ngInject */ PageRestoredAlertService = /** @class */ (function () {
    PageRestoredAlertService.$inject = ["catalogService", "actionableAlertService"];
    function /* @ngInject */ PageRestoredAlertService(catalogService, actionableAlertService) {
        this.catalogService = catalogService;
        this.actionableAlertService = actionableAlertService;
    }
    /* @ngInject */ PageRestoredAlertService.prototype.displayPageRestoredSuccessAlert = function (pageInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var catalogVersion, alertConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!pageInfo) {
                            throw new Error('[pageRestoredAlertService] - page info not provided.');
                        }
                        return [4 /*yield*/, this.catalogService.getCatalogVersionByUuid(pageInfo.catalogVersion)];
                    case 1:
                        catalogVersion = _a.sent();
                        alertConfig = {
                            component: PageRestoredAlertComponent,
                            data: {
                                catalogVersion: catalogVersion,
                                pageInfo: pageInfo
                            }
                        };
                        return [2 /*return*/, this.actionableAlertService.displayActionableAlert(alertConfig, cmscommons.ACTIONABLE_ALERT_CONSTANTS.ALERT_TYPES.SUCCESS)];
                }
            });
        });
    };
    PageRestoredAlertService.prototype.displayPageRestoredSuccessAlert.$inject = ["pageInfo"];
    /* @ngInject */ PageRestoredAlertService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.ICatalogService,
            ActionableAlertService])
    ], /* @ngInject */ PageRestoredAlertService);
    return /* @ngInject */ PageRestoredAlertService;
}());

var AlertMessage;
(function (AlertMessage) {
    AlertMessage["HIDDEN"] = "se.cms.component.visibility.alert.description.hidden";
    AlertMessage["RESTRICTED"] = "se.cms.component.visibility.alert.description.restricted";
})(AlertMessage || (AlertMessage = {}));
var /* @ngInject */ ComponentVisibilityAlertService = /** @class */ (function (_super) {
    __extends(/* @ngInject */ ComponentVisibilityAlertService, _super);
    ComponentVisibilityAlertService.$inject = ["sharedDataService", "alertService", "actionableAlertService"];
    function /* @ngInject */ ComponentVisibilityAlertService(sharedDataService, alertService, actionableAlertService) {
        var _this = _super.call(this) || this;
        _this.sharedDataService = sharedDataService;
        _this.alertService = alertService;
        _this.actionableAlertService = actionableAlertService;
        return _this;
    }
    /* @ngInject */ ComponentVisibilityAlertService.prototype.checkAndAlertOnComponentVisibility = function (component) {
        return __awaiter(this, void 0, void 0, function () {
            var shouldShowAlert, experience, message, isExternal, actionableAlertConf;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        shouldShowAlert = !component.visible || component.restricted;
                        if (!shouldShowAlert) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.sharedDataService.get(smarteditcommons.EXPERIENCE_STORAGE_KEY)];
                    case 1:
                        experience = (_a.sent());
                        message = !component.visible ? AlertMessage.HIDDEN : AlertMessage.RESTRICTED;
                        isExternal = component.catalogVersion !== experience.pageContext.catalogVersionUuid;
                        if (isExternal) {
                            this.alertService.showAlert({
                                message: message
                            });
                        }
                        else {
                            actionableAlertConf = {
                                component: cmscommons.ComponentVisibilityAlertComponent,
                                duration: 6000,
                                data: {
                                    component: component,
                                    message: message
                                }
                            };
                            this.actionableAlertService.displayActionableAlert(actionableAlertConf, smarteditcommons.IAlertServiceType.INFO);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ComponentVisibilityAlertService.prototype.checkAndAlertOnComponentVisibility.$inject = ["component"];
    /* @ngInject */ ComponentVisibilityAlertService = __decorate([
        smarteditcommons.SeDowngradeService(cmscommons.IComponentVisibilityAlertService),
        smarteditcommons.GatewayProxied('checkAndAlertOnComponentVisibility'),
        __metadata("design:paramtypes", [smarteditcommons.ISharedDataService,
            smarteditcommons.IAlertService,
            ActionableAlertService])
    ], /* @ngInject */ ComponentVisibilityAlertService);
    return /* @ngInject */ ComponentVisibilityAlertService;
}(cmscommons.IComponentVisibilityAlertService));

var ENABLE_CLONE_ON_DROP = 'enableCloneComponentOnDrop';
var /* @ngInject */ CmsDragAndDropService = /** @class */ (function () {
    CmsDragAndDropService.$inject = ["dragAndDropService", "gatewayFactory", "sharedDataService", "systemEventService", "yjQuery"];
    function /* @ngInject */ CmsDragAndDropService(dragAndDropService, gatewayFactory, sharedDataService, systemEventService, yjQuery) {
        this.dragAndDropService = dragAndDropService;
        this.gatewayFactory = gatewayFactory;
        this.sharedDataService = sharedDataService;
        this.systemEventService = systemEventService;
        this.yjQuery = yjQuery;
        this.gateway = this.gatewayFactory.createGateway('cmsDragAndDrop');
    }
    /* @ngInject */ CmsDragAndDropService_1 = /* @ngInject */ CmsDragAndDropService;
    /* @ngInject */ CmsDragAndDropService.prototype.register = function () {
        var _this = this;
        this.dragAndDropService.register({
            id: /* @ngInject */ CmsDragAndDropService_1.CMS_DRAG_AND_DROP_ID,
            sourceSelector: /* @ngInject */ CmsDragAndDropService_1.SOURCE_SELECTOR,
            targetSelector: /* @ngInject */ CmsDragAndDropService_1.TARGET_SELECTOR,
            startCallback: function (event) { return _this.onStart(event); },
            stopCallback: function () { return _this.onStop(); },
            enableScrolling: false
        });
    };
    /* @ngInject */ CmsDragAndDropService.prototype.unregister = function () {
        this.dragAndDropService.unregister([/* @ngInject */ CmsDragAndDropService_1.CMS_DRAG_AND_DROP_ID]);
    };
    /* @ngInject */ CmsDragAndDropService.prototype.apply = function () {
        this.dragAndDropService.apply(null);
    };
    /* @ngInject */ CmsDragAndDropService.prototype.update = function () {
        this.dragAndDropService.update(/* @ngInject */ CmsDragAndDropService_1.CMS_DRAG_AND_DROP_ID);
    };
    /* @ngInject */ CmsDragAndDropService.prototype.onStart = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var cloneOnDrop, component, dragInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sharedDataService.get(ENABLE_CLONE_ON_DROP)];
                    case 1:
                        cloneOnDrop = _a.sent();
                        component = this.getSelector(event.target).closest(/* @ngInject */ CmsDragAndDropService_1.COMPONENT_SELECTOR);
                        dragInfo = {
                            componentId: component.attr(smarteditcommons.ID_ATTRIBUTE),
                            componentUuid: component.attr(smarteditcommons.UUID_ATTRIBUTE),
                            componentType: component.attr(smarteditcommons.TYPE_ATTRIBUTE),
                            slotUuid: null,
                            slotId: null,
                            cloneOnDrop: cloneOnDrop
                        };
                        this.gateway.publish(cmscommons.DRAG_AND_DROP_EVENTS.DRAG_STARTED, dragInfo);
                        this.systemEventService.publishAsync(cmscommons.DRAG_AND_DROP_EVENTS.DRAG_STARTED);
                        return [2 /*return*/];
                }
            });
        });
    };
    CmsDragAndDropService.prototype.onStart.$inject = ["event"];
    /* @ngInject */ CmsDragAndDropService.prototype.onStop = function () {
        this.gateway.publish(cmscommons.DRAG_AND_DROP_EVENTS.DRAG_STOPPED, null);
    };
    /* @ngInject */ CmsDragAndDropService.prototype.getSelector = function (selector) {
        return this.yjQuery(selector);
    };
    CmsDragAndDropService.prototype.getSelector.$inject = ["selector"];
    var /* @ngInject */ CmsDragAndDropService_1;
    /* @ngInject */ CmsDragAndDropService.CMS_DRAG_AND_DROP_ID = 'se.cms.dragAndDrop';
    /* @ngInject */ CmsDragAndDropService.TARGET_SELECTOR = '';
    /* @ngInject */ CmsDragAndDropService.SOURCE_SELECTOR = ".smartEditComponent[data-smartedit-component-type!='ContentSlot']";
    /* @ngInject */ CmsDragAndDropService.COMPONENT_SELECTOR = '.smartEditComponent';
    /* @ngInject */ CmsDragAndDropService = /* @ngInject */ CmsDragAndDropService_1 = __decorate([
        smarteditcommons.SeDowngradeService(),
        __param(4, core.Inject(smarteditcommons.YJQUERY_TOKEN)),
        __metadata("design:paramtypes", [smarteditcommons.DragAndDropService,
            smarteditcommons.GatewayFactory,
            smarteditcommons.ISharedDataService,
            smarteditcommons.SystemEventService, Function])
    ], /* @ngInject */ CmsDragAndDropService);
    return /* @ngInject */ CmsDragAndDropService;
}());

/** Used to determine an URI for fetching the data for Dropdown Populators. */
var /* @ngInject */ ContextAwareCatalogService = /** @class */ (function () {
    ContextAwareCatalogService.$inject = ["catalogService", "sharedDataService"];
    function /* @ngInject */ ContextAwareCatalogService(catalogService, sharedDataService) {
        this.catalogService = catalogService;
        this.sharedDataService = sharedDataService;
    }
    /* @ngInject */ ContextAwareCatalogService.prototype.getProductCategorySearchUri = function (productCatalogId) {
        return this.getSearchUriByProductCatalogIdAndUriConstant(productCatalogId, PRODUCT_CATEGORY_SEARCH_RESOURCE_URI);
    };
    ContextAwareCatalogService.prototype.getProductCategorySearchUri.$inject = ["productCatalogId"];
    /* @ngInject */ ContextAwareCatalogService.prototype.getProductCategoryItemUri = function () {
        return this.getItemUriByUriConstant(PRODUCT_CATEGORY_RESOURCE_BASE_URI);
    };
    /* @ngInject */ ContextAwareCatalogService.prototype.getProductSearchUri = function (productCatalogId) {
        return this.getSearchUriByProductCatalogIdAndUriConstant(productCatalogId, smarteditcommons.PRODUCT_LIST_RESOURCE_API);
    };
    ContextAwareCatalogService.prototype.getProductSearchUri.$inject = ["productCatalogId"];
    /* @ngInject */ ContextAwareCatalogService.prototype.getProductItemUri = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getItemUriByUriConstant(smarteditcommons.PRODUCT_RESOURCE_API)];
                    case 1:
                        uri = _a.sent();
                        return [2 /*return*/, uri.replace('/:productUID', '')];
                }
            });
        });
    };
    /* @ngInject */ ContextAwareCatalogService.prototype.getContentPageSearchUri = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getContentPageUri()];
                    case 1:
                        uri = _a.sent();
                        return [2 /*return*/, uri + "?typeCode=ContentPage"];
                }
            });
        });
    };
    /* @ngInject */ ContextAwareCatalogService.prototype.getContentPageItemUri = function () {
        return this.getContentPageUri();
    };
    /* @ngInject */ ContextAwareCatalogService.prototype.getSearchUriByProductCatalogIdAndUriConstant = function (productCatalogId, uriConstant) {
        return __awaiter(this, void 0, void 0, function () {
            var catalogVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.getActiveProductCatalogVersionByCatalogId(productCatalogId)];
                    case 1:
                        catalogVersion = _a.sent();
                        return [2 /*return*/, uriConstant
                                .replace(/:catalogId/gi, productCatalogId)
                                .replace(/:catalogVersion/gi, catalogVersion)];
                }
            });
        });
    };
    ContextAwareCatalogService.prototype.getSearchUriByProductCatalogIdAndUriConstant.$inject = ["productCatalogId", "uriConstant"];
    /* @ngInject */ ContextAwareCatalogService.prototype.getItemUriByUriConstant = function (uriConstant) {
        return Promise.resolve(uriConstant.replace(/:siteUID/gi, 'CURRENT_CONTEXT_SITE_ID'));
    };
    ContextAwareCatalogService.prototype.getItemUriByUriConstant.$inject = ["uriConstant"];
    /* @ngInject */ ContextAwareCatalogService.prototype.getContentPageUri = function () {
        return __awaiter(this, void 0, void 0, function () {
            var catalogId, catalogVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sharedDataService.get(smarteditcommons.EXPERIENCE_STORAGE_KEY)];
                    case 1:
                        catalogId = (_a.sent()).catalogDescriptor.catalogId;
                        return [4 /*yield*/, this.catalogService.getActiveContentCatalogVersionByCatalogId(catalogId)];
                    case 2:
                        catalogVersion = _a.sent();
                        return [2 /*return*/, cmscommons.PAGES_LIST_RESOURCE_URI.replace(/CURRENT_CONTEXT_CATALOG/gi, catalogId).replace(/CURRENT_CONTEXT_CATALOG_VERSION/gi, catalogVersion)];
                }
            });
        });
    };
    /* @ngInject */ ContextAwareCatalogService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.ICatalogService,
            smarteditcommons.ISharedDataService])
    ], /* @ngInject */ ContextAwareCatalogService);
    return /* @ngInject */ ContextAwareCatalogService;
}());

var INBOX_POLLING_PARAMS = {
    INBOX_POLLING_TIMEOUT: 20000,
    INBOX_POLLING_PAGESIZE: 10,
    INBOX_POLLING_CURRENTPAGE: 0
};
/**
 * Used to retrieve inbox tasks.
 */
var /* @ngInject */ WorkflowTasksPollingService = /** @class */ (function () {
    WorkflowTasksPollingService.$inject = ["timerService", "restServiceFactory", "crossFrameEventService"];
    function /* @ngInject */ WorkflowTasksPollingService(timerService, restServiceFactory, crossFrameEventService) {
        var _this = this;
        this.timerService = timerService;
        this.restServiceFactory = restServiceFactory;
        this.crossFrameEventService = crossFrameEventService;
        this.resourceInboxURI = '/cmssmarteditwebservices/v1/inbox/workflowtasks';
        this.subscribers = [];
        this.syncPollingTimer = null;
        this.savedHashedTasks = [];
        this.inboxRESTService = this.restServiceFactory.get(this.resourceInboxURI);
        this.crossFrameEventService.subscribe(smarteditcommons.EVENTS.AUTHORIZATION_SUCCESS, function () {
            return _this.initPolling();
        });
        this.crossFrameEventService.subscribe(smarteditcommons.EVENTS.LOGOUT, function () { return _this.stopPolling(); });
        this.crossFrameEventService.subscribe(smarteditcommons.EVENTS.REAUTH_STARTED, function () { return _this.stopPolling(); });
        this.initPolling();
    }
    /**
     * Stops a polling timer.
     */
    /* @ngInject */ WorkflowTasksPollingService.prototype.stopPolling = function () {
        if (this.syncPollingTimer.isActive()) {
            this.syncPollingTimer.stop();
        }
    };
    /**
     * Starts a polling timer.
     */
    /* @ngInject */ WorkflowTasksPollingService.prototype.startPolling = function () {
        if (!this.syncPollingTimer.isActive()) {
            this.syncPollingTimer.restart(INBOX_POLLING_PARAMS.INBOX_POLLING_TIMEOUT);
        }
    };
    /**
     * Adds a new subscriber to the polling service. The subscriber is called with a list of new tasks and a pagination information.
     *
     * @param subscriber The subscriber.
     * @param callOnInit Default is true, when set to false, will not call the subscriber on initialization of the polling.
     *
     * @returns The method that can be used to unsubscribe.
     */
    /* @ngInject */ WorkflowTasksPollingService.prototype.addSubscriber = function (subscriber, callOnInit) {
        var _this = this;
        this.subscribers.push({
            subscriber: subscriber,
            callOnInit: callOnInit
        });
        var unsubscribeFn = function () { return _this.unsubscribe(subscriber); };
        return unsubscribeFn;
    };
    WorkflowTasksPollingService.prototype.addSubscriber.$inject = ["subscriber", "callOnInit"];
    /**
     * Initializes a polling process.
     */
    /* @ngInject */ WorkflowTasksPollingService.prototype.initPolling = function () {
        var _this = this;
        this.syncPollingTimer = this.timerService.createTimer(function () { return _this.fetchInboxTasks(false); }, INBOX_POLLING_PARAMS.INBOX_POLLING_TIMEOUT);
        this.fetchInboxTasks(true);
        this.startPolling();
    };
    /**
     * Unsubscribes a subscriber.
     * @param subscriber The subscriber that will be unsubscribed.
     */
    /* @ngInject */ WorkflowTasksPollingService.prototype.unsubscribe = function (subscriber) {
        var index = this.subscribers.findIndex(function (subs) { return subs.subscriber === subscriber; });
        if (index > -1) {
            this.subscribers.splice(index, 1);
        }
    };
    WorkflowTasksPollingService.prototype.unsubscribe.$inject = ["subscriber"];
    /**
     * Returns tasks that have not been yet delivered to subscribers.
     * @param tasks The list of retrieved tasks from the backend.
     * @return The list of new tasks.
     */
    /* @ngInject */ WorkflowTasksPollingService.prototype.getNewTasks = function (tasks) {
        var _this = this;
        var newTasks = tasks.filter(function (task) {
            var hashedTask = _this.encodeTask(task);
            return !_this.savedHashedTasks.includes(hashedTask);
        });
        return newTasks;
    };
    WorkflowTasksPollingService.prototype.getNewTasks.$inject = ["tasks"];
    /**
     * New tasks are added at the end of the array. If the array is bigger than INBOX_POLLING_PAGESIZE
     * it shrinks from the beginning to the INBOX_POLLING_PAGESIZE size.
     * @param newTasks The list of new tasks that will be stored in cache. Each task is encoded as base-64 string.
     */
    /* @ngInject */ WorkflowTasksPollingService.prototype.saveNewHashedTasks = function (newTasks) {
        var _this = this;
        newTasks.forEach(function (task) { return _this.savedHashedTasks.push(_this.encodeTask(task)); });
        var sizeDiff = this.savedHashedTasks.length - INBOX_POLLING_PARAMS.INBOX_POLLING_PAGESIZE;
        if (sizeDiff > 0) {
            for (var i = 0; i < sizeDiff; i++) {
                this.savedHashedTasks.shift();
            }
        }
    };
    WorkflowTasksPollingService.prototype.saveNewHashedTasks.$inject = ["newTasks"];
    /**
     * Encodes a task.
     * @param task the task that will be encoded to a base-64 string.
     * @return The encoded string
     */
    /* @ngInject */ WorkflowTasksPollingService.prototype.encodeTask = function (task) {
        var taskClone = lodash.cloneDeep(task);
        if (taskClone.action) {
            delete taskClone.action.startedAgoInMillis;
        }
        return btoa(JSON.stringify(taskClone));
    };
    WorkflowTasksPollingService.prototype.encodeTask.$inject = ["task"];
    /**
     * Retrieves the list if tasks from the backend in paginated view.
     * It calls each subscriber with a list of new tasks and pagination information.
     */
    /* @ngInject */ WorkflowTasksPollingService.prototype.fetchInboxTasks = function (isInit) {
        return __awaiter(this, void 0, void 0, function () {
            var response, newTasks;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchTaskList()];
                    case 1:
                        response = _a.sent();
                        if (!response) {
                            this.stopPolling();
                            return [2 /*return*/];
                        }
                        newTasks = this.getNewTasks(response.tasks);
                        this.saveNewHashedTasks(newTasks);
                        this.subscribers.forEach(function (subscriber) {
                            if (!isInit || (isInit && !!subscriber.callOnInit)) {
                                subscriber.subscriber(newTasks, response.pagination);
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    WorkflowTasksPollingService.prototype.fetchInboxTasks.$inject = ["isInit"];
    /* @ngInject */ WorkflowTasksPollingService.prototype.fetchTaskList = function () {
        try {
            return this.inboxRESTService.get({
                pageSize: INBOX_POLLING_PARAMS.INBOX_POLLING_PAGESIZE,
                currentPage: INBOX_POLLING_PARAMS.INBOX_POLLING_CURRENTPAGE
            });
        }
        catch (error) {
            return;
        }
    };
    /* @ngInject */ WorkflowTasksPollingService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.TimerService,
            smarteditcommons.IRestServiceFactory,
            smarteditcommons.CrossFrameEventService])
    ], /* @ngInject */ WorkflowTasksPollingService);
    return /* @ngInject */ WorkflowTasksPollingService;
}());

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
var OPEN_PAGE_WORKFLOW_MENU = 'OPEN_PAGE_WORKFLOW_MENU';
var CMS_EVENT_OPEN_PAGE_WORKFLOW_MENU = 'CMS_EVENT_OPEN_PAGE_WORKFLOW_MENU';
var WORKFLOW_TASKS_MENU_OPENED_EVENT = 'WORKFLOW_TASKS_MENU_OPENED_EVENT';
var WORKFLOW_DECISION_SELECTED_EVENT = 'WORKFLOW_DECISION_SELECTED_EVENT';
var CMS_EVENT_OPEN_WORKFLOW_INBOX_DROPDOWN = 'CMS_EVENT_OPEN_WORKFLOW_INBOX_DROPDOWN';
var WORKFLOW_ITEM_MENU_OPENED_EVENT = 'WORKFLOW_ITEM_MENU_OPENED_EVENT';
var WORKFLOW_REFRESH_EVENT = 'WORKFLOW_REFRESH_EVENT';

window.__smartedit__.addDecoratorPayload("Component", "WorkflowInboxMultipleTasksAnnouncementComponent", {
    selector: 'se-workflow-inbox-multiple-tasks-announcement',
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    template: "<div (click)=\"onClick($event)\" class=\"se-announcement__message--multi\">{{ 'se.cms.workflow.tasks.announcement' | translate: count }}</div>"
});
var WorkflowInboxMultipleTasksAnnouncementComponent = /** @class */ (function () {
    function WorkflowInboxMultipleTasksAnnouncementComponent(systemEventService, announcementService, data) {
        this.systemEventService = systemEventService;
        this.announcementService = announcementService;
        this.count = {
            announcementCount: null
        };
        (this.announcementId = data.id, this.tasks = data.tasks);
    }
    WorkflowInboxMultipleTasksAnnouncementComponent.prototype.ngOnInit = function () {
        this.count.announcementCount = String(this.tasks.length);
    };
    WorkflowInboxMultipleTasksAnnouncementComponent.prototype.onClick = function ($event) {
        $event.stopPropagation();
        this.systemEventService.publish(CMS_EVENT_OPEN_WORKFLOW_INBOX_DROPDOWN);
        this.announcementService.closeAnnouncement(this.announcementId);
    };
    WorkflowInboxMultipleTasksAnnouncementComponent = __decorate([
        core.Component({
            selector: 'se-workflow-inbox-multiple-tasks-announcement',
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            template: "<div (click)=\"onClick($event)\" class=\"se-announcement__message--multi\">{{ 'se.cms.workflow.tasks.announcement' | translate: count }}</div>"
        }),
        __param(2, core.Inject(smarteditcommons.ANNOUNCEMENT_DATA)),
        __metadata("design:paramtypes", [smarteditcommons.SystemEventService,
            smarteditcommons.IAnnouncementService, Object])
    ], WorkflowInboxMultipleTasksAnnouncementComponent);
    return WorkflowInboxMultipleTasksAnnouncementComponent;
}());

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
/**
 * Represents possible workflow action statuses.
 */
var WorkflowActionStatus;
(function (WorkflowActionStatus) {
    WorkflowActionStatus["PENDING"] = "pending";
    WorkflowActionStatus["IN_PROGRESS"] = "in_progress";
    WorkflowActionStatus["PAUSED"] = "paused";
    WorkflowActionStatus["COMPLETED"] = "completed";
    WorkflowActionStatus["DISABLED"] = "disabled";
    WorkflowActionStatus["ENDED_THROUGH_END_OF_WORKFLOW"] = "ended_through_end_of_workflow";
    WorkflowActionStatus["TERMINATED"] = "terminated";
})(WorkflowActionStatus || (WorkflowActionStatus = {}));

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
/**
 * Represents workflow operations.
 */
var WorkflowOperations;
(function (WorkflowOperations) {
    WorkflowOperations["CANCEL"] = "CANCEL_WORKFLOW";
    WorkflowOperations["MAKE_DECISION"] = "MAKE_DECISION";
})(WorkflowOperations || (WorkflowOperations = {}));

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
/**
 * Represents workflow statuses.
 */
var WorkflowStatus;
(function (WorkflowStatus) {
    WorkflowStatus["CONTINUED"] = "continued";
    WorkflowStatus["RUNNING"] = "running";
    WorkflowStatus["PAUSED"] = "paused";
    WorkflowStatus["FINISHED"] = "finished";
    WorkflowStatus["ABORTED"] = "aborted";
    WorkflowStatus["NEW"] = "new";
})(WorkflowStatus || (WorkflowStatus = {}));

var OpenPageWorkflowMenu;
(function (OpenPageWorkflowMenu) {
    OpenPageWorkflowMenu["Default"] = "Default";
    OpenPageWorkflowMenu["SwitchPerspective"] = "SwitchPerspective";
})(OpenPageWorkflowMenu || (OpenPageWorkflowMenu = {}));
/**
 * This service is used to manage workflows.
 */
var /* @ngInject */ WorkflowService = /** @class */ (function () {
    WorkflowService.$inject = ["restServiceFactory", "crossFrameEventService", "systemEventService", "sharedDataService", "perspectiveService", "catalogService", "experienceService", "workflowTasksPollingService"];
    function /* @ngInject */ WorkflowService(restServiceFactory, crossFrameEventService, systemEventService, sharedDataService, perspectiveService, catalogService, experienceService, workflowTasksPollingService) {
        var _this = this;
        this.restServiceFactory = restServiceFactory;
        this.crossFrameEventService = crossFrameEventService;
        this.systemEventService = systemEventService;
        this.sharedDataService = sharedDataService;
        this.perspectiveService = perspectiveService;
        this.catalogService = catalogService;
        this.experienceService = experienceService;
        this.workflowTasksPollingService = workflowTasksPollingService;
        this.workflowTasksCountSubject = new rxjs.BehaviorSubject(0);
        this.resourceWorkflowURI = "/cmswebservices/v1/catalogs/" + smarteditcommons.PAGE_CONTEXT_CATALOG + "/versions/" + smarteditcommons.PAGE_CONTEXT_CATALOG_VERSION + "/workflows";
        this.resourceWorkflowActionsURI = "/cmswebservices/v1/catalogs/" + smarteditcommons.PAGE_CONTEXT_CATALOG + "/versions/" + smarteditcommons.PAGE_CONTEXT_CATALOG_VERSION + "/workflows/:workflowCode/actions";
        this.resourceWorkflowTemplateURI = "/cmswebservices/v1/catalogs/" + smarteditcommons.PAGE_CONTEXT_CATALOG + "/versions/" + smarteditcommons.PAGE_CONTEXT_CATALOG_VERSION + "/workflowtemplates";
        this.resourceWorkflowOperationsURI = "/cmswebservices/v1/catalogs/" + smarteditcommons.PAGE_CONTEXT_CATALOG + "/versions/" + smarteditcommons.PAGE_CONTEXT_CATALOG_VERSION + "/workflows/:workflowCode/operations";
        this.resourceWorkflowActionCommentsURI = "/cmswebservices/v1/catalogs/" + smarteditcommons.PAGE_CONTEXT_CATALOG + "/versions/" + smarteditcommons.PAGE_CONTEXT_CATALOG_VERSION + "/workflows/:workflowCode/actions/:actionCode/comments";
        this.resourceWorkflowEditableItemsURI = "/cmssmarteditwebservices/v1/catalogs/" + smarteditcommons.PAGE_CONTEXT_CATALOG + "/versions/" + smarteditcommons.PAGE_CONTEXT_CATALOG_VERSION + "/workfloweditableitems";
        this.resourceWorkflowInboxTasksURI = "/cmssmarteditwebservices/v1/inbox/workflowtasks";
        this.workflowRESTService = this.restServiceFactory.get(this.resourceWorkflowURI);
        this.workflowTemplateRESTService = this.restServiceFactory.get(this.resourceWorkflowTemplateURI);
        this.workflowActionsRESTService = this.restServiceFactory.get(this.resourceWorkflowActionsURI);
        this.workflowInboxTasksRESTService = this.restServiceFactory.get(this.resourceWorkflowInboxTasksURI);
        this.workflowEditableItemsRESTService = this.restServiceFactory.get(this.resourceWorkflowEditableItemsURI);
        this.crossFrameEventService.subscribe(smarteditcommons.EVENT_PERSPECTIVE_REFRESHED, function () {
            return _this.openPageWorkflowMenu();
        });
        this.crossFrameEventService.subscribe(smarteditcommons.EVENT_PERSPECTIVE_CHANGED, function () {
            return _this.openPageWorkflowMenu();
        });
        this.workflowTasksPollingService.addSubscriber(function (tasks, pagination) {
            var totalNumberOfTasks = pagination.totalCount || 0;
            _this.updateWorkflowTasksCount(totalNumberOfTasks);
        }, true);
    }
    /**
     * Fetch workflow search result by making a REST call to the workflow API.
     *
     * @param queryParams The object representing the query params
     * @param queryParams.pageSize number of items in the page
     * @param queryParams.currentPage current page number
     * @param queryParams.attachments comma separated list of attachment id
     * @param queryParams.status comma separated list of workflow status
     * @param queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.
     * @param queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.
     *
     * @returns If request is successful, it returns a promise that resolves with the workflow search result. If the
     * request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ WorkflowService.prototype.getWorkflows = function (queryParams) {
        return __awaiter(this, void 0, void 0, function () {
            var workflowList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.workflowRESTService.get(queryParams)];
                    case 1:
                        workflowList = _a.sent();
                        return [2 /*return*/, workflowList.workflows];
                }
            });
        });
    };
    WorkflowService.prototype.getWorkflows.$inject = ["queryParams"];
    /**
     * Fetch workflow templates search result by making a REST call to the workflow API.
     *
     * @param queryParams The object representing the query params.
     * @param queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.
     * @param queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.
     *
     * @returns If request is successful, it returns a promise that resolves with the workflow template search result. If the
     * request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ WorkflowService.prototype.getWorkflowTemplates = function (queryParams) {
        return __awaiter(this, void 0, void 0, function () {
            var workflowTemplateList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.workflowTemplateRESTService.get(queryParams)];
                    case 1:
                        workflowTemplateList = _a.sent();
                        return [2 /*return*/, workflowTemplateList.templates];
                }
            });
        });
    };
    WorkflowService.prototype.getWorkflowTemplates.$inject = ["queryParams"];
    /**
     * Fetch all actions for a given workflow code.
     *
     * @returns If request is successful, it returns a promise that resolves to list of available actions. If the
     * request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ WorkflowService.prototype.getAllActionsForWorkflowCode = function (workflowCode) {
        return __awaiter(this, void 0, void 0, function () {
            var workflow;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.workflowActionsRESTService.get({
                            workflowCode: workflowCode
                        })];
                    case 1:
                        workflow = _a.sent();
                        return [2 /*return*/, workflow.actions];
                }
            });
        });
    };
    WorkflowService.prototype.getAllActionsForWorkflowCode.$inject = ["workflowCode"];
    /**
     * Cancels the workflow. Shows the confirmation message before sending the request.
     */
    /* @ngInject */ WorkflowService.prototype.cancelWorflow = function (workflow) {
        this.workflowOperationsRESTService = this.restServiceFactory.get(this.resourceWorkflowOperationsURI.replace(':workflowCode', workflow.workflowCode));
        return this.workflowOperationsRESTService.save({
            operation: WorkflowOperations.CANCEL
        });
    };
    WorkflowService.prototype.cancelWorflow.$inject = ["workflow"];
    /**
     * Returns a workflow template using its code.
     *
     * @returns A promise that resolves with the workflow template result, if the request is successful. If the
     * request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ WorkflowService.prototype.getWorkflowTemplateByCode = function (code) {
        return __awaiter(this, void 0, void 0, function () {
            var workflowTemplates, workflow;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWorkflowTemplates({})];
                    case 1:
                        workflowTemplates = _a.sent();
                        workflow = workflowTemplates.find(function (wf) { return wf.code === code; });
                        return [2 /*return*/, workflow];
                }
            });
        });
    };
    WorkflowService.prototype.getWorkflowTemplateByCode.$inject = ["code"];
    /**
     * This method determines whether the current catalog version (the one in the current experience) has workflows
     * enabled. A catalog version has workflows enabled if it has at least one workflow template assigned to it.
     *
     * @returns A promise that resolves to a boolean. It will be true, if the workflow is
     * enabled for the current catalog version. False, otherwise.
     */
    /* @ngInject */ WorkflowService.prototype.areWorkflowsEnabledOnCurrentCatalogVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var workflowTemplates;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWorkflowTemplates({})];
                    case 1:
                        workflowTemplates = _a.sent();
                        return [2 /*return*/, workflowTemplates && workflowTemplates.length > 0];
                }
            });
        });
    };
    /**
     * Fetch an active workflow for a page uuid.
     *
     * @returns A promise that resolves with the workflow object
     * or null, if the request is sucessful and there is no active workflow for provided page uuid.
     * If the request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ WorkflowService.prototype.getActiveWorkflowForPageUuid = function (pageUuid) {
        return __awaiter(this, void 0, void 0, function () {
            var workflows;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWorkflows({
                            pageSize: 1,
                            currentPage: 0,
                            attachment: pageUuid,
                            statuses: WorkflowStatus.RUNNING + ',' + WorkflowStatus.PAUSED
                        })];
                    case 1:
                        workflows = _a.sent();
                        return [2 /*return*/, workflows[0] === undefined ? null : workflows[0]];
                }
            });
        });
    };
    WorkflowService.prototype.getActiveWorkflowForPageUuid.$inject = ["pageUuid"];
    /**
     * Verifies whether the page is in a workflow or not.
     *
     * @returns If request is successful, it returns a promise that resolves with boolean value.
     * If the request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ WorkflowService.prototype.isPageInWorkflow = function (page) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getActiveWorkflowForPageUuid(page.uuid)];
                    case 1: return [2 /*return*/, !!(_a.sent())];
                }
            });
        });
    };
    WorkflowService.prototype.isPageInWorkflow.$inject = ["page"];
    /**
     * Verifies whether the use is a participant of a current active action.
     *
     * @returns If request is successful, it returns a promise that resolves to a boolean. If the
     * request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ WorkflowService.prototype.isUserParticipanInActiveAction = function (workflowCode) {
        return __awaiter(this, void 0, void 0, function () {
            var activeActions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getActiveActionsForWorkflowCode(workflowCode)];
                    case 1:
                        activeActions = _a.sent();
                        return [2 /*return*/, activeActions.length > 0];
                }
            });
        });
    };
    WorkflowService.prototype.isUserParticipanInActiveAction.$inject = ["workflowCode"];
    /**
     * Fetch all active actions for a given workflow code and for the current user.
     *
     * @returns If request is successful, it returns a promise that resolves to list of active actions. If the
     * request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ WorkflowService.prototype.getActiveActionsForWorkflowCode = function (workflowCode) {
        return __awaiter(this, void 0, void 0, function () {
            var actions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllActionsForWorkflowCode(workflowCode)];
                    case 1:
                        actions = _a.sent();
                        return [2 /*return*/, actions.filter(function (action) {
                                return action.isCurrentUserParticipant &&
                                    (WorkflowActionStatus.IN_PROGRESS === action.status.toLowerCase() ||
                                        WorkflowActionStatus.PAUSED === action.status.toLowerCase());
                            })];
                }
            });
        });
    };
    WorkflowService.prototype.getActiveActionsForWorkflowCode.$inject = ["workflowCode"];
    /**
     * Fetch a page of comments for a given workflow action and some pageable data.
     *
     * @returns If request is successful, it returns a promise that resolves to list of available comments for a given workflow and workflow action. If the
     * request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ WorkflowService.prototype.getCommentsForWorkflowAction = function (workflowCode, workflowActionCode, payload) {
        this.workflowActionCommentsRESTService = this.restServiceFactory.get(this.resourceWorkflowActionCommentsURI
            .replace(':workflowCode', workflowCode)
            .replace(':actionCode', workflowActionCode));
        return this.workflowActionCommentsRESTService.page(payload);
    };
    WorkflowService.prototype.getCommentsForWorkflowAction.$inject = ["workflowCode", "workflowActionCode", "payload"];
    /**
     * Fetches a page of workflow inbox tasks active for a given user.
     *
     * @returns If request is successful, it returns a promise that resolves to a page of workflow inbox tasks for a given user. If the
     * request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ WorkflowService.prototype.getWorkflowInboxTasks = function (payload) {
        return this.workflowInboxTasksRESTService.page(payload);
    };
    WorkflowService.prototype.getWorkflowInboxTasks.$inject = ["payload"];
    /** The total number of active workflow tasks. */
    /* @ngInject */ WorkflowService.prototype.getTotalNumberOfActiveWorkflowTasks = function () {
        return this.workflowTasksCountSubject.asObservable();
    };
    /* @ngInject */ WorkflowService.prototype.updateWorkflowTasksCount = function (count) {
        this.workflowTasksCountSubject.next(count);
    };
    WorkflowService.prototype.updateWorkflowTasksCount.$inject = ["count"];
    /**
     * Returns information about whether each item is editable or not. It also returns a workflow code where item is editable.
     *
     * @returns If request is successful, it returns a promise that resolves to a list of objects where each object
     * contains information about whether each item is editable or not. If the request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ WorkflowService.prototype.getWorkflowEditableItems = function (itemUids) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.workflowEditableItemsRESTService.get({
                            itemUids: itemUids
                        })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.editableItems];
                }
            });
        });
    };
    WorkflowService.prototype.getWorkflowEditableItems.$inject = ["itemUids"];
    /**
     * Returns a resource uri for workflows.
     */
    /* @ngInject */ WorkflowService.prototype.getResourceWorkflowURI = function () {
        return this.resourceWorkflowURI;
    };
    /**
     * Returns a resource uri for workflow operations.
     */
    /* @ngInject */ WorkflowService.prototype.getResourceWorkflowOperationsURI = function () {
        return this.resourceWorkflowOperationsURI;
    };
    /**
     * Opens the page workflow menu. If the current perspective is not basic or advanced, it will switch to advanced perspective and then opens the menu.
     */
    /* @ngInject */ WorkflowService.prototype.openPageWorkflowMenu = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, activePerspective;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sharedDataService.get(OPEN_PAGE_WORKFLOW_MENU)];
                    case 1:
                        data = _a.sent();
                        if (!(data === OpenPageWorkflowMenu.Default)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.perspectiveService.getActivePerspectiveKey()];
                    case 2:
                        activePerspective = _a.sent();
                        if (!(activePerspective === cmscommons.CMSModesService.BASIC_PERSPECTIVE_KEY ||
                            activePerspective === cmscommons.CMSModesService.ADVANCED_PERSPECTIVE_KEY)) return [3 /*break*/, 3];
                        this.systemEventService.publish(CMS_EVENT_OPEN_PAGE_WORKFLOW_MENU, true);
                        this.sharedDataService.remove(OPEN_PAGE_WORKFLOW_MENU);
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.sharedDataService.set(OPEN_PAGE_WORKFLOW_MENU, OpenPageWorkflowMenu.SwitchPerspective)];
                    case 4:
                        _a.sent();
                        this.perspectiveService.switchTo(cmscommons.CMSModesService.ADVANCED_PERSPECTIVE_KEY);
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        if (data === OpenPageWorkflowMenu.SwitchPerspective) {
                            this.systemEventService.publish(CMS_EVENT_OPEN_PAGE_WORKFLOW_MENU, true);
                            this.sharedDataService.remove(OPEN_PAGE_WORKFLOW_MENU);
                        }
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Loads the experience by building experience params from the given Workflow Task and then opens the page workflow menu.
     * If the current experience is same as the experience params from the given workflow task, it just opens the page workflow menu.
     * Otherwise, it loads the experience and then opens the page workflow menu.
     */
    /* @ngInject */ WorkflowService.prototype.loadExperienceAndOpenPageWorkflowMenu = function (task) {
        return __awaiter(this, void 0, void 0, function () {
            var defaultSite, experienceParams, isEqual;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!task) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.catalogService.getDefaultSiteForContentCatalog(task.attachments[0].catalogId)];
                    case 1:
                        defaultSite = _a.sent();
                        experienceParams = {
                            siteId: defaultSite.uid,
                            catalogId: task.attachments[0].catalogId,
                            catalogVersion: task.attachments[0].catalogVersion,
                            pageId: task.attachments[0].pageUid
                        };
                        if (!!!smarteditcommons.windowUtils.getGatewayTargetFrame()) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.experienceService.compareWithCurrentExperience(experienceParams)];
                    case 2:
                        isEqual = _a.sent();
                        if (!isEqual) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.sharedDataService.set(OPEN_PAGE_WORKFLOW_MENU, OpenPageWorkflowMenu.Default)];
                    case 3:
                        _a.sent();
                        this.openPageWorkflowMenu();
                        return [3 /*break*/, 5];
                    case 4:
                        this._loadExperience(experienceParams);
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        this._loadExperience(experienceParams);
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    WorkflowService.prototype.loadExperienceAndOpenPageWorkflowMenu.$inject = ["task"];
    /* @ngInject */ WorkflowService.prototype._loadExperience = function (experience) {
        var _this = this;
        this.experienceService.loadExperience(experience).then(function () {
            _this.sharedDataService.set(OPEN_PAGE_WORKFLOW_MENU, OpenPageWorkflowMenu.Default);
        });
    };
    WorkflowService.prototype._loadExperience.$inject = ["experience"];
    __decorate([
        smarteditcommons.Cached({
            actions: [smarteditcommons.rarelyChangingContent],
            tags: [
                smarteditcommons.pageChangeEvictionTag,
                smarteditcommons.perspectiveChangedEvictionTag,
                cmscommons.workflowTasksMenuOpenedEvictionTag,
                cmscommons.workflowCompletedEvictionTag,
                cmscommons.workflowCreatedEvictionTag
            ]
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], /* @ngInject */ WorkflowService.prototype, "getWorkflows", null);
    __decorate([
        smarteditcommons.Cached({ actions: [smarteditcommons.rarelyChangingContent], tags: [smarteditcommons.pageChangeEvictionTag] }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], /* @ngInject */ WorkflowService.prototype, "getWorkflowTemplates", null);
    __decorate([
        smarteditcommons.Cached({
            actions: [smarteditcommons.rarelyChangingContent],
            tags: [
                smarteditcommons.pageChangeEvictionTag,
                cmscommons.workflowTasksMenuOpenedEvictionTag,
                cmscommons.workflowCompletedEvictionTag,
                cmscommons.workflowCreatedEvictionTag
            ]
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], /* @ngInject */ WorkflowService.prototype, "getAllActionsForWorkflowCode", null);
    /* @ngInject */ WorkflowService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.IRestServiceFactory,
            smarteditcommons.CrossFrameEventService,
            smarteditcommons.SystemEventService,
            smarteditcommons.ISharedDataService,
            smarteditcommons.IPerspectiveService,
            smarteditcommons.ICatalogService,
            smarteditcommons.IExperienceService,
            WorkflowTasksPollingService])
    ], /* @ngInject */ WorkflowService);
    return /* @ngInject */ WorkflowService;
}());

window.__smartedit__.addDecoratorPayload("Component", "WorkflowInboxSingleTaskAnnouncementComponent", {
    selector: 'se-workflow-inbox-single-task-announcement',
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    template: "<div (click)=\"onClick($event)\"><div class=\"se-announcement__title\">{{ task.action.name | seL10n | async }}</div><div class=\"se-announcement__message\">{{ task.attachments[0].catalogName | seL10n | async }} | {{ task.attachments[0].pageName }}</div><div class=\"se-announcement__time-stamp\">{{ startedAgo }}</div></div>"
});
var WorkflowInboxSingleTaskAnnouncementComponent = /** @class */ (function () {
    function WorkflowInboxSingleTaskAnnouncementComponent(workflowService, cmsTimeService, announcementService, data) {
        this.workflowService = workflowService;
        this.cmsTimeService = cmsTimeService;
        this.announcementService = announcementService;
        (this.announcementId = data.id, this.task = data.task);
    }
    WorkflowInboxSingleTaskAnnouncementComponent.prototype.ngOnInit = function () {
        this.startedAgo = this.getStartedAgo();
    };
    WorkflowInboxSingleTaskAnnouncementComponent.prototype.onClick = function (event) {
        event.stopPropagation();
        this.workflowService.loadExperienceAndOpenPageWorkflowMenu(this.task);
        this.announcementService.closeAnnouncement(this.announcementId);
    };
    WorkflowInboxSingleTaskAnnouncementComponent.prototype.getStartedAgo = function () {
        if (!!this.task.action.startedAgoInMillis) {
            return this.cmsTimeService.getTimeAgo(this.task.action.startedAgoInMillis);
        }
        return null;
    };
    WorkflowInboxSingleTaskAnnouncementComponent = __decorate([
        core.Component({
            selector: 'se-workflow-inbox-single-task-announcement',
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            template: "<div (click)=\"onClick($event)\"><div class=\"se-announcement__title\">{{ task.action.name | seL10n | async }}</div><div class=\"se-announcement__message\">{{ task.attachments[0].catalogName | seL10n | async }} | {{ task.attachments[0].pageName }}</div><div class=\"se-announcement__time-stamp\">{{ startedAgo }}</div></div>"
        }),
        __param(3, core.Inject(smarteditcommons.ANNOUNCEMENT_DATA)),
        __metadata("design:paramtypes", [WorkflowService,
            cmscommons.CMSTimeService,
            smarteditcommons.IAnnouncementService, Object])
    ], WorkflowInboxSingleTaskAnnouncementComponent);
    return WorkflowInboxSingleTaskAnnouncementComponent;
}());

/**
 * This service is used to show announcements for workflow inbox tasks.
 */
var /* @ngInject */ WorkflowInboxAnnouncementService = /** @class */ (function () {
    WorkflowInboxAnnouncementService.$inject = ["workflowTasksPollingService", "announcementService"];
    function /* @ngInject */ WorkflowInboxAnnouncementService(workflowTasksPollingService, announcementService) {
        var _this = this;
        this.workflowTasksPollingService = workflowTasksPollingService;
        this.announcementService = announcementService;
        this.unsubscribePollingService = this.workflowTasksPollingService.addSubscriber(
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        function (tasks, pagination) {
            if (tasks) {
                _this.displayAnnouncement(tasks);
            }
        }, false);
    }
    /* @ngInject */ WorkflowInboxAnnouncementService.prototype.ngOnDestroy = function () {
        this.unsubscribePollingService();
    };
    /* @ngInject */ WorkflowInboxAnnouncementService.prototype.displayAnnouncement = function (tasks) {
        if (tasks.length === 1) {
            this.showSingleTaskAnnouncement(tasks[0]);
        }
        else if (tasks.length > 1) {
            this.showMultipleTasksAnnouncement(tasks);
        }
    };
    WorkflowInboxAnnouncementService.prototype.displayAnnouncement.$inject = ["tasks"];
    /* @ngInject */ WorkflowInboxAnnouncementService.prototype.showSingleTaskAnnouncement = function (task) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.showAnnouncement(WorkflowInboxSingleTaskAnnouncementComponent, {
                            task: task
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    WorkflowInboxAnnouncementService.prototype.showSingleTaskAnnouncement.$inject = ["task"];
    /* @ngInject */ WorkflowInboxAnnouncementService.prototype.showMultipleTasksAnnouncement = function (tasks) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.showAnnouncement(WorkflowInboxMultipleTasksAnnouncementComponent, {
                            tasks: tasks
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    WorkflowInboxAnnouncementService.prototype.showMultipleTasksAnnouncement.$inject = ["tasks"];
    /* @ngInject */ WorkflowInboxAnnouncementService.prototype.showAnnouncement = function (component, data) {
        return this.announcementService.showAnnouncement({
            component: component,
            data: data
        });
    };
    WorkflowInboxAnnouncementService.prototype.showAnnouncement.$inject = ["component", "data"];
    /* @ngInject */ WorkflowInboxAnnouncementService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [WorkflowTasksPollingService,
            smarteditcommons.IAnnouncementService])
    ], /* @ngInject */ WorkflowInboxAnnouncementService);
    return /* @ngInject */ WorkflowInboxAnnouncementService;
}());

/**
 * Used to manage workflows.
 */
var /* @ngInject */ WorkflowFacade = /** @class */ (function () {
    WorkflowFacade.$inject = ["alertService", "workflowService", "confirmationModalService", "genericEditorModalService", "pageInfoService", "systemEventService", "l10nPipe"];
    function /* @ngInject */ WorkflowFacade(alertService, workflowService, confirmationModalService, genericEditorModalService, pageInfoService, systemEventService, l10nPipe) {
        this.alertService = alertService;
        this.workflowService = workflowService;
        this.confirmationModalService = confirmationModalService;
        this.genericEditorModalService = genericEditorModalService;
        this.pageInfoService = pageInfoService;
        this.systemEventService = systemEventService;
        this.l10nPipe = l10nPipe;
        this.VERSION_LABEL_QUALIFIER = 'versionLabel';
        this.CREATE_VERSION_QUALIFIER = 'createVersion';
        this.SYNC_POLLING_SPEED_PREFIX = 'workflow-';
        this.startWorkflowStructureAttributes = [
            {
                cmsStructureType: 'EditableDropdown',
                qualifier: 'templateCode',
                i18nKey: 'se.cms.workflow.editor.template',
                localized: false,
                required: true,
                idAttribute: 'code',
                labelAttributes: ['name']
            },
            {
                cmsStructureType: 'LongString',
                qualifier: 'description',
                i18nKey: 'se.cms.workflow.editor.description',
                required: false
            },
            {
                cmsStructureType: 'WorkflowCreateVersionField',
                qualifier: this.CREATE_VERSION_QUALIFIER,
                required: false
            }
        ];
        this.editWorkflowStructureAttributes = [
            {
                cmsStructureType: 'LongString',
                qualifier: 'description',
                i18nKey: 'se.cms.workflow.editor.description',
                required: false
            }
        ];
        this.makeDecisionStructureAttributes = [
            {
                cmsStructureType: 'LongString',
                qualifier: 'comment',
                i18nKey: 'se.cms.workflow.editor.comment',
                required: false
            },
            {
                cmsStructureType: 'WorkflowCreateVersionField',
                qualifier: this.CREATE_VERSION_QUALIFIER,
                required: false
            }
        ];
    }
    /**
     * Opens the generic editor form that is used to start a workflow.
     *
     * @returns A promise that resolves to a workflow instance.
     */
    /* @ngInject */ WorkflowFacade.prototype.startWorkflow = function () {
        return __awaiter(this, void 0, void 0, function () {
            var componentData, unregisterErrorListener;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWorkflowDataForEditor()];
                    case 1:
                        componentData = _a.sent();
                        unregisterErrorListener = this.systemEventService.subscribe(smarteditcommons.GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, function (eventId, eventData) {
                            return _this.handleUnrelatedValidationErrors(eventId, eventData);
                        });
                        try {
                            return [2 /*return*/, this.genericEditorModalService.open(componentData, function (result) {
                                    _this.alertService.showSuccess('se.cms.workflow.create.alert.success');
                                    _this.systemEventService.publish(cmscommons.WORKFLOW_CREATED_EVENT);
                                    _this.updateWorkflowTasksCount();
                                    return result;
                                })];
                        }
                        finally {
                            unregisterErrorListener();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Cancels the workflow. Shows the confirmation message before sending the request.
     */
    /* @ngInject */ WorkflowFacade.prototype.cancelWorflow = function (workflow) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.confirmationModalService.confirm({
                            title: 'se.cms.workflow.cancel.confirmation.title',
                            description: 'se.cms.workflow.cancel.confirmation.description'
                        })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, , 4, 5]);
                        return [4 /*yield*/, this.workflowService.cancelWorflow(workflow)];
                    case 3:
                        _a.sent();
                        this.alertService.showSuccess('se.cms.workflow.cancel.alert.success');
                        return [3 /*break*/, 5];
                    case 4:
                        this.systemEventService.publish(cmscommons.WORKFLOW_FINISHED_EVENT);
                        this.updateWorkflowTasksCount();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    WorkflowFacade.prototype.cancelWorflow.$inject = ["workflow"];
    /**
     * Opens modal to edit workflow.
     *
     * Returns edited workflow.
     */
    /* @ngInject */ WorkflowFacade.prototype.editWorkflow = function (workflow) {
        return __awaiter(this, void 0, void 0, function () {
            var componentData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWorkflowDataForEditor(workflow)];
                    case 1:
                        componentData = _a.sent();
                        return [2 /*return*/, this.genericEditorModalService.open(componentData, function (result) { return result; })];
                }
            });
        });
    };
    WorkflowFacade.prototype.editWorkflow.$inject = ["workflow"];
    /* @ngInject */ WorkflowFacade.prototype.updateWorkflowTasksCount = function (count) {
        return __awaiter(this, void 0, void 0, function () {
            var tasksCount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (typeof count === 'undefined'
                            ? this.getTotalNumberOfTasks()
                            : count)];
                    case 1:
                        tasksCount = _a.sent();
                        this.workflowService.updateWorkflowTasksCount(tasksCount);
                        return [2 /*return*/];
                }
            });
        });
    };
    WorkflowFacade.prototype.updateWorkflowTasksCount.$inject = ["count"];
    /**
     * Returns all actions for a given workflow code.
     */
    /* @ngInject */ WorkflowFacade.prototype.getAllActionsForWorkflow = function (workflowCode) {
        return this.workflowService.getAllActionsForWorkflowCode(workflowCode);
    };
    WorkflowFacade.prototype.getAllActionsForWorkflow.$inject = ["workflowCode"];
    /**
     * Returns all active actions for a given workflow code and for the current user.
     */
    /* @ngInject */ WorkflowFacade.prototype.getActiveActionsForWorkflow = function (workflowCode) {
        return this.workflowService.getActiveActionsForWorkflowCode(workflowCode);
    };
    WorkflowFacade.prototype.getActiveActionsForWorkflow.$inject = ["workflowCode"];
    /**
     * Returns a paged list of comments for a given workflow and workflow action.
     *
     * Since the result is paginated and used by the InfiniteScrollingComponent, the list of comments is populated in the results property.
     */
    /* @ngInject */ WorkflowFacade.prototype.getCommentsForWorkflowAction = function (workflowCode, workflowActionCode, payload) {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.workflowService.getCommentsForWorkflowAction(workflowCode, workflowActionCode, payload)];
                    case 1:
                        page = _a.sent();
                        page.results = page.comments;
                        delete page.comments;
                        return [2 /*return*/, page];
                }
            });
        });
    };
    WorkflowFacade.prototype.getCommentsForWorkflowAction.$inject = ["workflowCode", "workflowActionCode", "payload"];
    /**
     * Returns a paged list of active workflow inbox tasks for a given user.
     */
    /* @ngInject */ WorkflowFacade.prototype.getWorkflowInboxTasks = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.workflowService.getWorkflowInboxTasks(payload)];
                    case 1:
                        page = _a.sent();
                        page.results = page.tasks;
                        delete page.tasks;
                        return [2 /*return*/, page];
                }
            });
        });
    };
    WorkflowFacade.prototype.getWorkflowInboxTasks.$inject = ["payload"];
    /* @ngInject */ WorkflowFacade.prototype.getTotalNumberOfTasks = function () {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWorkflowInboxTasks({ pageSize: 1, currentPage: 0 })];
                    case 1:
                        page = _a.sent();
                        return [2 /*return*/, page.pagination.totalCount];
                }
            });
        });
    };
    /**
     * Makes a decision for a given workflow action and workflow decision.
     */
    /* @ngInject */ WorkflowFacade.prototype.makeDecision = function (workflowCode, workflowAction, decision) {
        return __awaiter(this, void 0, void 0, function () {
            var componentData, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {};
                        return [4 /*yield*/, this.l10nPipe.transform(decision.name).pipe(operators.take(1)).toPromise()];
                    case 1:
                        componentData = (_a.title = _b.sent(),
                            _a.structure = {
                                attributes: this.makeDecisionStructureAttributes
                            },
                            _a.contentApi = this.workflowService.getResourceWorkflowOperationsURI(),
                            _a.saveLabel = 'se.cms.workflow.editor.button.submit',
                            _a.content = {
                                operation: WorkflowOperations.MAKE_DECISION,
                                workflowCode: workflowCode,
                                actionCode: workflowAction.code,
                                decisionCode: decision.code
                            },
                            _a.initialDirty = true,
                            _a);
                        return [2 /*return*/, this.genericEditorModalService.open(componentData, function (result) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.confirmDecision(result.status, workflowAction, decision)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/, result];
                                    }
                                });
                            }); }, null)];
                }
            });
        });
    };
    WorkflowFacade.prototype.makeDecision.$inject = ["workflowCode", "workflowAction", "decision"];
    /* @ngInject */ WorkflowFacade.prototype.confirmDecision = function (status, workflowAction, decision) {
        return __awaiter(this, void 0, void 0, function () {
            var currentPageUuid, _a, _b, _c, _d, tasksCount;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 1:
                        currentPageUuid = _e.sent();
                        return [4 /*yield*/, this.systemEventService.publish(cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.SPEED_UP, this.SYNC_POLLING_SPEED_PREFIX + currentPageUuid)];
                    case 2:
                        _e.sent();
                        if (!(status.toLowerCase() === WorkflowStatus.FINISHED)) return [3 /*break*/, 3];
                        this.alertService.showSuccess('se.cms.workflow.completed.alert.success');
                        this.systemEventService.publishAsync(cmscommons.WORKFLOW_FINISHED_EVENT);
                        return [3 /*break*/, 6];
                    case 3:
                        _b = (_a = this.alertService).showSuccess;
                        _c = {
                            message: 'se.cms.workflow.make.decision.success'
                        };
                        _d = {};
                        return [4 /*yield*/, this.l10nPipe
                                .transform(decision.name)
                                .pipe(operators.take(1))
                                .toPromise()];
                    case 4:
                        _d.workflowDecisionName = _e.sent();
                        return [4 /*yield*/, this.l10nPipe
                                .transform(workflowAction.name)
                                .pipe(operators.take(1))
                                .toPromise()];
                    case 5:
                        _b.apply(_a, [(_c.messagePlaceholders = (_d.workflowActionName = _e.sent(),
                                _d),
                                _c)]);
                        _e.label = 6;
                    case 6:
                        // resets back to slow polling
                        this.systemEventService.publish(cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.SLOW_DOWN, this.SYNC_POLLING_SPEED_PREFIX + currentPageUuid);
                        return [4 /*yield*/, this.getTotalNumberOfTasks()];
                    case 7:
                        tasksCount = _e.sent();
                        this.updateWorkflowTasksCount(tasksCount);
                        return [2 /*return*/];
                }
            });
        });
    };
    WorkflowFacade.prototype.confirmDecision.$inject = ["status", "workflowAction", "decision"];
    /**
     * Returns the data for GenericEditorModalComponent.
     *
     * @param workflow the data object to populate generic editor.
     * If workflow is null the generic editor displays fields to start a workflow,
     * Otherwise, the generic editor displays fields to edit a workflow.
     */
    /* @ngInject */ WorkflowFacade.prototype.getWorkflowDataForEditor = function (workflow) {
        if (workflow === void 0) { workflow = null; }
        return __awaiter(this, void 0, void 0, function () {
            var isStartingWorkflow, componentData;
            return __generator(this, function (_a) {
                isStartingWorkflow = workflow === null;
                componentData = {
                    title: null,
                    contentApi: this.workflowService.getResourceWorkflowURI()
                };
                return [2 /*return*/, isStartingWorkflow
                        ? this.getComponentDataForStartingWorkflow(componentData)
                        : this.getComponentDataForNonStartingWorkflow(componentData, workflow.workflowCode)];
            });
        });
    };
    WorkflowFacade.prototype.getWorkflowDataForEditor.$inject = ["workflow"];
    /* @ngInject */ WorkflowFacade.prototype.getComponentDataForStartingWorkflow = function (componentData) {
        return __awaiter(this, void 0, void 0, function () {
            var templateCodeField, workflowTemplates, pageUuid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        templateCodeField = this.startWorkflowStructureAttributes.find(function (structureAttribute) {
                            return structureAttribute.qualifier === 'templateCode';
                        });
                        return [4 /*yield*/, this.workflowService.getWorkflowTemplates({})];
                    case 1:
                        workflowTemplates = _a.sent();
                        templateCodeField.options = workflowTemplates;
                        componentData.title = 'se.cms.workflow.editor.start.workflow.title';
                        componentData.saveLabel = 'se.cms.workflow.editor.button.start';
                        componentData.structure = {
                            attributes: this.startWorkflowStructureAttributes
                        };
                        return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 2:
                        pageUuid = _a.sent();
                        componentData.content = {
                            attachments: [pageUuid]
                        };
                        return [2 /*return*/, componentData];
                }
            });
        });
    };
    WorkflowFacade.prototype.getComponentDataForStartingWorkflow.$inject = ["componentData"];
    /* @ngInject */ WorkflowFacade.prototype.getComponentDataForNonStartingWorkflow = function (componentData, workflowCode) {
        componentData.title = 'se.cms.workflow.editor.edit.workflow.title';
        componentData.saveLabel = 'se.cms.workflow.editor.button.save';
        componentData.structure = {
            attributes: this.editWorkflowStructureAttributes
        };
        componentData.componentUuid = workflowCode;
        componentData.componentType = 'workflow';
        return componentData;
    };
    WorkflowFacade.prototype.getComponentDataForNonStartingWorkflow.$inject = ["componentData", "workflowCode"];
    /**
     * Handles errors that the generic editor didn't handle directly (for example, due to unknown qualifiers) in two
     * ways:
     * 1. Even though there are different attributes for createVersion and versionLabel, in the front-end they are handled
     *    in the same widget, under the createVersion qualifier. However, when validating, the backend sends the error
     *    directly to versionLabel. Thus, any time there's an error directed to versionLabel it needs to be assigned to
     *    createVersion and republished for it to become visible.
     * 2. Any other error will be displayed in an alert.
     */
    /* @ngInject */ WorkflowFacade.prototype.handleUnrelatedValidationErrors = function (key, eventData) {
        var _this = this;
        if (!eventData.sourceGenericEditorId) {
            return;
        }
        var alertMessage = '';
        var errorsToRepublish = [];
        eventData.messages.forEach(function (error) {
            if (error.subject === _this.VERSION_LABEL_QUALIFIER) {
                error.subject = _this.CREATE_VERSION_QUALIFIER;
                errorsToRepublish.push(error);
            }
            else {
                alertMessage += error.message + ' ';
            }
        });
        if (alertMessage) {
            this.alertService.showDanger(alertMessage);
        }
        if (errorsToRepublish.length > 0) {
            this.systemEventService.publishAsync(smarteditcommons.GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, {
                messages: errorsToRepublish
            });
        }
    };
    WorkflowFacade.prototype.handleUnrelatedValidationErrors.$inject = ["key", "eventData"];
    /* @ngInject */ WorkflowFacade = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.IAlertService,
            WorkflowService,
            smarteditcommons.IConfirmationModalService,
            GenericEditorModalService,
            smarteditcommons.IPageInfoService,
            smarteditcommons.SystemEventService,
            smarteditcommons.L10nPipe])
    ], /* @ngInject */ WorkflowFacade);
    return /* @ngInject */ WorkflowFacade;
}());

var /* @ngInject */ RulesAndPermissionsRegistrationService = /** @class */ (function () {
    RulesAndPermissionsRegistrationService.$inject = ["attributePermissionsRestService", "catalogService", "catalogVersionPermissionService", "catalogVersionRestService", "cMSModesService", "experienceService", "pageService", "permissionService", "sharedDataService", "typePermissionsRestService", "workflowService"];
    function /* @ngInject */ RulesAndPermissionsRegistrationService(attributePermissionsRestService, catalogService, catalogVersionPermissionService, catalogVersionRestService, cMSModesService, experienceService, pageService, permissionService, sharedDataService, typePermissionsRestService, workflowService) {
        this.attributePermissionsRestService = attributePermissionsRestService;
        this.catalogService = catalogService;
        this.catalogVersionPermissionService = catalogVersionPermissionService;
        this.catalogVersionRestService = catalogVersionRestService;
        this.cMSModesService = cMSModesService;
        this.experienceService = experienceService;
        this.pageService = pageService;
        this.permissionService = permissionService;
        this.sharedDataService = sharedDataService;
        this.typePermissionsRestService = typePermissionsRestService;
        this.workflowService = workflowService;
    }
    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.register = function () {
        this.registerRules();
        this.registerRulesForTypeCodeFromContext();
        this.registerRulesForCurrentPage();
        this.registerRulesForTypeCode();
        this.registerRulesForTypeAndQualifier();
        this.registerPermissions();
    };
    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.onSuccess = function (results) {
        return results.every(function (isValid) { return isValid; });
    };
    RulesAndPermissionsRegistrationService.prototype.onSuccess.$inject = ["results"];
    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.onError = function () {
        return false;
    };
    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.getCurrentPageActiveWorkflow = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uuid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!smarteditcommons.windowUtils.getGatewayTargetFrame()) {
                            return [2 /*return*/, null];
                        }
                        return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                    case 1:
                        uuid = (_a.sent()).uuid;
                        return [2 /*return*/, this.workflowService.getActiveWorkflowForPageUuid(uuid)];
                }
            });
        });
    };
    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerRules = function () {
        var _this = this;
        this.permissionService.registerRule({
            names: [
                'se.write.page',
                'se.write.slot',
                'se.write.component',
                'se.write.to.current.catalog.version'
            ],
            verify: function (permissionNameObjs) {
                var promises = permissionNameObjs.map(function (permissionNameObject) {
                    if (permissionNameObject.context) {
                        return _this.catalogVersionPermissionService.hasWritePermission(permissionNameObject.context.catalogId, permissionNameObject.context.catalogVersion);
                    }
                    else {
                        return _this.catalogVersionPermissionService.hasWritePermissionOnCurrent();
                    }
                });
                return Promise.all(promises).then(_this.onSuccess, _this.onError);
            }
        });
        /**
         * This rule returns true if the page is in a workflow and current user is participant of this workflow
         * or there is no workflow.
         * Otherwise, it returns false;
         */
        this.permissionService.registerRule({
            names: ['se.current.user.can.act.on.page.in.workflow'],
            verify: function (permissionNameObjs) {
                var isAvailableForCurrentPrincipal = function (workflow) {
                    return workflow === null ? true : workflow.isAvailableForCurrentPrincipal;
                };
                var promises = permissionNameObjs.map(function (permissionNameObject) {
                    if (permissionNameObject.context) {
                        return _this.workflowService
                            .getActiveWorkflowForPageUuid(permissionNameObject.context.pageInfo.uuid)
                            .then(function (workflow) { return isAvailableForCurrentPrincipal(workflow); });
                    }
                    else {
                        return _this.getCurrentPageActiveWorkflow().then(function (workflow) { return isAvailableForCurrentPrincipal(workflow); }, function () { return true; });
                    }
                });
                return Promise.all(promises).then(_this.onSuccess, _this.onError);
            }
        });
        /**
         * This rule returns true if the current user is a participant of currently active step of a workflow
         * or there is no workflow.
         * Otherwise, it returns false;
         */
        this.permissionService.registerRule({
            names: ['se.current.user.can.act.on.workflow.current.action'],
            verify: function (permissionNameObjs) {
                var isUserParticipant = function (workflow) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, workflow === null
                                ? true
                                : this.workflowService.isUserParticipanInActiveAction(workflow.workflowCode)];
                    });
                }); };
                var promises = permissionNameObjs.map(function (permissionNameObject) {
                    if (permissionNameObject.context) {
                        return _this.workflowService
                            .getActiveWorkflowForPageUuid(permissionNameObject.context.pageInfo.uuid)
                            .then(function (workflow) { return isUserParticipant(workflow); });
                    }
                    else {
                        return _this.getCurrentPageActiveWorkflow().then(function (workflow) { return isUserParticipant(workflow); }, function () { return true; });
                    }
                });
                return Promise.all(promises).then(_this.onSuccess, _this.onError);
            }
        });
        this.permissionService.registerRule({
            names: ['se.sync.catalog'],
            verify: function (permissionNameObjs) {
                var promises = permissionNameObjs.map(function (permissionNameObject) {
                    if (permissionNameObject.context) {
                        return _this.catalogVersionPermissionService.hasSyncPermission(permissionNameObject.context.catalogId, permissionNameObject.context.catalogVersion, permissionNameObject.context.targetCatalogVersion);
                    }
                    else {
                        return _this.catalogVersionPermissionService.hasSyncPermissionFromCurrentToActiveCatalogVersion();
                    }
                });
                return Promise.all(promises).then(_this.onSuccess, _this.onError);
            }
        });
        this.permissionService.registerRule({
            names: ['se.approval.status.page'],
            verify: function () { return __awaiter(_this, void 0, void 0, function () {
                var approvalStatus;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                        case 1:
                            approvalStatus = (_a.sent()).approvalStatus;
                            return [2 /*return*/, approvalStatus === 'APPROVED'];
                    }
                });
            }); }
        });
        this.permissionService.registerRule({
            names: [
                'se.read.page',
                'se.read.slot',
                'se.read.component',
                'se.read.current.catalog.version'
            ],
            verify: function () { return _this.catalogVersionPermissionService.hasReadPermissionOnCurrent(); }
        });
        this.permissionService.registerRule({
            names: ['se.page.belongs.to.experience'],
            verify: function () { return __awaiter(_this, void 0, void 0, function () {
                var experience;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.sharedDataService.get(smarteditcommons.EXPERIENCE_STORAGE_KEY)];
                        case 1:
                            experience = (_a.sent());
                            return [2 /*return*/, (experience.pageContext &&
                                    experience.pageContext.catalogVersionUuid ===
                                        experience.catalogDescriptor.catalogVersionUuid)];
                    }
                });
            }); }
        });
        /**
         * Show the clone icon:
         * - If a page belonging to an active catalog version is a primary page, whose copyToCatalogsDisabled flag is set to false and has at-least one clonable target.
         * - If a page belonging to a non active catalog version has at-least one clonable target.
         *
         * !NOTE: Logic here is very similar to logic used in ManagePageService#isPageCloneable, so if any changes are done here it should be considered to add those changes in mentioned service as well
         */
        this.permissionService.registerRule({
            names: ['se.cloneable.page'],
            verify: function () { return __awaiter(_this, void 0, void 0, function () {
                var experience, pageUriContext, pageInfo, targets;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.sharedDataService.get(smarteditcommons.EXPERIENCE_STORAGE_KEY)];
                        case 1:
                            experience = (_a.sent());
                            if (!experience.pageContext) {
                                return [2 /*return*/, false];
                            }
                            pageUriContext = {
                                CURRENT_CONTEXT_SITE_ID: experience.pageContext.siteId,
                                CURRENT_CONTEXT_CATALOG: experience.pageContext.catalogId,
                                CURRENT_CONTEXT_CATALOG_VERSION: experience.pageContext.catalogVersion
                            };
                            return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                        case 2:
                            pageInfo = _a.sent();
                            return [4 /*yield*/, this.catalogVersionRestService.getCloneableTargets(pageUriContext)];
                        case 3:
                            targets = _a.sent();
                            if (experience.pageContext.active) {
                                return [2 /*return*/, (targets.versions.length > 0 &&
                                        pageInfo.defaultPage &&
                                        !pageInfo.copyToCatalogsDisabled)];
                            }
                            return [2 /*return*/, targets.versions.length > 0];
                    }
                });
            }); }
        });
        this.permissionService.registerRule({
            names: ['se.content.catalog.non.active'],
            verify: function () { return _this.catalogService.isContentCatalogVersionNonActive(); }
        });
        this.permissionService.registerRule({
            names: ['se.not.versioning.perspective'],
            verify: function () { return __awaiter(_this, void 0, void 0, function () {
                var isActive;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.cMSModesService.isVersioningPerspectiveActive()];
                        case 1:
                            isActive = _a.sent();
                            return [2 /*return*/, !isActive];
                    }
                });
            }); }
        });
        this.permissionService.registerRule({
            names: ['se.version.page.selected'],
            verify: function () { return __awaiter(_this, void 0, void 0, function () {
                var experience;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.experienceService.getCurrentExperience()];
                        case 1:
                            experience = _a.sent();
                            return [2 /*return*/, !!experience.versionId];
                    }
                });
            }); }
        });
        this.permissionService.registerRule({
            names: ['se.version.page.not.selected'],
            verify: function () { return __awaiter(_this, void 0, void 0, function () {
                var experience;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.experienceService.getCurrentExperience()];
                        case 1:
                            experience = _a.sent();
                            return [2 /*return*/, !experience.versionId];
                    }
                });
            }); }
        });
        this.permissionService.registerRule({
            names: ['se.catalogversion.has.workflows.enabled'],
            verify: function () { return _this.workflowService.areWorkflowsEnabledOnCurrentCatalogVersion(); }
        });
        this.permissionService.registerRule({
            names: ['se.current.page.has.active.workflow'],
            verify: function () { return __awaiter(_this, void 0, void 0, function () {
                var workflow;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getCurrentPageActiveWorkflow()];
                        case 1:
                            workflow = _a.sent();
                            return [2 /*return*/, workflow !== null];
                    }
                });
            }); }
        });
        this.permissionService.registerRule({
            names: ['se.current.page.has.no.active.workflow'],
            verify: function () { return __awaiter(_this, void 0, void 0, function () {
                var workflow;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getCurrentPageActiveWorkflow()];
                        case 1:
                            workflow = _a.sent();
                            return [2 /*return*/, workflow === null];
                    }
                });
            }); }
        });
        // Attribute Permissions
        this.permissionService.registerRule({
            names: ['se.has.change.permission.on.page.approval.status'],
            verify: function () { return __awaiter(_this, void 0, void 0, function () {
                var attributeName, pageInfo, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            attributeName = 'approvalStatus';
                            return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                        case 1:
                            pageInfo = _a.sent();
                            return [4 /*yield*/, this.attributePermissionsRestService.hasChangePermissionOnAttributesInType(pageInfo.typeCode, [attributeName])];
                        case 2:
                            result = _a.sent();
                            return [2 /*return*/, result[attributeName]];
                    }
                });
            }); }
        });
    };
    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerRulesForTypeCodeFromContext = function () {
        var _this = this;
        var registerTypePermissionRuleForTypeCodeFromContext = function (ruleName, verifyRule) {
            _this.permissionService.registerRule({
                names: [ruleName],
                verify: function (permissionNameObjs) {
                    var promises = permissionNameObjs.map(function (permissionNameObject) {
                        return verifyRule([permissionNameObject.context.typeCode]).then(function (updatePermission) {
                            return updatePermission[permissionNameObject.context.typeCode];
                        });
                    });
                    return Promise.all(promises).then(_this.onSuccess, _this.onError);
                }
            });
        };
        // check if the current user has change permission on the type provided part of the permission object
        registerTypePermissionRuleForTypeCodeFromContext('se.has.change.permissions.on.type', function (types) { return _this.typePermissionsRestService.hasUpdatePermissionForTypes(types); });
        // check if the current user has create permission on the type provided part of the permission object
        registerTypePermissionRuleForTypeCodeFromContext('se.has.create.permissions.on.type', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });
        // check if the current user has remove permission on the type provided part of the permission object
        registerTypePermissionRuleForTypeCodeFromContext('se.has.remove.permissions.on.type', function (types) { return _this.typePermissionsRestService.hasDeletePermissionForTypes(types); });
    };
    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerRulesForCurrentPage = function () {
        var _this = this;
        var registerTypePermissionRuleOnCurrentPage = function (ruleName, verifyRule) {
            _this.permissionService.registerRule({
                names: [ruleName],
                verify: function () { return __awaiter(_this, void 0, void 0, function () {
                    var pageInfo, permissionObject;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                            case 1:
                                pageInfo = _a.sent();
                                return [4 /*yield*/, verifyRule([pageInfo.typeCode])];
                            case 2:
                                permissionObject = _a.sent();
                                return [2 /*return*/, permissionObject[pageInfo.typeCode]];
                        }
                    });
                }); }
            });
        };
        // check if the current user has change permission on the page currently loaded
        registerTypePermissionRuleOnCurrentPage('se.has.change.type.permissions.on.current.page', function (types) { return _this.typePermissionsRestService.hasUpdatePermissionForTypes(types); });
        // check if the current user has create permission on the page currently loaded
        registerTypePermissionRuleOnCurrentPage('se.has.create.type.permissions.on.current.page', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });
        // check if the current user has read permission on the page currently loaded
        registerTypePermissionRuleOnCurrentPage('se.has.read.type.permissions.on.current.page', function (types) { return _this.typePermissionsRestService.hasReadPermissionForTypes(types); });
    };
    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerRulesForTypeCode = function () {
        var _this = this;
        var registerTypePermissionRuleForTypeCode = function (ruleName, itemType, verifyRule) {
            _this.permissionService.registerRule({
                names: [ruleName],
                verify: function () { return __awaiter(_this, void 0, void 0, function () {
                    var UpdatePermission;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, verifyRule([itemType])];
                            case 1:
                                UpdatePermission = _a.sent();
                                return [2 /*return*/, UpdatePermission[itemType]];
                        }
                    });
                }); }
            });
        };
        // check if the current user has read/create/remove/change permission on the CMSVersion type
        registerTypePermissionRuleForTypeCode('se.has.read.permission.on.version.type', 'CMSVersion', function (types) { return _this.typePermissionsRestService.hasReadPermissionForTypes(types); });
        registerTypePermissionRuleForTypeCode('se.has.create.permission.on.version.type', 'CMSVersion', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });
        registerTypePermissionRuleForTypeCode('se.has.remove.permission.on.version.type', 'CMSVersion', function (types) { return _this.typePermissionsRestService.hasDeletePermissionForTypes(types); });
        registerTypePermissionRuleForTypeCode('se.has.change.permission.on.version.type', 'CMSVersion', function (types) { return _this.typePermissionsRestService.hasUpdatePermissionForTypes(types); });
        registerTypePermissionRuleForTypeCode('se.has.create.permission.on.abstractcomponent.type', 'AbstractCMSComponent', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });
        registerTypePermissionRuleForTypeCode('se.has.change.permission.on.contentslotforpage.type', 'ContentSlotForPage', function (types) { return _this.typePermissionsRestService.hasUpdatePermissionForTypes(types); });
        // check if current user has create/change permission on the Workflow type
        registerTypePermissionRuleForTypeCode('se.has.create.permission.on.workflow.type', 'Workflow', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });
        registerTypePermissionRuleForTypeCode('se.has.change.permission.on.workflow.type', 'Workflow', function (types) { return _this.typePermissionsRestService.hasUpdatePermissionForTypes(types); });
        registerTypePermissionRuleForTypeCode('se.has.read.permission.on.workflow.type', 'Workflow', function (types) { return _this.typePermissionsRestService.hasReadPermissionForTypes(types); });
        registerTypePermissionRuleForTypeCode('se.has.create.permission.on.contentslot.type', 'ContentSlot', function (types) { return _this.typePermissionsRestService.hasCreatePermissionForTypes(types); });
        registerTypePermissionRuleForTypeCode('se.has.delete.permission.on.contentslot.type', 'ContentSlot', function (types) { return _this.typePermissionsRestService.hasDeletePermissionForTypes(types); });
    };
    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerRulesForTypeAndQualifier = function () {
        var _this = this;
        var registerAttributePermissionRuleForTypeAndQualifier = function (ruleName, itemType, qualifier, verifyRule) {
            _this.permissionService.registerRule({
                names: [ruleName],
                verify: function () { return __awaiter(_this, void 0, void 0, function () {
                    var data;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, verifyRule(itemType, [qualifier])];
                            case 1:
                                data = _a.sent();
                                return [2 /*return*/, data[qualifier]];
                        }
                    });
                }); }
            });
        };
        registerAttributePermissionRuleForTypeAndQualifier('se.has.change.permission.on.workflow.status', 'Workflow', 'status', function (type, attributeNames) {
            return _this.attributePermissionsRestService.hasChangePermissionOnAttributesInType(type, attributeNames);
        });
        registerAttributePermissionRuleForTypeAndQualifier('se.has.change.permission.on.workflow.description', 'Workflow', 'description', function (type, attributeNames) {
            return _this.attributePermissionsRestService.hasChangePermissionOnAttributesInType(type, attributeNames);
        });
    };
    /* @ngInject */ RulesAndPermissionsRegistrationService.prototype.registerPermissions = function () {
        this.permissionService.registerPermission({
            aliases: ['se.add.component'],
            rules: [
                'se.write.slot',
                'se.write.component',
                'se.page.belongs.to.experience',
                'se.has.change.type.permissions.on.current.page',
                'se.current.user.can.act.on.page.in.workflow',
                'se.current.user.can.act.on.workflow.current.action',
                'se.has.create.permission.on.abstractcomponent.type'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.read.page'],
            rules: ['se.read.page']
        });
        this.permissionService.registerPermission({
            aliases: ['se.edit.page'],
            rules: ['se.write.page', 'se.current.user.can.act.on.page.in.workflow']
        });
        this.permissionService.registerPermission({
            aliases: ['se.sync.catalog'],
            rules: ['se.sync.catalog']
        });
        this.permissionService.registerPermission({
            aliases: ['se.sync.slot.context.menu', 'se.sync.slot.indicator'],
            rules: [
                'se.sync.catalog',
                'se.page.belongs.to.experience',
                'se.current.user.can.act.on.page.in.workflow'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.sync.page'],
            rules: ['se.page.belongs.to.experience', 'se.current.user.can.act.on.page.in.workflow']
        });
        this.permissionService.registerPermission({
            aliases: ['se.edit.navigation'],
            rules: ['se.write.component']
        });
        this.permissionService.registerPermission({
            aliases: ['se.context.menu.remove.component'],
            rules: [
                'se.write.slot',
                'se.page.belongs.to.experience',
                'se.current.user.can.act.on.page.in.workflow',
                'se.current.user.can.act.on.workflow.current.action'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.slot.context.menu.shared.icon', 'se.slot.context.menu.unshared.icon'],
            rules: ['se.read.slot', 'se.current.user.can.act.on.page.in.workflow']
        });
        this.permissionService.registerPermission({
            aliases: ['se.slot.context.menu.visibility'],
            rules: ['se.page.belongs.to.experience']
        });
        this.permissionService.registerPermission({
            aliases: ['se.clone.page'],
            rules: ['se.cloneable.page', 'se.has.create.type.permissions.on.current.page']
        });
        this.permissionService.registerPermission({
            aliases: ['se.context.menu.edit.component'],
            rules: [
                'se.write.component',
                'se.page.belongs.to.experience',
                'se.current.user.can.act.on.page.in.workflow'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.context.menu.drag.and.drop.component'],
            rules: [
                'se.write.slot',
                'se.write.component',
                'se.page.belongs.to.experience',
                'se.current.user.can.act.on.page.in.workflow',
                'se.current.user.can.act.on.workflow.current.action',
                'se.has.change.permission.on.contentslotforpage.type'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.edit.page.link', 'se.delete.page.menu'],
            rules: [
                'se.write.page',
                'se.page.belongs.to.experience',
                'se.not.versioning.perspective',
                'se.has.change.type.permissions.on.current.page',
                'se.current.user.can.act.on.page.in.workflow'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.shared.slot.override.options'],
            rules: [
                'se.write.page',
                'se.page.belongs.to.experience',
                'se.not.versioning.perspective',
                'se.current.user.can.act.on.page.in.workflow',
                'se.has.create.permission.on.contentslot.type'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.revert.to.global.or.shared.slot.link'],
            rules: [
                'se.write.page',
                'se.page.belongs.to.experience',
                'se.not.versioning.perspective',
                'se.current.user.can.act.on.page.in.workflow',
                'se.has.delete.permission.on.contentslot.type'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.clone.component'],
            rules: [
                'se.write.component',
                'se.page.belongs.to.experience',
                'se.current.user.can.act.on.page.in.workflow',
                'se.current.user.can.act.on.workflow.current.action'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.edit.page.type', 'se.delete.page.type', 'se.restore.page.type'],
            rules: ['se.has.change.permissions.on.type']
        });
        this.permissionService.registerPermission({
            aliases: ['se.clone.page.type'],
            rules: ['se.has.create.permissions.on.type']
        });
        this.permissionService.registerPermission({
            aliases: ['se.permanently.delete.page.type'],
            rules: ['se.has.remove.permissions.on.type']
        });
        // Version
        this.permissionService.registerPermission({
            aliases: ['se.version.page'],
            rules: [
                'se.write.page',
                'se.page.belongs.to.experience',
                'se.content.catalog.non.active',
                'se.has.read.permission.on.version.type',
                'se.has.read.type.permissions.on.current.page'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.edit.version.page'],
            rules: [
                'se.write.to.current.catalog.version',
                'se.has.change.permission.on.version.type',
                'se.current.user.can.act.on.page.in.workflow'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.create.version.page'],
            rules: [
                'se.version.page.not.selected',
                'se.page.belongs.to.experience',
                'se.has.create.permission.on.version.type',
                'se.has.read.type.permissions.on.current.page'
            ]
        });
        var rulesForVersionRollback = [
            'se.version.page.selected',
            'se.page.belongs.to.experience',
            'se.has.read.permission.on.version.type',
            'se.has.create.permission.on.version.type',
            'se.has.change.type.permissions.on.current.page'
        ];
        this.permissionService.registerPermission({
            aliases: ['se.rollback.version.page'],
            rules: rulesForVersionRollback
        });
        this.permissionService.registerPermission({
            // the page versions menu button should be visible even if a version is not selected
            aliases: ['se.rollback.version.page.versions.menu'],
            rules: rulesForVersionRollback.filter(function (rule) { return rule !== 'se.version.page.selected'; })
        });
        this.permissionService.registerPermission({
            aliases: ['se.delete.version.page'],
            rules: ['se.has.remove.permission.on.version.type']
        });
        // Workflow
        this.permissionService.registerPermission({
            aliases: ['se.start.page.workflow'],
            rules: [
                'se.has.create.permission.on.workflow.type',
                'se.catalogversion.has.workflows.enabled',
                'se.current.page.has.no.active.workflow'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.view.page.workflowMenu'],
            rules: [
                'se.has.read.permission.on.workflow.type',
                'se.current.page.has.active.workflow'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.cancel.page.workflowMenu'],
            rules: [
                'se.has.change.permission.on.workflow.type',
                'se.current.page.has.active.workflow',
                'se.has.change.permission.on.workflow.status'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.edit.workflow.workflowMenu'],
            rules: [
                'se.has.change.permission.on.workflow.type',
                'se.current.page.has.active.workflow',
                'se.has.change.permission.on.workflow.description'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.force.page.approval'],
            rules: [
                'se.sync.catalog',
                'se.has.change.permission.on.page.approval.status',
                'se.page.belongs.to.experience'
            ]
        });
        this.permissionService.registerPermission({
            aliases: ['se.show.page.status'],
            rules: ['se.content.catalog.non.active', 'se.page.belongs.to.experience']
        });
        this.permissionService.registerPermission({
            aliases: ['se.act.on.page.in.workflow'],
            rules: ['se.current.user.can.act.on.page.in.workflow']
        });
    };
    /* @ngInject */ RulesAndPermissionsRegistrationService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [cmscommons.AttributePermissionsRestService,
            smarteditcommons.ICatalogService,
            smarteditcommons.ICatalogVersionPermissionService,
            CatalogVersionRestService,
            cmscommons.CMSModesService,
            smarteditcommons.IExperienceService,
            cmscommons.IPageService,
            smarteditcommons.IPermissionService,
            smarteditcommons.ISharedDataService,
            cmscommons.TypePermissionsRestService,
            WorkflowService])
    ], /* @ngInject */ RulesAndPermissionsRegistrationService);
    return /* @ngInject */ RulesAndPermissionsRegistrationService;
}());

var CatalogHomepageDetailsStatus;
(function (CatalogHomepageDetailsStatus) {
    CatalogHomepageDetailsStatus["PENDING"] = "PENDING";
    CatalogHomepageDetailsStatus["NO_HOMEPAGE"] = "NO_HOMEPAGE";
    CatalogHomepageDetailsStatus["LOCAL"] = "LOCAL";
    CatalogHomepageDetailsStatus["OLD"] = "OLD";
    CatalogHomepageDetailsStatus["PARENT"] = "PARENT";
})(CatalogHomepageDetailsStatus || (CatalogHomepageDetailsStatus = {}));
window.__smartedit__.addDecoratorPayload("Component", "DisplayConditionsEditorComponent", {
    selector: 'se-display-conditions-editor',
    template: "<div><se-event-message class=\"existing-homepage__ymessage\" [showEvent]=\"'CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO'\" [hideEvent]=\"'CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO'\"></se-event-message><se-display-conditions-page-info [pageName]=\"getPageName()\" [pageType]=\"getPageType()\" [isPrimary]=\"isPagePrimary()\"></se-display-conditions-page-info><se-display-conditions-page-variations *ngIf=\"isPagePrimary()\" [variations]=\"getVariations()\"></se-display-conditions-page-variations><se-display-conditions-primary-page *ngIf=\"!isPagePrimary()\" [readOnly]=\"getIsAssociatedPrimaryReadOnly()\" [associatedPrimaryPage]=\"getAssociatedPrimaryPage()\" [pageType]=\"getPageType()\" (onPrimaryPageSelect)=\"onPrimaryPageSelect($event)\"></se-display-conditions-primary-page><div *ngIf=\"showHomePageWidget()\"><div class=\"se-component-homepage\"><label class=\"se-control-label\"><input type=\"checkbox\" id=\"set-homepage-checkbox\" class=\"fd-form__control se-display-conditions__homepage-input\" name=\"clone-on-drop\" [disabled]=\"disableHomepageCheckbox()\" (ngModelChange)=\"homePageChanged($event)\" [ngModel]=\"page.homepage\"/> <span translate=\"se.cms.display.conditions.homepage.set\"></span><se-help *ngIf=\"disableHomepageCheckbox()\"><span translate=\"se.cms.display.conditions.homepage.disabled\"></span></se-help></label></div><div class=\"se-display-conditions__replace-home-message\" *ngIf=\"showReplaceLabel\" translate=\"se.cms.display.conditions.homepage.replace\" [translateParams]=\"{ currentHomepage: currentHomePageName }\"></div></div></div>",
    styles: [".se-display-conditions__homepage-input{margin:0 4px 0 0}.se-display-conditions__replace-home-message{padding-top:8px}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    providers: [smarteditcommons.L10nPipe]
});
var /* @ngInject */ DisplayConditionsEditorComponent = /** @class */ (function () {
    DisplayConditionsEditorComponent.$inject = ["data", "route", "displayConditionsEditorModel", "homepageService", "pageService", "logService", "l10n", "translateService", "cdr"];
    function /* @ngInject */ DisplayConditionsEditorComponent(data, route, displayConditionsEditorModel, homepageService, pageService, logService, l10n, translateService, cdr) {
        this.data = data;
        this.route = route;
        this.displayConditionsEditorModel = displayConditionsEditorModel;
        this.homepageService = homepageService;
        this.pageService = pageService;
        this.logService = logService;
        this.l10n = l10n;
        this.translateService = translateService;
        this.cdr = cdr;
        (this.page = this.data.model);
        this.hasFallback = false;
        this.isPrimaryPage = false;
        this.showReplaceLabel = false;
        this.homepageDetails = {
            status: CatalogHomepageDetailsStatus.PENDING
        };
    }
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var routeParams, uriContext, _a, isPagePrimary, hasFallbackHomePage, homePageDetails, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.displayConditionsEditorModel.initModel(this.page.uid)];
                    case 1:
                        _c.sent();
                        routeParams = this.getRouteParams();
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, this.pageService.buildUriContextForCurrentPage(routeParams.siteId, routeParams.catalogId, routeParams.catalogVersion)];
                    case 3:
                        uriContext = _c.sent();
                        return [4 /*yield*/, Promise.all([
                                this.pageService.isPagePrimaryWithContext(this.page.uid, uriContext),
                                this.homepageService.hasFallbackHomePage(uriContext),
                                this.homepageService.getHomepageDetailsForContext(uriContext)
                            ])];
                    case 4:
                        _a = _c.sent(), isPagePrimary = _a[0], hasFallbackHomePage = _a[1], homePageDetails = _a[2];
                        this.isPrimaryPage = isPagePrimary;
                        this.hasFallback = hasFallbackHomePage;
                        this.homepageDetails = homePageDetails;
                        this.cdr.detectChanges();
                        return [3 /*break*/, 6];
                    case 5:
                        _b = _c.sent();
                        this.logService.error('DisplayConditionsEditorComponent::ngOnInit - unable to retrieve uriContext');
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.disableHomepageCheckbox = function () {
        if (this.hasFallback) {
            return false;
        }
        if (this.homepageDetails.status === CatalogHomepageDetailsStatus.LOCAL) {
            if (this.homepageDetails.currentHomepageUid === this.page.uid) {
                return true;
            }
            if (this.homepageDetails.oldHomepageUid === this.page.uid) {
                return false;
            }
            return false;
        }
        return true;
    };
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.homePageChanged = function (isHomepage) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, parentCatalogName, targetCatalogName;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.page.homepage = isHomepage;
                        if (!this.page.homepage) return [3 /*break*/, 7];
                        _a = this.homepageDetails.status;
                        switch (_a) {
                            case CatalogHomepageDetailsStatus.NO_HOMEPAGE: return [3 /*break*/, 1];
                            case CatalogHomepageDetailsStatus.PARENT: return [3 /*break*/, 2];
                            case CatalogHomepageDetailsStatus.LOCAL: return [3 /*break*/, 4];
                        }
                        return [3 /*break*/, 5];
                    case 1:
                        this.homepageService.sendEventHideReplaceParentHomePageInfo();
                        this.showReplaceLabel = false;
                        return [3 /*break*/, 6];
                    case 2: return [4 /*yield*/, this.getTranslatedNames(this.homepageDetails.parentCatalogName, this.homepageDetails.targetCatalogName)];
                    case 3:
                        _b = _c.sent(), parentCatalogName = _b[0], targetCatalogName = _b[1];
                        this.homepageService.sendEventShowReplaceParentHomePageInfo({
                            description: this.translateService.instant('se.cms.display.conditions.homepage.replace.parent.info.header', {
                                parentCatalogName: parentCatalogName,
                                parentCatalogVersion: this.homepageDetails.parentCatalogVersion,
                                targetCatalogName: targetCatalogName,
                                targetCatalogVersion: this.homepageDetails.targetCatalogVersion
                            })
                        });
                        this.showReplaceLabel = false;
                        return [3 /*break*/, 6];
                    case 4:
                        this.homepageService.sendEventHideReplaceParentHomePageInfo();
                        this.currentHomePageName = this.homepageDetails.currentHomepageName;
                        this.showReplaceLabel =
                            this.page.uid !== this.homepageDetails.currentHomepageUid;
                        return [3 /*break*/, 6];
                    case 5: return [3 /*break*/, 6];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        this.homepageService.sendEventHideReplaceParentHomePageInfo();
                        this.showReplaceLabel = false;
                        _c.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    DisplayConditionsEditorComponent.prototype.homePageChanged.$inject = ["isHomepage"];
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.showHomePageWidget = function () {
        return (this.homepageDetails.status !== CatalogHomepageDetailsStatus.PENDING &&
            this.page.typeCode === 'ContentPage' &&
            this.isPrimaryPage);
    };
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.getPageName = function () {
        return this.displayConditionsEditorModel.pageName;
    };
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.getPageType = function () {
        return this.displayConditionsEditorModel.pageType;
    };
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.isPagePrimary = function () {
        return this.displayConditionsEditorModel.isPrimary;
    };
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.getVariations = function () {
        return this.displayConditionsEditorModel.variations;
    };
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.getAssociatedPrimaryPage = function () {
        return this.displayConditionsEditorModel.associatedPrimaryPage;
    };
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.getIsAssociatedPrimaryReadOnly = function () {
        return this.displayConditionsEditorModel.isAssociatedPrimaryReadOnly;
    };
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.onPrimaryPageSelect = function (primaryPage) {
        this.page.label = primaryPage.label;
    };
    DisplayConditionsEditorComponent.prototype.onPrimaryPageSelect.$inject = ["primaryPage"];
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.getRouteParams = function () {
        var demandedRoute = this.route.firstChild ? this.route.firstChild : this.route;
        while (!!demandedRoute.firstChild) {
            demandedRoute = demandedRoute.firstChild;
        }
        return demandedRoute.snapshot.params;
    };
    /* @ngInject */ DisplayConditionsEditorComponent.prototype.getTranslatedNames = function (name, secondName) {
        return Promise.all([
            this.l10n.transform(name).pipe(operators.take(1)).toPromise(),
            this.l10n.transform(secondName).pipe(operators.take(1)).toPromise()
        ]);
    };
    DisplayConditionsEditorComponent.prototype.getTranslatedNames.$inject = ["name", "secondName"];
    /* @ngInject */ DisplayConditionsEditorComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-display-conditions-editor',
            template: "<div><se-event-message class=\"existing-homepage__ymessage\" [showEvent]=\"'CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO'\" [hideEvent]=\"'CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO'\"></se-event-message><se-display-conditions-page-info [pageName]=\"getPageName()\" [pageType]=\"getPageType()\" [isPrimary]=\"isPagePrimary()\"></se-display-conditions-page-info><se-display-conditions-page-variations *ngIf=\"isPagePrimary()\" [variations]=\"getVariations()\"></se-display-conditions-page-variations><se-display-conditions-primary-page *ngIf=\"!isPagePrimary()\" [readOnly]=\"getIsAssociatedPrimaryReadOnly()\" [associatedPrimaryPage]=\"getAssociatedPrimaryPage()\" [pageType]=\"getPageType()\" (onPrimaryPageSelect)=\"onPrimaryPageSelect($event)\"></se-display-conditions-primary-page><div *ngIf=\"showHomePageWidget()\"><div class=\"se-component-homepage\"><label class=\"se-control-label\"><input type=\"checkbox\" id=\"set-homepage-checkbox\" class=\"fd-form__control se-display-conditions__homepage-input\" name=\"clone-on-drop\" [disabled]=\"disableHomepageCheckbox()\" (ngModelChange)=\"homePageChanged($event)\" [ngModel]=\"page.homepage\"/> <span translate=\"se.cms.display.conditions.homepage.set\"></span><se-help *ngIf=\"disableHomepageCheckbox()\"><span translate=\"se.cms.display.conditions.homepage.disabled\"></span></se-help></label></div><div class=\"se-display-conditions__replace-home-message\" *ngIf=\"showReplaceLabel\" translate=\"se.cms.display.conditions.homepage.replace\" [translateParams]=\"{ currentHomepage: currentHomePageName }\"></div></div></div>",
            styles: [".se-display-conditions__homepage-input{margin:0 4px 0 0}.se-display-conditions__replace-home-message{padding-top:8px}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            providers: [smarteditcommons.L10nPipe]
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object, router.ActivatedRoute,
            DisplayConditionsEditorModel,
            HomepageService,
            cmscommons.IPageService,
            smarteditcommons.LogService,
            smarteditcommons.L10nPipe,
            core$1.TranslateService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ DisplayConditionsEditorComponent);
    return /* @ngInject */ DisplayConditionsEditorComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "SubTypeSelectorComponent", {
    selector: 'se-sub-type-selector',
    template: "<ul class=\"se-sub-type__selector fd-menu__list\"><li class=\"cms-sub-type__selector-link fd-menu__item\" *ngFor=\"let subType of subTypes\" (click)=\"select(subType)\" [translate]=\"subType.label\"></li></ul>",
    styles: [".cms-sub-type__selector-link{display:flex;flex-direction:row;align-items:center;color:#0a6ed1;height:46px}.cms-sub-type__selector-link:hover{color:#085caf}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ SubTypeSelectorComponent = /** @class */ (function () {
    function /* @ngInject */ SubTypeSelectorComponent() {
        this.onSubTypeSelect = new core.EventEmitter();
    }
    /* @ngInject */ SubTypeSelectorComponent.prototype.select = function (_a) {
        var id = _a.id;
        this.onSubTypeSelect.emit(id);
    };
    SubTypeSelectorComponent.prototype.select.$inject = ["_a"];
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ SubTypeSelectorComponent.prototype, "subTypes", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ SubTypeSelectorComponent.prototype, "onSubTypeSelect", void 0);
    /* @ngInject */ SubTypeSelectorComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-sub-type-selector',
            template: "<ul class=\"se-sub-type__selector fd-menu__list\"><li class=\"cms-sub-type__selector-link fd-menu__item\" *ngFor=\"let subType of subTypes\" (click)=\"select(subType)\" [translate]=\"subType.label\"></li></ul>",
            styles: [".cms-sub-type__selector-link{display:flex;flex-direction:row;align-items:center;color:#0a6ed1;height:46px}.cms-sub-type__selector-link:hover{color:#085caf}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        })
    ], /* @ngInject */ SubTypeSelectorComponent);
    return /* @ngInject */ SubTypeSelectorComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "SelectComponentTypeModalComponent", {
    selector: 'se-select-component-type-modal',
    template: "\n        <se-sub-type-selector\n            class=\"sub-type-selector\"\n            [subTypes]=\"subTypes\"\n            (onSubTypeSelect)=\"closeWithSelectedId($event)\"\n        >\n        </se-sub-type-selector>\n    ",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var SelectComponentTypeModalComponent = /** @class */ (function () {
    function SelectComponentTypeModalComponent(modalManager) {
        this.modalManager = modalManager;
    }
    SelectComponentTypeModalComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.modalManager
            .getModalData()
            .pipe(operators.take(1))
            .subscribe(function (_a) {
            var subTypes = _a.subTypes;
            return (_this.subTypes = _this.mapSubTypesToIdWithLabel(subTypes));
        });
    };
    SelectComponentTypeModalComponent.prototype.closeWithSelectedId = function (subTypeId) {
        this.modalManager.close(subTypeId);
    };
    SelectComponentTypeModalComponent.prototype.mapSubTypesToIdWithLabel = function (subTypes) {
        return Object.keys(subTypes).map(function (key) { return ({
            id: key,
            label: subTypes[key]
        }); });
    };
    SelectComponentTypeModalComponent = __decorate([
        core.Component({
            selector: 'se-select-component-type-modal',
            template: "\n        <se-sub-type-selector\n            class=\"sub-type-selector\"\n            [subTypes]=\"subTypes\"\n            (onSubTypeSelect)=\"closeWithSelectedId($event)\"\n        >\n        </se-sub-type-selector>\n    ",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [smarteditcommons.FundamentalModalManagerService])
    ], SelectComponentTypeModalComponent);
    return SelectComponentTypeModalComponent;
}());

var ON_EDIT_NESTED_COMPONENT_EVENT = 'ON_EDIT_NESTED_COMPONENT';
window.__smartedit__.addDecoratorPayload("Component", "CmsDropdownItemComponent", {
    selector: 'se-cms-dropdown-item',
    template: "<div class=\"cms-nested-component\" *ngIf=\"item\" [attr.data-component-id]=\"item.uid\"><span class=\"cms-nested-component__item\" *ngIf=\"isSelected\" (click)=\"onClick($event);\"><span class=\"sap-icon--card cms-nested-component__item-icon\"></span><div class=\"cms-nested-component__item-data\"><p class=\"cms-nested-component__item-name\" [title]=\"item.name\">{{ item.name }}</p><p class=\"cms-nested-component__item-type\" [title]=\"item.typeCode\">{{ item.typeCode }}</p></div></span><div class=\"cms-nested-component__result-item\" *ngIf=\"!isSelected\"><span class=\"cms-nested-component__result-name\" [title]=\"item.name\">{{ item.name }}</span> <span class=\"cms-nested-component__result-code\" [title]=\"item.typeCode\">{{ item.typeCode }}</span></div></div>",
    styles: [".cms-nested-component__item{display:flex;flex-direction:row;align-items:center;justify-content:flex-start;color:#0a6ed1}.cms-nested-component__item-icon{display:flex;flex-direction:row;align-items:center;justify-content:center;background-color:#0a6ed1;height:28px;flex:0 0 28px;color:#fff;border-radius:4px;margin-right:16px}.cms-nested-component__item-data{width:100%;display:grid;grid-template-columns:auto auto;grid-gap:0 16px}.cms-nested-component__item-name,.cms-nested-component__item-type{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;margin-bottom:0}.cms-nested-component__result-item{display:grid;grid-template-columns:repeat(2,1fr);grid-gap:0 16px}.cms-nested-component__result-code,.cms-nested-component__result-name{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all}.cms-nested-component__item[draggable=true],.ui-select-match-item[draggable=true]{cursor:move}.y-select-item-printer{width:100%}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    encapsulation: core.ViewEncapsulation.None
});
var /* @ngInject */ CmsDropdownItemComponent = /** @class */ (function () {
    CmsDropdownItemComponent.$inject = ["systemEventService"];
    function /* @ngInject */ CmsDropdownItemComponent(systemEventService) {
        this.systemEventService = systemEventService;
    }
    /* @ngInject */ CmsDropdownItemComponent.prototype.onClick = function (event) {
        event.stopPropagation();
        if (this.isSelected) {
            this.systemEventService.publishAsync(ON_EDIT_NESTED_COMPONENT_EVENT, {
                qualifier: this.qualifier,
                item: this.item
            });
        }
    };
    CmsDropdownItemComponent.prototype.onClick.$inject = ["event"];
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ CmsDropdownItemComponent.prototype, "item", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ CmsDropdownItemComponent.prototype, "isSelected", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ CmsDropdownItemComponent.prototype, "qualifier", void 0);
    /* @ngInject */ CmsDropdownItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-cms-dropdown-item',
            template: "<div class=\"cms-nested-component\" *ngIf=\"item\" [attr.data-component-id]=\"item.uid\"><span class=\"cms-nested-component__item\" *ngIf=\"isSelected\" (click)=\"onClick($event);\"><span class=\"sap-icon--card cms-nested-component__item-icon\"></span><div class=\"cms-nested-component__item-data\"><p class=\"cms-nested-component__item-name\" [title]=\"item.name\">{{ item.name }}</p><p class=\"cms-nested-component__item-type\" [title]=\"item.typeCode\">{{ item.typeCode }}</p></div></span><div class=\"cms-nested-component__result-item\" *ngIf=\"!isSelected\"><span class=\"cms-nested-component__result-name\" [title]=\"item.name\">{{ item.name }}</span> <span class=\"cms-nested-component__result-code\" [title]=\"item.typeCode\">{{ item.typeCode }}</span></div></div>",
            styles: [".cms-nested-component__item{display:flex;flex-direction:row;align-items:center;justify-content:flex-start;color:#0a6ed1}.cms-nested-component__item-icon{display:flex;flex-direction:row;align-items:center;justify-content:center;background-color:#0a6ed1;height:28px;flex:0 0 28px;color:#fff;border-radius:4px;margin-right:16px}.cms-nested-component__item-data{width:100%;display:grid;grid-template-columns:auto auto;grid-gap:0 16px}.cms-nested-component__item-name,.cms-nested-component__item-type{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;margin-bottom:0}.cms-nested-component__result-item{display:grid;grid-template-columns:repeat(2,1fr);grid-gap:0 16px}.cms-nested-component__result-code,.cms-nested-component__result-name{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all}.cms-nested-component__item[draggable=true],.ui-select-match-item[draggable=true]{cursor:move}.y-select-item-printer{width:100%}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            encapsulation: core.ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [smarteditcommons.SystemEventService])
    ], /* @ngInject */ CmsDropdownItemComponent);
    return /* @ngInject */ CmsDropdownItemComponent;
}());

/**
 * Provides functionality for Component Menu displayed from toolbar on Storefront.
 * For example it allows to determine Content Catalog Version based on which component within the menu are fetched.
 */
var /* @ngInject */ ComponentMenuService = /** @class */ (function () {
    ComponentMenuService.$inject = ["catalogService", "experienceService", "storageService"];
    function /* @ngInject */ ComponentMenuService(catalogService, experienceService, storageService) {
        this.catalogService = catalogService;
        this.experienceService = experienceService;
        this.storageService = storageService;
        this.SELECTED_CATALOG_VERSION_COOKIE_NAME = 'se_catalogmenu_catalogversion_cookie';
    }
    /* @ngInject */ ComponentMenuService.prototype.hasMultipleContentCatalogs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageContext, contentCatalogs, contentCatalog;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPageContext()];
                    case 1:
                        pageContext = _a.sent();
                        return [4 /*yield*/, this.getContentCatalogs()];
                    case 2:
                        contentCatalogs = _a.sent();
                        contentCatalog = contentCatalogs.find(function (catalog) { return catalog.catalogId === pageContext.catalogId; });
                        return [2 /*return*/, !!contentCatalog.parents && contentCatalog.parents.length > 0];
                }
            });
        });
    };
    /**
     * This method is used to retrieve the content catalogs of the site in the page context.
     */
    /* @ngInject */ ComponentMenuService.prototype.getContentCatalogs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPageContext()];
                    case 1:
                        pageContext = _a.sent();
                        return [2 /*return*/, pageContext ? this.catalogService.getContentCatalogsForSite(pageContext.siteId) : []];
                }
            });
        });
    };
    /**
     * Gets the list of catalog/catalog versions where components can be retrieved from for this page.
     */
    /* @ngInject */ ComponentMenuService.prototype.getValidContentCatalogVersions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageContext, contentCatalogs, catalogVersions, contentCatalog, parentCatalogVersions;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPageContext()];
                    case 1:
                        pageContext = _a.sent();
                        return [4 /*yield*/, this.getContentCatalogs()];
                    case 2:
                        contentCatalogs = _a.sent();
                        catalogVersions = [];
                        contentCatalog = contentCatalogs.find(function (catalog) { return catalog.catalogId === pageContext.catalogId; });
                        catalogVersions.push(this.getActiveOrCurrentVersionForCatalog(pageContext, contentCatalog));
                        parentCatalogVersions = contentCatalog.parents.map(function (catalog) {
                            return _this.getActiveOrCurrentVersionForCatalog(pageContext, catalog);
                        });
                        catalogVersions = __spreadArrays(parentCatalogVersions, catalogVersions);
                        return [2 /*return*/, catalogVersions];
                }
            });
        });
    };
    // --------------------------------------------------------------------------------------------------
    // Cookie Management Methods
    // --------------------------------------------------------------------------------------------------
    /* @ngInject */ ComponentMenuService.prototype.getInitialCatalogVersion = function (catalogVersions) {
        return __awaiter(this, void 0, void 0, function () {
            var rawValue, selectedCatalogVersionId, selectedCatalogVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.storageService.getValueFromLocalStorage(this.SELECTED_CATALOG_VERSION_COOKIE_NAME, false)];
                    case 1:
                        rawValue = _a.sent();
                        selectedCatalogVersionId = typeof rawValue === 'string' ? rawValue : null;
                        selectedCatalogVersion = catalogVersions.find(function (catalogVersion) { return catalogVersion.id === selectedCatalogVersionId; });
                        return [2 /*return*/, selectedCatalogVersion
                                ? selectedCatalogVersion
                                : catalogVersions[catalogVersions.length - 1]];
                }
            });
        });
    };
    ComponentMenuService.prototype.getInitialCatalogVersion.$inject = ["catalogVersions"];
    /* @ngInject */ ComponentMenuService.prototype.persistCatalogVersion = function (catalogVersionId) {
        return this.storageService.setValueInLocalStorage(this.SELECTED_CATALOG_VERSION_COOKIE_NAME, catalogVersionId, false);
    };
    ComponentMenuService.prototype.persistCatalogVersion.$inject = ["catalogVersionId"];
    /**
     * Gets the list of catalog/catalog versions where components can be retrieved from for this page.
     */
    /* @ngInject */ ComponentMenuService.prototype.getActiveOrCurrentVersionForCatalog = function (pageContext, catalog) {
        var catalogVersion = catalog.versions.find(function (version) {
            if (pageContext.catalogId === catalog.catalogId) {
                return pageContext.catalogVersion === version.version;
            }
            return version.active;
        });
        return {
            isCurrentCatalog: pageContext.catalogVersion === catalogVersion.version,
            catalogName: catalog.name ? catalog.name : catalog.catalogName,
            catalogId: catalog.catalogId,
            catalogVersionId: catalogVersion.version,
            id: catalogVersion.uuid
        };
    };
    ComponentMenuService.prototype.getActiveOrCurrentVersionForCatalog.$inject = ["pageContext", "catalog"];
    /* @ngInject */ ComponentMenuService.prototype.getPageContext = function () {
        return __awaiter(this, void 0, void 0, function () {
            var experience;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.experienceService.getCurrentExperience()];
                    case 1:
                        experience = _a.sent();
                        return [2 /*return*/, experience.pageContext];
                }
            });
        });
    };
    /* @ngInject */ ComponentMenuService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.ICatalogService,
            smarteditcommons.IExperienceService,
            smarteditcommons.IStorageService])
    ], /* @ngInject */ ComponentMenuService);
    return /* @ngInject */ ComponentMenuService;
}());

var ComponentMenuModule = /** @class */ (function () {
    function ComponentMenuModule() {
    }
    ComponentMenuModule = __decorate([
        core.NgModule({
            providers: [ComponentMenuService]
        })
    ], ComponentMenuModule);
    return ComponentMenuModule;
}());

var /* @ngInject */ RestrictionTypesRestService = /** @class */ (function () {
    RestrictionTypesRestService.$inject = ["restServiceFactory"];
    function /* @ngInject */ RestrictionTypesRestService(restServiceFactory) {
        this.restServiceFactory = restServiceFactory;
        this.restrictionTypesRestService = this.restServiceFactory.get(cmscommons.RESTRICTION_TYPES_URI);
    }
    /* @ngInject */ RestrictionTypesRestService.prototype.getRestrictionTypes = function () {
        return this.restrictionTypesRestService.get();
    };
    /* @ngInject */ RestrictionTypesRestService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory])
    ], /* @ngInject */ RestrictionTypesRestService);
    return /* @ngInject */ RestrictionTypesRestService;
}());

var /* @ngInject */ PageTypesRestrictionTypesService = /** @class */ (function () {
    PageTypesRestrictionTypesService.$inject = ["pageTypesRestrictionTypesRestService"];
    function /* @ngInject */ PageTypesRestrictionTypesService(pageTypesRestrictionTypesRestService) {
        this.pageTypesRestrictionTypesRestService = pageTypesRestrictionTypesRestService;
    }
    /* @ngInject */ PageTypesRestrictionTypesService.prototype.getRestrictionTypeCodesForPageType = function (pageType) {
        return __awaiter(this, void 0, void 0, function () {
            var pageTypesRestrictionTypes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPageTypesRestrictionTypes()];
                    case 1:
                        pageTypesRestrictionTypes = _a.sent();
                        return [2 /*return*/, pageTypesRestrictionTypes
                                .filter(function (pageTypeRestrictionType) { return pageTypeRestrictionType.pageType === pageType; })
                                .map(function (pageTypeRestrictionType) { return pageTypeRestrictionType.restrictionType; })];
                }
            });
        });
    };
    PageTypesRestrictionTypesService.prototype.getRestrictionTypeCodesForPageType.$inject = ["pageType"];
    /* @ngInject */ PageTypesRestrictionTypesService.prototype.getPageTypesRestrictionTypes = function () {
        if (this.cache) {
            return this.cache;
        }
        else {
            this.cache = this.pageTypesRestrictionTypesRestService
                .getPageTypesRestrictionTypes()
                .then(function (response) { return response.pageTypeRestrictionTypeList; });
        }
        return this.cache;
    };
    /* @ngInject */ PageTypesRestrictionTypesService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [PageTypesRestrictionTypesRestService])
    ], /* @ngInject */ PageTypesRestrictionTypesService);
    return /* @ngInject */ PageTypesRestrictionTypesService;
}());

var /* @ngInject */ RestrictionTypesService = /** @class */ (function () {
    RestrictionTypesService.$inject = ["pageTypesRestrictionTypesService", "restrictionTypesRestService"];
    function /* @ngInject */ RestrictionTypesService(pageTypesRestrictionTypesService, restrictionTypesRestService) {
        this.pageTypesRestrictionTypesService = pageTypesRestrictionTypesService;
        this.restrictionTypesRestService = restrictionTypesRestService;
    }
    /* @ngInject */ RestrictionTypesService.prototype.getRestrictionTypesByPageType = function (pageType) {
        return __awaiter(this, void 0, void 0, function () {
            var restrictionTypes, restrictionTypeCodes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRestrictionTypes()];
                    case 1:
                        restrictionTypes = _a.sent();
                        return [4 /*yield*/, this.pageTypesRestrictionTypesService.getRestrictionTypeCodesForPageType(pageType)];
                    case 2:
                        restrictionTypeCodes = _a.sent();
                        return [2 /*return*/, restrictionTypes.filter(function (restrictionType) { return restrictionTypeCodes.indexOf(restrictionType.code) >= 0; })];
                }
            });
        });
    };
    RestrictionTypesService.prototype.getRestrictionTypesByPageType.$inject = ["pageType"];
    /* @ngInject */ RestrictionTypesService.prototype.getRestrictionTypeForTypeCode = function (typeCode) {
        return __awaiter(this, void 0, void 0, function () {
            var restrictionTypes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRestrictionTypes()];
                    case 1:
                        restrictionTypes = _a.sent();
                        return [2 /*return*/, restrictionTypes.find(function (restrictionType) { return restrictionType.code === typeCode; })];
                }
            });
        });
    };
    RestrictionTypesService.prototype.getRestrictionTypeForTypeCode.$inject = ["typeCode"];
    /* @ngInject */ RestrictionTypesService.prototype.getRestrictionTypes = function () {
        if (this.cache) {
            return this.cache;
        }
        else {
            this.cache = this.restrictionTypesRestService
                .getRestrictionTypes()
                .then(function (response) { return response.restrictionTypes; });
        }
        return this.cache;
    };
    /* @ngInject */ RestrictionTypesService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [PageTypesRestrictionTypesService,
            RestrictionTypesRestService])
    ], /* @ngInject */ RestrictionTypesService);
    return /* @ngInject */ RestrictionTypesService;
}());

var ModeManager = /** @class */ (function () {
    function ModeManager(modes) {
        this.modes = modes;
    }
    ModeManager.prototype.validateMode = function (mode) {
        if (!this.modes.includes(mode)) {
            throw new Error("ModeManager.validateMode() - mode [" + mode + "] not in list of supported modes: " + this.modes);
        }
        return true;
    };
    return ModeManager;
}());
var /* @ngInject */ StructureModeManagerFactory = /** @class */ (function () {
    function /* @ngInject */ StructureModeManagerFactory() {
    }
    /* @ngInject */ StructureModeManagerFactory.prototype.createModeManager = function (modes) {
        return new ModeManager(modes);
    };
    StructureModeManagerFactory.prototype.createModeManager.$inject = ["modes"];
    /* @ngInject */ StructureModeManagerFactory = __decorate([
        smarteditcommons.SeDowngradeService()
    ], /* @ngInject */ StructureModeManagerFactory);
    return /* @ngInject */ StructureModeManagerFactory;
}());

var /* @ngInject */ StructuresRestService = /** @class */ (function () {
    StructuresRestService.$inject = ["operationContextService"];
    function /* @ngInject */ StructuresRestService(operationContextService) {
        this.TYPE_PLACEHOLDER = ':smarteditComponentType';
        this.URI = smarteditcommons.TYPES_RESOURCE_URI + "/";
        operationContextService.register(this.URI, smarteditcommons.OPERATION_CONTEXT.CMS);
    }
    /**
     * Returns Types resource URI for given mode. If no type is given, it will use a placeholder for Item Type Code.
     *
     * E.g.
     * cmswebservices/v1/types?code=CMSCategoryRestriction&mode=ADD
     */
    /* @ngInject */ StructuresRestService.prototype.getUriForContext = function (mode, type) {
        var typePlaceholder = type || this.TYPE_PLACEHOLDER;
        var uri = smarteditcommons.TYPES_RESOURCE_URI + "?code=" + typePlaceholder + "&mode=" + mode.toUpperCase();
        return uri;
    };
    StructuresRestService.prototype.getUriForContext.$inject = ["mode", "type"];
    /* @ngInject */ StructuresRestService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.OperationContextService])
    ], /* @ngInject */ StructuresRestService);
    return /* @ngInject */ StructuresRestService;
}());

/**
 * Used for fetching supported restrictions.
 */
var /* @ngInject */ RestrictionsService = /** @class */ (function () {
    RestrictionsService.$inject = ["structuresRestService", "typeStructureRestService", "structureModeManagerFactory"];
    function /* @ngInject */ RestrictionsService(structuresRestService, typeStructureRestService, structureModeManagerFactory) {
        this.structuresRestService = structuresRestService;
        this.typeStructureRestService = typeStructureRestService;
        this.modeManager = structureModeManagerFactory.createModeManager(['add', 'edit', 'create']);
    }
    /**
     * @returns An URI of the structure for a given mode.
     */
    /* @ngInject */ RestrictionsService.prototype.getStructureApiUri = function (mode) {
        this.modeManager.validateMode(mode);
        return this.structuresRestService.getUriForContext(mode);
    };
    RestrictionsService.prototype.getStructureApiUri.$inject = ["mode"];
    /**
     * @returns An array of restriction TypeCodes that are supported by SmartEdit.
     */
    /* @ngInject */ RestrictionsService.prototype.getSupportedRestrictionTypeCodes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var structures;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.typeStructureRestService.getStructuresByCategory(cmscommons.StructureTypeCategory.RESTRICTION)];
                    case 1:
                        structures = _a.sent();
                        return [2 /*return*/, structures.map(function (structure) { return structure.code; })];
                }
            });
        });
    };
    /* @ngInject */ RestrictionsService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [StructuresRestService,
            TypeStructureRestService,
            StructureModeManagerFactory])
    ], /* @ngInject */ RestrictionsService);
    return /* @ngInject */ RestrictionsService;
}());

window.__smartedit__.addDecoratorPayload("Component", "ComponentRestrictionsEditorComponent", {
    selector: 'se-component-restrictions-editor',
    template: "<se-restrictions-editor [editable]=\"isEditable\" [getRestrictionTypes]=\"getRestrictionTypes\" [getSupportedRestrictionTypes]=\"getSupportedRestrictionTypes\" [item]=\"model\" [restrictionUuids]=\"model.restrictions\" (onRestrictionsChange)=\"onRestrictionsChange($event)\"></se-restrictions-editor>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ ComponentRestrictionsEditorComponent = /** @class */ (function () {
    ComponentRestrictionsEditorComponent.$inject = ["data", "restrictionsService", "restrictionTypesService"];
    function /* @ngInject */ ComponentRestrictionsEditorComponent(data, restrictionsService, restrictionTypesService) {
        this.data = data;
        this.restrictionsService = restrictionsService;
        this.restrictionTypesService = restrictionTypesService;
        (this.editor = data.editor, this.field = data.field, this.model = data.model);
        this.isEditable = !data.isFieldDisabled();
    }
    /* @ngInject */ ComponentRestrictionsEditorComponent.prototype.ngOnInit = function () {
        this.initGetRestrictionTypes();
        this.initGetSupportedRestrictionTypes();
        if (this.model.restrictions === undefined) {
            this.editor.form.pristine.restrictions = [];
            this.editor.form.pristine.onlyOneRestrictionMustApply = false;
        }
    };
    /* @ngInject */ ComponentRestrictionsEditorComponent.prototype.onRestrictionsChange = function (_a) {
        var onlyOneRestrictionMustApply = _a.onlyOneRestrictionMustApply, restrictionUuids = _a.restrictionUuids, alwaysEnableSubmit = _a.alwaysEnableSubmit;
        this.model.onlyOneRestrictionMustApply = onlyOneRestrictionMustApply;
        this.model.restrictions = restrictionUuids;
        this.editor.api.setAlwaysEnableSubmit(alwaysEnableSubmit);
    };
    ComponentRestrictionsEditorComponent.prototype.onRestrictionsChange.$inject = ["_a"];
    /* @ngInject */ ComponentRestrictionsEditorComponent.prototype.initGetRestrictionTypes = function () {
        var _this = this;
        this.getRestrictionTypes = function () {
            return _this.restrictionTypesService.getRestrictionTypes();
        };
    };
    /* @ngInject */ ComponentRestrictionsEditorComponent.prototype.initGetSupportedRestrictionTypes = function () {
        var _this = this;
        this.getSupportedRestrictionTypes = function () {
            return _this.restrictionsService.getSupportedRestrictionTypeCodes();
        };
    };
    /* @ngInject */ ComponentRestrictionsEditorComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-component-restrictions-editor',
            template: "<se-restrictions-editor [editable]=\"isEditable\" [getRestrictionTypes]=\"getRestrictionTypes\" [getSupportedRestrictionTypes]=\"getSupportedRestrictionTypes\" [item]=\"model\" [restrictionUuids]=\"model.restrictions\" (onRestrictionsChange)=\"onRestrictionsChange($event)\"></se-restrictions-editor>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object, RestrictionsService,
            RestrictionTypesService])
    ], /* @ngInject */ ComponentRestrictionsEditorComponent);
    return /* @ngInject */ ComponentRestrictionsEditorComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "ItemManagementComponent", {
    selector: 'se-item-manager',
    template: "<div><se-generic-editor [id]=\"editorId\" [smarteditComponentId]=\"itemId\" [smarteditComponentType]=\"componentType\" [structureApi]=\"structureApi\" [content]=\"item\" [contentApi]=\"contentApi\" [(isDirty)]=\"isDirtyInternal\" [(submit)]=\"submit\" [uriContext]=\"uriContext\" [reset]=\"reset\"></se-generic-editor></div>"
});
var /* @ngInject */ ItemManagementComponent = /** @class */ (function () {
    function /* @ngInject */ ItemManagementComponent() {
        this.supportedModes = ['add', 'edit', 'create'];
        this.editorId = 'se-item-management-editor';
        this.isDirtyChange = new core.EventEmitter();
        this.submitFunctionChange = new core.EventEmitter();
        this.reset = true;
    }
    /* @ngInject */ ItemManagementComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.validateMode();
        this.submitFunctionChange.emit(function () { return _this.submitInternal(); });
        this.isDirtyChange.emit(function () { return _this.isDirtyLocal(); });
        if (!this.componentType && this.item) {
            this.componentType = this.item.typeCode;
        }
        if (!this.item) {
            this.itemId = null;
        }
        if (this.item && this.item.uuid) {
            this.itemId = this.item.uuid;
        }
        else if (this.item && this.item.uid) {
            this.itemId = this.item.uid;
        }
    };
    /* @ngInject */ ItemManagementComponent.prototype.ngOnChanges = function (changes) {
        var itemChange = changes.item;
        if (itemChange) {
            this.itemId = null;
            if (this.item && this.item.uuid) {
                this.itemId = this.item.uuid;
            }
            else if (this.item && this.item.uid) {
                this.itemId = this.item.uid;
            }
        }
    };
    ItemManagementComponent.prototype.ngOnChanges.$inject = ["changes"];
    /* @ngInject */ ItemManagementComponent.prototype.validateMode = function () {
        if (!this.supportedModes.includes(this.mode)) {
            throw 'ItemManagementComponent.ngOnInit() - Mode not supported: ' + this.mode;
        }
    };
    /* @ngInject */ ItemManagementComponent.prototype.submitInternal = function () {
        switch (this.mode.toLowerCase()) {
            case 'add':
                return Promise.resolve(this.item);
            case 'edit':
                return this.submit();
            case 'create':
                return this.submit().then(function (itemResponse) { return itemResponse; });
            default:
                throw "ItemManagementController - The given mode [" + this.mode + "] has not been implemented for this component";
        }
    };
    /* @ngInject */ ItemManagementComponent.prototype.isDirtyLocal = function () {
        if (this.isDirtyInternal) {
            return this.isDirtyInternal();
        }
        return false;
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ ItemManagementComponent.prototype, "item", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ ItemManagementComponent.prototype, "uriContext", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ ItemManagementComponent.prototype, "mode", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ ItemManagementComponent.prototype, "contentApi", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ ItemManagementComponent.prototype, "structureApi", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ ItemManagementComponent.prototype, "componentType", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ ItemManagementComponent.prototype, "isDirty", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ ItemManagementComponent.prototype, "submitFunction", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ ItemManagementComponent.prototype, "isDirtyChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ ItemManagementComponent.prototype, "submitFunctionChange", void 0);
    /* @ngInject */ ItemManagementComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-item-manager',
            template: "<div><se-generic-editor [id]=\"editorId\" [smarteditComponentId]=\"itemId\" [smarteditComponentType]=\"componentType\" [structureApi]=\"structureApi\" [content]=\"item\" [contentApi]=\"contentApi\" [(isDirty)]=\"isDirtyInternal\" [(submit)]=\"submit\" [uriContext]=\"uriContext\" [reset]=\"reset\"></se-generic-editor></div>"
        }),
        __metadata("design:paramtypes", [])
    ], /* @ngInject */ ItemManagementComponent);
    return /* @ngInject */ ItemManagementComponent;
}());

var RestrictionManagementSelectModel = /** @class */ (function () {
    function RestrictionManagementSelectModel(cmsitemsRestService, catalogService, fetchRestrictionTypes, getSupportedRestrictionTypes) {
        this.cmsitemsRestService = cmsitemsRestService;
        this.catalogService = catalogService;
        this.fetchRestrictionTypes = fetchRestrictionTypes;
        this.getSupportedRestrictionTypes = getSupportedRestrictionTypes;
        this.selectedIds = {};
        this.model = {
            restrictionTypes: [],
            selectedRestrictionType: null
        };
        this.restrictions = [];
        this.supportedRestrictionTypes = [];
    }
    RestrictionManagementSelectModel.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var restrictionTypesResponse, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.fetchRestrictionTypes()];
                    case 1:
                        restrictionTypesResponse = _b.sent();
                        this.model.restrictionTypes = restrictionTypesResponse.map(function (type, index) { return (__assign(__assign({}, type), { id: index })); });
                        if (!(typeof this.getSupportedRestrictionTypes === 'function')) return [3 /*break*/, 3];
                        _a = this;
                        return [4 /*yield*/, this.getSupportedRestrictionTypes()];
                    case 2:
                        _a.supportedRestrictionTypes = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        this.supportedRestrictionTypes = this.model.restrictionTypes.map(function (type) { return type.code; });
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    RestrictionManagementSelectModel.prototype.getRestrictionsPaged = function (mask, pageSize, currentPage) {
        return __awaiter(this, void 0, void 0, function () {
            var requestParams, restrictionsResponse, restrictionResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestParams = {
                            pageSize: pageSize,
                            currentPage: currentPage,
                            typeCode: this.model.selectedRestrictionType.code,
                            mask: mask,
                            itemSearchParams: ''
                        };
                        if (currentPage === 0) {
                            this.restrictions = [];
                        }
                        return [4 /*yield*/, this.cmsitemsRestService.get(requestParams)];
                    case 1:
                        restrictionsResponse = _a.sent();
                        restrictionResult = restrictionsResponse.response.map(function (restriction) { return (__assign(__assign({}, restriction), { id: restriction.uid })); });
                        this.restrictions = this.restrictions.concat(restrictionResult);
                        return [2 /*return*/, {
                                pagination: restrictionsResponse.pagination,
                                results: restrictionResult
                            }];
                }
            });
        });
    };
    RestrictionManagementSelectModel.prototype.getRestrictionFromBackend = function () {
        return Promise.resolve({});
    };
    RestrictionManagementSelectModel.prototype.getRestrictionTypes = function () {
        return Promise.resolve(this.model.restrictionTypes);
    };
    RestrictionManagementSelectModel.prototype.restrictionSelected = function () {
        var _this = this;
        if (this.selectedIds.restriction) {
            this.selectedRestriction = this.restrictions.find(function (restriction) { return restriction.id === _this.selectedIds.restriction; });
            return true;
        }
        return false;
    };
    RestrictionManagementSelectModel.prototype.restrictionTypeSelected = function () {
        var _this = this;
        this.selectedIds.restriction = null;
        this.model.selectedRestrictionType =
            (this.model.restrictionTypes || []).find(function (restrictionType) { return restrictionType.id === _this.selectedIds.restrictionType; }) || null;
        if (this.model.selectedRestrictionType) {
            this.selectedRestriction = {
                typeCode: this.model.selectedRestrictionType.code
            };
            return true;
        }
        return false;
    };
    RestrictionManagementSelectModel.prototype.createRestrictionSelected = function (name, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var catalogVersionUuid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.selectedRestriction = {
                            itemtype: this.model.selectedRestrictionType.code,
                            name: name
                        };
                        return [4 /*yield*/, this.catalogService.getCatalogVersionUUid(uriContext)];
                    case 1:
                        catalogVersionUuid = _a.sent();
                        this.selectedRestriction.catalogVersion = catalogVersionUuid;
                        return [2 /*return*/];
                }
            });
        });
    };
    RestrictionManagementSelectModel.prototype.getRestrictionTypeCode = function () {
        var _a;
        return (_a = this.model.selectedRestrictionType) === null || _a === void 0 ? void 0 : _a.code;
    };
    RestrictionManagementSelectModel.prototype.getRestriction = function () {
        return this.selectedRestriction;
    };
    RestrictionManagementSelectModel.prototype.isTypeSupported = function () {
        if (this.getRestrictionTypeCode()) {
            return this.supportedRestrictionTypes.includes(this.model.selectedRestrictionType.code);
        }
        return false;
    };
    return RestrictionManagementSelectModel;
}());
var /* @ngInject */ RestrictionManagementSelectModelFactory = /** @class */ (function () {
    RestrictionManagementSelectModelFactory.$inject = ["cmsitemsRestService", "catalogService"];
    function /* @ngInject */ RestrictionManagementSelectModelFactory(cmsitemsRestService, catalogService) {
        this.cmsitemsRestService = cmsitemsRestService;
        this.catalogService = catalogService;
    }
    /* @ngInject */ RestrictionManagementSelectModelFactory.prototype.createRestrictionManagementSelectModel = function (fetchRestrictionTypes, getSupportedRestrictionTypes) {
        var instance = new RestrictionManagementSelectModel(this.cmsitemsRestService, this.catalogService, fetchRestrictionTypes, getSupportedRestrictionTypes);
        instance.initialize();
        return instance;
    };
    RestrictionManagementSelectModelFactory.prototype.createRestrictionManagementSelectModel.$inject = ["fetchRestrictionTypes", "getSupportedRestrictionTypes"];
    /* @ngInject */ RestrictionManagementSelectModelFactory = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [cmscommons.CmsitemsRestService,
            smarteditcommons.ICatalogService])
    ], /* @ngInject */ RestrictionManagementSelectModelFactory);
    return /* @ngInject */ RestrictionManagementSelectModelFactory;
}());

var /* @ngInject */ RestrictionPickerConfigService = /** @class */ (function () {
    function /* @ngInject */ RestrictionPickerConfigService() {
        this.MODE_EDITING = 'editing';
        this.MODE_SELECT = 'select';
    }
    /* @ngInject */ RestrictionPickerConfigService.prototype.getConfigForEditing = function (existingRestriction, getSupportedRestrictionTypesFn) {
        return {
            mode: this.MODE_EDITING,
            restriction: existingRestriction,
            getSupportedRestrictionTypesFn: getSupportedRestrictionTypesFn
        };
    };
    RestrictionPickerConfigService.prototype.getConfigForEditing.$inject = ["existingRestriction", "getSupportedRestrictionTypesFn"];
    /* @ngInject */ RestrictionPickerConfigService.prototype.getConfigForSelecting = function (existingRestrictions, getRestrictionTypesFn, getSupportedRestrictionTypesFn) {
        return {
            mode: this.MODE_SELECT,
            getRestrictionTypesFn: getRestrictionTypesFn,
            getSupportedRestrictionTypesFn: getSupportedRestrictionTypesFn,
            existingRestrictions: existingRestrictions
        };
    };
    RestrictionPickerConfigService.prototype.getConfigForSelecting.$inject = ["existingRestrictions", "getRestrictionTypesFn", "getSupportedRestrictionTypesFn"];
    /* @ngInject */ RestrictionPickerConfigService.prototype.isEditingMode = function (config) {
        return config.mode === this.MODE_EDITING;
    };
    RestrictionPickerConfigService.prototype.isEditingMode.$inject = ["config"];
    /* @ngInject */ RestrictionPickerConfigService.prototype.isSelectMode = function (config) {
        return config.mode === this.MODE_SELECT;
    };
    RestrictionPickerConfigService.prototype.isSelectMode.$inject = ["config"];
    /* @ngInject */ RestrictionPickerConfigService.prototype.isValidConfig = function (config) {
        switch (config.mode) {
            case this.MODE_EDITING:
                return lodash.isObject(config.restriction);
            case this.MODE_SELECT:
                if (config.getSupportedRestrictionTypesFn) {
                    return (lodash.isFunction(config.getRestrictionTypesFn) &&
                        lodash.isFunction(config.getSupportedRestrictionTypesFn));
                }
                return lodash.isFunction(config.getRestrictionTypesFn);
            default:
                return false;
        }
    };
    RestrictionPickerConfigService.prototype.isValidConfig.$inject = ["config"];
    /* @ngInject */ RestrictionPickerConfigService = __decorate([
        smarteditcommons.SeDowngradeService()
    ], /* @ngInject */ RestrictionPickerConfigService);
    return /* @ngInject */ RestrictionPickerConfigService;
}());

window.__smartedit__.addDecoratorPayload("Component", "RestrictionManagementComponent", {
    selector: 'se-restriction-management',
    template: "<div *ngIf=\"isReady\"><div *ngIf=\"isEditMode\"><se-restriction-management-edit [restriction]=\"config?.restriction\" [getSupportedRestrictionTypes]=\"config?.getSupportedRestrictionTypesFn\" [uriContext]=\"uriContext\" [(isDirtyFn)]=\"isDirtyInternal\" [(submitFn)]=\"submitInternal\"></se-restriction-management-edit></div><div *ngIf=\"!isEditMode\"><se-restriction-management-select [existingRestrictions]=\"config?.existingRestrictions\" [fetchRestrictionTypes]=\"config?.getRestrictionTypesFn\" [getSupportedRestrictionTypes]=\"config?.getSupportedRestrictionTypesFn\" [uriContext]=\"uriContext\" [(isDirtyFn)]=\"isDirtyInternal\" [(submitFn)]=\"submitInternal\"></se-restriction-management-select></div></div>"
});
var /* @ngInject */ RestrictionManagementComponent = /** @class */ (function () {
    RestrictionManagementComponent.$inject = ["restrictionPickerConfigService"];
    function /* @ngInject */ RestrictionManagementComponent(restrictionPickerConfigService) {
        this.restrictionPickerConfigService = restrictionPickerConfigService;
        this.submitFnChange = new core.EventEmitter();
        this.isDirtyFnChange = new core.EventEmitter();
        this.isReady = false;
        this.isEditMode = false;
    }
    /* @ngInject */ RestrictionManagementComponent.prototype.ngOnInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.submitFnChange.emit(function () { return _this.submitInternal().then(function (value) { return value; }); });
            _this.isDirtyFnChange.emit(function () { return _this.isDirtyInternal && _this.isDirtyInternal(); });
        });
    };
    /* @ngInject */ RestrictionManagementComponent.prototype.ngOnChanges = function () {
        if (!this.config) {
            return;
        }
        if (this.restrictionPickerConfigService.isValidConfig(this.config)) {
            this.isReady = true;
            this.isEditMode = this.restrictionPickerConfigService.isEditingMode(this.config);
        }
        else {
            throw 'RestrictionManagementComponent - invalid restrictionPickerConfig';
        }
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ RestrictionManagementComponent.prototype, "config", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ RestrictionManagementComponent.prototype, "uriContext", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionManagementComponent.prototype, "submitFn", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionManagementComponent.prototype, "isDirtyFn", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionManagementComponent.prototype, "submitFnChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionManagementComponent.prototype, "isDirtyFnChange", void 0);
    /* @ngInject */ RestrictionManagementComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-restriction-management',
            template: "<div *ngIf=\"isReady\"><div *ngIf=\"isEditMode\"><se-restriction-management-edit [restriction]=\"config?.restriction\" [getSupportedRestrictionTypes]=\"config?.getSupportedRestrictionTypesFn\" [uriContext]=\"uriContext\" [(isDirtyFn)]=\"isDirtyInternal\" [(submitFn)]=\"submitInternal\"></se-restriction-management-edit></div><div *ngIf=\"!isEditMode\"><se-restriction-management-select [existingRestrictions]=\"config?.existingRestrictions\" [fetchRestrictionTypes]=\"config?.getRestrictionTypesFn\" [getSupportedRestrictionTypes]=\"config?.getSupportedRestrictionTypesFn\" [uriContext]=\"uriContext\" [(isDirtyFn)]=\"isDirtyInternal\" [(submitFn)]=\"submitInternal\"></se-restriction-management-select></div></div>"
        }),
        __metadata("design:paramtypes", [RestrictionPickerConfigService])
    ], /* @ngInject */ RestrictionManagementComponent);
    return /* @ngInject */ RestrictionManagementComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "RestrictionManagementEditComponent", {
    selector: 'se-restriction-management-edit',
    template: "<div *ngIf=\"ready\"><div *ngIf=\"isTypeSupported\"><div class=\"se-restriction-management-edit__header\"><div>{{ restriction.name }}</div><div>{{ restriction.typeCode }}</div></div><div><se-item-manager [item]=\"restriction\" [mode]=\"itemManagementMode\" [structureApi]=\"structureApi\" [contentApi]=\"contentApi\" [uriContext]=\"uriContext\" [componentType]=\"restriction.itemtype\" [(submitFunction)]=\"submitInternal\" [(isDirty)]=\"isDirtyInternal\"></se-item-manager></div></div><div *ngIf=\"!isTypeSupported\"><div class=\"se-restrictions-list__item-content\"><div translate=\"se.cms.restriction.management.select.type.not.supported.warning\"></div><p class=\"se-restriction__item-name\">{{ restriction.name }}</p><div class=\"se-restriction__item-description\">{{ restriction.description }}</div></div></div></div>",
    styles: [".se-restriction-management-edit__header{margin-bottom:16px}", "#restrictions-label{display:none}.se-restriction__select{text-transform:capitalize;width:100%}.se-restrictions-list__item-content{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;cursor:default;flex-grow:1}#userGroups-selector .se-generic-editor-multiple-dropdown__match li[draggable=true]{display:flex;flex-direction:row;align-items:center;justify-content:center;display:inline-flex!important;border:1px solid #d9d9d9;margin:4px 0 4px 8px;padding:4px 8px;border-radius:4px;background-color:var(--fd-token-background-color);color:#51555a;min-height:28px}"]
});
var /* @ngInject */ RestrictionManagementEditComponent = /** @class */ (function () {
    RestrictionManagementEditComponent.$inject = ["restrictionsService"];
    function /* @ngInject */ RestrictionManagementEditComponent(restrictionsService) {
        this.restrictionsService = restrictionsService;
        this.isDirtyFnChange = new core.EventEmitter();
        this.submitFnChange = new core.EventEmitter();
        this.ready = false;
        this.itemManagementMode = 'edit';
        this.structureApi = this.restrictionsService.getStructureApiUri(this.itemManagementMode);
    }
    /* @ngInject */ RestrictionManagementEditComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var dryRunCmsItemsUri, supportedTypes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dryRunCmsItemsUri = cmscommons.cmsitemsUri + '/:identifier';
                        this.restriction = this.restriction || {};
                        this.contentApi = new smarteditcommons.URIBuilder(dryRunCmsItemsUri).replaceParams(this.uriContext).build();
                        if (!(typeof this.getSupportedRestrictionTypes !== 'undefined')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getSupportedRestrictionTypes()];
                    case 1:
                        supportedTypes = _a.sent();
                        this.emitActions(supportedTypes.includes(this.restriction.itemtype));
                        return [3 /*break*/, 3];
                    case 2: return [2 /*return*/, this.emitActions(true)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ RestrictionManagementEditComponent.prototype.emitActions = function (isRestrictionTypeSupported) {
        var _this = this;
        this.isTypeSupported = isRestrictionTypeSupported;
        if (isRestrictionTypeSupported) {
            this.submitFnChange.emit(function () {
                return _this.submitInternal().then(function (itemResponse) { return Promise.resolve(itemResponse); });
            });
            this.isDirtyFnChange.emit(function () { return _this.isDirtyLocal(); });
        }
        else {
            this.submitFnChange.emit(function () { return Promise.resolve(null); });
            this.isDirtyFnChange.emit(function () { return false; });
        }
        this.ready = true;
    };
    RestrictionManagementEditComponent.prototype.emitActions.$inject = ["isRestrictionTypeSupported"];
    /* @ngInject */ RestrictionManagementEditComponent.prototype.isDirtyLocal = function () {
        if (this.isDirtyInternal) {
            return this.isDirtyInternal();
        }
        return false;
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ RestrictionManagementEditComponent.prototype, "restriction", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionManagementEditComponent.prototype, "getSupportedRestrictionTypes", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ RestrictionManagementEditComponent.prototype, "uriContext", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionManagementEditComponent.prototype, "isDirtyFn", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionManagementEditComponent.prototype, "submitFn", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionManagementEditComponent.prototype, "isDirtyFnChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionManagementEditComponent.prototype, "submitFnChange", void 0);
    /* @ngInject */ RestrictionManagementEditComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-restriction-management-edit',
            template: "<div *ngIf=\"ready\"><div *ngIf=\"isTypeSupported\"><div class=\"se-restriction-management-edit__header\"><div>{{ restriction.name }}</div><div>{{ restriction.typeCode }}</div></div><div><se-item-manager [item]=\"restriction\" [mode]=\"itemManagementMode\" [structureApi]=\"structureApi\" [contentApi]=\"contentApi\" [uriContext]=\"uriContext\" [componentType]=\"restriction.itemtype\" [(submitFunction)]=\"submitInternal\" [(isDirty)]=\"isDirtyInternal\"></se-item-manager></div></div><div *ngIf=\"!isTypeSupported\"><div class=\"se-restrictions-list__item-content\"><div translate=\"se.cms.restriction.management.select.type.not.supported.warning\"></div><p class=\"se-restriction__item-name\">{{ restriction.name }}</p><div class=\"se-restriction__item-description\">{{ restriction.description }}</div></div></div></div>",
            styles: [".se-restriction-management-edit__header{margin-bottom:16px}", "#restrictions-label{display:none}.se-restriction__select{text-transform:capitalize;width:100%}.se-restrictions-list__item-content{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;cursor:default;flex-grow:1}#userGroups-selector .se-generic-editor-multiple-dropdown__match li[draggable=true]{display:flex;flex-direction:row;align-items:center;justify-content:center;display:inline-flex!important;border:1px solid #d9d9d9;margin:4px 0 4px 8px;padding:4px 8px;border-radius:4px;background-color:var(--fd-token-background-color);color:#51555a;min-height:28px}"]
        }),
        __metadata("design:paramtypes", [RestrictionsService])
    ], /* @ngInject */ RestrictionManagementEditComponent);
    return /* @ngInject */ RestrictionManagementEditComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "RestrictionManagementSelectItemComponent", {
    selector: 'se-restriction-management-select-item',
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    template: "<span class=\"se-restriction-management-item-name\">{{\n        data.item.name | seL10n | async\n    }}</span>"
});
var RestrictionManagementSelectItemComponent = /** @class */ (function () {
    function RestrictionManagementSelectItemComponent(data) {
        this.data = data;
    }
    RestrictionManagementSelectItemComponent = __decorate([
        core.Component({
            selector: 'se-restriction-management-select-item',
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            template: "<span class=\"se-restriction-management-item-name\">{{\n        data.item.name | seL10n | async\n    }}</span>"
        }),
        __param(0, core.Inject(smarteditcommons.ITEM_COMPONENT_DATA_TOKEN)),
        __metadata("design:paramtypes", [Object])
    ], RestrictionManagementSelectItemComponent);
    return RestrictionManagementSelectItemComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "RestrictionManagementSelectComponent", {
    selector: 'se-restriction-management-select',
    template: "<div><se-message [style.display]=\"showWarningMessage() ? 'block' : 'none'\" [type]=\"'warning'\"><span se-message-title translate=\"se.cms.restriction.management.select.type.not.supported.warning\"></span></se-message><div class=\"se-restriction-management-select__select\"><label class=\"se-control-label\">{{ 'se.cms.restriction.management.select.type.label' | translate }}</label><se-select id=\"restriction-type\" [fetchStrategy]=\"fetchStrategy\" [itemComponent]=\"itemComponent\" [placeholder]=\"'se.cms.restriction.management.select.type.placeholder'\" [(model)]=\"selectModel.selectedIds.restrictionType\" (modelChange)=\"selectRestrictionType()\" [searchEnabled]=\"false\"></se-select></div><div *ngIf=\"viewConfig.showRestrictionSelector\" class=\"se-restriction-management-select__restriction-info\"><label class=\"se-control-label\" translate=\"se.cms.restriction.management.select.restriction.label\"></label><se-select id=\"restriction-name\" [fetchStrategy]=\"fetchOptions\" [(model)]=\"selectModel.selectedIds.restriction\" (modelChange)=\"selectRestriction()\" [placeholder]=\"'se.cms.restriction.management.select.restriction.placeholder'\" [disableChoiceFn]=\"disableRestrictionChoice\" [itemComponent]=\"itemComponent\" [resultsHeaderLabel]=\"resultsHeaderLabel\" [actionableSearchItem]=\"{ eventId: RESTRICTION_CREATE_BUTTON_PRESSED_EVENT_ID }\" [(reset)]=\"reset\"></se-select></div><div class=\"se-restriction-management-select__restriction-editor\" *ngIf=\"viewConfig.showRestrictionEditor\"><p class=\"se-restriction-management-select__new-restriction-message\" [translate]=\"editorHeader\"></p><div *ngIf=\"selectModel.isTypeSupported()\"><se-item-manager [item]=\"selectModel.getRestriction()\" [mode]=\"viewConfig.mode\" [structureApi]=\"viewConfig.structureApi\" [contentApi]=\"viewConfig.contentApi\" [uriContext]=\"uriContext\" [componentType]=\"selectModel.getRestrictionTypeCode()\" [(submitFunction)]=\"submitInternal\" [(isDirty)]=\"isDirtyInternal\"></se-item-manager></div><div *ngIf=\"!selectModel.isTypeSupported()\"><p class=\"se-restriction__item-name\">{{ selectModel.getRestriction().name }}</p><div class=\"se-restriction__item-description\">{{ selectModel.getRestriction().description }}</div></div></div></div>",
    styles: ["se-restriction-management-select .se-restriction-management-select__restriction-info,se-restriction-management-select .se-restriction-management-select__select{margin-bottom:16px}se-restriction-management-select .se-restriction-management-select__restriction-editor{border-top:1px solid #d9d9d9;padding-top:16px}se-restriction-management-select .se-restriction-management-select__new-restriction-message{font-weight:700}se-restriction-management-select .fd-menu__list-header{font-size:1.1428571429rem;line-height:1.25;font-weight:400;padding:8px 12px;border-bottom:1px solid #d9d9d9;color:#51555a;list-style:none;padding-left:24px}se-restriction-management-select .se-select-list__item.is-disabled{opacity:.65}se-restriction-management-select .se-select-list__item.is-disabled .fd-menu__item{cursor:not-allowed}se-restriction-management-select div.se-actionable-search-item{display:flex;align-items:center;justify-content:space-between;padding:0 0 0 13px}"],
    encapsulation: core.ViewEncapsulation.None,
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ RestrictionManagementSelectComponent = /** @class */ (function () {
    RestrictionManagementSelectComponent.$inject = ["restrictionManagementSelectModelFactory", "restrictionsService", "systemEventService", "cdr"];
    function /* @ngInject */ RestrictionManagementSelectComponent(restrictionManagementSelectModelFactory, restrictionsService, systemEventService, cdr) {
        this.restrictionManagementSelectModelFactory = restrictionManagementSelectModelFactory;
        this.restrictionsService = restrictionsService;
        this.systemEventService = systemEventService;
        this.cdr = cdr;
        this.RESTRICTION_CREATE_BUTTON_PRESSED_EVENT_ID = 'RESTRICTION_CREATE_BUTTON_PRESSED_EVENT_ID';
        this.resultsHeaderLabel = 'se.cms.restrictionmanagement.restrictionresults.header';
        this.itemComponent = RestrictionManagementSelectItemComponent;
        this.editorHeader = '';
        this.isDirtyFnChange = new core.EventEmitter();
        this.submitFnChange = new core.EventEmitter();
    }
    /* @ngInject */ RestrictionManagementSelectComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.selectModel = this.restrictionManagementSelectModelFactory.createRestrictionManagementSelectModel(this.fetchRestrictionTypes, this.getSupportedRestrictionTypes);
        var dryRunCmsItemsUri = cmscommons.cmsitemsUri + '/:identifier';
        this.viewConfig = {
            showRestrictionSelector: false,
            showRestrictionEditor: false,
            mode: 'add',
            contentApi: new smarteditcommons.URIBuilder(dryRunCmsItemsUri).replaceParams(this.uriContext).build()
        };
        this.fetchOptions = {
            fetchPage: function (search, pageSize, currentPage) {
                return _this.selectModel.getRestrictionsPaged(search, pageSize, currentPage);
            },
            fetchEntity: function () { return _this.selectModel.getRestrictionFromBackend(); }
        };
        this.fetchStrategy = {
            fetchAll: function () { return _this.selectModel.getRestrictionTypes(); }
        };
        this.disableRestrictionChoice = function (restriction) {
            return !!_this.existingRestrictions.find(function (existingRestriction) { return restriction.uid === existingRestriction.uid; });
        };
        setTimeout(function () {
            _this.submitFnChange.emit(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.selectModel.isTypeSupported()) {
                        return [2 /*return*/, this.submitInternal().then(function (value) { return value; })];
                    }
                    return [2 /*return*/, this.selectModel.getRestriction()];
                });
            }); });
            _this.isDirtyFnChange.emit(function () {
                if (_this.viewConfig.mode === 'add') {
                    return _this.viewConfig.showRestrictionEditor;
                }
                else if (_this.isDirtyInternal) {
                    return _this.isDirtyInternal();
                }
                return false;
            });
        });
        this.createButtonUnsubscribe = this.systemEventService.subscribe(this.RESTRICTION_CREATE_BUTTON_PRESSED_EVENT_ID, function (_eventId, eventData) { return _this.createButtonEventHandler(eventData); });
    };
    /* @ngInject */ RestrictionManagementSelectComponent.prototype.ngOnDestroy = function () {
        if (this.createButtonUnsubscribe) {
            this.createButtonUnsubscribe();
        }
    };
    /* @ngInject */ RestrictionManagementSelectComponent.prototype.selectRestrictionType = function () {
        if (this.selectModel.restrictionTypeSelected()) {
            if (this.viewConfig.showRestrictionSelector) {
                this.resetSelector();
            }
            else {
                this.viewConfig.showRestrictionSelector = true;
            }
            this.viewConfig.showRestrictionEditor = false;
        }
    };
    /* @ngInject */ RestrictionManagementSelectComponent.prototype.selectRestriction = function () {
        if (this.selectModel.restrictionSelected()) {
            this.setViewConfig('se.cms.restriction.management.select.editor.header.add', 'add');
            if (!this.viewConfig.showRestrictionEditor) {
                this.viewConfig.showRestrictionEditor = true;
            }
        }
    };
    /* @ngInject */ RestrictionManagementSelectComponent.prototype.createRestriction = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.selectModel.createRestrictionSelected(name, this.uriContext)];
                    case 1:
                        _a.sent();
                        this.setViewConfig('se.cms.restriction.management.select.editor.header.create', 'create');
                        if (this.viewConfig.showRestrictionEditor) {
                            this.resetSelector();
                        }
                        else {
                            this.viewConfig.showRestrictionEditor = true;
                        }
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    RestrictionManagementSelectComponent.prototype.createRestriction.$inject = ["name"];
    /* @ngInject */ RestrictionManagementSelectComponent.prototype.showWarningMessage = function () {
        return this.selectModel.getRestriction() && !this.selectModel.isTypeSupported();
    };
    /* @ngInject */ RestrictionManagementSelectComponent.prototype.createButtonEventHandler = function (name) {
        this.createRestriction(name);
    };
    RestrictionManagementSelectComponent.prototype.createButtonEventHandler.$inject = ["name"];
    /* @ngInject */ RestrictionManagementSelectComponent.prototype.resetSelector = function () {
        if (typeof this.reset === 'function') {
            this.reset(true);
        }
    };
    /* @ngInject */ RestrictionManagementSelectComponent.prototype.setViewConfig = function (editorHeader, mode) {
        this.editorHeader = editorHeader;
        this.viewConfig.mode = mode;
        this.viewConfig.structureApi = this.restrictionsService.getStructureApiUri(this.viewConfig.mode);
    };
    RestrictionManagementSelectComponent.prototype.setViewConfig.$inject = ["editorHeader", "mode"];
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ RestrictionManagementSelectComponent.prototype, "uriContext", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ RestrictionManagementSelectComponent.prototype, "existingRestrictions", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionManagementSelectComponent.prototype, "fetchRestrictionTypes", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionManagementSelectComponent.prototype, "getSupportedRestrictionTypes", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionManagementSelectComponent.prototype, "isDirtyFn", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionManagementSelectComponent.prototype, "submitFn", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionManagementSelectComponent.prototype, "isDirtyFnChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionManagementSelectComponent.prototype, "submitFnChange", void 0);
    /* @ngInject */ RestrictionManagementSelectComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-restriction-management-select',
            template: "<div><se-message [style.display]=\"showWarningMessage() ? 'block' : 'none'\" [type]=\"'warning'\"><span se-message-title translate=\"se.cms.restriction.management.select.type.not.supported.warning\"></span></se-message><div class=\"se-restriction-management-select__select\"><label class=\"se-control-label\">{{ 'se.cms.restriction.management.select.type.label' | translate }}</label><se-select id=\"restriction-type\" [fetchStrategy]=\"fetchStrategy\" [itemComponent]=\"itemComponent\" [placeholder]=\"'se.cms.restriction.management.select.type.placeholder'\" [(model)]=\"selectModel.selectedIds.restrictionType\" (modelChange)=\"selectRestrictionType()\" [searchEnabled]=\"false\"></se-select></div><div *ngIf=\"viewConfig.showRestrictionSelector\" class=\"se-restriction-management-select__restriction-info\"><label class=\"se-control-label\" translate=\"se.cms.restriction.management.select.restriction.label\"></label><se-select id=\"restriction-name\" [fetchStrategy]=\"fetchOptions\" [(model)]=\"selectModel.selectedIds.restriction\" (modelChange)=\"selectRestriction()\" [placeholder]=\"'se.cms.restriction.management.select.restriction.placeholder'\" [disableChoiceFn]=\"disableRestrictionChoice\" [itemComponent]=\"itemComponent\" [resultsHeaderLabel]=\"resultsHeaderLabel\" [actionableSearchItem]=\"{ eventId: RESTRICTION_CREATE_BUTTON_PRESSED_EVENT_ID }\" [(reset)]=\"reset\"></se-select></div><div class=\"se-restriction-management-select__restriction-editor\" *ngIf=\"viewConfig.showRestrictionEditor\"><p class=\"se-restriction-management-select__new-restriction-message\" [translate]=\"editorHeader\"></p><div *ngIf=\"selectModel.isTypeSupported()\"><se-item-manager [item]=\"selectModel.getRestriction()\" [mode]=\"viewConfig.mode\" [structureApi]=\"viewConfig.structureApi\" [contentApi]=\"viewConfig.contentApi\" [uriContext]=\"uriContext\" [componentType]=\"selectModel.getRestrictionTypeCode()\" [(submitFunction)]=\"submitInternal\" [(isDirty)]=\"isDirtyInternal\"></se-item-manager></div><div *ngIf=\"!selectModel.isTypeSupported()\"><p class=\"se-restriction__item-name\">{{ selectModel.getRestriction().name }}</p><div class=\"se-restriction__item-description\">{{ selectModel.getRestriction().description }}</div></div></div></div>",
            styles: ["se-restriction-management-select .se-restriction-management-select__restriction-info,se-restriction-management-select .se-restriction-management-select__select{margin-bottom:16px}se-restriction-management-select .se-restriction-management-select__restriction-editor{border-top:1px solid #d9d9d9;padding-top:16px}se-restriction-management-select .se-restriction-management-select__new-restriction-message{font-weight:700}se-restriction-management-select .fd-menu__list-header{font-size:1.1428571429rem;line-height:1.25;font-weight:400;padding:8px 12px;border-bottom:1px solid #d9d9d9;color:#51555a;list-style:none;padding-left:24px}se-restriction-management-select .se-select-list__item.is-disabled{opacity:.65}se-restriction-management-select .se-select-list__item.is-disabled .fd-menu__item{cursor:not-allowed}se-restriction-management-select div.se-actionable-search-item{display:flex;align-items:center;justify-content:space-between;padding:0 0 0 13px}"],
            encapsulation: core.ViewEncapsulation.None,
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [RestrictionManagementSelectModelFactory,
            RestrictionsService,
            smarteditcommons.SystemEventService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ RestrictionManagementSelectComponent);
    return /* @ngInject */ RestrictionManagementSelectComponent;
}());

/**
 * A service for working with restriction criteria.
 */
var /* @ngInject */ PageRestrictionsCriteriaService = /** @class */ (function () {
    function /* @ngInject */ PageRestrictionsCriteriaService() {
        this.ALL = {};
        this.ANY = {};
        this.restrictionCriteriaOptions = [this.ALL, this.ANY];
        this.setupCriteria(this.ALL, 'all', false);
        this.setupCriteria(this.ANY, 'any', true);
    }
    /**
     * @param onlyOneRestrictionMustApply A boolean to determine whether one restriction should be applied.
     * @returns The i18n key of the restriction criteria.
     */
    /* @ngInject */ PageRestrictionsCriteriaService.prototype.getMatchCriteriaLabel = function (onlyOneRestrictionMustApply) {
        if (onlyOneRestrictionMustApply) {
            return this.ANY.label;
        }
        return this.ALL.label;
    };
    PageRestrictionsCriteriaService.prototype.getMatchCriteriaLabel.$inject = ["onlyOneRestrictionMustApply"];
    /**
     * @returns An array of criteria options.
     */
    /* @ngInject */ PageRestrictionsCriteriaService.prototype.getRestrictionCriteriaOptions = function () {
        return this.restrictionCriteriaOptions;
    };
    /**
     * @returns An object of the restriction criteria for the given page.
     */
    /* @ngInject */ PageRestrictionsCriteriaService.prototype.getRestrictionCriteriaOptionFromPage = function (page) {
        if (page && typeof page.onlyOneRestrictionMustApply === 'boolean') {
            if (page.onlyOneRestrictionMustApply) {
                return this.ANY;
            }
        }
        return this.ALL;
    };
    PageRestrictionsCriteriaService.prototype.getRestrictionCriteriaOptionFromPage.$inject = ["page"];
    /* @ngInject */ PageRestrictionsCriteriaService.prototype.setupCriteria = function (criteria, id, boolValue) {
        Object.defineProperty(criteria, 'id', {
            writable: false,
            value: id
        });
        Object.defineProperty(criteria, 'label', {
            writable: false,
            value: 'se.cms.restrictions.criteria.' + id
        });
        Object.defineProperty(criteria, 'editLabel', {
            writable: false,
            value: 'se.cms.restrictions.criteria.select.' + id
        });
        Object.defineProperty(criteria, 'value', {
            writable: false,
            value: boolValue
        });
    };
    PageRestrictionsCriteriaService.prototype.setupCriteria.$inject = ["criteria", "id", "boolValue"];
    /* @ngInject */ PageRestrictionsCriteriaService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [])
    ], /* @ngInject */ PageRestrictionsCriteriaService);
    return /* @ngInject */ PageRestrictionsCriteriaService;
}());

window.__smartedit__.addDecoratorPayload("Component", "RestrictionsTableComponent", {
    selector: 'se-restrictions-table',
    template: "<div class=\"se-restriction-table-wrapper se-restriction-table-left\" [ngClass]=\"customClass\"><div class=\"se-restrictions-list fd-menu__list fd-menu__list--separated\" *ngIf=\"restrictions.length > 0\"><div id=\"restriction-{{ index + 1 }}\" *ngFor=\"let restriction of restrictions; let index = index\" class=\"se-restriction__item fd-menu__item\"><div class=\"se-restrictions-list__item-content\"><p class=\"se-restriction__item-name\" [ngClass]=\"{ 'error-input': isInError(index) }\">{{ restriction.name }}</p><div class=\"se-restriction__item-type-and-id\" [ngClass]=\"{ 'error-input': isInError(index) }\">{{ restriction.typeCode }}</div><div class=\"se-restriction__item-description\" [ngClass]=\"{ 'error-input': isInError(index) }\" [title]=\"restriction.description\">{{ restriction.description }}</div><div id=\"restrictionPartOfWorkflow\" *ngIf=\"!restriction.canBeEdited\" translate=\"se.cms.restrictions.editor.part.of.workflow\"></div></div><div *ngIf=\"editable\"><se-dropdown-menu [dropdownItems]=\"restriction.actions || defaultActions\" [selectedItem]=\"restriction\" [placement]=\"'bottom-start'\"></se-dropdown-menu></div></div></div><div *ngIf=\"restrictions.length === 0\" class=\"se-restrictions-list--empty\"><span class=\"se-restrictions-list--empty__message\" translate=\"se.cms.restrictions.emptylist.message\"></span></div></div>",
    styles: [".se-restrictions-list .se-restriction__item{display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-top-color:#eeeeef!important;cursor:default}.se-restrictions-list .se-restriction__item:last-child{margin-bottom:42px}.se-restriction__item-name{font-weight:700;color:#32363a;margin:0}.se-restriction__item-type-and-id{color:#51555a;margin-top:0}.se-restriction__item-description{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;color:#6a6d70;width:90%}.se-restrictions-list--empty__message{color:#6a6d70}.error-input.se-restriction__item-description,.error-input.se-restriction__item-name,.error-input.se-restriction__item-type-and-id{color:#b00}"]
});
var /* @ngInject */ RestrictionsTableComponent = /** @class */ (function () {
    RestrictionsTableComponent.$inject = ["pageRestrictionsCriteriaService"];
    function /* @ngInject */ RestrictionsTableComponent(pageRestrictionsCriteriaService) {
        this.pageRestrictionsCriteriaService = pageRestrictionsCriteriaService;
        this.REMOVE_RESTRICTION_KEY = 'se.cms.restrictions.item.remove';
        this.EDIT_RESTRICTION_KEY = 'se.cms.restrictions.item.edit';
        this.onEdit = new core.EventEmitter();
        this.onRemove = new core.EventEmitter();
        this.errors = [];
        this.criteriaOptions = [];
        this.defaultActions = [];
        this.oldRestrictionsEditability = [];
    }
    /* @ngInject */ RestrictionsTableComponent.prototype.ngOnInit = function () {
        this.oldRestrictionsEditability = this.getRestrictionsEditability(this.restrictions);
        this.defaultActions = this.getDefaultActions();
        this.provideActionsForRestrictions();
        this.criteriaOptions = this.pageRestrictionsCriteriaService.getRestrictionCriteriaOptions();
        this.resetRestrictionCriteria();
    };
    /* @ngInject */ RestrictionsTableComponent.prototype.ngOnChanges = function () {
        if (this.restrictionsEditabilityChanged(this.restrictions)) {
            this.provideActionsForRestrictions();
            this.oldRestrictionsEditability = this.getRestrictionsEditability(this.restrictions);
        }
        this.resetRestrictionCriteria();
    };
    /* @ngInject */ RestrictionsTableComponent.prototype.resetRestrictionCriteria = function () {
        if (!this.restrictions || this.restrictions.length < 2) {
            this.restrictionCriteria = this.criteriaOptions[0];
        }
    };
    /* @ngInject */ RestrictionsTableComponent.prototype.removeRestriction = function (restrictionToRemove) {
        var restrictionIndex = this.restrictions.findIndex(function (restriction) { return restriction.uuid === restrictionToRemove.uuid; });
        this.onRemove.emit(restrictionIndex);
        this.removeUnnecessaryError(restrictionIndex);
        this.modifyErrorPositions(restrictionIndex);
    };
    RestrictionsTableComponent.prototype.removeRestriction.$inject = ["restrictionToRemove"];
    /* @ngInject */ RestrictionsTableComponent.prototype.editRestriction = function (restriction) {
        this.onEdit.emit(restriction);
    };
    RestrictionsTableComponent.prototype.editRestriction.$inject = ["restriction"];
    /* @ngInject */ RestrictionsTableComponent.prototype.isInError = function (index) {
        var _a;
        return !!((_a = this.errors) === null || _a === void 0 ? void 0 : _a.some(function (error) { return error.position === index; }));
    };
    RestrictionsTableComponent.prototype.isInError.$inject = ["index"];
    /* @ngInject */ RestrictionsTableComponent.prototype.getRestrictionsEditability = function (restrictions) {
        return (restrictions || []).map(function (restriction) { return restriction.canBeEdited; });
    };
    RestrictionsTableComponent.prototype.getRestrictionsEditability.$inject = ["restrictions"];
    /* @ngInject */ RestrictionsTableComponent.prototype.modifyErrorPositions = function (removedRestrictionIndex) {
        this.errors = this.errors.map(function (error) {
            if (error.position >= removedRestrictionIndex) {
                error.position = error.position - 1;
            }
            return error;
        });
    };
    RestrictionsTableComponent.prototype.modifyErrorPositions.$inject = ["removedRestrictionIndex"];
    /* @ngInject */ RestrictionsTableComponent.prototype.removeUnnecessaryError = function (removedRestrictionIndex) {
        var errorIndex = this.errors.findIndex(function (error) { return error.position === removedRestrictionIndex; });
        if (errorIndex > -1) {
            this.errors = this.errors.filter(function (_, index) { return index !== errorIndex; });
        }
    };
    RestrictionsTableComponent.prototype.removeUnnecessaryError.$inject = ["removedRestrictionIndex"];
    /* @ngInject */ RestrictionsTableComponent.prototype.getDefaultActions = function () {
        var _this = this;
        return [
            {
                key: this.EDIT_RESTRICTION_KEY,
                callback: function (restriction) {
                    return _this.editRestriction(restriction);
                }
            },
            {
                key: this.REMOVE_RESTRICTION_KEY,
                callback: function (restrictionToRemove) {
                    return _this.removeRestriction(restrictionToRemove);
                },
                customCss: 'se-dropdown-item__delete'
            }
        ];
    };
    /* @ngInject */ RestrictionsTableComponent.prototype.getRestrictionActions = function (restriction) {
        var _this = this;
        var actions = this.getDefaultActions();
        if (!restriction.canBeEdited) {
            return actions.filter(function (action) { return action.key !== _this.EDIT_RESTRICTION_KEY; });
        }
        return actions;
    };
    RestrictionsTableComponent.prototype.getRestrictionActions.$inject = ["restriction"];
    /* @ngInject */ RestrictionsTableComponent.prototype.provideActionsForRestrictions = function () {
        var _this = this;
        (this.restrictions || []).forEach(function (restriction) {
            restriction.actions = _this.getRestrictionActions(restriction);
        });
    };
    /* @ngInject */ RestrictionsTableComponent.prototype.restrictionsEditabilityChanged = function (restrictions) {
        var restrictionsEditability = this.getRestrictionsEditability(restrictions);
        return !lodash.isEqual(restrictionsEditability, this.oldRestrictionsEditability);
    };
    RestrictionsTableComponent.prototype.restrictionsEditabilityChanged.$inject = ["restrictions"];
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ RestrictionsTableComponent.prototype, "restrictions", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ RestrictionsTableComponent.prototype, "customClass", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ RestrictionsTableComponent.prototype, "editable", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ RestrictionsTableComponent.prototype, "restrictionCriteria", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ RestrictionsTableComponent.prototype, "errors", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionsTableComponent.prototype, "onEdit", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionsTableComponent.prototype, "onRemove", void 0);
    /* @ngInject */ RestrictionsTableComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-restrictions-table',
            template: "<div class=\"se-restriction-table-wrapper se-restriction-table-left\" [ngClass]=\"customClass\"><div class=\"se-restrictions-list fd-menu__list fd-menu__list--separated\" *ngIf=\"restrictions.length > 0\"><div id=\"restriction-{{ index + 1 }}\" *ngFor=\"let restriction of restrictions; let index = index\" class=\"se-restriction__item fd-menu__item\"><div class=\"se-restrictions-list__item-content\"><p class=\"se-restriction__item-name\" [ngClass]=\"{ 'error-input': isInError(index) }\">{{ restriction.name }}</p><div class=\"se-restriction__item-type-and-id\" [ngClass]=\"{ 'error-input': isInError(index) }\">{{ restriction.typeCode }}</div><div class=\"se-restriction__item-description\" [ngClass]=\"{ 'error-input': isInError(index) }\" [title]=\"restriction.description\">{{ restriction.description }}</div><div id=\"restrictionPartOfWorkflow\" *ngIf=\"!restriction.canBeEdited\" translate=\"se.cms.restrictions.editor.part.of.workflow\"></div></div><div *ngIf=\"editable\"><se-dropdown-menu [dropdownItems]=\"restriction.actions || defaultActions\" [selectedItem]=\"restriction\" [placement]=\"'bottom-start'\"></se-dropdown-menu></div></div></div><div *ngIf=\"restrictions.length === 0\" class=\"se-restrictions-list--empty\"><span class=\"se-restrictions-list--empty__message\" translate=\"se.cms.restrictions.emptylist.message\"></span></div></div>",
            styles: [".se-restrictions-list .se-restriction__item{display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-top-color:#eeeeef!important;cursor:default}.se-restrictions-list .se-restriction__item:last-child{margin-bottom:42px}.se-restriction__item-name{font-weight:700;color:#32363a;margin:0}.se-restriction__item-type-and-id{color:#51555a;margin-top:0}.se-restriction__item-description{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;color:#6a6d70;width:90%}.se-restrictions-list--empty__message{color:#6a6d70}.error-input.se-restriction__item-description,.error-input.se-restriction__item-name,.error-input.se-restriction__item-type-and-id{color:#b00}"]
        }),
        __metadata("design:paramtypes", [PageRestrictionsCriteriaService])
    ], /* @ngInject */ RestrictionsTableComponent);
    return /* @ngInject */ RestrictionsTableComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "RestrictionEditorCriteriaSelectItemComponent", {
    selector: 'se-restriction-editor-criteria-select-item',
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    template: "<span [translate]=\"data.item.editLabel\"></span>"
});
var RestrictionEditorCriteriaSelectItemComponent = /** @class */ (function () {
    function RestrictionEditorCriteriaSelectItemComponent(data) {
        this.data = data;
    }
    RestrictionEditorCriteriaSelectItemComponent = __decorate([
        core.Component({
            selector: 'se-restriction-editor-criteria-select-item',
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            template: "<span [translate]=\"data.item.editLabel\"></span>"
        }),
        __param(0, core.Inject(smarteditcommons.ITEM_COMPONENT_DATA_TOKEN)),
        __metadata("design:paramtypes", [Object])
    ], RestrictionEditorCriteriaSelectItemComponent);
    return RestrictionEditorCriteriaSelectItemComponent;
}());

var ITEM_MANAGEMENT_EDITOR_ID = 'se-item-management-editor';
window.__smartedit__.addDecoratorPayload("Component", "RestrictionsEditorComponent", {
    selector: 'se-restrictions-editor',
    template: "<div class=\"se-restrictions-container\"><div class=\"se-restrictions-container__header\" [ngClass]=\"{ 'se-restrictions-container__header--empty': restrictions.length === 0 }\"><label class=\"se-restrictions__sub-header\" translate=\"se.cms.restrictions.list.title\"></label><div class=\"se-restrictions-container__header--right\"><div *ngIf=\"restrictions.length > 1\"><div *ngIf=\"editable\"><se-select id=\"criteria-type\" [fetchStrategy]=\"criteriaFetchStrategy\" [itemComponent]=\"itemComponent\" [placeholder]=\"'se.cms.restrictions.picker.type.placeholder'\" [model]=\"criteria.id\" (modelChange)=\"matchCriteriaChanged($event)\" [searchEnabled]=\"false\"></se-select></div><div *ngIf=\"!editable\">{{ 'se.cms.restrictions.criteria' | translate }} {{ criteria.label | translate }}</div></div><button class=\"cms-clean-btn se-restriction__clear-all__btn fd-button--light fd-button--compact\" *ngIf=\"showRemoveAllButton()\" (click)=\"removeAllRestrictions()\" translate=\"se.cms.restrictions.list.clear.all\"></button> <button *ngIf=\"!showRestrictionPicker\" type=\"button\" class=\"se-restrictions__add-restriction-btn fd-button--compact\" [disabled]=\"!editable\" (click)=\"onAddRestriction()\"><span translate=\"se.cms.restrictions.editor.button.add.new\"></span></button></div></div><se-slider-panel [sliderPanelConfiguration]=\"sliderPanelConfiguration\" [(sliderPanelHide)]=\"sliderPanelHide\" [(sliderPanelShow)]=\"sliderPanelShow\" (isShownChange)=\"onSliderVisibilityChange($event)\" class=\"se-add-restriction-panel\"><se-restriction-management *ngIf=\"isSliderVisible\" class=\"se-se-add-restriction-panel__restriction-management\" [config]=\"restrictionManagement.config\" [uriContext]=\"restrictionManagement.uriContext\" [(submitFn)]=\"restrictionManagement.submitFn\" [(isDirtyFn)]=\"restrictionManagement.isDirtyFn\"></se-restriction-management></se-slider-panel><div *ngIf=\"errors.length > 0\"><span class=\"se-help-block--has-error help-block fd-form__message fd-form__message--error\" *ngFor=\"let error of errors\" [translate]=\"error.message\"></span></div><se-restrictions-table *ngIf=\"isRestrictionsReady\" [editable]=\"editable\" [restrictions]=\"restrictions\" [restrictionCriteria]=\"criteria\" [errors]=\"errors\" [customClass]=\"'ySERestrictionListLink'\" (onEdit)=\"onEditRestriction($event)\" (onRemove)=\"onRemoveRestriction($event)\"></se-restrictions-table></div>",
    styles: [".se-restrictions-container__header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;padding-bottom:12px}.se-restrictions-container__header--right{display:flex;flex-direction:row;align-items:center}.se-restrictions-container__header--right>div,.se-restrictions-container__header--right>span{margin-left:12px}.se-restrictions-container__header--empty{border-bottom:none}.se-restrictions__sub-header{font-weight:700;align-self:flex-start;color:#51555a;margin:0}.se-restriction__clear-all__btn{text-transform:capitalize}"]
});
var /* @ngInject */ RestrictionsEditorComponent = /** @class */ (function () {
    RestrictionsEditorComponent.$inject = ["logService", "systemEventService", "restrictionPickerConfigService", "pageRestrictionsCriteriaService", "contextAwareEditableItemService", "cmsitemsRestService", "cdr"];
    function /* @ngInject */ RestrictionsEditorComponent(logService, systemEventService, restrictionPickerConfigService, pageRestrictionsCriteriaService, contextAwareEditableItemService, cmsitemsRestService, cdr) {
        this.logService = logService;
        this.systemEventService = systemEventService;
        this.restrictionPickerConfigService = restrictionPickerConfigService;
        this.pageRestrictionsCriteriaService = pageRestrictionsCriteriaService;
        this.contextAwareEditableItemService = contextAwareEditableItemService;
        this.cmsitemsRestService = cmsitemsRestService;
        this.cdr = cdr;
        this.cancelFnChange = new core.EventEmitter();
        this.isDirtyFnChange = new core.EventEmitter();
        this.onRestrictionsChange = new core.EventEmitter();
        this.resetFnChange = new core.EventEmitter();
        this.errors = [];
        this.restrictions = [];
        this.originalRestrictions = [];
        this.restrictionUuids = [];
        this.isRestrictionsReady = false;
        this.restrictionsArrayIsDirty = false;
        this.showRestrictionPicker = false;
        this.disableAddButton = false;
        this.criteriaOptions = [];
        this.criteria = {};
        this.itemComponent = RestrictionEditorCriteriaSelectItemComponent;
        this.matchCriteriaIsDirty = false;
    }
    /* @ngInject */ RestrictionsEditorComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var restrictionsData, restrictionUuidsLength;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.restrictionUuids = this.restrictionUuids || [];
                        return [4 /*yield*/, this.cmsitemsRestService.getByIdsNoCache(this.restrictionUuids, 'FULL')];
                    case 1:
                        restrictionsData = _a.sent();
                        restrictionUuidsLength = 2;
                        this.restrictions = (restrictionsData.response
                            ? restrictionsData.response
                            : [restrictionsData]);
                        this.criteriaFetchStrategy = {
                            fetchAll: function () {
                                return Promise.resolve(_this.criteriaOptions);
                            }
                        };
                        this.prepareRestrictionsCriteria();
                        return [4 /*yield*/, this.setupResults()];
                    case 2:
                        _a.sent();
                        this.sliderPanelConfiguration = {
                            modal: {
                                showDismissButton: true,
                                title: '',
                                dismiss: {
                                    label: 'se.cms.restriction.management.panel.button.cancel',
                                    onClick: function () {
                                        _this.sliderPanelHide();
                                    },
                                    isDisabledFn: function () { return false; }
                                },
                                save: {
                                    onClick: function () {
                                    },
                                    label: '',
                                    isDisabledFn: function () { return false; }
                                }
                            },
                            cssSelector: '#y-modal-dialog'
                        };
                        this.restrictionManagement = {
                            uriContext: this.item.uriContext,
                            submitFn: null,
                            isDirtyFn: null,
                            config: null
                        };
                        this.isDirtyFnChange.emit(function () {
                            return _this.restrictionsArrayIsDirty ||
                                (_this.matchCriteriaIsDirty &&
                                    _this.restrictionUuids.length >= restrictionUuidsLength);
                        });
                        this.resetFnChange.emit(function () { return true; });
                        this.cancelFnChange.emit(function () { return Promise.resolve(true); });
                        this.initEvents();
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.ngOnDestroy = function () {
        this.clearEvents();
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.ngOnChanges = function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var haveRestrictionsChanged;
            return __generator(this, function (_a) {
                if (!changes.restrictionUuids) {
                    return [2 /*return*/, Promise.resolve()];
                }
                this.restrictionsArrayIsDirty =
                    !changes.restrictionUuids.firstChange &&
                        JSON.stringify(this.originalRestrictions) !== JSON.stringify(this.restrictions);
                haveRestrictionsChanged = !lodash.isEqual(changes.restrictionUuids.previousValue, changes.restrictionUuids.currentValue);
                if (haveRestrictionsChanged) {
                    this.indexRestrictions();
                }
                return [2 /*return*/, this.applyIsRestrictionEditable()];
            });
        });
    };
    RestrictionsEditorComponent.prototype.ngOnChanges.$inject = ["changes"];
    /* @ngInject */ RestrictionsEditorComponent.prototype.onAddRestriction = function () {
        this.setSliderConfigForAddOrCreate();
        this.restrictionManagement.config = this.restrictionPickerConfigService.getConfigForSelecting(__spreadArrays(this.restrictions), this.getRestrictionTypes, this.getSupportedRestrictionTypes);
        this.sliderPanelShow();
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.onEditRestriction = function (restriction) {
        this.setSliderConfigForEditing();
        this.restrictionManagement.config = this.restrictionPickerConfigService.getConfigForEditing(__assign({}, restriction), this.getSupportedRestrictionTypes);
        this.sliderPanelShow();
    };
    RestrictionsEditorComponent.prototype.onEditRestriction.$inject = ["restriction"];
    /* @ngInject */ RestrictionsEditorComponent.prototype.onRemoveRestriction = function (restrictionIndex) {
        this.restrictions = this.restrictions.filter(function (_, index) { return index !== restrictionIndex; });
        this.updateRestrictionsData();
    };
    RestrictionsEditorComponent.prototype.onRemoveRestriction.$inject = ["restrictionIndex"];
    /* @ngInject */ RestrictionsEditorComponent.prototype.removeAllRestrictions = function () {
        this.restrictions = [];
        if (this.removeValidationMessages) {
            this.removeValidationMessages();
        }
        this.updateRestrictionsData();
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.showRemoveAllButton = function () {
        return this.restrictionUuids.length > 0 && this.editable;
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.matchCriteriaChanged = function (selectedCriteriaId) {
        this.criteria = this.criteriaOptions.find(function (criteria) { return criteria.id === selectedCriteriaId; });
        this.matchCriteriaIsDirty = this.criteria !== this.originalCriteria;
        this.updateRestrictionsData();
    };
    RestrictionsEditorComponent.prototype.matchCriteriaChanged.$inject = ["selectedCriteriaId"];
    /* @ngInject */ RestrictionsEditorComponent.prototype.onSliderVisibilityChange = function (isVisible) {
        this.isSliderVisible = isVisible;
    };
    RestrictionsEditorComponent.prototype.onSliderVisibilityChange.$inject = ["isVisible"];
    /* @ngInject */ RestrictionsEditorComponent.prototype.setupResults = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.indexRestrictions();
                        this.originalRestrictions = this.cloneRestrictions(this.restrictions);
                        this.updateRestrictionsData();
                        return [4 /*yield*/, this.applyIsRestrictionEditable()];
                    case 1:
                        _a.sent();
                        this.isRestrictionsReady = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.updateRestrictionsData = function (alwaysEnableSubmit) {
        if (alwaysEnableSubmit === void 0) { alwaysEnableSubmit = false; }
        this.onRestrictionsChange.emit({
            onlyOneRestrictionMustApply: this.criteria.value,
            restrictionUuids: this.restrictions.map(function (restriction) { return restriction.uuid; }),
            alwaysEnableSubmit: alwaysEnableSubmit
        });
    };
    RestrictionsEditorComponent.prototype.updateRestrictionsData.$inject = ["alwaysEnableSubmit"];
    /* @ngInject */ RestrictionsEditorComponent.prototype.prepareRestrictionsCriteria = function () {
        this.criteriaOptions = this.pageRestrictionsCriteriaService.getRestrictionCriteriaOptions();
        if (!!this.item.onlyOneRestrictionMustApply) {
            this.criteria = this.criteriaOptions[1];
            this.originalCriteria = this.criteriaOptions[1];
        }
        else {
            this.criteria = this.criteriaOptions[0];
            this.originalCriteria = this.criteriaOptions[0];
        }
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.isRestrictionRelatedError = function (validationError) {
        return lodash.includes(validationError.subject, 'restrictions');
    };
    RestrictionsEditorComponent.prototype.isRestrictionRelatedError.$inject = ["validationError"];
    /* @ngInject */ RestrictionsEditorComponent.prototype.formatRestrictionRelatedError = function (validationError) {
        var error = lodash.clone(validationError);
        if (!smarteditcommons.stringUtils.isBlank(error.position)) {
            error.position = parseInt(error.position, 10);
        }
        if (!smarteditcommons.stringUtils.isBlank(error.subject)) {
            error.subject = error.subject.split('.').pop();
        }
        return error;
    };
    RestrictionsEditorComponent.prototype.formatRestrictionRelatedError.$inject = ["validationError"];
    /* @ngInject */ RestrictionsEditorComponent.prototype.handleUnrelatedValidationErrors = function (validationData) {
        var _this = this;
        this.errors = validationData.messages
            .filter(function (error) { return _this.isRestrictionRelatedError(error); })
            .map(function (error) { return _this.formatRestrictionRelatedError(error); });
    };
    RestrictionsEditorComponent.prototype.handleUnrelatedValidationErrors.$inject = ["validationData"];
    /* @ngInject */ RestrictionsEditorComponent.prototype.propagateErrors = function (genericEditorId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var restrictionInEditMode, restrictionIndex, errorsToPropagate;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        restrictionInEditMode = ((_a = this.restrictionManagement.config) === null || _a === void 0 ? void 0 : _a.mode) ===
                            this.restrictionPickerConfigService.MODE_EDITING &&
                            genericEditorId === ITEM_MANAGEMENT_EDITOR_ID;
                        if (!restrictionInEditMode) {
                            return [2 /*return*/];
                        }
                        restrictionIndex = this.restrictionManagement.config
                            .restriction.restrictionIndex;
                        errorsToPropagate = this.errors.filter(function (error) { return error.position === restrictionIndex; });
                        this.clearEvents();
                        return [4 /*yield*/, this.systemEventService.publishAsync(smarteditcommons.GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, {
                                messages: errorsToPropagate,
                                targetGenericEditorId: genericEditorId
                            })];
                    case 1:
                        _b.sent();
                        this.initEvents();
                        return [2 /*return*/];
                }
            });
        });
    };
    RestrictionsEditorComponent.prototype.propagateErrors.$inject = ["genericEditorId"];
    /* @ngInject */ RestrictionsEditorComponent.prototype.indexRestrictions = function () {
        this.restrictions = (this.restrictions || []).map(function (restriction, index) {
            return (__assign(__assign({}, restriction), { restrictionIndex: index }));
        });
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.cloneRestrictions = function (restrictions) {
        return lodash.cloneDeep(restrictions);
    };
    RestrictionsEditorComponent.prototype.cloneRestrictions.$inject = ["restrictions"];
    /* @ngInject */ RestrictionsEditorComponent.prototype.initEvents = function () {
        var _this = this;
        this.unregisterErrorListener = this.systemEventService.subscribe(smarteditcommons.GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, function (_eventId, data) { return _this.handleUnrelatedValidationErrors(data); });
        this.unregisterErrorPropagationEvent = this.systemEventService.subscribe(smarteditcommons.GENERIC_EDITOR_LOADED_EVENT, function (_eventId, data) { return _this.propagateErrors(data); });
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.clearEvents = function () {
        this.unregisterErrorListener();
        this.unregisterErrorPropagationEvent();
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.applyIsRestrictionEditable = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, Promise.all(this.restrictions.map(function (restriction) { return __awaiter(_this, void 0, void 0, function () {
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            if (!restriction.uid) return [3 /*break*/, 2];
                                            _a = restriction;
                                            return [4 /*yield*/, this.contextAwareEditableItemService.isItemEditable(restriction.uid)];
                                        case 1:
                                            _a.canBeEdited = _b.sent();
                                            return [2 /*return*/, restriction];
                                        case 2:
                                            restriction.canBeEdited = true;
                                            return [2 /*return*/, restriction];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.restrictions = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.setSliderConfigForAddOrCreate = function () {
        var _this = this;
        this.sliderPanelConfiguration.modal.title = 'se.cms.restriction.management.panel.title.add';
        this.sliderPanelConfiguration.modal.save.label =
            'se.cms.restriction.management.panel.button.add';
        this.sliderPanelConfiguration.modal.save.isDisabledFn = function () {
            if (_this.disableAddButton) {
                return true;
            }
            if (_this.restrictionManagement.isDirtyFn) {
                return !_this.restrictionManagement.isDirtyFn();
            }
            return true;
        };
        this.sliderPanelConfiguration.modal.save.onClick = function () { return __awaiter(_this, void 0, void 0, function () {
            var restriction, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        this.disableAddButton = true;
                        return [4 /*yield*/, this.restrictionManagement.submitFn()];
                    case 1:
                        restriction = _b.sent();
                        this.disableAddButton = false;
                        this.restrictions = this.restrictions.concat(restriction);
                        this.updateRestrictionsData();
                        this.sliderPanelHide();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = _b.sent();
                        this.disableAddButton = false;
                        this.logService.warn('RestrictionsEditorComponent.setSliderConfigForAddOrCreate - Failed to create restriction');
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); };
    };
    /* @ngInject */ RestrictionsEditorComponent.prototype.setSliderConfigForEditing = function () {
        var _this = this;
        this.sliderPanelConfiguration.modal.title =
            'se.cms.restriction.management.panel.title.edit';
        this.sliderPanelConfiguration.modal.save.label =
            'se.cms.restriction.management.panel.button.save';
        this.sliderPanelConfiguration.modal.save.isDisabledFn = function () {
            if (_this.restrictionManagement.isDirtyFn) {
                return !_this.restrictionManagement.isDirtyFn();
            }
            return true;
        };
        this.sliderPanelConfiguration.modal.save.onClick = function () { return __awaiter(_this, void 0, void 0, function () {
            var restrictionEdited, payloadRestriction, restrictionIndex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.restrictionManagement.submitFn()];
                    case 1:
                        restrictionEdited = _a.sent();
                        if (this.restrictionManagement.config) {
                            payloadRestriction = this.restrictionManagement
                                .config.restriction;
                            restrictionEdited.restrictionIndex = payloadRestriction.restrictionIndex;
                        }
                        restrictionIndex = restrictionEdited.restrictionIndex;
                        if (restrictionIndex !== -1) {
                            this.restrictions = this.restrictions.map(function (restriction, index) {
                                if (index === restrictionIndex) {
                                    return restrictionEdited;
                                }
                                return restriction;
                            });
                        }
                        else {
                            throw new Error('RestrictionsEditorComponent - edited restriction not found in list: ' +
                                restrictionEdited);
                        }
                        this.updateRestrictionsData(true);
                        this.sliderPanelHide();
                        return [2 /*return*/];
                }
            });
        }); };
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "item", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "editable", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "resetFn", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "cancelFn", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "isDirtyFn", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "getRestrictionTypes", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "getSupportedRestrictionTypes", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "removeValidationMessages", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "restrictionUuids", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "onRestrictionsChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "resetFnChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "cancelFnChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ RestrictionsEditorComponent.prototype, "isDirtyFnChange", void 0);
    /* @ngInject */ RestrictionsEditorComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-restrictions-editor',
            template: "<div class=\"se-restrictions-container\"><div class=\"se-restrictions-container__header\" [ngClass]=\"{ 'se-restrictions-container__header--empty': restrictions.length === 0 }\"><label class=\"se-restrictions__sub-header\" translate=\"se.cms.restrictions.list.title\"></label><div class=\"se-restrictions-container__header--right\"><div *ngIf=\"restrictions.length > 1\"><div *ngIf=\"editable\"><se-select id=\"criteria-type\" [fetchStrategy]=\"criteriaFetchStrategy\" [itemComponent]=\"itemComponent\" [placeholder]=\"'se.cms.restrictions.picker.type.placeholder'\" [model]=\"criteria.id\" (modelChange)=\"matchCriteriaChanged($event)\" [searchEnabled]=\"false\"></se-select></div><div *ngIf=\"!editable\">{{ 'se.cms.restrictions.criteria' | translate }} {{ criteria.label | translate }}</div></div><button class=\"cms-clean-btn se-restriction__clear-all__btn fd-button--light fd-button--compact\" *ngIf=\"showRemoveAllButton()\" (click)=\"removeAllRestrictions()\" translate=\"se.cms.restrictions.list.clear.all\"></button> <button *ngIf=\"!showRestrictionPicker\" type=\"button\" class=\"se-restrictions__add-restriction-btn fd-button--compact\" [disabled]=\"!editable\" (click)=\"onAddRestriction()\"><span translate=\"se.cms.restrictions.editor.button.add.new\"></span></button></div></div><se-slider-panel [sliderPanelConfiguration]=\"sliderPanelConfiguration\" [(sliderPanelHide)]=\"sliderPanelHide\" [(sliderPanelShow)]=\"sliderPanelShow\" (isShownChange)=\"onSliderVisibilityChange($event)\" class=\"se-add-restriction-panel\"><se-restriction-management *ngIf=\"isSliderVisible\" class=\"se-se-add-restriction-panel__restriction-management\" [config]=\"restrictionManagement.config\" [uriContext]=\"restrictionManagement.uriContext\" [(submitFn)]=\"restrictionManagement.submitFn\" [(isDirtyFn)]=\"restrictionManagement.isDirtyFn\"></se-restriction-management></se-slider-panel><div *ngIf=\"errors.length > 0\"><span class=\"se-help-block--has-error help-block fd-form__message fd-form__message--error\" *ngFor=\"let error of errors\" [translate]=\"error.message\"></span></div><se-restrictions-table *ngIf=\"isRestrictionsReady\" [editable]=\"editable\" [restrictions]=\"restrictions\" [restrictionCriteria]=\"criteria\" [errors]=\"errors\" [customClass]=\"'ySERestrictionListLink'\" (onEdit)=\"onEditRestriction($event)\" (onRemove)=\"onRemoveRestriction($event)\"></se-restrictions-table></div>",
            styles: [".se-restrictions-container__header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;padding-bottom:12px}.se-restrictions-container__header--right{display:flex;flex-direction:row;align-items:center}.se-restrictions-container__header--right>div,.se-restrictions-container__header--right>span{margin-left:12px}.se-restrictions-container__header--empty{border-bottom:none}.se-restrictions__sub-header{font-weight:700;align-self:flex-start;color:#51555a;margin:0}.se-restriction__clear-all__btn{text-transform:capitalize}"]
        }),
        __metadata("design:paramtypes", [smarteditcommons.LogService,
            smarteditcommons.SystemEventService,
            RestrictionPickerConfigService,
            PageRestrictionsCriteriaService,
            cmscommons.IContextAwareEditableItemService,
            cmscommons.CmsitemsRestService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ RestrictionsEditorComponent);
    return /* @ngInject */ RestrictionsEditorComponent;
}());

var RestrictionsModule = /** @class */ (function () {
    function RestrictionsModule() {
    }
    RestrictionsModule = __decorate([
        core.NgModule({
            imports: [
                common.CommonModule,
                core$1.TranslateModule.forChild(),
                smarteditcommons.SeGenericEditorModule,
                smarteditcommons.MessageModule,
                smarteditcommons.SelectModule,
                smarteditcommons.L10nPipeModule,
                smarteditcommons.DropdownMenuModule,
                smarteditcommons.SliderPanelModule
            ],
            providers: [RestrictionPickerConfigService, RestrictionManagementSelectModelFactory],
            declarations: [
                RestrictionManagementEditComponent,
                ItemManagementComponent,
                RestrictionManagementSelectComponent,
                RestrictionManagementSelectItemComponent,
                RestrictionManagementComponent,
                RestrictionsTableComponent,
                RestrictionsEditorComponent,
                RestrictionEditorCriteriaSelectItemComponent
            ],
            entryComponents: [
                RestrictionManagementEditComponent,
                ItemManagementComponent,
                RestrictionManagementSelectComponent,
                RestrictionManagementSelectItemComponent,
                RestrictionManagementComponent,
                RestrictionsTableComponent,
                RestrictionsEditorComponent,
                RestrictionEditorCriteriaSelectItemComponent
            ],
            exports: [RestrictionsEditorComponent]
        })
    ], RestrictionsModule);
    return RestrictionsModule;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageRestrictionsEditorComponent", {
    selector: 'se-page-restrictions-editor',
    template: "<se-page-restrictions-info-message *ngIf=\"page.restrictions?.length > 1\"></se-page-restrictions-info-message><se-restrictions-editor [editable]=\"isEditable\" [getRestrictionTypes]=\"getRestrictionTypes\" [getSupportedRestrictionTypes]=\"getSupportedRestrictionTypes\" [item]=\"page\" [restrictionUuids]=\"page.restrictions\" [removeValidationMessages]=\"onRemoveValidationMessages\" (onRestrictionsChange)=\"onRestrictionsChange($event)\"></se-restrictions-editor>"
});
var /* @ngInject */ PageRestrictionsEditorComponent = /** @class */ (function () {
    PageRestrictionsEditorComponent.$inject = ["data", "restrictionsService", "restrictionTypesService"];
    function /* @ngInject */ PageRestrictionsEditorComponent(data, restrictionsService, restrictionTypesService) {
        this.data = data;
        this.restrictionsService = restrictionsService;
        this.restrictionTypesService = restrictionTypesService;
        (this.editor = data.editor, this.page = data.model);
        this.isEditable = !data.isFieldDisabled();
    }
    /* @ngInject */ PageRestrictionsEditorComponent.prototype.ngOnInit = function () {
        this.initGetRestrictionTypes();
        this.initSupportedRestrictionTypes();
        this.initOnRemoveValidationMessages();
    };
    /* @ngInject */ PageRestrictionsEditorComponent.prototype.onRestrictionsChange = function (_a) {
        var onlyOneRestrictionMustApply = _a.onlyOneRestrictionMustApply, restrictionUuids = _a.restrictionUuids, alwaysEnableSubmit = _a.alwaysEnableSubmit;
        this.page.onlyOneRestrictionMustApply = onlyOneRestrictionMustApply;
        this.page.restrictions = restrictionUuids;
    };
    PageRestrictionsEditorComponent.prototype.onRestrictionsChange.$inject = ["_a"];
    /* @ngInject */ PageRestrictionsEditorComponent.prototype.initGetRestrictionTypes = function () {
        var _this = this;
        this.getRestrictionTypes = function () {
            return _this.restrictionTypesService.getRestrictionTypesByPageType(_this.page.typeCode);
        };
    };
    /* @ngInject */ PageRestrictionsEditorComponent.prototype.initSupportedRestrictionTypes = function () {
        var _this = this;
        this.getSupportedRestrictionTypes = function () {
            return _this.restrictionsService.getSupportedRestrictionTypeCodes();
        };
    };
    /* @ngInject */ PageRestrictionsEditorComponent.prototype.initOnRemoveValidationMessages = function () {
        var _this = this;
        this.onRemoveValidationMessages = function () { return _this.editor.api.clearMessages(); };
    };
    /* @ngInject */ PageRestrictionsEditorComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-restrictions-editor',
            template: "<se-page-restrictions-info-message *ngIf=\"page.restrictions?.length > 1\"></se-page-restrictions-info-message><se-restrictions-editor [editable]=\"isEditable\" [getRestrictionTypes]=\"getRestrictionTypes\" [getSupportedRestrictionTypes]=\"getSupportedRestrictionTypes\" [item]=\"page\" [restrictionUuids]=\"page.restrictions\" [removeValidationMessages]=\"onRemoveValidationMessages\" (onRestrictionsChange)=\"onRestrictionsChange($event)\"></se-restrictions-editor>"
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object, RestrictionsService,
            RestrictionTypesService])
    ], /* @ngInject */ PageRestrictionsEditorComponent);
    return /* @ngInject */ PageRestrictionsEditorComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageRestrictionsInfoMessageComponent", {
    selector: 'se-page-restrictions-info-message',
    template: "<se-message [type]=\"'info'\" class=\"se-restrictions-info__message\"><ng-container se-message-title>{{ 'se.cms.restrictions.editor.ymessage.title' | translate }}</ng-container><ng-container se-message-description>{{ 'se.cms.restrictions.editor.ymessage.description' | translate }}</ng-container></se-message>",
    styles: [".se-restrictions-info__message{margin-bottom:10px;display:block}"]
});
var /* @ngInject */ PageRestrictionsInfoMessageComponent = /** @class */ (function () {
    function /* @ngInject */ PageRestrictionsInfoMessageComponent() {
    }
    /* @ngInject */ PageRestrictionsInfoMessageComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-restrictions-info-message',
            template: "<se-message [type]=\"'info'\" class=\"se-restrictions-info__message\"><ng-container se-message-title>{{ 'se.cms.restrictions.editor.ymessage.title' | translate }}</ng-container><ng-container se-message-description>{{ 'se.cms.restrictions.editor.ymessage.description' | translate }}</ng-container></se-message>",
            styles: [".se-restrictions-info__message{margin-bottom:10px;display:block}"]
        })
    ], /* @ngInject */ PageRestrictionsInfoMessageComponent);
    return /* @ngInject */ PageRestrictionsInfoMessageComponent;
}());

var PageRestrictionsModule = /** @class */ (function () {
    function PageRestrictionsModule() {
    }
    PageRestrictionsModule = __decorate([
        core.NgModule({
            imports: [common.CommonModule, smarteditcommons.MessageModule, RestrictionsModule, smarteditcommons.TranslationModule.forChild()],
            declarations: [PageRestrictionsEditorComponent, PageRestrictionsInfoMessageComponent],
            entryComponents: [PageRestrictionsEditorComponent, PageRestrictionsInfoMessageComponent],
            exports: [RestrictionsModule, PageRestrictionsInfoMessageComponent]
        })
    ], PageRestrictionsModule);
    return PageRestrictionsModule;
}());

window.__smartedit__.addDecoratorPayload("Component", "ItemSelectorPanelComponent", {
    selector: 'se-item-selector-panel',
    template: "<se-slider-panel [sliderPanelConfiguration]=\"panelConfig\" [(sliderPanelHide)]=\"hidePanel\" [(sliderPanelShow)]=\"showPanel\" class=\"se-item-selector-panel\"><div class=\"se-item-selector-panel__content\" *ngIf=\"catalogs.length > 0\"><div *ngIf=\"catalogs.length > 1\" class=\"se-item-selector-panel__content__item\"><label class=\"se-control-label\" translate=\"se.cms.catalogaware.panel.catalogs.label\"></label><se-select id=\"se-catalog-selector-dropdown\" class=\"se-item-selector-panel__content__catalogs__yselect\" [(model)]=\"catalogInfo.catalogId\" [fetchStrategy]=\"catalogSelectorFetchStrategy\" [onChange]=\"onCatalogSelectorChange\"></se-select><label>{{ catalogInfo.name | seL10n | async }}</label></div><div class=\"se-item-selector-panel__content__item\"><label class=\"se-control-label\" translate=\"se.cms.catalogaware.panel.catalogsversion.label\"></label><se-select id=\"se-catalog-version-selector-dropdown\" class=\"se-item-selector-panel__content__catalog-version__yselect\" [(model)]=\"catalogInfo.catalogVersion\" [fetchStrategy]=\"catalogVersionSelectorFetchStrategy\" [onChange]=\"onCatalogVersionSelectorChange\" [searchEnabled]=\"false\" [(reset)]=\"resetCatalogVersionSelector\"></se-select></div><div class=\"se-item-selector-panel__content__item\" *ngIf=\"catalogInfo.catalogVersion\"><label class=\"se-control-label\">{{ catalogItemTypeI18nKey }}</label><se-select id=\"se-items-selector-dropdown\" [multiSelect]=\"true\" [controls]=\"true\" [(model)]=\"internalItemsSelected\" [onChange]=\"onItemsSelectorChange\" [fetchStrategy]=\"itemsSelectorFetchStrategy\" [(reset)]=\"resetItemsListSelector\" [itemComponent]=\"itemComponent\" [isReadOnly]=\"!isItemSelectorEnabled()\"></se-select></div></div></se-slider-panel>"
});
var /* @ngInject */ ItemSelectorPanelComponent = /** @class */ (function () {
    function /* @ngInject */ ItemSelectorPanelComponent() {
        this.onChange = new core.EventEmitter();
        this.showPanelChange = new core.EventEmitter();
        this.maxNumItems = 0;
        this.catalogs = [];
        this.catalogInfo = {};
        this.saveButtonDisabled = true;
        this.internalItemsSelected = [];
        this.initOnCatalogSelectorChange();
        this.initOnCatalogVersionSelectorChange();
        this.initOnItemsSelectorChange();
    }
    /* @ngInject */ ItemSelectorPanelComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.panelConfig = {
            cssSelector: '#y-modal-dialog',
            noGreyedOutOverlay: true,
            modal: {
                title: this.catalogItemTypeI18nKey,
                showDismissButton: false,
                cancel: {
                    onClick: function () { return _this.cancel(); },
                    label: 'se.cms.catalogaware.panel.button.cancel',
                    isDisabledFn: function () { return false; }
                },
                save: {
                    onClick: function () { return _this.saveChanges(); },
                    label: 'se.cms.catalogaware.panel.button.add',
                    isDisabledFn: function () { return _this.isSaveButtonDisabled(); }
                }
            }
        };
        this.showPanelChange.emit(function () { return _this.initAndShowPanel(); });
        return this.initCatalogs();
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.isItemSelectorEnabled = function () {
        return (this.catalogInfo && !!this.catalogInfo.catalogId && !!this.catalogInfo.catalogVersion);
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.initOnCatalogSelectorChange = function () {
        var _this = this;
        this.onCatalogSelectorChange = function () {
            if (_this.resetCatalogVersionSelector) {
                _this.resetCatalogVersionSelector();
            }
        };
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.initOnCatalogVersionSelectorChange = function () {
        var _this = this;
        this.onCatalogVersionSelectorChange = function () {
            if (_this.catalogInfo.catalogId && _this.catalogInfo.catalogVersion) {
                if (_this.resetItemsListSelector) {
                    _this.resetItemsListSelector();
                }
            }
        };
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.initOnItemsSelectorChange = function () {
        var _this = this;
        this.onItemsSelectorChange = function () {
            if (_this.isItemSelectorEnabled()) {
                _this.saveButtonDisabled = false;
            }
        };
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.initCatalogs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.getCatalogs()];
                    case 1:
                        _a.catalogs = _b.sent();
                        if (this.catalogs.length === 1) {
                            this.catalogInfo.catalogId = this.catalogs[0].id;
                        }
                        this.initCatalogSelector();
                        this.initCatalogVersionSelector();
                        this.initItemsSelector();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.initCatalogSelector = function () {
        var _this = this;
        this.catalogSelectorFetchStrategy = {
            fetchAll: function () { return Promise.resolve(_this.catalogs); }
        };
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.initCatalogVersionSelector = function () {
        var _this = this;
        this.catalogVersionSelectorFetchStrategy = {
            fetchAll: function () {
                var versions = [];
                if (_this.catalogInfo.catalogId) {
                    var catalog = _this.catalogs.find(function (_a) {
                        var id = _a.id;
                        return id === _this.catalogInfo.catalogId;
                    });
                    versions = catalog.versions.slice(0);
                }
                return Promise.resolve(versions);
            }
        };
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.initItemsSelector = function () {
        var _this = this;
        this.itemsSelectorFetchStrategy = {
            fetchPage: function (mask, pageSize, currentPage) {
                return _this.itemsFetchPageAndFilter(mask, pageSize, currentPage);
            },
            fetchEntity: function (uid) {
                return _this.itemsFetchStrategy.fetchEntity(uid);
            }
        };
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.initAndShowPanel = function () {
        this.catalogInfo = {};
        this.initCatalogs();
        this.internalItemsSelected = this.defaultItemsSelected
            ? lodash.clone(this.defaultItemsSelected)
            : [];
        this.showPanel();
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.itemsFetchPageAndFilter = function (mask, pageSize, currentPage) {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.itemsFetchStrategy.fetchPage(this.catalogInfo, mask, pageSize, currentPage)];
                    case 1:
                        page = _a.sent();
                        return [2 /*return*/, this.limitToNonSelectedItems(page)];
                }
            });
        });
    };
    ItemSelectorPanelComponent.prototype.itemsFetchPageAndFilter.$inject = ["mask", "pageSize", "currentPage"];
    /* @ngInject */ ItemSelectorPanelComponent.prototype.limitToNonSelectedItems = function (page) {
        var itemIndex = page.results.length;
        while (itemIndex--) {
            var item = page.results[itemIndex];
            if (this.internalItemsSelected.includes(item.uid)) {
                page.results.splice(itemIndex, 1);
                page.pagination.count--;
            }
        }
        return page;
    };
    ItemSelectorPanelComponent.prototype.limitToNonSelectedItems.$inject = ["page"];
    /* @ngInject */ ItemSelectorPanelComponent.prototype.isSaveButtonDisabled = function () {
        return this.saveButtonDisabled;
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.cancel = function () {
        this.catalogInfo = {};
        this.hidePanel();
    };
    /* @ngInject */ ItemSelectorPanelComponent.prototype.saveChanges = function () {
        var _a;
        (_a = this.defaultItemsSelected).splice.apply(_a, __spreadArrays([0,
            this.defaultItemsSelected.length], this.internalItemsSelected));
        this.onChange.emit();
        this.hidePanel();
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ ItemSelectorPanelComponent.prototype, "defaultItemsSelected", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", core.Type)
    ], /* @ngInject */ ItemSelectorPanelComponent.prototype, "itemComponent", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ ItemSelectorPanelComponent.prototype, "getCatalogs", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ ItemSelectorPanelComponent.prototype, "itemsFetchStrategy", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ ItemSelectorPanelComponent.prototype, "catalogItemTypeI18nKey", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Number)
    ], /* @ngInject */ ItemSelectorPanelComponent.prototype, "maxNumItems", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ ItemSelectorPanelComponent.prototype, "onChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ ItemSelectorPanelComponent.prototype, "showPanelChange", void 0);
    /* @ngInject */ ItemSelectorPanelComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-item-selector-panel',
            template: "<se-slider-panel [sliderPanelConfiguration]=\"panelConfig\" [(sliderPanelHide)]=\"hidePanel\" [(sliderPanelShow)]=\"showPanel\" class=\"se-item-selector-panel\"><div class=\"se-item-selector-panel__content\" *ngIf=\"catalogs.length > 0\"><div *ngIf=\"catalogs.length > 1\" class=\"se-item-selector-panel__content__item\"><label class=\"se-control-label\" translate=\"se.cms.catalogaware.panel.catalogs.label\"></label><se-select id=\"se-catalog-selector-dropdown\" class=\"se-item-selector-panel__content__catalogs__yselect\" [(model)]=\"catalogInfo.catalogId\" [fetchStrategy]=\"catalogSelectorFetchStrategy\" [onChange]=\"onCatalogSelectorChange\"></se-select><label>{{ catalogInfo.name | seL10n | async }}</label></div><div class=\"se-item-selector-panel__content__item\"><label class=\"se-control-label\" translate=\"se.cms.catalogaware.panel.catalogsversion.label\"></label><se-select id=\"se-catalog-version-selector-dropdown\" class=\"se-item-selector-panel__content__catalog-version__yselect\" [(model)]=\"catalogInfo.catalogVersion\" [fetchStrategy]=\"catalogVersionSelectorFetchStrategy\" [onChange]=\"onCatalogVersionSelectorChange\" [searchEnabled]=\"false\" [(reset)]=\"resetCatalogVersionSelector\"></se-select></div><div class=\"se-item-selector-panel__content__item\" *ngIf=\"catalogInfo.catalogVersion\"><label class=\"se-control-label\">{{ catalogItemTypeI18nKey }}</label><se-select id=\"se-items-selector-dropdown\" [multiSelect]=\"true\" [controls]=\"true\" [(model)]=\"internalItemsSelected\" [onChange]=\"onItemsSelectorChange\" [fetchStrategy]=\"itemsSelectorFetchStrategy\" [(reset)]=\"resetItemsListSelector\" [itemComponent]=\"itemComponent\" [isReadOnly]=\"!isItemSelectorEnabled()\"></se-select></div></div></se-slider-panel>"
        }),
        __metadata("design:paramtypes", [])
    ], /* @ngInject */ ItemSelectorPanelComponent);
    return /* @ngInject */ ItemSelectorPanelComponent;
}());

var CatalogModule = /** @class */ (function () {
    function CatalogModule() {
    }
    CatalogModule = __decorate([
        core.NgModule({
            imports: [
                common.CommonModule,
                forms.FormsModule,
                smarteditcommons.DropdownMenuModule,
                smarteditcommons.SliderPanelModule,
                smarteditcommons.SelectModule,
                core$1.TranslateModule.forChild(),
                smarteditcommons.L10nPipeModule
            ],
            providers: [CatalogInformationService],
            declarations: [
                ItemSelectorPanelComponent,
                ProductNodeComponent,
                CategoryNodeComponent,
                ProductSelectorItemComponent,
                CategorySelectorItemComponent
            ],
            entryComponents: [
                ItemSelectorPanelComponent,
                ProductNodeComponent,
                CategoryNodeComponent,
                ProductSelectorItemComponent,
                CategorySelectorItemComponent
            ]
        })
    ], CatalogModule);
    return CatalogModule;
}());

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
var LinkToOption;
(function (LinkToOption) {
    LinkToOption["content"] = "content";
    LinkToOption["product"] = "product";
    LinkToOption["category"] = "category";
    LinkToOption["external"] = "external";
})(LinkToOption || (LinkToOption = {}));

var SelectOptions = [
    {
        id: LinkToOption.content,
        structureApiMode: 'CONTENT'
    },
    {
        id: LinkToOption.product,
        structureApiMode: 'PRODUCT',
        hasCatalog: true
    },
    {
        id: LinkToOption.category,
        structureApiMode: 'CATEGORY',
        hasCatalog: true
    },
    {
        id: LinkToOption.external,
        structureApiMode: 'EXTERNAL'
    }
];
window.__smartedit__.addDecoratorPayload("Component", "CmsLinkToSelectComponent", {
    selector: 'se-cms-link-to-select',
    template: "<se-generic-editor-dropdown [id]=\"id\" [field]=\"field\" [qualifier]=\"qualifier\" [model]=\"optionModel\"></se-generic-editor-dropdown>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var CmsLinkToSelectComponent = /** @class */ (function () {
    function CmsLinkToSelectComponent(cdr, systemEventService, data) {
        this.cdr = cdr;
        this.systemEventService = systemEventService;
        (this.id = data.id, this.field = data.field, this.optionModel = data.model, this.qualifier = data.qualifier);
    }
    CmsLinkToSelectComponent.prototype.ngOnInit = function () {
        var _this = this;
        var linkTo = this.getLinkToValue(this.optionModel);
        if (linkTo !== null) {
            this.optionModel.linkTo = linkTo;
        }
        var onSelectValueChangedEventName = "" + this.id + smarteditcommons.LINKED_DROPDOWN;
        this.unRegSelectValueChanged = this.systemEventService.subscribe(onSelectValueChangedEventName, function (_eventId, data) { return _this.onLinkToSelectValueChanged(data); });
    };
    CmsLinkToSelectComponent.prototype.ngOnDestroy = function () {
        this.unRegSelectValueChanged();
    };
    CmsLinkToSelectComponent.prototype.onLinkToSelectValueChanged = function (_a) {
        var option = _a.optionObject, qualifier = _a.qualifier;
        if (this.qualifier !== qualifier) {
            return;
        }
        if (!option) {
            return;
        }
        var optionValue = option.id;
        var selectedOption = SelectOptions.find(function (_a) {
            var id = _a.id;
            return id === optionValue;
        });
        if (!selectedOption) {
            throw new Error('Selected option is not supported');
        }
        if (optionValue === this.optionModel.currentSelectedOptionValue) {
            return;
        }
        this.optionModel.currentSelectedOptionValue = optionValue;
        this.optionModel.external = optionValue !== LinkToOption.external;
        this.clearModel(selectedOption);
        this.systemEventService.publishAsync(CMS_LINK_TO_RELOAD_STRUCTURE_EVENT_ID, {
            content: this.optionModel,
            structureApiMode: selectedOption.structureApiMode,
            editorId: this.id
        });
        this.cdr.detectChanges();
    };
    CmsLinkToSelectComponent.prototype.getLinkToValue = function (model) {
        if (model.url) {
            return LinkToOption.external;
        }
        else if (model.product) {
            return LinkToOption.product;
        }
        else if (model.contentPage) {
            return LinkToOption.content;
        }
        else if (model.category) {
            return LinkToOption.category;
        }
        return null;
    };
    CmsLinkToSelectComponent.prototype.clearModel = function (_a) {
        var id = _a.id, hasCatalog = _a.hasCatalog;
        if (id !== LinkToOption.category) {
            delete this.optionModel.category;
        }
        if (id !== LinkToOption.product) {
            delete this.optionModel.product;
        }
        if (!hasCatalog) {
            delete this.optionModel.productCatalog;
        }
        if (id !== LinkToOption.content) {
            delete this.optionModel.contentPage;
        }
        if (id !== LinkToOption.external) {
            delete this.optionModel.url;
        }
    };
    CmsLinkToSelectComponent = __decorate([
        core.Component({
            selector: 'se-cms-link-to-select',
            template: "<se-generic-editor-dropdown [id]=\"id\" [field]=\"field\" [qualifier]=\"qualifier\" [model]=\"optionModel\"></se-generic-editor-dropdown>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(2, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [core.ChangeDetectorRef,
            smarteditcommons.SystemEventService, Object])
    ], CmsLinkToSelectComponent);
    return CmsLinkToSelectComponent;
}());

var /* @ngInject */ ProductDropdownPopulator = /** @class */ (function (_super) {
    __extends(/* @ngInject */ ProductDropdownPopulator, _super);
    ProductDropdownPopulator.$inject = ["contextAwareCatalogService", "languageService", "translateService", "uriDropdownPopulator"];
    function /* @ngInject */ ProductDropdownPopulator(contextAwareCatalogService, languageService, translateService, uriDropdownPopulator) {
        var _this = _super.call(this, lodash, languageService, translateService) || this;
        _this.contextAwareCatalogService = contextAwareCatalogService;
        _this.uriDropdownPopulator = uriDropdownPopulator;
        return _this;
    }
    /* @ngInject */ ProductDropdownPopulator.prototype.fetchPage = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contextAwareCatalogService.getProductSearchUri(payload.model.productCatalog)];
                    case 1:
                        uri = _a.sent();
                        payload.field.uri = uri;
                        return [2 /*return*/, this.uriDropdownPopulator.fetchPage(payload)];
                }
            });
        });
    };
    ProductDropdownPopulator.prototype.fetchPage.$inject = ["payload"];
    /* @ngInject */ ProductDropdownPopulator.prototype.isPaged = function () {
        return true;
    };
    /* @ngInject */ ProductDropdownPopulator.prototype.getItem = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contextAwareCatalogService.getProductItemUri()];
                    case 1:
                        uri = _a.sent();
                        payload.field.uri = uri;
                        return [2 /*return*/, this.uriDropdownPopulator.getItem(payload)];
                }
            });
        });
    };
    ProductDropdownPopulator.prototype.getItem.$inject = ["payload"];
    /* @ngInject */ ProductDropdownPopulator = __decorate([
        core.Injectable(),
        __metadata("design:paramtypes", [ContextAwareCatalogService,
            smarteditcommons.LanguageService,
            core$1.TranslateService,
            smarteditcommons.UriDropdownPopulator])
    ], /* @ngInject */ ProductDropdownPopulator);
    return /* @ngInject */ ProductDropdownPopulator;
}(smarteditcommons.DropdownPopulatorInterface));

var /* @ngInject */ ProductCatalogDropdownPopulator = /** @class */ (function (_super) {
    __extends(/* @ngInject */ ProductCatalogDropdownPopulator, _super);
    ProductCatalogDropdownPopulator.$inject = ["catalogService", "languageService", "optionsDropdownPopulator", "translateService"];
    function /* @ngInject */ ProductCatalogDropdownPopulator(catalogService, languageService, optionsDropdownPopulator, translateService) {
        var _this = _super.call(this, lodash, languageService, translateService) || this;
        _this.catalogService = catalogService;
        _this.optionsDropdownPopulator = optionsDropdownPopulator;
        return _this;
    }
    /* @ngInject */ ProductCatalogDropdownPopulator.prototype.fetchAll = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var catalogs;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.getProductCatalogsBySiteKey(smarteditcommons.CONTEXT_SITE_ID)];
                    case 1:
                        catalogs = _a.sent();
                        payload.field.options = catalogs.filter(function (catalog) {
                            return _this.hasCatalogOneActiveVersion(catalog);
                        });
                        return [2 /*return*/, this.optionsDropdownPopulator.fetchAll(payload)];
                }
            });
        });
    };
    ProductCatalogDropdownPopulator.prototype.fetchAll.$inject = ["payload"];
    /* @ngInject */ ProductCatalogDropdownPopulator.prototype.isPaged = function () {
        return false;
    };
    /* @ngInject */ ProductCatalogDropdownPopulator.prototype.hasCatalogOneActiveVersion = function (catalog) {
        var activeVersions = catalog.versions.filter(function (version) { return version.active === true; });
        return activeVersions.length === 1;
    };
    ProductCatalogDropdownPopulator.prototype.hasCatalogOneActiveVersion.$inject = ["catalog"];
    /* @ngInject */ ProductCatalogDropdownPopulator = __decorate([
        core.Injectable(),
        __metadata("design:paramtypes", [smarteditcommons.ICatalogService,
            smarteditcommons.LanguageService,
            smarteditcommons.OptionsDropdownPopulator,
            core$1.TranslateService])
    ], /* @ngInject */ ProductCatalogDropdownPopulator);
    return /* @ngInject */ ProductCatalogDropdownPopulator;
}(smarteditcommons.DropdownPopulatorInterface));

var /* @ngInject */ CategoryDropdownPopulator = /** @class */ (function (_super) {
    __extends(/* @ngInject */ CategoryDropdownPopulator, _super);
    CategoryDropdownPopulator.$inject = ["contextAwareCatalogService", "languageService", "translateService", "uriDropdownPopulator"];
    function /* @ngInject */ CategoryDropdownPopulator(contextAwareCatalogService, languageService, translateService, uriDropdownPopulator) {
        var _this = _super.call(this, lodash, languageService, translateService) || this;
        _this.contextAwareCatalogService = contextAwareCatalogService;
        _this.uriDropdownPopulator = uriDropdownPopulator;
        return _this;
    }
    /* @ngInject */ CategoryDropdownPopulator.prototype.fetchPage = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, langIsoCode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (payload.model.productCatalog === undefined) {
                            throw new Error('"productCatalog" is required but it was not provided.');
                        }
                        return [4 /*yield*/, this.contextAwareCatalogService.getProductCategorySearchUri(payload.model.productCatalog)];
                    case 1:
                        uri = _a.sent();
                        payload.field.uri = uri;
                        return [4 /*yield*/, this.languageService.getResolveLocale()];
                    case 2:
                        langIsoCode = _a.sent();
                        payload.field.params.langIsoCode = langIsoCode;
                        return [2 /*return*/, this.uriDropdownPopulator.fetchPage(payload)];
                }
            });
        });
    };
    CategoryDropdownPopulator.prototype.fetchPage.$inject = ["payload"];
    /* @ngInject */ CategoryDropdownPopulator.prototype.getItem = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contextAwareCatalogService.getProductCategoryItemUri()];
                    case 1:
                        uri = _a.sent();
                        payload.field.uri = uri;
                        return [2 /*return*/, this.uriDropdownPopulator.getItem(payload)];
                }
            });
        });
    };
    CategoryDropdownPopulator.prototype.getItem.$inject = ["payload"];
    /* @ngInject */ CategoryDropdownPopulator.prototype.isPaged = function () {
        return true;
    };
    /* @ngInject */ CategoryDropdownPopulator = __decorate([
        core.Injectable(),
        __metadata("design:paramtypes", [ContextAwareCatalogService,
            smarteditcommons.LanguageService,
            core$1.TranslateService,
            smarteditcommons.UriDropdownPopulator])
    ], /* @ngInject */ CategoryDropdownPopulator);
    return /* @ngInject */ CategoryDropdownPopulator;
}(smarteditcommons.DropdownPopulatorInterface));

/**
 * TODO: It might be deleted because it seems that it has been replaced by CMSItemDropdownDropdownPopulator.
 */
var /* @ngInject */ CmsLinkComponentContentPageDropdownPopulator = /** @class */ (function (_super) {
    __extends(/* @ngInject */ CmsLinkComponentContentPageDropdownPopulator, _super);
    CmsLinkComponentContentPageDropdownPopulator.$inject = ["contextAwareCatalogService", "languageService", "translateService", "uriDropdownPopulator"];
    function /* @ngInject */ CmsLinkComponentContentPageDropdownPopulator(contextAwareCatalogService, languageService, translateService, uriDropdownPopulator) {
        var _this = _super.call(this, lodash, languageService, translateService) || this;
        _this.contextAwareCatalogService = contextAwareCatalogService;
        _this.uriDropdownPopulator = uriDropdownPopulator;
        return _this;
    }
    /* @ngInject */ CmsLinkComponentContentPageDropdownPopulator.prototype.fetchPage = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contextAwareCatalogService.getContentPageSearchUri()];
                    case 1:
                        uri = _a.sent();
                        payload.field.uri = uri;
                        return [2 /*return*/, this.uriDropdownPopulator.fetchPage(payload)];
                }
            });
        });
    };
    CmsLinkComponentContentPageDropdownPopulator.prototype.fetchPage.$inject = ["payload"];
    /* @ngInject */ CmsLinkComponentContentPageDropdownPopulator.prototype.getItem = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contextAwareCatalogService.getContentPageItemUri()];
                    case 1:
                        uri = _a.sent();
                        payload.field.uri = uri;
                        return [2 /*return*/, this.uriDropdownPopulator.getItem(payload)];
                }
            });
        });
    };
    CmsLinkComponentContentPageDropdownPopulator.prototype.getItem.$inject = ["payload"];
    /* @ngInject */ CmsLinkComponentContentPageDropdownPopulator.prototype.isPaged = function () {
        return true;
    };
    /* @ngInject */ CmsLinkComponentContentPageDropdownPopulator = __decorate([
        core.Injectable(),
        __metadata("design:paramtypes", [ContextAwareCatalogService,
            smarteditcommons.LanguageService,
            core$1.TranslateService,
            smarteditcommons.UriDropdownPopulator])
    ], /* @ngInject */ CmsLinkComponentContentPageDropdownPopulator);
    return /* @ngInject */ CmsLinkComponentContentPageDropdownPopulator;
}(smarteditcommons.DropdownPopulatorInterface));

window.__smartedit__.addDecoratorPayload("Component", "MissingPrimaryContentPageComponent", {
    selector: 'se-component-missing-primary-content-page',
    template: "<div><div><label class=\"missing-primary-content-page-message__label\" [translate]=\"'se.cms.page.restore.content.page.noprimaryforvariation.msg'\"></label></div><se-select id=\"se-page-restore-change-primary-selector-dropdown\" [(model)]=\"cmsPage.label\" [fetchStrategy]=\"fetchStrategy\"></se-select></div>",
    styles: [".missing-primary-content-page-message__label{font-style:italic;padding-bottom:10px;display:block}"]
});
var MissingPrimaryContentPageComponent = /** @class */ (function () {
    function MissingPrimaryContentPageComponent(data, pageService, logService) {
        this.data = data;
        this.pageService = pageService;
        this.logService = logService;
        this.CONTENT_PAGE_TYPE_CODE = 'ContentPage';
        this.ERROR_MSG = '[MissingPrimaryContentPageComponent] - Cannot retrieve list of alternative content primary pages.';
        (this.cmsPage = data.model);
    }
    MissingPrimaryContentPageComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.fetchStrategy = {
            fetchEntity: function () { return _this.fetchEntity(); },
            fetchPage: function (search, pageSize, currentPage) { return _this.fetchPage(search, pageSize, currentPage); }
        };
    };
    MissingPrimaryContentPageComponent.prototype.fetchEntity = function () {
        return Promise.resolve(this.getSelectItemFromPrimaryPage(this.cmsPage));
    };
    MissingPrimaryContentPageComponent.prototype.fetchPage = function (search, pageSize, currentPage) {
        return __awaiter(this, void 0, void 0, function () {
            var page, targetPage, error_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.pageService.getPaginatedPrimaryPagesForPageType(this.CONTENT_PAGE_TYPE_CODE, null, {
                                search: search,
                                pageSize: pageSize,
                                currentPage: currentPage
                            })];
                    case 1:
                        page = _a.sent();
                        targetPage = {
                            pagination: page.pagination,
                            results: null
                        };
                        targetPage.results = page.response.map(function (rawPage) {
                            return _this.getSelectItemFromPrimaryPage(rawPage);
                        });
                        return [2 /*return*/, targetPage];
                    case 2:
                        error_1 = _a.sent();
                        this.logService.warn(this.ERROR_MSG, error_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    MissingPrimaryContentPageComponent.prototype.getSelectItemFromPrimaryPage = function (page) {
        return {
            id: page.label,
            label: page.name
        };
    };
    MissingPrimaryContentPageComponent = __decorate([
        core.Component({
            selector: 'se-component-missing-primary-content-page',
            template: "<div><div><label class=\"missing-primary-content-page-message__label\" [translate]=\"'se.cms.page.restore.content.page.noprimaryforvariation.msg'\"></label></div><se-select id=\"se-page-restore-change-primary-selector-dropdown\" [(model)]=\"cmsPage.label\" [fetchStrategy]=\"fetchStrategy\"></se-select></div>",
            styles: [".missing-primary-content-page-message__label{font-style:italic;padding-bottom:10px;display:block}"]
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object, cmscommons.IPageService,
            smarteditcommons.LogService])
    ], MissingPrimaryContentPageComponent);
    return MissingPrimaryContentPageComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "DuplicatePrimaryNonContentPageComponent", {
    selector: 'se-component-duplicate-primary-non-content-page',
    template: "<div><label [translate]=\"label\"></label></div>"
});
var DuplicatePrimaryNonContentPageComponent = /** @class */ (function () {
    function DuplicatePrimaryNonContentPageComponent(data) {
        this.data = data;
        this.PRODUCT_PAGE = 'ProductPage';
        this.labelI18nKeys = {
            restoreCategory: 'se.cms.page.restore.category.duplicate.primaryforvariation.error',
            restoreProduct: 'se.cms.page.restore.product.duplicate.primaryforvariation.error'
        };
        (this.page = data.model);
    }
    DuplicatePrimaryNonContentPageComponent.prototype.ngOnInit = function () {
        this.page.replace = true;
        this.label =
            this.page.typeCode === this.PRODUCT_PAGE
                ? this.labelI18nKeys.restoreProduct
                : this.labelI18nKeys.restoreCategory;
    };
    DuplicatePrimaryNonContentPageComponent = __decorate([
        core.Component({
            selector: 'se-component-duplicate-primary-non-content-page',
            template: "<div><label [translate]=\"label\"></label></div>"
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object])
    ], DuplicatePrimaryNonContentPageComponent);
    return DuplicatePrimaryNonContentPageComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "DuplicatePrimaryContentPageLabelComponent", {
    selector: 'se-component-duplicate-primary-content-page-label',
    template: "<div><div class=\"fd-form__item fd-form__item--check\"><input class=\"fd-form__control\" type=\"radio\" name=\"duplicateResolution\" id=\"overwritePrimaryPageOption\" [(ngModel)]=\"conflictResolution\" (click)=\"selectResolution(RESOLUTION_OPTIONS.overwritePage)\" [value]=\"RESOLUTION_OPTIONS.overwritePage\"/> <label for=\"overwritePrimaryPageOption\" class=\"fd-form__label\" [translate]=\"'se.cms.page.restore.content.duplicate.primaryforvariation.option.overwrite'\"></label></div><div class=\"fd-form__item fd-form__item--check\"><input class=\"fd-form__control\" type=\"radio\" name=\"duplicateResolution\" id=\"renamePrimaryPageOption\" [(ngModel)]=\"conflictResolution\" (click)=\"selectResolution(RESOLUTION_OPTIONS.renamePageLabel)\" [value]=\"RESOLUTION_OPTIONS.renamePageLabel\"/> <label for=\"renamePrimaryPageOption\" class=\"fd-form__label\" [translate]=\"'se.cms.page.restore.content.duplicate.primaryforvariation.option.rename'\"></label></div><div class=\"rename-label-section\" *ngIf=\"conflictResolution === RESOLUTION_OPTIONS.renamePageLabel\"><label [translate]=\"'se.cms.page.restore.page.label'\"></label> <input type=\"text\" class=\"form-control\" [(ngModel)]=\"page['label']\"/></div></div>",
    styles: [".rename-label-section{display:block}"]
});
var DuplicatePrimaryContentPageLabelComponent = /** @class */ (function () {
    function DuplicatePrimaryContentPageLabelComponent(data) {
        this.data = data;
        this.conflictResolution = null;
        this.RESOLUTION_OPTIONS = {
            overwritePage: 1,
            renamePageLabel: 2
        };
        (this.page = data.model);
        this.conflictResolution = this.RESOLUTION_OPTIONS.overwritePage;
        this.page.replace = true;
    }
    DuplicatePrimaryContentPageLabelComponent.prototype.selectResolution = function (resolutionSelected) {
        this.page.replace = resolutionSelected === this.RESOLUTION_OPTIONS.overwritePage;
    };
    DuplicatePrimaryContentPageLabelComponent = __decorate([
        core.Component({
            selector: 'se-component-duplicate-primary-content-page-label',
            template: "<div><div class=\"fd-form__item fd-form__item--check\"><input class=\"fd-form__control\" type=\"radio\" name=\"duplicateResolution\" id=\"overwritePrimaryPageOption\" [(ngModel)]=\"conflictResolution\" (click)=\"selectResolution(RESOLUTION_OPTIONS.overwritePage)\" [value]=\"RESOLUTION_OPTIONS.overwritePage\"/> <label for=\"overwritePrimaryPageOption\" class=\"fd-form__label\" [translate]=\"'se.cms.page.restore.content.duplicate.primaryforvariation.option.overwrite'\"></label></div><div class=\"fd-form__item fd-form__item--check\"><input class=\"fd-form__control\" type=\"radio\" name=\"duplicateResolution\" id=\"renamePrimaryPageOption\" [(ngModel)]=\"conflictResolution\" (click)=\"selectResolution(RESOLUTION_OPTIONS.renamePageLabel)\" [value]=\"RESOLUTION_OPTIONS.renamePageLabel\"/> <label for=\"renamePrimaryPageOption\" class=\"fd-form__label\" [translate]=\"'se.cms.page.restore.content.duplicate.primaryforvariation.option.rename'\"></label></div><div class=\"rename-label-section\" *ngIf=\"conflictResolution === RESOLUTION_OPTIONS.renamePageLabel\"><label [translate]=\"'se.cms.page.restore.page.label'\"></label> <input type=\"text\" class=\"form-control\" [(ngModel)]=\"page['label']\"/></div></div>",
            styles: [".rename-label-section{display:block}"]
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object])
    ], DuplicatePrimaryContentPageLabelComponent);
    return DuplicatePrimaryContentPageLabelComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "RestrictionsListComponent", {
    selector: 'se-restrictions-list',
    template: "<div class=\"restrictions-list\"><div class=\"restrictions-list__info\"><label translate=\"se.cms.restrictions.criteria\"></label> <span>&nbsp;{{ pageInfo.restrictionsCriteria }}</span></div><div class=\"restrictions-list__items\" *ngFor=\"let restriction of restrictions\"><div class=\"restrictions-list__item\"><div class=\"restrictions-list__item-name\">{{ restriction.name }}</div><div class=\"restrictions-list__item-type\">{{ restriction.type | seL10n | async }}</div><div class=\"restrictions-list__item-description\">{{ restriction.description }}</div></div></div></div>"
});
var /* @ngInject */ RestrictionsListComponent = /** @class */ (function () {
    RestrictionsListComponent.$inject = ["data", "cmsitemsRestService", "cdr"];
    function /* @ngInject */ RestrictionsListComponent(data, cmsitemsRestService, cdr) {
        this.data = data;
        this.cmsitemsRestService = cmsitemsRestService;
        this.cdr = cdr;
        (this.pageInfo = data.model);
        this.restrictions = [];
    }
    /* @ngInject */ RestrictionsListComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var restrictionsData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cmsitemsRestService.getByIdsNoCache(this.pageInfo.restrictions, 'FULL')];
                    case 1:
                        restrictionsData = _a.sent();
                        this.restrictions = (restrictionsData.response
                            ? restrictionsData.response
                            : [restrictionsData]);
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ RestrictionsListComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-restrictions-list',
            template: "<div class=\"restrictions-list\"><div class=\"restrictions-list__info\"><label translate=\"se.cms.restrictions.criteria\"></label> <span>&nbsp;{{ pageInfo.restrictionsCriteria }}</span></div><div class=\"restrictions-list__items\" *ngFor=\"let restriction of restrictions\"><div class=\"restrictions-list__item\"><div class=\"restrictions-list__item-name\">{{ restriction.name }}</div><div class=\"restrictions-list__item-type\">{{ restriction.type | seL10n | async }}</div><div class=\"restrictions-list__item-description\">{{ restriction.description }}</div></div></div></div>"
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object, cmscommons.CmsitemsRestService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ RestrictionsListComponent);
    return /* @ngInject */ RestrictionsListComponent;
}());

var CloneAction;
(function (CloneAction) {
    CloneAction["clone"] = "clone";
    CloneAction["useExisting"] = "reference";
    CloneAction["remove"] = "remove";
})(CloneAction || (CloneAction = {}));
window.__smartedit__.addDecoratorPayload("Component", "SlotSharedCloneActionFieldComponent", {
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    selector: 'se-component-slot-shared-clone-action-field',
    template: "<div class=\"fd-form__set\"><div class=\"fd-form__item fd-form__item--check\"><label for=\"components-in-slot-options\" class=\"se-control-label\" [translate]=\"'se.cms.slot.shared.replace.editor.componentsinslot'\"></label><div id=\"components-in-slot-options\"><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"componentsInSlot\" id=\"clone-all\" [(ngModel)]=\"page.cloneAction\" [value]=\"cloneAction.clone\"/> <label for=\"clone-all\" [translate]=\"'se.cms.slot.shared.replace.editor.componentsinslot.cloneall'\"></label></div><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"componentsInSlot\" id=\"remove-all\" [(ngModel)]=\"page.cloneAction\" [value]=\"cloneAction.remove\"/> <label for=\"remove-all\" [translate]=\"'se.cms.slot.shared.replace.editor.componentsinslot.removeall'\"></label></div></div></div></div>",
    styles: ["slot-shared-clone-action-field .fd-form__item--check{display:flex;align-items:baseline;flex-direction:column}"]
});
var SlotSharedCloneActionFieldComponent = /** @class */ (function () {
    function SlotSharedCloneActionFieldComponent(data) {
        this.data = data;
        this.cloneAction = CloneAction;
        (this.page = data.model);
    }
    SlotSharedCloneActionFieldComponent = __decorate([
        core.Component({
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            selector: 'se-component-slot-shared-clone-action-field',
            template: "<div class=\"fd-form__set\"><div class=\"fd-form__item fd-form__item--check\"><label for=\"components-in-slot-options\" class=\"se-control-label\" [translate]=\"'se.cms.slot.shared.replace.editor.componentsinslot'\"></label><div id=\"components-in-slot-options\"><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"componentsInSlot\" id=\"clone-all\" [(ngModel)]=\"page.cloneAction\" [value]=\"cloneAction.clone\"/> <label for=\"clone-all\" [translate]=\"'se.cms.slot.shared.replace.editor.componentsinslot.cloneall'\"></label></div><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"componentsInSlot\" id=\"remove-all\" [(ngModel)]=\"page.cloneAction\" [value]=\"cloneAction.remove\"/> <label for=\"remove-all\" [translate]=\"'se.cms.slot.shared.replace.editor.componentsinslot.removeall'\"></label></div></div></div></div>",
            styles: ["slot-shared-clone-action-field .fd-form__item--check{display:flex;align-items:baseline;flex-direction:column}"]
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object])
    ], SlotSharedCloneActionFieldComponent);
    return SlotSharedCloneActionFieldComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "SlotSharedSlotTypeFieldComponent", {
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    selector: 'se-component-slot-shared-slot-type-field',
    template: "<div class=\"fd-form__set\"><div class=\"fd-form__item fd-form__item--check\"><label for=\"slot-replacement-type-options\" class=\"se-control-label\" [translate]=\"'se.cms.slot.shared.replace.editor.slotreplacementtype'\"></label><div id=\"slot-replacement-type-options\"><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"slotReplacementType\" id=\"slot-type-custom\" [(ngModel)]=\"page.isSlotCustom\" [value]=\"true\"/> <label for=\"slot-type-custom\" [translate]=\"'se.cms.slot.shared.replace.editor.slotreplacementtype.custom'\"></label></div><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"slotReplacementType\" id=\"slot-type-local\" [(ngModel)]=\"page.isSlotCustom\" [value]=\"false\"/> <label for=\"slot-type-local\" [translate]=\"'se.cms.slot.shared.replace.editor.slotreplacementtype.local'\"></label></div></div></div></div>",
    styles: ["slot-shared-slot-type-field .fd-form__item--check{display:flex;align-items:baseline;flex-direction:column}"]
});
var SlotSharedSlotTypeFieldComponent = /** @class */ (function () {
    function SlotSharedSlotTypeFieldComponent(data) {
        this.data = data;
        (this.page = data.model);
    }
    SlotSharedSlotTypeFieldComponent = __decorate([
        core.Component({
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            selector: 'se-component-slot-shared-slot-type-field',
            template: "<div class=\"fd-form__set\"><div class=\"fd-form__item fd-form__item--check\"><label for=\"slot-replacement-type-options\" class=\"se-control-label\" [translate]=\"'se.cms.slot.shared.replace.editor.slotreplacementtype'\"></label><div id=\"slot-replacement-type-options\"><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"slotReplacementType\" id=\"slot-type-custom\" [(ngModel)]=\"page.isSlotCustom\" [value]=\"true\"/> <label for=\"slot-type-custom\" [translate]=\"'se.cms.slot.shared.replace.editor.slotreplacementtype.custom'\"></label></div><div class=\"se-form-control-row\"><input class=\"fd-form__control\" type=\"radio\" name=\"slotReplacementType\" id=\"slot-type-local\" [(ngModel)]=\"page.isSlotCustom\" [value]=\"false\"/> <label for=\"slot-type-local\" [translate]=\"'se.cms.slot.shared.replace.editor.slotreplacementtype.local'\"></label></div></div></div></div>",
            styles: ["slot-shared-slot-type-field .fd-form__item--check{display:flex;align-items:baseline;flex-direction:column}"]
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object])
    ], SlotSharedSlotTypeFieldComponent);
    return SlotSharedSlotTypeFieldComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "WorkflowCreateVersionFieldComponent", {
    selector: 'se-workflow-create-version-field',
    template: "<div class=\"fd-form__set\"><div class=\"fd-form__item fd-form__item--check\"><label class=\"fd-form__label\"><input type=\"checkbox\" class=\"fd-form__control\" name=\"createVersion\" [(ngModel)]=\"model.createVersion\"/> {{ 'se.cms.workflow.editor.create.version' | translate }}</label></div><div class=\"fd-form__item\" *ngIf=\"model.createVersion\"><label class=\"fd-form__label version-label__title\" for=\"versionLabel\" translate=\"se.cms.workflow.editor.create.version.label\"></label> <input type=\"text\" name=\"versionLabel\" class=\"fd-form__control\" [class.has-error]=\"field.hasErrors\" [(ngModel)]=\"model.versionLabel\"/></div></div>",
    providers: [smarteditcommons.L10nPipe],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var WorkflowCreateVersionFieldComponent = /** @class */ (function () {
    function WorkflowCreateVersionFieldComponent(workflowService, data, cdr, l10nPipe) {
        this.workflowService = workflowService;
        this.data = data;
        this.cdr = cdr;
        this.l10nPipe = l10nPipe;
        (this.field = data.field, this.model = data.model, this.editor = data.editor);
    }
    WorkflowCreateVersionFieldComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.unregisterOnChangeEvent = this.editor.api.addContentChangeEvent(function () {
            return _this.onCreateVersionChange();
        });
    };
    WorkflowCreateVersionFieldComponent.prototype.ngOnDestroy = function () {
        this.unregisterOnChangeEvent();
    };
    WorkflowCreateVersionFieldComponent.prototype.onCreateVersionChange = function () {
        return __awaiter(this, void 0, void 0, function () {
            var workflowActions, workflowAction, workflowDecision, _a, workflowDecisionName, workflowActionName, workflow, workflowName;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.model.createVersion === false) {
                            this.model.versionLabel = null;
                            this.cdr.detectChanges();
                            return [2 /*return*/];
                        }
                        if (!lodash.isEmpty(this.model.versionLabel)) {
                            return [2 /*return*/];
                        }
                        if (!this.model.decisionCode) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.workflowService.getAllActionsForWorkflowCode(this.model.workflowCode)];
                    case 1:
                        workflowActions = _b.sent();
                        workflowAction = workflowActions.find(function (action) { return action.code === _this.model.actionCode; });
                        workflowDecision = workflowAction.decisions.find(function (decision) { return decision.code === _this.model.decisionCode; });
                        return [4 /*yield*/, Promise.all([
                                this.l10nPipe.transform(workflowDecision.name).pipe(operators.take(1)).toPromise(),
                                this.l10nPipe.transform(workflowAction.name).pipe(operators.take(1)).toPromise()
                            ])];
                    case 2:
                        _a = _b.sent(), workflowDecisionName = _a[0], workflowActionName = _a[1];
                        this.model.versionLabel = workflowDecisionName + " for " + workflowActionName;
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                    case 3: return [4 /*yield*/, this.workflowService.getWorkflowTemplateByCode(this.model.templateCode)];
                    case 4:
                        workflow = _b.sent();
                        if (!workflow) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.l10nPipe
                                .transform(workflow.name)
                                .pipe(operators.take(1))
                                .toPromise()];
                    case 5:
                        workflowName = _b.sent();
                        this.model.versionLabel = workflowName + " workflow started";
                        this.cdr.detectChanges();
                        _b.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    WorkflowCreateVersionFieldComponent = __decorate([
        core.Component({
            selector: 'se-workflow-create-version-field',
            template: "<div class=\"fd-form__set\"><div class=\"fd-form__item fd-form__item--check\"><label class=\"fd-form__label\"><input type=\"checkbox\" class=\"fd-form__control\" name=\"createVersion\" [(ngModel)]=\"model.createVersion\"/> {{ 'se.cms.workflow.editor.create.version' | translate }}</label></div><div class=\"fd-form__item\" *ngIf=\"model.createVersion\"><label class=\"fd-form__label version-label__title\" for=\"versionLabel\" translate=\"se.cms.workflow.editor.create.version.label\"></label> <input type=\"text\" name=\"versionLabel\" class=\"fd-form__control\" [class.has-error]=\"field.hasErrors\" [(ngModel)]=\"model.versionLabel\"/></div></div>",
            providers: [smarteditcommons.L10nPipe],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(1, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [WorkflowService, Object, core.ChangeDetectorRef,
            smarteditcommons.L10nPipe])
    ], WorkflowCreateVersionFieldComponent);
    return WorkflowCreateVersionFieldComponent;
}());

var GenericEditorWidgetsModule$1 = /** @class */ (function () {
    function GenericEditorWidgetsModule() {
    }
    GenericEditorWidgetsModule = __decorate([
        core.NgModule({
            imports: [
                smarteditcommons.TranslationModule.forChild(),
                forms.FormsModule,
                common.CommonModule,
                smarteditcommons.L10nPipeModule,
                smarteditcommons.SelectModule,
                smarteditcommons.GenericEditorDropdownModule,
                CatalogModule
            ],
            providers: [
                {
                    provide: smarteditcommons.CustomDropdownPopulatorsToken,
                    useClass: ProductDropdownPopulator,
                    multi: true
                },
                {
                    provide: smarteditcommons.CustomDropdownPopulatorsToken,
                    useClass: ProductCatalogDropdownPopulator,
                    multi: true
                },
                {
                    provide: smarteditcommons.CustomDropdownPopulatorsToken,
                    useClass: CategoryDropdownPopulator,
                    multi: true
                },
                {
                    provide: smarteditcommons.CustomDropdownPopulatorsToken,
                    useClass: CmsLinkComponentContentPageDropdownPopulator,
                    multi: true
                }
            ],
            declarations: [
                WorkflowCreateVersionFieldComponent,
                MissingPrimaryContentPageComponent,
                DuplicatePrimaryNonContentPageComponent,
                DuplicatePrimaryContentPageLabelComponent,
                RestrictionsListComponent,
                SlotSharedCloneActionFieldComponent,
                SlotSharedSlotTypeFieldComponent,
                RestrictionsListComponent,
                CmsLinkToSelectComponent
            ],
            entryComponents: [
                WorkflowCreateVersionFieldComponent,
                MissingPrimaryContentPageComponent,
                DuplicatePrimaryNonContentPageComponent,
                DuplicatePrimaryContentPageLabelComponent,
                RestrictionsListComponent,
                SlotSharedCloneActionFieldComponent,
                SlotSharedSlotTypeFieldComponent,
                RestrictionsListComponent,
                CmsLinkToSelectComponent
            ],
            exports: [WorkflowCreateVersionFieldComponent, CatalogModule]
        })
    ], GenericEditorWidgetsModule);
    return GenericEditorWidgetsModule;
}());

var MediaActionLabelState;
(function (MediaActionLabelState) {
    MediaActionLabelState["disabled"] = "disabled";
})(MediaActionLabelState || (MediaActionLabelState = {}));
window.__smartedit__.addDecoratorPayload("Component", "MediaActionLabelComponent", {
    selector: 'se-media-action-label',
    template: "<span class=\"se-media-action-label\" [ngClass]=\"{ 'se-media-action-label--disabled': state === 'disabled' }\" [translate]=\"i18nKey\"></span>",
    styles: [".se-media-action-label{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;color:#0a6ed1}.se-media-action-label--disabled{color:#6a6d70}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ MediaActionLabelComponent = /** @class */ (function () {
    function /* @ngInject */ MediaActionLabelComponent() {
    }
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaActionLabelComponent.prototype, "i18nKey", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaActionLabelComponent.prototype, "state", void 0);
    /* @ngInject */ MediaActionLabelComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-action-label',
            template: "<span class=\"se-media-action-label\" [ngClass]=\"{ 'se-media-action-label--disabled': state === 'disabled' }\" [translate]=\"i18nKey\"></span>",
            styles: [".se-media-action-label{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;color:#0a6ed1}.se-media-action-label--disabled{color:#6a6d70}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        })
    ], /* @ngInject */ MediaActionLabelComponent);
    return /* @ngInject */ MediaActionLabelComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "MediaComponent", {
    selector: 'se-media',
    template: "<div class=\"se-media\"><se-media-selector *ngIf=\"!image\" [id]=\"mediaSelectorId\" [isDisabled]=\"isFieldDisabled\" [mediaId]=\"mediaIdByLang[lang]\" (mediaIdChange)=\"onMediaIdChange($event)\"></se-media-selector><se-media-file-selector *ngIf=\"canShowFileSelector()\" [labelI18nKey]=\"'se.upload.image.to.library'\" [acceptedFileTypes]=\"acceptedFileTypes\" [selectionMode]=\"'upload'\" [disabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelect($event)\"></se-media-file-selector><se-media-upload-form *ngIf=\"image\" class=\"se-media-upload-form-wrapper\" [image]=\"image\" (onCancel)=\"resetImage()\" (onSelect)=\"onFileSelect($event)\" (onUploadSuccess)=\"onMediaUploaded($event)\"></se-media-upload-form><se-media-errors *ngIf=\"fileErrors.length > 0\" [errors]=\"fileErrors\"></se-media-errors></div>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var MediaComponent = /** @class */ (function () {
    function MediaComponent(cdr, fileValidationService, logService, data) {
        this.cdr = cdr;
        this.fileValidationService = fileValidationService;
        this.logService = logService;
        (this.field = data.field, this.mediaIdByLang = data.model, this.lang = data.qualifier);
        this.acceptedFileTypes = smarteditcommons.FILE_VALIDATION_CONFIG.ACCEPTED_FILE_TYPES;
        this.fileErrors = [];
        this.image = null;
        this.isFieldDisabled = data.isFieldDisabled();
        this.mediaSelectorId = this.field.qualifier;
    }
    MediaComponent.prototype.onMediaIdChange = function (id) {
        this.mediaIdByLang[this.lang] = id;
    };
    MediaComponent.prototype.onFileSelect = function (fileList) {
        return __awaiter(this, void 0, void 0, function () {
            var file, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.resetImage();
                        file = fileList[0];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.fileValidationService.validate(file, this.fileErrors)];
                    case 2:
                        _b.sent();
                        this.image = file;
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        this.logService.warn('Invalid file');
                        return [3 /*break*/, 4];
                    case 4:
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    MediaComponent.prototype.onMediaUploaded = function (id) {
        this.resetImage();
        this.onMediaIdChange(id);
        if (this.field.initiated) {
            this.field.initiated.length = 0;
        }
    };
    MediaComponent.prototype.resetImage = function () {
        this.fileErrors = [];
        this.image = null;
    };
    MediaComponent.prototype.canShowFileSelector = function () {
        return this.mediaIdByLang && !this.mediaIdByLang[this.lang] && !this.image;
    };
    MediaComponent = __decorate([
        core.Component({
            selector: 'se-media',
            template: "<div class=\"se-media\"><se-media-selector *ngIf=\"!image\" [id]=\"mediaSelectorId\" [isDisabled]=\"isFieldDisabled\" [mediaId]=\"mediaIdByLang[lang]\" (mediaIdChange)=\"onMediaIdChange($event)\"></se-media-selector><se-media-file-selector *ngIf=\"canShowFileSelector()\" [labelI18nKey]=\"'se.upload.image.to.library'\" [acceptedFileTypes]=\"acceptedFileTypes\" [selectionMode]=\"'upload'\" [disabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelect($event)\"></se-media-file-selector><se-media-upload-form *ngIf=\"image\" class=\"se-media-upload-form-wrapper\" [image]=\"image\" (onCancel)=\"resetImage()\" (onSelect)=\"onFileSelect($event)\" (onUploadSuccess)=\"onMediaUploaded($event)\"></se-media-upload-form><se-media-errors *ngIf=\"fileErrors.length > 0\" [errors]=\"fileErrors\"></se-media-errors></div>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(3, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [core.ChangeDetectorRef,
            smarteditcommons.FileValidationService,
            smarteditcommons.LogService, Object])
    ], MediaComponent);
    return MediaComponent;
}());

var MediaContainerClonePrefix = 'clone_';
var MediaFormatType;
(function (MediaFormatType) {
    MediaFormatType["widescreen"] = "widescreen";
    MediaFormatType["desktop"] = "desktop";
    MediaFormatType["tablet"] = "tablet";
    MediaFormatType["mobile"] = "mobile";
})(MediaFormatType || (MediaFormatType = {}));
window.__smartedit__.addDecoratorPayload("Component", "MediaContainerComponent", {
    selector: 'se-media-container',
    template: "<div *ngIf=\"hasReadPermissionOnMediaRelatedTypes && advancedMediaContainerManagementEnabled\"><se-media-container-selector [eventNameAffix]=\"selectorEventNameAffix\" [isAdvancedCloning]=\"isAdvancedCloning()\" [initialName]=\"initialMediaContainerName\" [name]=\"getMediaContainerName()\" (nameChange)=\"onMediaContainerNameChange($event)\" (onCreate)=\"onMediaContainerCreate($event)\" (onRemove)=\"onMediaContainerRemove()\" (onSelect)=\"setMediaContainer($event)\" (onCreationInProgressChange)=\"onMediaContainerCreationInProgressChange($event)\"></se-media-container-selector></div><div class=\"se-media-container-field\" *ngIf=\"canShowMediaFormatWithUploadForm()\"><div class=\"se-media-container-field__media-list\"><se-media-format class=\"se-media-container-cell\" *ngFor=\"let format of field.options\" [ngClass]=\"getMediaContainerCellClassName(format.id)\" [errorMessages]=\"field.messages\" [isEditable]=\"field.editable\" [isUnderEdit]=\"isMediaFormatUnderEdit(format.id)\" [isFieldDisabled]=\"isFieldDisabled()\" [mediaUuid]=\"model[lang].medias[format.id]\" [mediaFormat]=\"format.id\" (onFileSelect)=\"onFileSelect($event, format.id)\" (onDelete)=\"removeMediaByFormat(format.id)\"></se-media-format></div><se-media-upload-form *ngIf=\"image\" class=\"se-media-upload-form-wrapper se-media-upload-form-wrapper--spaced\" [image]=\"image.file\" (onCancel)=\"resetImage()\" (onSelect)=\"onFileSelect($event)\" (onUploadSuccess)=\"onFileUploadSuccess($event, image.format)\"></se-media-upload-form><se-media-errors [errors]=\"fileValidationErrors\"></se-media-errors></div><div *ngIf=\"!hasReadPermissionOnMediaRelatedTypes\"><span translate=\"se.cms.media.typepermissions.error\" [translateParams]=\"{ containedTypes: field.containedTypes }\"></span></div>"
});
var /* @ngInject */ MediaContainerComponent = /** @class */ (function () {
    MediaContainerComponent.$inject = ["logService", "typePermissionsRestService", "loadConfigManagerService", "fileValidationService", "data"];
    function /* @ngInject */ MediaContainerComponent(logService, typePermissionsRestService, loadConfigManagerService, fileValidationService, data) {
        this.logService = logService;
        this.typePermissionsRestService = typePermissionsRestService;
        this.loadConfigManagerService = loadConfigManagerService;
        this.fileValidationService = fileValidationService;
        (this.field = data.field, this.model = data.model, this.editor = data.editor, this.lang = data.qualifier, this.isFieldDisabled = data.isFieldDisabled);
        this.selectorEventNameAffix = this.field.qualifier + "_" + this.lang;
    }
    /* @ngInject */ MediaContainerComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cloneMediaName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.model[this.lang]) {
                            this.setMediaContainer({
                                catalogVersion: undefined,
                                medias: {},
                                qualifier: undefined,
                                mediaContainerUuid: undefined
                            });
                        }
                        return [4 /*yield*/, this.initHasReadPermissionOnMediaRelatedTypes()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.initAdvancedMediaContainerManagementEnabled()];
                    case 2:
                        _a.sent();
                        this.initialMediaContainerName = this.getMediaContainerName();
                        if (this.isAdvancedCloning()) {
                            cloneMediaName = "" + MediaContainerClonePrefix + this.initialMediaContainerName.trim();
                            this.onMediaContainerNameChange(cloneMediaName);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ MediaContainerComponent.prototype.getMediaContainerName = function () {
        var _a;
        return ((_a = this.model[this.lang]) === null || _a === void 0 ? void 0 : _a.qualifier) || '';
    };
    /* @ngInject */ MediaContainerComponent.prototype.getMediaContainerCellClassName = function (format) {
        return "se-media-container-cell--" + format;
    };
    MediaContainerComponent.prototype.getMediaContainerCellClassName.$inject = ["format"];
    /* @ngInject */ MediaContainerComponent.prototype.setMediaContainer = function (mediaContainer) {
        this.model[this.lang] = mediaContainer;
    };
    MediaContainerComponent.prototype.setMediaContainer.$inject = ["mediaContainer"];
    /* @ngInject */ MediaContainerComponent.prototype.canShowMediaFormatWithUploadForm = function () {
        return (this.hasReadPermissionOnMediaRelatedTypes &&
            (this.isMediaContainerSelected() ||
                this.mediaContainerCreationInProgress ||
                !this.advancedMediaContainerManagementEnabled));
    };
    /* @ngInject */ MediaContainerComponent.prototype.isMediaFormatUnderEdit = function (format) {
        var _a;
        return format === ((_a = this.image) === null || _a === void 0 ? void 0 : _a.format);
    };
    MediaContainerComponent.prototype.isMediaFormatUnderEdit.$inject = ["format"];
    /* @ngInject */ MediaContainerComponent.prototype.onFileSelect = function (files, format) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var file, imageFormat, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.resetImage();
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        file = files[0];
                        return [4 /*yield*/, this.fileValidationService.validate(file, this.fileValidationErrors)];
                    case 2:
                        _c.sent();
                        imageFormat = ((_a = this.image) === null || _a === void 0 ? void 0 : _a.format) || format;
                        this.image = {
                            file: file,
                            format: imageFormat
                        };
                        return [3 /*break*/, 4];
                    case 3:
                        _b = _c.sent();
                        this.logService.warn('Invalid file');
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MediaContainerComponent.prototype.onFileSelect.$inject = ["files", "format"];
    /* @ngInject */ MediaContainerComponent.prototype.onFileUploadSuccess = function (uuid, format) {
        this.setMediaUuidForFormat(uuid, format);
        this.resetImage();
    };
    MediaContainerComponent.prototype.onFileUploadSuccess.$inject = ["uuid", "format"];
    /* @ngInject */ MediaContainerComponent.prototype.onMediaContainerCreate = function (name) {
        this.clearModel();
        this.onMediaContainerNameChange(name);
        this.model[this.lang].medias = {};
    };
    MediaContainerComponent.prototype.onMediaContainerCreate.$inject = ["name"];
    /* @ngInject */ MediaContainerComponent.prototype.onMediaContainerRemove = function () {
        this.clearModel();
    };
    /* @ngInject */ MediaContainerComponent.prototype.onMediaContainerNameChange = function (name) {
        this.model[this.lang].qualifier = name;
    };
    MediaContainerComponent.prototype.onMediaContainerNameChange.$inject = ["name"];
    /* @ngInject */ MediaContainerComponent.prototype.onMediaContainerCreationInProgressChange = function (inProgress) {
        this.mediaContainerCreationInProgress = inProgress;
    };
    MediaContainerComponent.prototype.onMediaContainerCreationInProgressChange.$inject = ["inProgress"];
    /* @ngInject */ MediaContainerComponent.prototype.removeMediaByFormat = function (format) {
        delete this.model[this.lang].medias[format];
    };
    MediaContainerComponent.prototype.removeMediaByFormat.$inject = ["format"];
    /* @ngInject */ MediaContainerComponent.prototype.initAdvancedMediaContainerManagementEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            var configurations;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadConfigManagerService.loadAsObject()];
                    case 1:
                        configurations = _a.sent();
                        this.advancedMediaContainerManagementEnabled =
                            configurations.advancedMediaContainerManagement || false;
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ MediaContainerComponent.prototype.initHasReadPermissionOnMediaRelatedTypes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var permissionsResult_1, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.typePermissionsRestService.hasAllPermissionsForTypes(this.field.containedTypes)];
                    case 1:
                        permissionsResult_1 = _a.sent();
                        this.hasReadPermissionOnMediaRelatedTypes = this.field.containedTypes.every(function (type) { return permissionsResult_1[type].read; });
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        this.hasReadPermissionOnMediaRelatedTypes = false;
                        this.logService.warn('Failed to retrieve type permissions', error_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ MediaContainerComponent.prototype.setMediaUuidForFormat = function (uuid, format) {
        this.model[this.lang].medias[format] = uuid;
    };
    MediaContainerComponent.prototype.setMediaUuidForFormat.$inject = ["uuid", "format"];
    /* @ngInject */ MediaContainerComponent.prototype.isAdvancedCloning = function () {
        var isCloning = !!this.editor.initialContent.cloneComponent;
        return isCloning && this.advancedMediaContainerManagementEnabled;
    };
    /* @ngInject */ MediaContainerComponent.prototype.isMediaContainerSelected = function () {
        return !lodash.isEmpty(this.model[this.lang]);
    };
    /* @ngInject */ MediaContainerComponent.prototype.resetImage = function () {
        this.fileValidationErrors = [];
        this.image = null;
    };
    /* @ngInject */ MediaContainerComponent.prototype.clearModel = function () {
        var _this = this;
        Object.keys(this.model[this.lang]).forEach(function (key) { return delete _this.model[_this.lang][key]; });
    };
    /* @ngInject */ MediaContainerComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-container',
            template: "<div *ngIf=\"hasReadPermissionOnMediaRelatedTypes && advancedMediaContainerManagementEnabled\"><se-media-container-selector [eventNameAffix]=\"selectorEventNameAffix\" [isAdvancedCloning]=\"isAdvancedCloning()\" [initialName]=\"initialMediaContainerName\" [name]=\"getMediaContainerName()\" (nameChange)=\"onMediaContainerNameChange($event)\" (onCreate)=\"onMediaContainerCreate($event)\" (onRemove)=\"onMediaContainerRemove()\" (onSelect)=\"setMediaContainer($event)\" (onCreationInProgressChange)=\"onMediaContainerCreationInProgressChange($event)\"></se-media-container-selector></div><div class=\"se-media-container-field\" *ngIf=\"canShowMediaFormatWithUploadForm()\"><div class=\"se-media-container-field__media-list\"><se-media-format class=\"se-media-container-cell\" *ngFor=\"let format of field.options\" [ngClass]=\"getMediaContainerCellClassName(format.id)\" [errorMessages]=\"field.messages\" [isEditable]=\"field.editable\" [isUnderEdit]=\"isMediaFormatUnderEdit(format.id)\" [isFieldDisabled]=\"isFieldDisabled()\" [mediaUuid]=\"model[lang].medias[format.id]\" [mediaFormat]=\"format.id\" (onFileSelect)=\"onFileSelect($event, format.id)\" (onDelete)=\"removeMediaByFormat(format.id)\"></se-media-format></div><se-media-upload-form *ngIf=\"image\" class=\"se-media-upload-form-wrapper se-media-upload-form-wrapper--spaced\" [image]=\"image.file\" (onCancel)=\"resetImage()\" (onSelect)=\"onFileSelect($event)\" (onUploadSuccess)=\"onFileUploadSuccess($event, image.format)\"></se-media-upload-form><se-media-errors [errors]=\"fileValidationErrors\"></se-media-errors></div><div *ngIf=\"!hasReadPermissionOnMediaRelatedTypes\"><span translate=\"se.cms.media.typepermissions.error\" [translateParams]=\"{ containedTypes: field.containedTypes }\"></span></div>"
        }),
        __param(4, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [smarteditcommons.LogService,
            cmscommons.TypePermissionsRestService,
            smarteditcontainer.LoadConfigManagerService,
            smarteditcommons.FileValidationService, Object])
    ], /* @ngInject */ MediaContainerComponent);
    return /* @ngInject */ MediaContainerComponent;
}());

var ImagePlaceholderUrl = cmscommons.IMAGES_URL + "/image_placeholder.png";
window.__smartedit__.addDecoratorPayload("Component", "MediaContainerSelectorItemComponent", {
    selector: 'se-media-container-selector-item',
    template: "<div class=\"media-container-selector-item__row\"><img class=\"media-container-selector-item__img\" [ngClass]=\"{ 'media-container-selector-item__img--selected': isSelected }\" [src]=\"getThumbnailUrl(item.thumbnailUrl)\"/><div class=\"media-container-selector-item__label\">{{ item.qualifier }}</div></div>",
    styles: [".media-container-selector-item__row{display:grid;grid-template-columns:2fr 4fr;grid-column-gap:12px;width:100%;align-items:center;padding:0 8px}.media-container-selector-item__img{max-width:90%;max-height:100%;margin:12px}.media-container-selector-item__img--selected{max-width:35%;height:30px;margin:0}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var MediaContainerSelectorItemComponent = /** @class */ (function () {
    function MediaContainerSelectorItemComponent(data) {
        (this.item = data.item, this.isSelected = data.selected);
    }
    MediaContainerSelectorItemComponent.prototype.getThumbnailUrl = function (thumbnailUrl) {
        return thumbnailUrl || ImagePlaceholderUrl;
    };
    MediaContainerSelectorItemComponent = __decorate([
        core.Component({
            selector: 'se-media-container-selector-item',
            template: "<div class=\"media-container-selector-item__row\"><img class=\"media-container-selector-item__img\" [ngClass]=\"{ 'media-container-selector-item__img--selected': isSelected }\" [src]=\"getThumbnailUrl(item.thumbnailUrl)\"/><div class=\"media-container-selector-item__label\">{{ item.qualifier }}</div></div>",
            styles: [".media-container-selector-item__row{display:grid;grid-template-columns:2fr 4fr;grid-column-gap:12px;width:100%;align-items:center;padding:0 8px}.media-container-selector-item__img{max-width:90%;max-height:100%;margin:12px}.media-container-selector-item__img--selected{max-width:35%;height:30px;margin:0}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(0, core.Inject(smarteditcommons.ITEM_COMPONENT_DATA_TOKEN)),
        __metadata("design:paramtypes", [Object])
    ], MediaContainerSelectorItemComponent);
    return MediaContainerSelectorItemComponent;
}());

var MediaContainersUri = '/cmswebservices/v1/catalogs/CURRENT_CONTEXT_CATALOG/versions/CURRENT_CONTEXT_CATALOG_VERSION/mediacontainers';
var FieldQualifier = 'mediaContainer';
window.__smartedit__.addDecoratorPayload("Component", "MediaContainerSelectorComponent", {
    selector: 'se-media-container-selector',
    template: "<se-generic-editor-dropdown [id]=\"id\" [field]=\"field\" [qualifier]=\"field.qualifier\" [model]=\"mediaContainerNameModel\" [showRemoveButton]=\"true\" [itemComponent]=\"itemComponent\" [actionableSearchItem]=\"actionableSearchItem\"></se-generic-editor-dropdown><div *ngIf=\"isSelected() || creationInProgress\"><label class=\"se-control-label required se-media-container-name-label\">{{ 'se.cms.media.responsive.name' | lowercase | translate }}</label> <input type=\"text\" name=\"media-container-qualifier\" [id]=\"'media-container-qualifier-' + id\" class=\"fd-form-control\" [ngModel]=\"name\" (ngModelChange)=\"onNameChange($event)\" [readOnly]=\"isNameReadOnly()\"/></div>",
    styles: ["se-media-container-selector .se-media-container-name-label{margin-top:9px}se-media-container-selector .se-generic-editor-dropdown .se-item-printer{width:100%}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    encapsulation: core.ViewEncapsulation.None
});
var MediaContainerSelectorComponent = /** @class */ (function () {
    function MediaContainerSelectorComponent(cdr, systemEventService) {
        this.cdr = cdr;
        this.systemEventService = systemEventService;
        this.nameChange = new core.EventEmitter();
        this.onCreate = new core.EventEmitter();
        this.onRemove = new core.EventEmitter();
        this.onSelect = new core.EventEmitter();
        this.onCreationInProgressChange = new core.EventEmitter();
        this.field = {
            cmsStructureType: 'EditableDropdown',
            qualifier: FieldQualifier,
            required: true,
            uri: MediaContainersUri,
            idAttribute: 'qualifier',
            editable: true,
            paged: true
        };
        this.creationInProgress = false;
        this.itemComponent = MediaContainerSelectorItemComponent;
    }
    MediaContainerSelectorComponent.prototype.ngOnInit = function () {
        var _a;
        var _this = this;
        this.id = FieldQualifier + "_" + this.eventNameAffix;
        this.mediaContainerNameModel = (_a = {},
            _a[FieldQualifier] = this.initialName,
            _a);
        var selectMediaContainerEventName = "" + this.id + smarteditcommons.LINKED_DROPDOWN;
        this.unRegSelectMediaContainer = this.systemEventService.subscribe(selectMediaContainerEventName, function (_eventId, selectedItem) { return _this.onSelectItem(selectedItem); });
        var createMediaContainerEventName = "CREATE_MEDIA_CONTAINER_BUTTON_PRESSED_EVENT_" + this.eventNameAffix;
        this.actionableSearchItem = {
            eventId: createMediaContainerEventName
        };
        this.unRegCreateMediaContainer = this.systemEventService.subscribe(createMediaContainerEventName, function (_eventId, name) { return _this.onCreateMediaContainer(name); });
    };
    MediaContainerSelectorComponent.prototype.ngOnDestroy = function () {
        this.unRegSelectMediaContainer();
        this.unRegCreateMediaContainer();
    };
    MediaContainerSelectorComponent.prototype.onNameChange = function (name) {
        this.nameChange.emit(name);
    };
    MediaContainerSelectorComponent.prototype.isNameReadOnly = function () {
        return !this.isAdvancedCloning && !this.creationInProgress && this.isSelected();
    };
    MediaContainerSelectorComponent.prototype.isSelected = function () {
        return !!this.mediaContainerNameModel[FieldQualifier];
    };
    MediaContainerSelectorComponent.prototype.onSelectItem = function (_a) {
        var selectedMediaContainer = _a.optionObject;
        this.setCreationInProgressAndEmit(false);
        if (!this.mediaContainerNameModel.mediaContainer) {
            this.onRemove.emit();
        }
        else if (!!selectedMediaContainer) {
            this.onSelect.emit(selectedMediaContainer);
        }
        this.cdr.detectChanges();
    };
    MediaContainerSelectorComponent.prototype.onCreateMediaContainer = function (name) {
        this.setCreationInProgressAndEmit(true);
        this.onCreate.emit(name);
        this.cdr.detectChanges();
    };
    MediaContainerSelectorComponent.prototype.setCreationInProgressAndEmit = function (isInProgress) {
        this.creationInProgress = isInProgress;
        this.onCreationInProgressChange.emit(isInProgress);
    };
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], MediaContainerSelectorComponent.prototype, "eventNameAffix", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], MediaContainerSelectorComponent.prototype, "isAdvancedCloning", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], MediaContainerSelectorComponent.prototype, "name", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], MediaContainerSelectorComponent.prototype, "initialName", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], MediaContainerSelectorComponent.prototype, "nameChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], MediaContainerSelectorComponent.prototype, "onCreate", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], MediaContainerSelectorComponent.prototype, "onRemove", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], MediaContainerSelectorComponent.prototype, "onSelect", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], MediaContainerSelectorComponent.prototype, "onCreationInProgressChange", void 0);
    MediaContainerSelectorComponent = __decorate([
        core.Component({
            selector: 'se-media-container-selector',
            template: "<se-generic-editor-dropdown [id]=\"id\" [field]=\"field\" [qualifier]=\"field.qualifier\" [model]=\"mediaContainerNameModel\" [showRemoveButton]=\"true\" [itemComponent]=\"itemComponent\" [actionableSearchItem]=\"actionableSearchItem\"></se-generic-editor-dropdown><div *ngIf=\"isSelected() || creationInProgress\"><label class=\"se-control-label required se-media-container-name-label\">{{ 'se.cms.media.responsive.name' | lowercase | translate }}</label> <input type=\"text\" name=\"media-container-qualifier\" [id]=\"'media-container-qualifier-' + id\" class=\"fd-form-control\" [ngModel]=\"name\" (ngModelChange)=\"onNameChange($event)\" [readOnly]=\"isNameReadOnly()\"/></div>",
            styles: ["se-media-container-selector .se-media-container-name-label{margin-top:9px}se-media-container-selector .se-generic-editor-dropdown .se-item-printer{width:100%}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            encapsulation: core.ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [core.ChangeDetectorRef, smarteditcommons.SystemEventService])
    ], MediaContainerSelectorComponent);
    return MediaContainerSelectorComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "MediaErrorsComponent", {
    selector: 'se-media-errors',
    template: "<div class=\"field-errors\"><div *ngFor=\"let error of errors\">{{ error.message | translate }}</div></div>"
});
var /* @ngInject */ MediaErrorsComponent = /** @class */ (function () {
    function /* @ngInject */ MediaErrorsComponent() {
    }
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ MediaErrorsComponent.prototype, "errors", void 0);
    /* @ngInject */ MediaErrorsComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-errors',
            template: "<div class=\"field-errors\"><div *ngFor=\"let error of errors\">{{ error.message | translate }}</div></div>"
        })
    ], /* @ngInject */ MediaErrorsComponent);
    return /* @ngInject */ MediaErrorsComponent;
}());

/**
 * This service provides functionality to upload images and to fetch images by code for a specific catalog-catalog version combination.
 */
var /* @ngInject */ MediaUploaderService = /** @class */ (function () {
    MediaUploaderService.$inject = ["restServiceFactory"];
    function /* @ngInject */ MediaUploaderService(restServiceFactory) {
        this.restServiceFactory = restServiceFactory;
        this.mediaRestService = this.restServiceFactory.get(smarteditcommons.MEDIA_RESOURCE_URI);
    }
    /**
     * Uploads the media to the catalog.
     *
     * @returns Promise that resolves with the media object if request is successful.
     * If the request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ MediaUploaderService.prototype.uploadMedia = function (media) {
        var formData = new FormData();
        lodash.forEach(media, function (value, key) {
            formData.append(key, value);
        });
        return this.mediaRestService.save(formData, {
            headers: { enctype: 'multipart/form-data' }
        });
    };
    MediaUploaderService.prototype.uploadMedia.$inject = ["media"];
    /* @ngInject */ MediaUploaderService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory])
    ], /* @ngInject */ MediaUploaderService);
    return /* @ngInject */ MediaUploaderService;
}());

/** Service to deal with media related CRUD operations. */
var /* @ngInject */ MediaService = /** @class */ (function () {
    MediaService.$inject = ["restServiceFactory"];
    function /* @ngInject */ MediaService(restServiceFactory) {
        this.restServiceFactory = restServiceFactory;
    }
    /**
     * Fetches paged search results by making a REST call to the appropriate item endpoint.
     *
     * @param mask for filtering the search.
     * @param pageSize number of items in the page.
     * @param currentPage current page number.
     */
    /* @ngInject */ MediaService.prototype.getPage = function (mask, pageSize, currentPage) {
        return __awaiter(this, void 0, void 0, function () {
            var contextParams, subParams, payload, response, page;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contextParams = {
                            catalogId: smarteditcommons.CONTEXT_CATALOG,
                            catalogVersion: smarteditcommons.CONTEXT_CATALOG_VERSION
                        };
                        if (!smarteditcommons.stringUtils.isBlank(mask)) {
                            contextParams.code = mask;
                        }
                        subParams = this.contextParamsToCommaSeparated(contextParams);
                        payload = {
                            namedQuery: 'namedQueryMediaSearchByCodeCatalogVersion',
                            params: subParams,
                            pageSize: pageSize,
                            currentPage: currentPage
                        };
                        return [4 /*yield*/, this.restServiceFactory
                                .get(smarteditcommons.MEDIA_PATH)
                                .get(payload)];
                    case 1:
                        response = _a.sent();
                        page = {
                            results: [],
                            pagination: undefined
                        };
                        page.results = response.media.map(function (media) { return _this.mediaDTOtoMedia(media); });
                        return [2 /*return*/, page];
                }
            });
        });
    };
    MediaService.prototype.getPage.$inject = ["mask", "pageSize", "currentPage"];
    /**
     * This method fetches a Media by its UUID.
     * @param uuid uuid of a media (contains catalog information).
     */
    /* @ngInject */ MediaService.prototype.getMedia = function (uuid) {
        return __awaiter(this, void 0, void 0, function () {
            var url, media;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = smarteditcommons.MEDIA_PATH + "/" + uuid;
                        return [4 /*yield*/, this.restServiceFactory.get(url).get()];
                    case 1:
                        media = _a.sent();
                        return [2 /*return*/, this.mediaDTOtoMedia(media)];
                }
            });
        });
    };
    MediaService.prototype.getMedia.$inject = ["uuid"];
    /**
     * Returns comma separated params that will be attached to payload.
     *
     * E.g. "catalogId:CURRENT_CONTEXT_CATALOG,catalogVersion:CURRENT_CONTEXT_CATALOG_VERSION"
     */
    /* @ngInject */ MediaService.prototype.contextParamsToCommaSeparated = function (params) {
        return Object.keys(params)
            .reduce(function (accumulator, next) {
            accumulator += "," + next + ":" + params[next];
            return accumulator;
        }, '')
            .substring(1);
    };
    MediaService.prototype.contextParamsToCommaSeparated.$inject = ["params"];
    /* @ngInject */ MediaService.prototype.mediaDTOtoMedia = function (_a) {
        var uuid = _a.uuid, code = _a.code, description = _a.description, altText = _a.altText, url = _a.url, downloadUrl = _a.downloadUrl;
        return {
            id: uuid,
            code: code,
            description: description,
            altText: altText,
            url: url,
            downloadUrl: downloadUrl
        };
    };
    MediaService.prototype.mediaDTOtoMedia.$inject = ["_a"];
    /* @ngInject */ MediaService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory])
    ], /* @ngInject */ MediaService);
    return /* @ngInject */ MediaService;
}());

/**
 * Service used to handle standard OCC validation errors received from the backend.
 */
var /* @ngInject */ MediaBackendValidationHandler = /** @class */ (function () {
    function /* @ngInject */ MediaBackendValidationHandler() {
    }
    /**
     * Extracts validation errors from the provided response and appends them to a specified contextual errors list.
     *
     * The expected error response from the backend matches the contract of the following response example:
     *
     * ```
     *      var response = {
     *          data: {
     *              errors: [{
     *                  type: 'ValidationError',
     *                  subject: 'mySubject',
     *                  message: 'Some validation exception occurred'
     *              }, {
     *                  type: 'SomeOtherError',
     *                  subject: 'mySubject'
     *                  message: 'Some other exception occurred'
     *              }]
     *          }
     *      }
     * ```
     *
     * Example of use:
     * ```
     *      const errorsContext = [];
     *      mediaBackendValidationHandler.handleResponse(response, errorsContext);
     * ```
     *
     * The resulting errorsContext would be as follows:
     * ```
     *      [{
     *          subject: 'mySubject',
     *          message: 'Some validation exception occurred'
     *      }]
     * ```
     *
     * @param response A response consisting of a list of errors. For details of the expected format, see the example above.
     * @param errorsContext An array that all validation errors are appended to. It is an output parameter.
     * @returns The error context list originally provided, or a new list, appended with the validation errors.
     */
    /* @ngInject */ MediaBackendValidationHandler.prototype.handleResponse = function (response, errorsContext) {
        var _this = this;
        var _a;
        errorsContext = errorsContext || [];
        if ((_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.errors) {
            response.error.errors
                .filter(function (error) { return _this.isValidationError(error); })
                .forEach(function (_a) {
                var subject = _a.subject, message = _a.message;
                if (subject) {
                    errorsContext.push({
                        subject: subject,
                        message: message
                    });
                }
            });
        }
        return errorsContext;
    };
    MediaBackendValidationHandler.prototype.handleResponse.$inject = ["response", "errorsContext"];
    /* @ngInject */ MediaBackendValidationHandler.prototype.isValidationError = function (error) {
        return error.type === 'ValidationError';
    };
    MediaBackendValidationHandler.prototype.isValidationError.$inject = ["error"];
    /* @ngInject */ MediaBackendValidationHandler = __decorate([
        smarteditcommons.SeDowngradeService()
    ], /* @ngInject */ MediaBackendValidationHandler);
    return /* @ngInject */ MediaBackendValidationHandler;
}());

var mediaSelectorI18nKeys = {
    UPLOAD: 'se.media.format.upload',
    REPLACE: 'se.media.format.replace',
    UNDER_EDIT: 'se.media.format.under.edit',
    REMOVE: 'se.media.format.remove'
};
window.__smartedit__.addDecoratorPayload("Component", "MediaFormatComponent", {
    selector: 'se-media-format',
    template: "<div class=\"se-media-format\" [ngClass]=\"mediaFormat\"><div class=\"se-media-format__screen-type\" [translate]=\"mediaFormatI18nKey\"></div><se-media-format-uploaded *ngIf=\"isMediaPreviewEnabled()\" [media]=\"media\" [replaceLabelI18nKey]=\"mediaSelectorI18nKeys.REPLACE\" [acceptedFileTypes]=\"acceptedFileTypes\" [isFieldDisabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelectorFileSelect($event)\" (onDelete)=\"onRemoveButtonClick()\"></se-media-format-uploaded><div class=\"se-media--absent\" *ngIf=\"isMediaAbsent()\"><se-media-file-selector *ngIf=\"isEditable\" [selectionMode]=\"'upload'\" [labelI18nKey]=\"mediaSelectorI18nKeys.UPLOAD\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"isFieldDisabled ? 'file-selector-disabled' : ''\" [disabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector><se-media-file-selector *ngIf=\"!isEditable\" [selectionMode]=\"'upload'\" [labelI18nKey]=\"mediaSelectorI18nKeys.UPLOAD\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"!isEditable ? 'file-selector-disabled' : ''\" [disabled]=\"!isEditable\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector></div><div *ngIf=\"isUnderEdit\" class=\"se-media--edit-wrapper\"><se-media-file-selector class=\"se-media--edit\" [labelI18nKey]=\"mediaSelectorI18nKeys.UPLOAD\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"'file-selector-disabled'\" [disabled]=\"true\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector><span class=\"se-media-preview--edit\" [translate]=\"mediaSelectorI18nKeys.UNDER_EDIT\"></span></div><ng-container *ngIf=\"!isUnderEdit\"><div class=\"error-input se-media-format__error\" *ngFor=\"let error of getErrors()\"><span>{{ error }}</span></div></ng-container></div>",
    styles: [".se-media-format{height:100%}.se-media-format__screen-type{font-weight:700;padding-top:4px;padding-bottom:10px;color:#32363a}.se-media-format__error{color:#b00}.se-media--absent{display:flex;flex-direction:row;align-items:center;justify-content:center;height:75px;border:1px dashed #d9d9d9}.se-media--edit-wrapper{height:100%}.se-media--edit{display:flex;flex-direction:row;align-items:center;justify-content:center}.se-media-preview--edit{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;display:block;font-style:italic}", ".se-media-preview-container{position:relative}.se-media-preview-container .se-media-preview__image-wrapper{display:flex;flex-direction:row;align-items:center;justify-content:center;height:75px;background-color:#edeff0}.se-media-preview-container .se-media-preview__image-thumbnail{max-width:100%;max-height:100%}"],
    encapsulation: core.ViewEncapsulation.None
});
var /* @ngInject */ MediaFormatComponent = /** @class */ (function () {
    MediaFormatComponent.$inject = ["mediaService"];
    function /* @ngInject */ MediaFormatComponent(mediaService) {
        this.mediaService = mediaService;
        this.onFileSelect = new core.EventEmitter();
        this.onDelete = new core.EventEmitter();
        this.media = null;
        this.mediaSelectorI18nKeys = mediaSelectorI18nKeys;
        this.acceptedFileTypes = smarteditcommons.FILE_VALIDATION_CONFIG.ACCEPTED_FILE_TYPES;
    }
    /* @ngInject */ MediaFormatComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.mediaFormatI18nKey = "se.media.format." + this.mediaFormat;
                if (this.mediaUuid) {
                    return [2 /*return*/, this.fetchAndSetMedia()];
                }
                return [2 /*return*/];
            });
        });
    };
    /* @ngInject */ MediaFormatComponent.prototype.ngOnChanges = function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var mediaUuidChange;
            return __generator(this, function (_a) {
                mediaUuidChange = changes.mediaUuid;
                if (mediaUuidChange && !mediaUuidChange.firstChange) {
                    if (this.mediaUuid) {
                        return [2 /*return*/, this.fetchAndSetMedia()];
                    }
                    else {
                        this.media = null;
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    MediaFormatComponent.prototype.ngOnChanges.$inject = ["changes"];
    /* @ngInject */ MediaFormatComponent.prototype.onFileSelectorFileSelect = function (file) {
        this.onFileSelect.emit(file);
    };
    MediaFormatComponent.prototype.onFileSelectorFileSelect.$inject = ["file"];
    /* @ngInject */ MediaFormatComponent.prototype.onRemoveButtonClick = function () {
        this.onDelete.emit();
    };
    /* @ngInject */ MediaFormatComponent.prototype.isMediaPreviewEnabled = function () {
        var _a;
        return this.mediaUuid && !this.isUnderEdit && !!((_a = this.media) === null || _a === void 0 ? void 0 : _a.code);
    };
    /* @ngInject */ MediaFormatComponent.prototype.isMediaAbsent = function () {
        return !this.mediaUuid && !this.isUnderEdit;
    };
    /* @ngInject */ MediaFormatComponent.prototype.getErrors = function () {
        var _this = this;
        return (this.errorMessages || [])
            .filter(function (error) { return error.format === _this.mediaFormat; })
            .map(function (error) { return error.message; });
    };
    /* @ngInject */ MediaFormatComponent.prototype.fetchAndSetMedia = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.mediaService.getMedia(this.mediaUuid)];
                    case 1:
                        _a.media = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ MediaFormatComponent.prototype, "errorMessages", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ MediaFormatComponent.prototype, "isEditable", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ MediaFormatComponent.prototype, "isUnderEdit", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ MediaFormatComponent.prototype, "isFieldDisabled", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaFormatComponent.prototype, "mediaUuid", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaFormatComponent.prototype, "mediaFormat", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ MediaFormatComponent.prototype, "onFileSelect", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ MediaFormatComponent.prototype, "onDelete", void 0);
    /* @ngInject */ MediaFormatComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-format',
            template: "<div class=\"se-media-format\" [ngClass]=\"mediaFormat\"><div class=\"se-media-format__screen-type\" [translate]=\"mediaFormatI18nKey\"></div><se-media-format-uploaded *ngIf=\"isMediaPreviewEnabled()\" [media]=\"media\" [replaceLabelI18nKey]=\"mediaSelectorI18nKeys.REPLACE\" [acceptedFileTypes]=\"acceptedFileTypes\" [isFieldDisabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelectorFileSelect($event)\" (onDelete)=\"onRemoveButtonClick()\"></se-media-format-uploaded><div class=\"se-media--absent\" *ngIf=\"isMediaAbsent()\"><se-media-file-selector *ngIf=\"isEditable\" [selectionMode]=\"'upload'\" [labelI18nKey]=\"mediaSelectorI18nKeys.UPLOAD\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"isFieldDisabled ? 'file-selector-disabled' : ''\" [disabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector><se-media-file-selector *ngIf=\"!isEditable\" [selectionMode]=\"'upload'\" [labelI18nKey]=\"mediaSelectorI18nKeys.UPLOAD\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"!isEditable ? 'file-selector-disabled' : ''\" [disabled]=\"!isEditable\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector></div><div *ngIf=\"isUnderEdit\" class=\"se-media--edit-wrapper\"><se-media-file-selector class=\"se-media--edit\" [labelI18nKey]=\"mediaSelectorI18nKeys.UPLOAD\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"'file-selector-disabled'\" [disabled]=\"true\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector><span class=\"se-media-preview--edit\" [translate]=\"mediaSelectorI18nKeys.UNDER_EDIT\"></span></div><ng-container *ngIf=\"!isUnderEdit\"><div class=\"error-input se-media-format__error\" *ngFor=\"let error of getErrors()\"><span>{{ error }}</span></div></ng-container></div>",
            styles: [".se-media-format{height:100%}.se-media-format__screen-type{font-weight:700;padding-top:4px;padding-bottom:10px;color:#32363a}.se-media-format__error{color:#b00}.se-media--absent{display:flex;flex-direction:row;align-items:center;justify-content:center;height:75px;border:1px dashed #d9d9d9}.se-media--edit-wrapper{height:100%}.se-media--edit{display:flex;flex-direction:row;align-items:center;justify-content:center}.se-media-preview--edit{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;display:block;font-style:italic}", ".se-media-preview-container{position:relative}.se-media-preview-container .se-media-preview__image-wrapper{display:flex;flex-direction:row;align-items:center;justify-content:center;height:75px;background-color:#edeff0}.se-media-preview-container .se-media-preview__image-thumbnail{max-width:100%;max-height:100%}"],
            encapsulation: core.ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [MediaService])
    ], /* @ngInject */ MediaFormatComponent);
    return /* @ngInject */ MediaFormatComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "MediaFormatUploadedComponent", {
    selector: 'se-media-format-uploaded',
    template: "<div class=\"se-media--present\"><div class=\"se-media--present-img-container se-media-preview-container\"><se-media-preview [imageUrl]=\"media.url\"></se-media-preview><div class=\"se-media-preview__image-wrapper\"><img class=\"se-media-preview__image-thumbnail\" [src]=\"media.url\"/></div></div><se-media-advanced-properties [code]=\"media.code\" [description]=\"media.description\" [altText]=\"media.altText\"></se-media-advanced-properties><se-media-file-selector [labelI18nKey]=\"replaceLabelI18nKey\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"'media-format-present-replace' + (isFieldDisabled ? ' file-selector-disabled' : '')\" [disabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector><se-media-remove-button [isDisabled]=\"isFieldDisabled\" (clickHandler)=\"onRemoveButtonClick()\"></se-media-remove-button></div>",
    styles: [".se-media-preview-container{position:relative}.se-media-preview-container .se-media-preview__image-wrapper{display:flex;flex-direction:row;align-items:center;justify-content:center;height:75px;background-color:#edeff0}.se-media-preview-container .se-media-preview__image-thumbnail{max-width:100%;max-height:100%}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ MediaFormatUploadedComponent = /** @class */ (function () {
    function /* @ngInject */ MediaFormatUploadedComponent() {
        this.onFileSelect = new core.EventEmitter();
        this.onDelete = new core.EventEmitter();
    }
    /* @ngInject */ MediaFormatUploadedComponent.prototype.onFileSelectorFileSelect = function (file) {
        this.onFileSelect.emit(file);
    };
    MediaFormatUploadedComponent.prototype.onFileSelectorFileSelect.$inject = ["file"];
    /* @ngInject */ MediaFormatUploadedComponent.prototype.onRemoveButtonClick = function () {
        this.onDelete.emit();
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ MediaFormatUploadedComponent.prototype, "media", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaFormatUploadedComponent.prototype, "replaceLabelI18nKey", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ MediaFormatUploadedComponent.prototype, "acceptedFileTypes", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ MediaFormatUploadedComponent.prototype, "isFieldDisabled", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ MediaFormatUploadedComponent.prototype, "onFileSelect", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ MediaFormatUploadedComponent.prototype, "onDelete", void 0);
    /* @ngInject */ MediaFormatUploadedComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-format-uploaded',
            template: "<div class=\"se-media--present\"><div class=\"se-media--present-img-container se-media-preview-container\"><se-media-preview [imageUrl]=\"media.url\"></se-media-preview><div class=\"se-media-preview__image-wrapper\"><img class=\"se-media-preview__image-thumbnail\" [src]=\"media.url\"/></div></div><se-media-advanced-properties [code]=\"media.code\" [description]=\"media.description\" [altText]=\"media.altText\"></se-media-advanced-properties><se-media-file-selector [labelI18nKey]=\"replaceLabelI18nKey\" [acceptedFileTypes]=\"acceptedFileTypes\" [customClass]=\"'media-format-present-replace' + (isFieldDisabled ? ' file-selector-disabled' : '')\" [disabled]=\"isFieldDisabled\" (onFileSelect)=\"onFileSelectorFileSelect($event)\"></se-media-file-selector><se-media-remove-button [isDisabled]=\"isFieldDisabled\" (clickHandler)=\"onRemoveButtonClick()\"></se-media-remove-button></div>",
            styles: [".se-media-preview-container{position:relative}.se-media-preview-container .se-media-preview__image-wrapper{display:flex;flex-direction:row;align-items:center;justify-content:center;height:75px;background-color:#edeff0}.se-media-preview-container .se-media-preview__image-thumbnail{max-width:100%;max-height:100%}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [])
    ], /* @ngInject */ MediaFormatUploadedComponent);
    return /* @ngInject */ MediaFormatUploadedComponent;
}());

var MediaFileSelectionMode;
(function (MediaFileSelectionMode) {
    MediaFileSelectionMode["replace"] = "replace";
    MediaFileSelectionMode["upload"] = "upload";
})(MediaFileSelectionMode || (MediaFileSelectionMode = {}));
window.__smartedit__.addDecoratorPayload("Component", "MediaFileSelectorComponent", {
    selector: 'se-media-file-selector',
    template: "<div class=\"se-file-selector\" [ngClass]=\"customClass\"><label *ngIf=\"!disabled\" class=\"se-file-selector__btn se-button se-button--text\" [ngClass]=\"{ 'se-button--disabled': disabled }\"><span class=\"sap-icon--share se-media__action-icon\" [ngClass]=\"{\n                'sap-icon--share': isReplaceMode(),\n                'sap-icon--upload': !isReplaceMode()\n            }\"></span> <span class=\"se-file-selector__label\" [translate]=\"labelI18nKey\"></span> <input type=\"file\" class=\"hide se-file-selector__input\" [accept]=\"buildAcceptedFileTypesList()\" (change)=\"onSelect($event.target.files)\"/></label></div>",
    styles: [".se-media-container-field__media-list{display:grid;grid-template-columns:repeat(4,1fr);grid-gap:0 16px}.se-media-container-cell--mobile{order:4}.se-media-container-cell--desktop{order:2}.se-media-container-cell--tablet{order:3}.se-media-container-cell--widescreen{order:1}.se-media__action-icon{color:#0a6ed1;margin-right:8px;width:12px}.se-media__action-icon--basic{font-size:1.1428571429rem;line-height:1.25;font-weight:400}.se-media__action-icon--basic::before{vertical-align:middle}.se-media__action-icon--delete{color:#b00}.se-media-action-btn{display:flex;flex-direction:row;align-items:center;padding:0;margin:0;border:none;box-shadow:none;outline:0;background-color:transparent;text-decoration:none;height:32px}.se-media-action-btn[disabled]{cursor:not-allowed;opacity:.4}.se-media-upload-form-wrapper{display:block}.se-media-upload-form-wrapper--spaced{margin-top:16px}.se-file-selector{display:flex;flex-direction:row;align-items:center;display:inline-flex}.se-file-selector--disabled .se-file-selector__btn:focus,.se-file-selector--disabled .se-file-selector__btn:hover{cursor:not-allowed}.se-file-selector__btn{display:flex;flex-direction:row;align-items:center;padding:0;margin:0;border:none;box-shadow:none;outline:0;background-color:transparent;text-decoration:none;height:32px}.se-file-selector__btn[disabled]{cursor:not-allowed;opacity:.4}.se-file-selector--disabled .se-file-selector__btn:focus,.se-file-selector--disabled .se-file-selector__btn:hover{cursor:not-allowed}.se-file-selector__label{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;color:#0a6ed1}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ MediaFileSelectorComponent = /** @class */ (function () {
    function /* @ngInject */ MediaFileSelectorComponent() {
        this.onFileSelect = new core.EventEmitter();
    }
    /* @ngInject */ MediaFileSelectorComponent.prototype.ngOnInit = function () {
        this.disabled = this.disabled || false;
        this.customClass = this.customClass || '';
        this.selectionMode = this.selectionMode || MediaFileSelectionMode.replace;
    };
    /* @ngInject */ MediaFileSelectorComponent.prototype.buildAcceptedFileTypesList = function () {
        return this.acceptedFileTypes.map(function (fileType) { return "." + fileType; }).join(',');
    };
    /* @ngInject */ MediaFileSelectorComponent.prototype.isReplaceMode = function () {
        return this.selectionMode === MediaFileSelectionMode.replace;
    };
    /* @ngInject */ MediaFileSelectorComponent.prototype.onSelect = function (fileList) {
        this.onFileSelect.emit(fileList);
    };
    MediaFileSelectorComponent.prototype.onSelect.$inject = ["fileList"];
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaFileSelectorComponent.prototype, "selectionMode", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaFileSelectorComponent.prototype, "labelI18nKey", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ MediaFileSelectorComponent.prototype, "acceptedFileTypes", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaFileSelectorComponent.prototype, "customClass", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ MediaFileSelectorComponent.prototype, "disabled", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ MediaFileSelectorComponent.prototype, "onFileSelect", void 0);
    /* @ngInject */ MediaFileSelectorComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-file-selector',
            template: "<div class=\"se-file-selector\" [ngClass]=\"customClass\"><label *ngIf=\"!disabled\" class=\"se-file-selector__btn se-button se-button--text\" [ngClass]=\"{ 'se-button--disabled': disabled }\"><span class=\"sap-icon--share se-media__action-icon\" [ngClass]=\"{\n                'sap-icon--share': isReplaceMode(),\n                'sap-icon--upload': !isReplaceMode()\n            }\"></span> <span class=\"se-file-selector__label\" [translate]=\"labelI18nKey\"></span> <input type=\"file\" class=\"hide se-file-selector__input\" [accept]=\"buildAcceptedFileTypesList()\" (change)=\"onSelect($event.target.files)\"/></label></div>",
            styles: [".se-media-container-field__media-list{display:grid;grid-template-columns:repeat(4,1fr);grid-gap:0 16px}.se-media-container-cell--mobile{order:4}.se-media-container-cell--desktop{order:2}.se-media-container-cell--tablet{order:3}.se-media-container-cell--widescreen{order:1}.se-media__action-icon{color:#0a6ed1;margin-right:8px;width:12px}.se-media__action-icon--basic{font-size:1.1428571429rem;line-height:1.25;font-weight:400}.se-media__action-icon--basic::before{vertical-align:middle}.se-media__action-icon--delete{color:#b00}.se-media-action-btn{display:flex;flex-direction:row;align-items:center;padding:0;margin:0;border:none;box-shadow:none;outline:0;background-color:transparent;text-decoration:none;height:32px}.se-media-action-btn[disabled]{cursor:not-allowed;opacity:.4}.se-media-upload-form-wrapper{display:block}.se-media-upload-form-wrapper--spaced{margin-top:16px}.se-file-selector{display:flex;flex-direction:row;align-items:center;display:inline-flex}.se-file-selector--disabled .se-file-selector__btn:focus,.se-file-selector--disabled .se-file-selector__btn:hover{cursor:not-allowed}.se-file-selector__btn{display:flex;flex-direction:row;align-items:center;padding:0;margin:0;border:none;box-shadow:none;outline:0;background-color:transparent;text-decoration:none;height:32px}.se-file-selector__btn[disabled]{cursor:not-allowed;opacity:.4}.se-file-selector--disabled .se-file-selector__btn:focus,.se-file-selector--disabled .se-file-selector__btn:hover{cursor:not-allowed}.se-file-selector__label{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;color:#0a6ed1}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        })
    ], /* @ngInject */ MediaFileSelectorComponent);
    return /* @ngInject */ MediaFileSelectorComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "MediaPreviewComponent", {
    selector: 'se-media-preview',
    template: "<se-tooltip [appendTo]=\"'body'\" [placement]=\"'bottom'\" [isChevronVisible]=\"true\" [triggers]=\"['click']\"><span se-tooltip-trigger><div class=\"sap-icon--search se-media-preview__icon\"></div></span><div se-tooltip-body><img class=\"se-media-preview__image\" [src]=\"imageUrl\"/></div></se-tooltip>",
    styles: [".se-media-preview{display:block;cursor:pointer;position:absolute;height:24px;width:24px;top:0;right:0}.se-media-preview__icon{display:flex;flex-direction:row;align-items:center;justify-content:center;font-size:1.1428571429rem;line-height:1.25;font-weight:400;outline:0;background-color:#0a6ed1;color:#fff;height:24px;width:24px}.se-media-preview__image{width:160px;height:auto}"],
    encapsulation: core.ViewEncapsulation.None,
    host: {
        '[class.se-media-preview]': 'true'
    },
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ MediaPreviewComponent = /** @class */ (function () {
    function /* @ngInject */ MediaPreviewComponent() {
    }
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaPreviewComponent.prototype, "imageUrl", void 0);
    /* @ngInject */ MediaPreviewComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-preview',
            template: "<se-tooltip [appendTo]=\"'body'\" [placement]=\"'bottom'\" [isChevronVisible]=\"true\" [triggers]=\"['click']\"><span se-tooltip-trigger><div class=\"sap-icon--search se-media-preview__icon\"></div></span><div se-tooltip-body><img class=\"se-media-preview__image\" [src]=\"imageUrl\"/></div></se-tooltip>",
            styles: [".se-media-preview{display:block;cursor:pointer;position:absolute;height:24px;width:24px;top:0;right:0}.se-media-preview__icon{display:flex;flex-direction:row;align-items:center;justify-content:center;font-size:1.1428571429rem;line-height:1.25;font-weight:400;outline:0;background-color:#0a6ed1;color:#fff;height:24px;width:24px}.se-media-preview__image{width:160px;height:auto}"],
            encapsulation: core.ViewEncapsulation.None,
            host: {
                '[class.se-media-preview]': 'true'
            },
            changeDetection: core.ChangeDetectionStrategy.OnPush
        })
    ], /* @ngInject */ MediaPreviewComponent);
    return /* @ngInject */ MediaPreviewComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "MediaRemoveButtonComponent", {
    selector: 'se-media-remove-button',
    template: "<button type=\"button\" class=\"se-media-action-btn se-media-remove-btn\" [disabled]=\"isDisabled\" (click)=\"clickHandler.emit($event)\"><span class=\"se-media__action-icon se-media__action-icon--delete sap-icon--delete\"></span> <span class=\"se-media-remove-btn-txt\" [ngClass]=\"{ 'se-media-remove-btn-txt--disabled': isDisabled }\" translate=\"se.media.format.remove\"></span></button>",
    styles: [".se-media-remove-btn-txt{color:#b00}.se-media-remove-btn-txt--disabled{color:#6a6d70}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ MediaRemoveButtonComponent = /** @class */ (function () {
    function /* @ngInject */ MediaRemoveButtonComponent() {
        this.clickHandler = new core.EventEmitter();
    }
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ MediaRemoveButtonComponent.prototype, "isDisabled", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", Object)
    ], /* @ngInject */ MediaRemoveButtonComponent.prototype, "clickHandler", void 0);
    /* @ngInject */ MediaRemoveButtonComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-remove-button',
            template: "<button type=\"button\" class=\"se-media-action-btn se-media-remove-btn\" [disabled]=\"isDisabled\" (click)=\"clickHandler.emit($event)\"><span class=\"se-media__action-icon se-media__action-icon--delete sap-icon--delete\"></span> <span class=\"se-media-remove-btn-txt\" [ngClass]=\"{ 'se-media-remove-btn-txt--disabled': isDisabled }\" translate=\"se.media.format.remove\"></span></button>",
            styles: [".se-media-remove-btn-txt{color:#b00}.se-media-remove-btn-txt--disabled{color:#6a6d70}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        })
    ], /* @ngInject */ MediaRemoveButtonComponent);
    return /* @ngInject */ MediaRemoveButtonComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "MediaAdvancedPropertiesComponent", {
    selector: 'se-media-advanced-properties',
    template: "<se-tooltip [appendTo]=\"'body'\" [placement]=\"'bottom'\" [isChevronVisible]=\"true\" [triggers]=\"['click']\" class=\"se-media-advanced-info\"><span se-tooltip-trigger class=\"se-media-advanced-info__trigger\"><span class=\"sap-icon--message-information se-media__action-icon se-media__action-icon--basic\" [title]=\"i18nKeys.INFORMATION | translate\"></span><se-media-action-label [i18nKey]=\"i18nKeys.INFORMATION\"></se-media-action-label></span><div se-tooltip-body><div class=\"se-media-advanced-info-body\"><div class=\"se-media-advanced-info-row advanced-information-description\" *ngIf=\"description\"><div class=\"se-media-advanced-info-row__label se-control-label\" [translate]=\"i18nKeys.DESCRIPTION\"></div><div class=\"se-media-advanced-info-row__description\">{{ description }}</div></div><div class=\"se-media-advanced-info-row advanced-information-code\"><div class=\"se-media-advanced-info-row__label se-control-label\" [translate]=\"i18nKeys.CODE\"></div><div class=\"se-media-advanced-info-row__description\">{{ code }}</div></div><div class=\"se-media-advanced-info-row advanced-information-alt-text\" *ngIf=\"altText\"><div class=\"se-media-advanced-info-row__label se-control-label\" [translate]=\"i18nKeys.ALT_TEXT\"></div><div class=\"se-media-advanced-info-row__description\">{{ altText }}</div></div></div></div></se-tooltip>",
    styles: [".se-media-container-field__media-list{display:grid;grid-template-columns:repeat(4,1fr);grid-gap:0 16px}.se-media-container-cell--mobile{order:4}.se-media-container-cell--desktop{order:2}.se-media-container-cell--tablet{order:3}.se-media-container-cell--widescreen{order:1}.se-media__action-icon{color:#0a6ed1;margin-right:8px;width:12px}.se-media__action-icon--basic{font-size:1.1428571429rem;line-height:1.25;font-weight:400}.se-media__action-icon--basic::before{vertical-align:middle}.se-media__action-icon--delete{color:#b00}.se-media-action-btn{display:flex;flex-direction:row;align-items:center;padding:0;margin:0;border:none;box-shadow:none;outline:0;background-color:transparent;text-decoration:none;height:32px}.se-media-action-btn[disabled]{cursor:not-allowed;opacity:.4}.se-media-upload-form-wrapper{display:block}.se-media-upload-form-wrapper--spaced{margin-top:16px}.se-media-advanced-info{display:flex;flex-direction:row;align-items:center;display:inline-flex;height:32px;outline:0}.se-media-advanced-info__trigger{display:flex;align-items:center}.se-media-advanced-info-body{padding:11px}.se-media-advanced-info-row:not(:last-child){margin-bottom:16px}.se-media-advanced-info-row__description{color:#32363a;word-break:break-all;max-width:95%}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ MediaAdvancedPropertiesComponent = /** @class */ (function () {
    function /* @ngInject */ MediaAdvancedPropertiesComponent() {
        this.i18nKeys = {
            DESCRIPTION: 'se.media.advanced.information.description',
            CODE: 'se.media.advanced.information.code',
            ALT_TEXT: 'se.media.advanced.information.alt.text',
            ADVANCED_INFORMATION: 'se.media.advanced.information',
            INFORMATION: 'se.media.information'
        };
    }
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaAdvancedPropertiesComponent.prototype, "code", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaAdvancedPropertiesComponent.prototype, "description", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaAdvancedPropertiesComponent.prototype, "altText", void 0);
    /* @ngInject */ MediaAdvancedPropertiesComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-advanced-properties',
            template: "<se-tooltip [appendTo]=\"'body'\" [placement]=\"'bottom'\" [isChevronVisible]=\"true\" [triggers]=\"['click']\" class=\"se-media-advanced-info\"><span se-tooltip-trigger class=\"se-media-advanced-info__trigger\"><span class=\"sap-icon--message-information se-media__action-icon se-media__action-icon--basic\" [title]=\"i18nKeys.INFORMATION | translate\"></span><se-media-action-label [i18nKey]=\"i18nKeys.INFORMATION\"></se-media-action-label></span><div se-tooltip-body><div class=\"se-media-advanced-info-body\"><div class=\"se-media-advanced-info-row advanced-information-description\" *ngIf=\"description\"><div class=\"se-media-advanced-info-row__label se-control-label\" [translate]=\"i18nKeys.DESCRIPTION\"></div><div class=\"se-media-advanced-info-row__description\">{{ description }}</div></div><div class=\"se-media-advanced-info-row advanced-information-code\"><div class=\"se-media-advanced-info-row__label se-control-label\" [translate]=\"i18nKeys.CODE\"></div><div class=\"se-media-advanced-info-row__description\">{{ code }}</div></div><div class=\"se-media-advanced-info-row advanced-information-alt-text\" *ngIf=\"altText\"><div class=\"se-media-advanced-info-row__label se-control-label\" [translate]=\"i18nKeys.ALT_TEXT\"></div><div class=\"se-media-advanced-info-row__description\">{{ altText }}</div></div></div></div></se-tooltip>",
            styles: [".se-media-container-field__media-list{display:grid;grid-template-columns:repeat(4,1fr);grid-gap:0 16px}.se-media-container-cell--mobile{order:4}.se-media-container-cell--desktop{order:2}.se-media-container-cell--tablet{order:3}.se-media-container-cell--widescreen{order:1}.se-media__action-icon{color:#0a6ed1;margin-right:8px;width:12px}.se-media__action-icon--basic{font-size:1.1428571429rem;line-height:1.25;font-weight:400}.se-media__action-icon--basic::before{vertical-align:middle}.se-media__action-icon--delete{color:#b00}.se-media-action-btn{display:flex;flex-direction:row;align-items:center;padding:0;margin:0;border:none;box-shadow:none;outline:0;background-color:transparent;text-decoration:none;height:32px}.se-media-action-btn[disabled]{cursor:not-allowed;opacity:.4}.se-media-upload-form-wrapper{display:block}.se-media-upload-form-wrapper--spaced{margin-top:16px}.se-media-advanced-info{display:flex;flex-direction:row;align-items:center;display:inline-flex;height:32px;outline:0}.se-media-advanced-info__trigger{display:flex;align-items:center}.se-media-advanced-info-body{padding:11px}.se-media-advanced-info-row:not(:last-child){margin-bottom:16px}.se-media-advanced-info-row__description{color:#32363a;word-break:break-all;max-width:95%}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        })
    ], /* @ngInject */ MediaAdvancedPropertiesComponent);
    return /* @ngInject */ MediaAdvancedPropertiesComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "MediaPrinterComponent", {
    selector: 'se-media-printer',
    template: "<div class=\"se-media-selector\" *ngIf=\"isSelected\"><span class=\"se-media-selector__left-section se-media-preview-container\"><se-media-preview [imageUrl]=\"media.url\"></se-media-preview><img class=\"se-media-preview__image-thumbnail\" [src]=\"media.url\"/> </span><span class=\"se-media-selector__right-section\"><se-media-advanced-properties [code]=\"media.code\" [description]=\"media.description\" [altText]=\"media.altText\"></se-media-advanced-properties><button class=\"se-media-action-btn replace-image\" [disabled]=\"isDisabled()\"><span class=\"sap-icon--share se-media__action-icon\"></span><se-media-action-label [state]=\"isDisabled() ? 'disabled' : null\" [i18nKey]=\"'se.upload.image.replace'\"></se-media-action-label></button><se-media-remove-button [isDisabled]=\"isDisabled()\" (clickHandler)=\"select.removeSelectedOption($event, media)\"></se-media-remove-button></span></div><div class=\"se-media-selector__search\" *ngIf=\"!isSelected\"><div class=\"se-media-selector__search-img-wrapper\"><img [src]=\"media.url\" class=\"se-media-selector__search-img\"/></div><div class=\"se-media-selector__search-name\">{{ media.code }}</div></div>",
    styles: ["se-media-printer .se-media-selector{display:flex;flex-direction:row;align-items:center;position:relative}se-media-printer .se-media-selector__left-section{display:flex;flex-direction:row;align-items:center;justify-content:center;background-color:#eeeeef;position:relative;width:135px;height:80px}se-media-printer .se-media-selector__right-section{display:flex;flex-direction:column;margin-left:20px}se-media-printer .se-media-selector__search{display:flex;flex-direction:row;align-items:center}se-media-printer .se-media-selector__search-img-wrapper{display:flex;flex-direction:row;align-items:center;justify-content:center;background-color:#eeeeef;width:135px;height:65px;margin-right:16px}se-media-printer .se-media-selector__search-img{max-width:100%;max-height:100%;margin:12px}se-media-printer .se-media-selector__search-name{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;max-width:70%}", ".se-media-preview-container{position:relative}.se-media-preview-container .se-media-preview__image-wrapper{display:flex;flex-direction:row;align-items:center;justify-content:center;height:75px;background-color:#edeff0}.se-media-preview-container .se-media-preview__image-thumbnail{max-width:100%;max-height:100%}"],
    encapsulation: core.ViewEncapsulation.None,
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var MediaPrinterComponent = /** @class */ (function () {
    function MediaPrinterComponent(data) {
        this.data = data;
        (this.media = data.item, this.isSelected = data.selected, this.select = data.select);
    }
    MediaPrinterComponent.prototype.isDisabled = function () {
        return this.select.isReadOnly;
    };
    MediaPrinterComponent = __decorate([
        core.Component({
            selector: 'se-media-printer',
            template: "<div class=\"se-media-selector\" *ngIf=\"isSelected\"><span class=\"se-media-selector__left-section se-media-preview-container\"><se-media-preview [imageUrl]=\"media.url\"></se-media-preview><img class=\"se-media-preview__image-thumbnail\" [src]=\"media.url\"/> </span><span class=\"se-media-selector__right-section\"><se-media-advanced-properties [code]=\"media.code\" [description]=\"media.description\" [altText]=\"media.altText\"></se-media-advanced-properties><button class=\"se-media-action-btn replace-image\" [disabled]=\"isDisabled()\"><span class=\"sap-icon--share se-media__action-icon\"></span><se-media-action-label [state]=\"isDisabled() ? 'disabled' : null\" [i18nKey]=\"'se.upload.image.replace'\"></se-media-action-label></button><se-media-remove-button [isDisabled]=\"isDisabled()\" (clickHandler)=\"select.removeSelectedOption($event, media)\"></se-media-remove-button></span></div><div class=\"se-media-selector__search\" *ngIf=\"!isSelected\"><div class=\"se-media-selector__search-img-wrapper\"><img [src]=\"media.url\" class=\"se-media-selector__search-img\"/></div><div class=\"se-media-selector__search-name\">{{ media.code }}</div></div>",
            styles: ["se-media-printer .se-media-selector{display:flex;flex-direction:row;align-items:center;position:relative}se-media-printer .se-media-selector__left-section{display:flex;flex-direction:row;align-items:center;justify-content:center;background-color:#eeeeef;position:relative;width:135px;height:80px}se-media-printer .se-media-selector__right-section{display:flex;flex-direction:column;margin-left:20px}se-media-printer .se-media-selector__search{display:flex;flex-direction:row;align-items:center}se-media-printer .se-media-selector__search-img-wrapper{display:flex;flex-direction:row;align-items:center;justify-content:center;background-color:#eeeeef;width:135px;height:65px;margin-right:16px}se-media-printer .se-media-selector__search-img{max-width:100%;max-height:100%;margin:12px}se-media-printer .se-media-selector__search-name{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;max-width:70%}", ".se-media-preview-container{position:relative}.se-media-preview-container .se-media-preview__image-wrapper{display:flex;flex-direction:row;align-items:center;justify-content:center;height:75px;background-color:#edeff0}.se-media-preview-container .se-media-preview__image-thumbnail{max-width:100%;max-height:100%}"],
            encapsulation: core.ViewEncapsulation.None,
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(0, core.Inject(smarteditcommons.ITEM_COMPONENT_DATA_TOKEN)),
        __metadata("design:paramtypes", [Object])
    ], MediaPrinterComponent);
    return MediaPrinterComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "MediaSelectorComponent", {
    selector: 'se-media-selector',
    template: "<div class=\"media-selector\"><se-select [id]=\"id\" [model]=\"mediaId\" (modelChange)=\"onMediaIdChange($event)\" [fetchStrategy]=\"fetchStrategy\" [isReadOnly]=\"isFieldDisabled\" [itemComponent]=\"mediaPrinterComponent\"></se-select></div>",
    styles: ["se-media-selector .se-select [has-selected-option] .toggle-button{min-height:100px}"],
    encapsulation: core.ViewEncapsulation.None,
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ MediaSelectorComponent = /** @class */ (function () {
    MediaSelectorComponent.$inject = ["mediaService"];
    function /* @ngInject */ MediaSelectorComponent(mediaService) {
        this.mediaService = mediaService;
        this.mediaPrinterComponent = MediaPrinterComponent;
        this.mediaIdChange = new core.EventEmitter();
    }
    /* @ngInject */ MediaSelectorComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.fetchStrategy = {
            fetchEntity: function (uuid) { return _this.mediaService.getMedia(uuid); },
            fetchPage: function (search, pageSize, currentPage) { return _this.mediaService.getPage(search, pageSize, currentPage); }
        };
    };
    /* @ngInject */ MediaSelectorComponent.prototype.onMediaIdChange = function (id) {
        this.mediaId = id;
        this.mediaIdChange.emit(id);
    };
    MediaSelectorComponent.prototype.onMediaIdChange.$inject = ["id"];
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaSelectorComponent.prototype, "id", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaSelectorComponent.prototype, "mediaId", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ MediaSelectorComponent.prototype, "mediaIdChange", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ MediaSelectorComponent.prototype, "isDisabled", void 0);
    /* @ngInject */ MediaSelectorComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-selector',
            template: "<div class=\"media-selector\"><se-select [id]=\"id\" [model]=\"mediaId\" (modelChange)=\"onMediaIdChange($event)\" [fetchStrategy]=\"fetchStrategy\" [isReadOnly]=\"isFieldDisabled\" [itemComponent]=\"mediaPrinterComponent\"></se-select></div>",
            styles: ["se-media-selector .se-select [has-selected-option] .toggle-button{min-height:100px}"],
            encapsulation: core.ViewEncapsulation.None,
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [MediaService])
    ], /* @ngInject */ MediaSelectorComponent);
    return /* @ngInject */ MediaSelectorComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "MediaUploadFormComponent", {
    selector: 'se-media-upload-form',
    template: "<div class=\"se-media-upload-form\"><div class=\"se-media-upload-form__header\"><div class=\"se-media-upload-form__header-title\" translate=\"se.upload.image.to.library\"></div><div class=\"se-media-upload-form__header-actions\"><button type=\"button\" class=\"fd-button--light se-media-upload-btn__cancel fd-button--compact\" translate=\"se.upload.image.cancel\" (click)=\"cancel()\"></button> <button type=\"button\" class=\"fd-button se-media-upload-btn__submit fd-button--compact\" translate=\"se.upload.image.submit\" (click)=\"uploadMedia()\"></button></div></div><div class=\"se-media-upload-form__replace-file\"><div class=\"se-media-upload-form__file-name\">{{ image.name }}</div><se-media-file-selector [labelI18nKey]=\"'se.upload.image.replace'\" [acceptedFileTypes]=\"acceptedFileTypes\" (onFileSelect)=\"onFileSelect($event)\"></se-media-file-selector></div><form class=\"se-media-upload-form__file-info\"><se-media-upload-field [fieldName]=\"'code'\" [fieldValue]=\"imageParams.code\" [fieldErrors]=\"getErrorsForFieldByCode('code')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.code'\" (fieldValueChange)=\"onChangeFieldValue($event, 'code')\"></se-media-upload-field><se-media-upload-field [fieldName]=\"'description'\" [fieldValue]=\"imageParams.description\" [fieldErrors]=\"getErrorsForFieldByCode('description')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.description'\" (fieldValueChange)=\"onChangeFieldValue($event, 'description')\"></se-media-upload-field><se-media-upload-field [fieldName]=\"'alt-text'\" [fieldValue]=\"imageParams.altText\" [fieldErrors]=\"getErrorsForFieldByCode('altText')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.alt.text'\" (fieldValueChange)=\"onChangeFieldValue($event, 'altText')\"></se-media-upload-field></form><se-spinner [isSpinning]=\"isUploading\"></se-spinner></div>",
    styles: [".se-media-upload-form{box-shadow:0 6px 12px rgba(0,0,0,.175);border-radius:4px}.se-media-upload-form__header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;height:53px;padding:20px}.se-media-upload-form__header-title{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-media-upload-form__replace-file{display:flex;flex-direction:row;align-items:center;justify-content:space-between;padding:16px 20px 0}.se-media-upload-form__file-name{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;max-width:80%}.se-media-upload-form__file-info{display:grid;grid-template-columns:repeat(2,1fr);grid-gap:16px;padding:20px}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ MediaUploadFormComponent = /** @class */ (function () {
    MediaUploadFormComponent.$inject = ["cdr", "fileValidatorFactory", "mediaBackendValidationHandler", "mediaUploaderService"];
    function /* @ngInject */ MediaUploadFormComponent(cdr, fileValidatorFactory, mediaBackendValidationHandler, mediaUploaderService) {
        this.cdr = cdr;
        this.fileValidatorFactory = fileValidatorFactory;
        this.mediaBackendValidationHandler = mediaBackendValidationHandler;
        this.mediaUploaderService = mediaUploaderService;
        this.onCancel = new core.EventEmitter();
        this.onSelect = new core.EventEmitter();
        this.onUploadSuccess = new core.EventEmitter();
        this.acceptedFileTypes = smarteditcommons.FILE_VALIDATION_CONFIG.ACCEPTED_FILE_TYPES;
        this.fieldErrors = [];
        this.imageParams = null;
        this.fileValidator = this.fileValidatorFactory.build([
            {
                subject: 'code',
                message: 'se.uploaded.image.code.is.required',
                validate: function (code) { return !!code; }
            }
        ]);
    }
    /* @ngInject */ MediaUploadFormComponent.prototype.ngOnChanges = function (changes) {
        var imageChange = changes.image;
        if (imageChange) {
            var imageName = this.image.name;
            this.imageParams = {
                code: imageName,
                description: imageName,
                altText: imageName
            };
        }
    };
    MediaUploadFormComponent.prototype.ngOnChanges.$inject = ["changes"];
    /* @ngInject */ MediaUploadFormComponent.prototype.getErrorsForFieldByCode = function (code) {
        return this.fieldErrors
            .filter(function (error) { return error.subject === code; })
            .map(function (error) { return error.message; });
    };
    MediaUploadFormComponent.prototype.getErrorsForFieldByCode.$inject = ["code"];
    /* @ngInject */ MediaUploadFormComponent.prototype.uploadMedia = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uploadedMedia, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.fieldErrors = [];
                        if (!this.fileValidator.validate(this.imageParams, this.fieldErrors)) {
                            return [2 /*return*/];
                        }
                        this.isUploading = true;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.mediaUploaderService.uploadMedia({
                                file: this.image,
                                code: smarteditcommons.stringUtils.escapeHtml(this.imageParams.code),
                                description: smarteditcommons.stringUtils.escapeHtml(this.imageParams.description),
                                altText: smarteditcommons.stringUtils.escapeHtml(this.imageParams.altText)
                            })];
                    case 2:
                        uploadedMedia = _a.sent();
                        this.onMediaUploadSuccess(uploadedMedia);
                        return [3 /*break*/, 5];
                    case 3:
                        error_1 = _a.sent();
                        this.onMediaUploadFail(error_1);
                        return [3 /*break*/, 5];
                    case 4:
                        this.isUploading = false;
                        return [7 /*endfinally*/];
                    case 5:
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ MediaUploadFormComponent.prototype.cancel = function () {
        this.reset();
        this.onCancel.emit();
    };
    /* @ngInject */ MediaUploadFormComponent.prototype.onChangeFieldValue = function (value, paramName) {
        this.imageParams[paramName] = value;
    };
    MediaUploadFormComponent.prototype.onChangeFieldValue.$inject = ["value", "paramName"];
    /* @ngInject */ MediaUploadFormComponent.prototype.onFileSelect = function (fileList) {
        this.onSelect.emit(fileList);
    };
    MediaUploadFormComponent.prototype.onFileSelect.$inject = ["fileList"];
    /* @ngInject */ MediaUploadFormComponent.prototype.onMediaUploadSuccess = function (_a) {
        var uuid = _a.uuid;
        this.reset();
        this.onUploadSuccess.emit(uuid);
    };
    MediaUploadFormComponent.prototype.onMediaUploadSuccess.$inject = ["_a"];
    /* @ngInject */ MediaUploadFormComponent.prototype.onMediaUploadFail = function (response) {
        this.mediaBackendValidationHandler.handleResponse(response, this.fieldErrors);
    };
    MediaUploadFormComponent.prototype.onMediaUploadFail.$inject = ["response"];
    /* @ngInject */ MediaUploadFormComponent.prototype.reset = function () {
        this.imageParams = null;
        this.fieldErrors = [];
        this.isUploading = false;
    };
    __decorate([
        core.Input(),
        __metadata("design:type", File)
    ], /* @ngInject */ MediaUploadFormComponent.prototype, "image", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ MediaUploadFormComponent.prototype, "onCancel", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ MediaUploadFormComponent.prototype, "onSelect", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ MediaUploadFormComponent.prototype, "onUploadSuccess", void 0);
    /* @ngInject */ MediaUploadFormComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-upload-form',
            template: "<div class=\"se-media-upload-form\"><div class=\"se-media-upload-form__header\"><div class=\"se-media-upload-form__header-title\" translate=\"se.upload.image.to.library\"></div><div class=\"se-media-upload-form__header-actions\"><button type=\"button\" class=\"fd-button--light se-media-upload-btn__cancel fd-button--compact\" translate=\"se.upload.image.cancel\" (click)=\"cancel()\"></button> <button type=\"button\" class=\"fd-button se-media-upload-btn__submit fd-button--compact\" translate=\"se.upload.image.submit\" (click)=\"uploadMedia()\"></button></div></div><div class=\"se-media-upload-form__replace-file\"><div class=\"se-media-upload-form__file-name\">{{ image.name }}</div><se-media-file-selector [labelI18nKey]=\"'se.upload.image.replace'\" [acceptedFileTypes]=\"acceptedFileTypes\" (onFileSelect)=\"onFileSelect($event)\"></se-media-file-selector></div><form class=\"se-media-upload-form__file-info\"><se-media-upload-field [fieldName]=\"'code'\" [fieldValue]=\"imageParams.code\" [fieldErrors]=\"getErrorsForFieldByCode('code')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.code'\" (fieldValueChange)=\"onChangeFieldValue($event, 'code')\"></se-media-upload-field><se-media-upload-field [fieldName]=\"'description'\" [fieldValue]=\"imageParams.description\" [fieldErrors]=\"getErrorsForFieldByCode('description')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.description'\" (fieldValueChange)=\"onChangeFieldValue($event, 'description')\"></se-media-upload-field><se-media-upload-field [fieldName]=\"'alt-text'\" [fieldValue]=\"imageParams.altText\" [fieldErrors]=\"getErrorsForFieldByCode('altText')\" [isRequired]=\"true\" [labelI18nKey]=\"'se.uploaded.image.alt.text'\" (fieldValueChange)=\"onChangeFieldValue($event, 'altText')\"></se-media-upload-field></form><se-spinner [isSpinning]=\"isUploading\"></se-spinner></div>",
            styles: [".se-media-upload-form{box-shadow:0 6px 12px rgba(0,0,0,.175);border-radius:4px}.se-media-upload-form__header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;height:53px;padding:20px}.se-media-upload-form__header-title{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-media-upload-form__replace-file{display:flex;flex-direction:row;align-items:center;justify-content:space-between;padding:16px 20px 0}.se-media-upload-form__file-name{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;max-width:80%}.se-media-upload-form__file-info{display:grid;grid-template-columns:repeat(2,1fr);grid-gap:16px;padding:20px}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [core.ChangeDetectorRef,
            smarteditcommons.FileValidatorFactory,
            MediaBackendValidationHandler,
            MediaUploaderService])
    ], /* @ngInject */ MediaUploadFormComponent);
    return /* @ngInject */ MediaUploadFormComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "MediaUploadFieldComponent", {
    selector: 'se-media-upload-field',
    template: "<div class=\"se-media-upload__file-info-field\" [ngClass]=\"getContainerClassName()\"><label class=\"se-control-label\" [ngClass]=\"{ 'se-media-upload-has-error': hasError(), required: isRequired }\" [translate]=\"labelI18nKey\"></label> <input type=\"text\" [ngClass]=\"{ 'is-invalid': hasError() }\" class=\"fd-form__control\" [attr.name]=\"fieldName\" [ngModel]=\"fieldValue\" (ngModelChange)=\"onChangeValue($event)\"/> <span class=\"upload-field-error fd-form__message fd-form__message--error\" [ngClass]=\"getErrorClassName()\" *ngFor=\"let error of fieldErrors\">{{ error | translate }}</span></div>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ MediaUploadFieldComponent = /** @class */ (function () {
    function /* @ngInject */ MediaUploadFieldComponent() {
        this.isRequired = false;
        this.fieldValueChange = new core.EventEmitter();
    }
    /* @ngInject */ MediaUploadFieldComponent.prototype.onChangeValue = function (value) {
        this.fieldValueChange.emit(value);
    };
    MediaUploadFieldComponent.prototype.onChangeValue.$inject = ["value"];
    /* @ngInject */ MediaUploadFieldComponent.prototype.hasError = function () {
        var _a;
        return ((_a = this.fieldErrors) === null || _a === void 0 ? void 0 : _a.length) > 0;
    };
    /* @ngInject */ MediaUploadFieldComponent.prototype.getContainerClassName = function () {
        return "se-media-upload__file-info-field--" + this.fieldName;
    };
    /* @ngInject */ MediaUploadFieldComponent.prototype.getErrorClassName = function () {
        return "upload-field-error--" + this.fieldName;
    };
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaUploadFieldComponent.prototype, "fieldValue", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaUploadFieldComponent.prototype, "fieldName", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ MediaUploadFieldComponent.prototype, "fieldErrors", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ MediaUploadFieldComponent.prototype, "isRequired", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ MediaUploadFieldComponent.prototype, "labelI18nKey", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", Object)
    ], /* @ngInject */ MediaUploadFieldComponent.prototype, "fieldValueChange", void 0);
    /* @ngInject */ MediaUploadFieldComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-media-upload-field',
            template: "<div class=\"se-media-upload__file-info-field\" [ngClass]=\"getContainerClassName()\"><label class=\"se-control-label\" [ngClass]=\"{ 'se-media-upload-has-error': hasError(), required: isRequired }\" [translate]=\"labelI18nKey\"></label> <input type=\"text\" [ngClass]=\"{ 'is-invalid': hasError() }\" class=\"fd-form__control\" [attr.name]=\"fieldName\" [ngModel]=\"fieldValue\" (ngModelChange)=\"onChangeValue($event)\"/> <span class=\"upload-field-error fd-form__message fd-form__message--error\" [ngClass]=\"getErrorClassName()\" *ngFor=\"let error of fieldErrors\">{{ error | translate }}</span></div>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        })
    ], /* @ngInject */ MediaUploadFieldComponent);
    return /* @ngInject */ MediaUploadFieldComponent;
}());

var MediaModule = /** @class */ (function () {
    function MediaModule() {
    }
    MediaModule = __decorate([
        core.NgModule({
            imports: [
                smarteditcommons.TranslationModule.forChild(),
                common.CommonModule,
                forms.FormsModule,
                smarteditcommons.TooltipModule,
                smarteditcommons.SelectModule,
                smarteditcommons.SpinnerModule,
                smarteditcommons.GenericEditorDropdownModule
            ],
            providers: [MediaService, MediaUploaderService, MediaBackendValidationHandler],
            declarations: [
                MediaErrorsComponent,
                MediaFileSelectorComponent,
                MediaPreviewComponent,
                MediaAdvancedPropertiesComponent,
                MediaSelectorComponent,
                MediaPrinterComponent,
                MediaActionLabelComponent,
                MediaRemoveButtonComponent,
                MediaFormatComponent,
                MediaFormatUploadedComponent,
                MediaUploadFormComponent,
                MediaUploadFieldComponent,
                MediaComponent,
                MediaContainerComponent,
                MediaContainerSelectorComponent,
                MediaContainerSelectorItemComponent
            ],
            entryComponents: [
                MediaErrorsComponent,
                MediaFileSelectorComponent,
                MediaPreviewComponent,
                MediaAdvancedPropertiesComponent,
                MediaSelectorComponent,
                MediaPrinterComponent,
                MediaActionLabelComponent,
                MediaRemoveButtonComponent,
                MediaFormatComponent,
                MediaFormatUploadedComponent,
                MediaUploadFormComponent,
                MediaUploadFieldComponent,
                MediaComponent,
                MediaContainerComponent,
                MediaContainerSelectorItemComponent
            ]
        })
    ], MediaModule);
    return MediaModule;
}());

window.__smartedit__.addDecoratorPayload("Component", "InfoPageNameComponent", {
    selector: 'se-info-page-name',
    template: "<div class=\"se-page-info__name\"><se-homepage-icon *ngIf=\"field.qualifier === 'name'\" [cmsPage]=\"cmsPage\" [uriContext]=\"uriContext\"></se-homepage-icon><div id=\"{{ field.qualifier }}-homepage\" class=\"se-page-info__name-value fd-form-control\" [title]=\"field.qualifier\">{{ model[qualifier] }}</div></div>",
    styles: [".se-page-info__name{display:flex;flex-direction:row;align-items:center}.se-page-info__name-value{word-break:break-all;white-space:normal}"]
});
var /* @ngInject */ InfoPageNameComponent = /** @class */ (function () {
    InfoPageNameComponent.$inject = ["catalogService", "pageService", "data"];
    function /* @ngInject */ InfoPageNameComponent(catalogService, pageService, data) {
        this.catalogService = catalogService;
        this.pageService = pageService;
        (this.model = data.model, this.field = data.field, this.qualifier = data.qualifier);
    }
    /* @ngInject */ InfoPageNameComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, uriContext, cmsPage;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.catalogService.retrieveUriContext(),
                            this.pageService.getCurrentPageInfo()
                        ])];
                    case 1:
                        _a = _b.sent(), uriContext = _a[0], cmsPage = _a[1];
                        this.uriContext = uriContext;
                        this.cmsPage = cmsPage;
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ InfoPageNameComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-info-page-name',
            template: "<div class=\"se-page-info__name\"><se-homepage-icon *ngIf=\"field.qualifier === 'name'\" [cmsPage]=\"cmsPage\" [uriContext]=\"uriContext\"></se-homepage-icon><div id=\"{{ field.qualifier }}-homepage\" class=\"se-page-info__name-value fd-form-control\" [title]=\"field.qualifier\">{{ model[qualifier] }}</div></div>",
            styles: [".se-page-info__name{display:flex;flex-direction:row;align-items:center}.se-page-info__name-value{word-break:break-all;white-space:normal}"]
        }),
        __param(2, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [smarteditcommons.ICatalogService,
            cmscommons.IPageService, Object])
    ], /* @ngInject */ InfoPageNameComponent);
    return /* @ngInject */ InfoPageNameComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "LinkToggleComponent", {
    selector: 'se-link-toggle',
    template: "<div class=\"se-link-toggle\"><div class=\"se-link-toggle__row\"><div class=\"se-form-control-row se-form-control-row--action\"><label class=\"se-control-label se-link-toggle__label\" for=\"external-link\"><input class=\"fd-form__control se-link-toggle__input\" id=\"external-link\" name=\"linktoggle\" type=\"radio\" [(ngModel)]=\"model.linkToggle.external\" (ngModelChange)=\"clearUrlLink()\" [value]=\"true\"/> {{ 'se.editor.linkto.external.label' | translate}}</label></div><div class=\"se-form-control-row se-form-control-row--action\"><label class=\"se-control-label se-link-toggle__label\" for=\"internal-link\"><input class=\"fd-form__control se-link-toggle__input\" id=\"internal-link\" name=\"linktoggle\" type=\"radio\" [(ngModel)]=\"model.linkToggle.external\" (ngModelChange)=\"clearUrlLink()\" [value]=\"false\"/> {{ 'se.editor.linkto.internal.label' | translate}}</label></div></div><input class=\"fd-form-control\" id=\"urlLink\" name=\"urlLink\" type=\"text\" [(ngModel)]=\"model.linkToggle.urlLink\" [ngClass]=\"{ 'has-error': field.hasErrors }\"/></div>",
    styles: [".se-link-toggle__row{display:flex;flex-direction:row;align-items:center}.se-form-control-row{margin-right:16px}.se-control-label.se-link-toggle__label{display:flex;flex-direction:row;align-items:center;margin:0}.fd-form__control.se-link-toggle__input{margin:0 4px 0 0}"]
});
var /* @ngInject */ LinkToggleComponent = /** @class */ (function () {
    LinkToggleComponent.$inject = ["data"];
    function /* @ngInject */ LinkToggleComponent(data) {
        (this.field = data.field, this.model = data.model);
        if (!this.model.linkToggle) {
            this.model.linkToggle = {};
        }
        if (this.model.linkToggle.external === undefined) {
            this.model.linkToggle.external = true;
        }
    }
    /* @ngInject */ LinkToggleComponent.prototype.clearUrlLink = function () {
        this.model.linkToggle.urlLink = '';
    };
    /* @ngInject */ LinkToggleComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-link-toggle',
            template: "<div class=\"se-link-toggle\"><div class=\"se-link-toggle__row\"><div class=\"se-form-control-row se-form-control-row--action\"><label class=\"se-control-label se-link-toggle__label\" for=\"external-link\"><input class=\"fd-form__control se-link-toggle__input\" id=\"external-link\" name=\"linktoggle\" type=\"radio\" [(ngModel)]=\"model.linkToggle.external\" (ngModelChange)=\"clearUrlLink()\" [value]=\"true\"/> {{ 'se.editor.linkto.external.label' | translate}}</label></div><div class=\"se-form-control-row se-form-control-row--action\"><label class=\"se-control-label se-link-toggle__label\" for=\"internal-link\"><input class=\"fd-form__control se-link-toggle__input\" id=\"internal-link\" name=\"linktoggle\" type=\"radio\" [(ngModel)]=\"model.linkToggle.external\" (ngModelChange)=\"clearUrlLink()\" [value]=\"false\"/> {{ 'se.editor.linkto.internal.label' | translate}}</label></div></div><input class=\"fd-form-control\" id=\"urlLink\" name=\"urlLink\" type=\"text\" [(ngModel)]=\"model.linkToggle.urlLink\" [ngClass]=\"{ 'has-error': field.hasErrors }\"/></div>",
            styles: [".se-link-toggle__row{display:flex;flex-direction:row;align-items:center}.se-form-control-row{margin-right:16px}.se-control-label.se-link-toggle__label{display:flex;flex-direction:row;align-items:center;margin:0}.fd-form__control.se-link-toggle__input{margin:0 4px 0 0}"]
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ LinkToggleComponent);
    return /* @ngInject */ LinkToggleComponent;
}());

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
var SELECTED_NODE = 'selected_node';

window.__smartedit__.addDecoratorPayload("Component", "NavigationNodeSelectorComponent", {
    selector: 'se-navigation-node-selector',
    template: "<div *ngIf=\"isReady\"><div *ngIf=\"cmsItem[qualifier]\" class=\"se-navigation-mode\"><div class=\"se-navigation__node\"><se-breadcrumb class=\"se-navigation__node-breadcrumb\" [nodeUuid]=\"cmsItem[qualifier]\" [uriContext]=\"uriContext\"></se-breadcrumb><div class=\"se-navigation__node-button\"><button class=\"btn btn-link btn-block se-navigation__button\" (click)=\"remove($event)\" [disabled]=\"!field.editable\" translate=\"se.cms.navigationcomponent.management.node.selection.remove.action\"></button></div></div><se-navigation-editor-tree [uriContext]=\"uriContext\" [readOnly]=\"true\" [rootNodeUid]=\"nodeUid\"></se-navigation-editor-tree></div><div *ngIf=\"!cmsItem[qualifier]\"><label translate=\"se.cms.navigationcomponent.management.node.selection.invite.action\"></label><se-navigation-node-picker [uriContext]=\"uriContext\" [editable]=\"field.editable\"></se-navigation-node-picker></div></div>",
    styles: [".se-navigation__node{display:flex;background-color:#fafafa;padding:0 20px;margin:0 -20px 20px -20px;border-top:1px solid #eeeeef;border-bottom:1px solid #eeeeef}.se-navigation__node-breadcrumb{flex:10}.se-navigation__node-breadcrumb .se-breadcrumb{margin-bottom:0;border:none}.se-navigation__node-button{flex:2;display:flex}.se-navigation__button{font-size:15px;font-family:\"72\",web,\"Open Sans\",sans-serif;font-weight:700;align-self:flex-end;text-transform:capitalize}se-navigation-node-selector .se-navigation-editor-tree{margin:0}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    encapsulation: core.ViewEncapsulation.None
});
var /* @ngInject */ NavigationNodeSelectorComponent = /** @class */ (function () {
    NavigationNodeSelectorComponent.$inject = ["data", "catalogService", "cmsitemsRestService", "systemEventService", "cdr"];
    function /* @ngInject */ NavigationNodeSelectorComponent(data, catalogService, cmsitemsRestService, systemEventService, cdr) {
        var _a;
        this.data = data;
        this.catalogService = catalogService;
        this.cmsitemsRestService = cmsitemsRestService;
        this.systemEventService = systemEventService;
        this.cdr = cdr;
        this.isReady = false;
        this.nodeUid = null;
        this.uriContext = null;
        (_a = this.data, this.field = _a.field, this.cmsItem = _a.model, this.qualifier = _a.qualifier);
    }
    /* @ngInject */ NavigationNodeSelectorComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uriContext, cmsItem;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.retrieveUriContext()];
                    case 1:
                        uriContext = _a.sent();
                        this.uriContext = uriContext;
                        if (!this.cmsItem[this.qualifier]) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.cmsitemsRestService.getById(this.cmsItem[this.qualifier])];
                    case 2:
                        cmsItem = _a.sent();
                        this.nodeUid = cmsItem.uid;
                        this.isReady = true;
                        return [3 /*break*/, 4];
                    case 3:
                        this.isReady = true;
                        _a.label = 4;
                    case 4:
                        this.unregisterSubscription = this.systemEventService.subscribe(SELECTED_NODE, function (_eventId, _a) {
                            var nodeUid = _a.nodeUid, nodeUuid = _a.nodeUuid;
                            _this.nodeUid = nodeUid;
                            _this.cmsItem[_this.qualifier] = nodeUuid;
                            _this.cdr.detectChanges();
                        });
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ NavigationNodeSelectorComponent.prototype.ngOnDestroy = function () {
        this.unregisterSubscription();
    };
    /* @ngInject */ NavigationNodeSelectorComponent.prototype.remove = function () {
        delete this.cmsItem[this.qualifier];
        this.cdr.detectChanges();
    };
    /* @ngInject */ NavigationNodeSelectorComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-navigation-node-selector',
            template: "<div *ngIf=\"isReady\"><div *ngIf=\"cmsItem[qualifier]\" class=\"se-navigation-mode\"><div class=\"se-navigation__node\"><se-breadcrumb class=\"se-navigation__node-breadcrumb\" [nodeUuid]=\"cmsItem[qualifier]\" [uriContext]=\"uriContext\"></se-breadcrumb><div class=\"se-navigation__node-button\"><button class=\"btn btn-link btn-block se-navigation__button\" (click)=\"remove($event)\" [disabled]=\"!field.editable\" translate=\"se.cms.navigationcomponent.management.node.selection.remove.action\"></button></div></div><se-navigation-editor-tree [uriContext]=\"uriContext\" [readOnly]=\"true\" [rootNodeUid]=\"nodeUid\"></se-navigation-editor-tree></div><div *ngIf=\"!cmsItem[qualifier]\"><label translate=\"se.cms.navigationcomponent.management.node.selection.invite.action\"></label><se-navigation-node-picker [uriContext]=\"uriContext\" [editable]=\"field.editable\"></se-navigation-node-picker></div></div>",
            styles: [".se-navigation__node{display:flex;background-color:#fafafa;padding:0 20px;margin:0 -20px 20px -20px;border-top:1px solid #eeeeef;border-bottom:1px solid #eeeeef}.se-navigation__node-breadcrumb{flex:10}.se-navigation__node-breadcrumb .se-breadcrumb{margin-bottom:0;border:none}.se-navigation__node-button{flex:2;display:flex}.se-navigation__button{font-size:15px;font-family:\"72\",web,\"Open Sans\",sans-serif;font-weight:700;align-self:flex-end;text-transform:capitalize}se-navigation-node-selector .se-navigation-editor-tree{margin:0}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            encapsulation: core.ViewEncapsulation.None
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object, smarteditcommons.ICatalogService,
            cmscommons.CmsitemsRestService,
            smarteditcommons.SystemEventService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ NavigationNodeSelectorComponent);
    return /* @ngInject */ NavigationNodeSelectorComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageTypeEditorComponent", {
    selector: 'se-page-type-editor',
    template: "<div class=\"se-edit-page-info__basic-tab\"><div class=\"se-edit-page-info__page-type\"><label class=\"se-control-label\" translate=\"se.cms.pageinfo.page.type\"></label><div class=\"form-readonly-text form-readonly-text__tight\">{{ model.typeCode }}</div></div><div class=\"se-edit-page-info__page-template\"><label class=\"se-control-label\" translate=\"se.cms.pageinfo.page.template\"></label><div class=\"form-readonly-text form-readonly-text__tight\">{{ model.template }}</div></div></div>",
    styles: [".se-edit-page-info__basic-tab{display:grid;grid-template-columns:repeat(1,1fr)}"]
});
var /* @ngInject */ PageTypeEditorComponent = /** @class */ (function () {
    PageTypeEditorComponent.$inject = ["data"];
    function /* @ngInject */ PageTypeEditorComponent(data) {
        (this.model = data.model);
    }
    /* @ngInject */ PageTypeEditorComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-type-editor',
            template: "<div class=\"se-edit-page-info__basic-tab\"><div class=\"se-edit-page-info__page-type\"><label class=\"se-control-label\" translate=\"se.cms.pageinfo.page.type\"></label><div class=\"form-readonly-text form-readonly-text__tight\">{{ model.typeCode }}</div></div><div class=\"se-edit-page-info__page-template\"><label class=\"se-control-label\" translate=\"se.cms.pageinfo.page.template\"></label><div class=\"form-readonly-text form-readonly-text__tight\">{{ model.template }}</div></div></div>",
            styles: [".se-edit-page-info__basic-tab{display:grid;grid-template-columns:repeat(1,1fr)}"]
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ PageTypeEditorComponent);
    return /* @ngInject */ PageTypeEditorComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "SingeActiveCatalogAwareItemSelectorItemRendererComponent", {
    selector: 'se-single-active-catalog-aware-item-selector-item-renderer',
    template: "\n        <span class=\"se-single-catalog-item\">\n            <span\n                class=\"se-single-catalog-item__label\"\n                title=\"{{ data.item.label | seL10n | async }}\"\n                >{{ data.item.label | seL10n | async }}</span\n            >\n            <span title=\"{{ 'se.cms.catalogawareitem.itemtype.code' | translate }}\">\n                {{ data.item.code }}</span\n            >\n        </span>\n    "
});
var /* @ngInject */ SingeActiveCatalogAwareItemSelectorItemRendererComponent = /** @class */ (function () {
    SingeActiveCatalogAwareItemSelectorItemRendererComponent.$inject = ["data"];
    function /* @ngInject */ SingeActiveCatalogAwareItemSelectorItemRendererComponent(data) {
        this.data = data;
    }
    /* @ngInject */ SingeActiveCatalogAwareItemSelectorItemRendererComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-single-active-catalog-aware-item-selector-item-renderer',
            template: "\n        <span class=\"se-single-catalog-item\">\n            <span\n                class=\"se-single-catalog-item__label\"\n                title=\"{{ data.item.label | seL10n | async }}\"\n                >{{ data.item.label | seL10n | async }}</span\n            >\n            <span title=\"{{ 'se.cms.catalogawareitem.itemtype.code' | translate }}\">\n                {{ data.item.code }}</span\n            >\n        </span>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.ITEM_COMPONENT_DATA_TOKEN)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ SingeActiveCatalogAwareItemSelectorItemRendererComponent);
    return /* @ngInject */ SingeActiveCatalogAwareItemSelectorItemRendererComponent;
}());

var SINGLE_CATALOG_AWARE_ITEM_MAPPING;
(function (SINGLE_CATALOG_AWARE_ITEM_MAPPING) {
    SINGLE_CATALOG_AWARE_ITEM_MAPPING["SingleOnlineProductSelector"] = "product";
    SINGLE_CATALOG_AWARE_ITEM_MAPPING["SingleOnlineCategorySelector"] = "category";
})(SINGLE_CATALOG_AWARE_ITEM_MAPPING || (SINGLE_CATALOG_AWARE_ITEM_MAPPING = {}));
window.__smartedit__.addDecoratorPayload("Component", "SingleActiveCatalogAwareItemSelectorComponent", {
    selector: 'se-single-active-catalog-aware-item-selector',
    template: "<div *ngIf=\"propertyType\"><div id=\"product-catalog\"><label class=\"se-control-label\" [ngClass]=\"{ 'required': field.required }\" *ngIf=\"catalogs.length === 1\">{{ catalogName | seL10n | async }}</label><se-generic-editor-dropdown id=\"se-catalog-selector-dropdown\" *ngIf=\"catalogs.length > 1\" [field]=\"productCatalogField\" [qualifier]=\"'productCatalog'\" [model]=\"model\"></se-generic-editor-dropdown></div><div><label class=\"se-control-label\" [translate]=\"mainDropDownI18nKey\"></label><se-generic-editor-dropdown id=\"se-items-selector-dropdown\" [field]=\"field\" [qualifier]=\"qualifier\" [model]=\"model\" [itemComponent]=\"itemComponent\" [(reset)]=\"reset\"></se-generic-editor-dropdown></div></div><div class=\"product-catalog-item-type-missing\" *ngIf=\"!propertyType\" translate=\"se.cms.catalogawareitem.itemtype.notsupported\"></div>",
    styles: ["se-single-active-catalog-aware-item-selector .se-single-catalog-item{display:grid;grid-template-columns:1fr auto;grid-column-gap:1rem}se-single-active-catalog-aware-item-selector .se-single-catalog-item__label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}se-single-active-catalog-aware-item-selector .selected-item>.se-item-printer{width:100%;padding-right:12px}"],
    encapsulation: core.ViewEncapsulation.None
});
var /* @ngInject */ SingleActiveCatalogAwareItemSelectorComponent = /** @class */ (function () {
    SingleActiveCatalogAwareItemSelectorComponent.$inject = ["data", "catalogService"];
    function /* @ngInject */ SingleActiveCatalogAwareItemSelectorComponent(data, catalogService) {
        var _a;
        this.data = data;
        this.catalogService = catalogService;
        (_a = this.data, this.editor = _a.editor, this.field = _a.field, this.model = _a.model, this.qualifier = _a.qualifier);
        this.catalogName = {};
        this.catalogs = [];
        this.itemComponent = SingeActiveCatalogAwareItemSelectorItemRendererComponent;
    }
    /* @ngInject */ SingleActiveCatalogAwareItemSelectorComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.augmentDropdownAttributes();
                return [2 /*return*/, this.initProductCatalogs()];
            });
        });
    };
    /* @ngInject */ SingleActiveCatalogAwareItemSelectorComponent.prototype.ngDoCheck = function () {
        if (this.catalogs.length > 1 && this.oldProductCatalog !== this.model.productCatalog) {
            if (typeof this.reset === 'function') {
                this.reset(true);
            }
            this.oldProductCatalog = this.model.productCatalog;
        }
    };
    /* @ngInject */ SingleActiveCatalogAwareItemSelectorComponent.prototype.augmentDropdownAttributes = function () {
        this.propertyType = this.getFieldPropertyType(this.field);
        if (this.propertyType) {
            this.productCatalogField = {
                idAttribute: 'catalogId',
                labelAttributes: ['name'],
                editable: true,
                propertyType: 'productCatalog'
            };
            this.mainDropDownI18nKey = this.field.i18nKey;
            delete this.field.i18nKey;
            this.field.paged = true;
            this.field.editable = true;
            this.field.idAttribute = 'uid';
            this.field.labelAttributes = ['name'];
            this.field.dependsOn = 'productCatalog';
            this.field.propertyType = this.propertyType;
        }
    };
    /* @ngInject */ SingleActiveCatalogAwareItemSelectorComponent.prototype.initProductCatalogs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var catalogs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.getProductCatalogsBySiteKey(cmscommons.CONTEXT_SITE_ID)];
                    case 1:
                        catalogs = _a.sent();
                        this.catalogs = catalogs;
                        if (this.catalogs.length === 1) {
                            this.model.productCatalog = this.catalogs[0].catalogId;
                            this.editor.form.pristine.productCatalog = this.catalogs[0].catalogId;
                            this.catalogName = this.catalogs[0].name;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ SingleActiveCatalogAwareItemSelectorComponent.prototype.getFieldPropertyType = function (field) {
        var type = field.cmsStructureType;
        return SINGLE_CATALOG_AWARE_ITEM_MAPPING[type];
    };
    SingleActiveCatalogAwareItemSelectorComponent.prototype.getFieldPropertyType.$inject = ["field"];
    /* @ngInject */ SingleActiveCatalogAwareItemSelectorComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-single-active-catalog-aware-item-selector',
            template: "<div *ngIf=\"propertyType\"><div id=\"product-catalog\"><label class=\"se-control-label\" [ngClass]=\"{ 'required': field.required }\" *ngIf=\"catalogs.length === 1\">{{ catalogName | seL10n | async }}</label><se-generic-editor-dropdown id=\"se-catalog-selector-dropdown\" *ngIf=\"catalogs.length > 1\" [field]=\"productCatalogField\" [qualifier]=\"'productCatalog'\" [model]=\"model\"></se-generic-editor-dropdown></div><div><label class=\"se-control-label\" [translate]=\"mainDropDownI18nKey\"></label><se-generic-editor-dropdown id=\"se-items-selector-dropdown\" [field]=\"field\" [qualifier]=\"qualifier\" [model]=\"model\" [itemComponent]=\"itemComponent\" [(reset)]=\"reset\"></se-generic-editor-dropdown></div></div><div class=\"product-catalog-item-type-missing\" *ngIf=\"!propertyType\" translate=\"se.cms.catalogawareitem.itemtype.notsupported\"></div>",
            styles: ["se-single-active-catalog-aware-item-selector .se-single-catalog-item{display:grid;grid-template-columns:1fr auto;grid-column-gap:1rem}se-single-active-catalog-aware-item-selector .se-single-catalog-item__label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}se-single-active-catalog-aware-item-selector .selected-item>.se-item-printer{width:100%;padding-right:12px}"],
            encapsulation: core.ViewEncapsulation.None
        }),
        __param(0, core.Inject(smarteditcommons.GENERIC_EDITOR_WIDGET_DATA)),
        __metadata("design:paramtypes", [Object, smarteditcommons.ICatalogService])
    ], /* @ngInject */ SingleActiveCatalogAwareItemSelectorComponent);
    return /* @ngInject */ SingleActiveCatalogAwareItemSelectorComponent;
}());

var /* @ngInject */ CmsGenericEditorConfigurationService = /** @class */ (function () {
    CmsGenericEditorConfigurationService.$inject = ["editorFieldMappingService", "genericEditorTabService"];
    function /* @ngInject */ CmsGenericEditorConfigurationService(editorFieldMappingService, genericEditorTabService) {
        var _this = this;
        this.editorFieldMappingService = editorFieldMappingService;
        this.genericEditorTabService = genericEditorTabService;
        // --------------------------------------------------------------------------------------
        // Constants
        // --------------------------------------------------------------------------------------
        this.DEFAULT_PAGE_TAB_ID = 'information';
        this.CATEGORIES = {
            PAGE: 'PAGE',
            COMPONENT: 'COMPONENT'
        };
        // Predicates
        this._defaultTabPredicate = function (componentTypeStructure) {
            return componentTypeStructure.category === _this.CATEGORIES.PAGE ? _this.DEFAULT_PAGE_TAB_ID : null;
        };
        this._isPagePredicate = function (componentType, field, componentTypeStructure) { return componentTypeStructure.category === _this.CATEGORIES.PAGE; };
        this._isComponentPredicate = function (componentType, field, componentTypeStructure) { return componentTypeStructure.category === _this.CATEGORIES.COMPONENT; };
    }
    // --------------------------------------------------------------------------------------
    // Public Methods
    // --------------------------------------------------------------------------------------
    /* @ngInject */ CmsGenericEditorConfigurationService.prototype.setDefaultEditorFieldMappings = function () {
        this.editorFieldMappingService.addFieldMapping('Media', null, null, {
            component: MediaComponent
        });
        this.editorFieldMappingService.addFieldMapping('MediaContainer', null, null, {
            component: MediaContainerComponent
        });
        this.editorFieldMappingService.addFieldMapping('NavigationNodeSelector', null, null, {
            component: NavigationNodeSelectorComponent
        });
        this.editorFieldMappingService.addFieldMapping('MultiProductSelector', null, null, {
            template: 'multiProductSelectorTemplate.html'
        });
        this.editorFieldMappingService.addFieldMapping('MultiCategorySelector', null, null, {
            template: 'multiCategorySelectorTemplate.html'
        });
        this.editorFieldMappingService.addFieldMapping('CMSLinkToSelect', null, null, {
            component: CmsLinkToSelectComponent
        });
        this.editorFieldMappingService.addFieldMapping('SingleOnlineProductSelector', null, null, {
            component: SingleActiveCatalogAwareItemSelectorComponent
        });
        this.editorFieldMappingService.addFieldMapping('SingleOnlineCategorySelector', null, null, {
            component: SingleActiveCatalogAwareItemSelectorComponent
        });
        this.editorFieldMappingService.addFieldMapping('CMSItemDropdown', null, null, {
            template: 'cmsItemDropdownWrapperTemplate.html'
        });
        this.editorFieldMappingService.addFieldMapping('CMSComponentRestrictionsEditor', null, null, {
            component: ComponentRestrictionsEditorComponent
        });
        this.editorFieldMappingService.addFieldMapping('PageRestrictionsEditor', null, 'restrictions', {
            component: PageRestrictionsEditorComponent
        });
        // for editing modal only, not used for create/clone
        this.editorFieldMappingService.addFieldMapping('DisplayConditionEditor', null, 'displayCondition', {
            component: DisplayConditionsEditorComponent,
            hidePrefixLabel: true
        });
        this.editorFieldMappingService.addFieldMapping('ShortString', this._isPagePredicate, 'typeCode', {
            component: PageTypeEditorComponent,
            hidePrefixLabel: true
        });
        this.editorFieldMappingService.addFieldMapping('InfoPageName', this._isPagePredicate, null, {
            component: InfoPageNameComponent
        });
        this.editorFieldMappingService.addFieldMapping('PageInfoPageName', this._isPagePredicate, null, {
            template: 'pageInfoPageNameWrapperTemplate.html'
        });
        this.editorFieldMappingService.addFieldMapping('Boolean', null, 'visible', {
            component: smarteditcommons.BooleanComponent,
            i18nKey: 'type.component.abstractcmscomponent.visible.name'
        });
        this.editorFieldMappingService.addFieldMapping('LinkToggle', null, null, {
            component: LinkToggleComponent
        });
        this.editorFieldMappingService.addFieldMapping('RestrictionsList', null, null, {
            component: RestrictionsListComponent,
            hidePrefixLabel: true
        });
        // Page restore widgets.
        this.editorFieldMappingService.addFieldMapping('DuplicatePrimaryNonContentPageMessage', null, null, {
            component: DuplicatePrimaryNonContentPageComponent,
            hidePrefixLabel: true
        });
        this.editorFieldMappingService.addFieldMapping('DuplicatePrimaryContentPage', null, null, {
            component: DuplicatePrimaryContentPageLabelComponent,
            hidePrefixLabel: false
        });
        this.editorFieldMappingService.addFieldMapping('MissingPrimaryContentPage', null, null, {
            component: MissingPrimaryContentPageComponent,
            hidePrefixLabel: false
        });
        this.editorFieldMappingService.addFieldMapping('WorkflowCreateVersionField', null, null, {
            component: WorkflowCreateVersionFieldComponent,
            hidePrefixLabel: false
        });
        this.editorFieldMappingService.addFieldMapping('SlotSharedCloneActionField', null, null, {
            component: SlotSharedCloneActionFieldComponent,
            hidePrefixLabel: false
        });
        this.editorFieldMappingService.addFieldMapping('SlotSharedSlotTypeField', null, null, {
            component: SlotSharedSlotTypeFieldComponent,
            hidePrefixLabel: false
        });
    };
    /* @ngInject */ CmsGenericEditorConfigurationService.prototype.setDefaultTabsConfiguration = function () {
        this.genericEditorTabService.configureTab('default', {
            priority: 5
        });
        this.genericEditorTabService.configureTab('information', {
            priority: 5
        });
        this.genericEditorTabService.configureTab('administration', {
            priority: 4
        });
    };
    /* @ngInject */ CmsGenericEditorConfigurationService.prototype.setDefaultTabFieldMappings = function () {
        // Set default tab.
        this.genericEditorTabService.addComponentTypeDefaultTabPredicate(this._defaultTabPredicate);
        // Set tabs
        this.editorFieldMappingService.addFieldTabMapping(null, this._isComponentPredicate, 'visible', 'visibility');
        this.editorFieldMappingService.addFieldTabMapping(null, this._isComponentPredicate, 'restrictions', 'visibility');
        this.editorFieldMappingService.addFieldTabMapping(null, this._isComponentPredicate, 'onlyOneRestrictionMustApply', 'visibility');
        this.editorFieldMappingService.addFieldTabMapping(null, this._isComponentPredicate, 'uid', 'basicinfo');
        this.editorFieldMappingService.addFieldTabMapping(null, this._isComponentPredicate, 'id', 'basicinfo');
        this.editorFieldMappingService.addFieldTabMapping(null, this._isComponentPredicate, 'modifiedtime', 'basicinfo');
        this.editorFieldMappingService.addFieldTabMapping('DateTime', this._isComponentPredicate, 'creationtime', 'basicinfo');
        // Page Tabs
        this.editorFieldMappingService.addFieldTabMapping('DisplayConditionEditor', this._isPagePredicate, 'displayCondition', 'displaycondition');
        this.editorFieldMappingService.addFieldTabMapping(null, this._isPagePredicate, 'restrictions', 'restrictions');
    };
    /* @ngInject */ CmsGenericEditorConfigurationService = __decorate([
        smarteditcommons.SeInjectable(),
        __metadata("design:paramtypes", [smarteditcommons.EditorFieldMappingService,
            smarteditcommons.GenericEditorTabService])
    ], /* @ngInject */ CmsGenericEditorConfigurationService);
    return /* @ngInject */ CmsGenericEditorConfigurationService;
}());

var /* @ngInject */ CmsGenericEditorConfigurationServiceModule = /** @class */ (function () {
    function /* @ngInject */ CmsGenericEditorConfigurationServiceModule() {
    }
    /* @ngInject */ CmsGenericEditorConfigurationServiceModule = __decorate([
        smarteditcommons.SeModule({
            imports: [smarteditcommons.GenericEditorModule, smarteditcommons.FunctionsModule],
            providers: [CmsGenericEditorConfigurationService]
        })
    ], /* @ngInject */ CmsGenericEditorConfigurationServiceModule);
    return /* @ngInject */ CmsGenericEditorConfigurationServiceModule;
}());

window.__smartedit__.addDecoratorPayload("Component", "NavigationEditorLinkComponent", {
    selector: 'se-navigation-editor-link',
    template: "\n        <div class=\"nav-management-link-container\">\n            <a\n                class=\"nav-management-link-item__link se-catalog-version__link\"\n                [href]=\"getLink()\"\n                translate=\"se.cms.cataloginfo.navigationmanagement\"\n            ></a>\n        </div>\n    "
});
var /* @ngInject */ NavigationEditorLinkComponent = /** @class */ (function () {
    NavigationEditorLinkComponent.$inject = ["catalogDetails"];
    function /* @ngInject */ NavigationEditorLinkComponent(catalogDetails) {
        this.catalogDetails = catalogDetails;
    }
    /* @ngInject */ NavigationEditorLinkComponent.prototype.getLink = function () {
        var _a = this.catalogDetails, siteId = _a.siteId, catalogId = _a.catalog.catalogId, version = _a.catalogVersion.version;
        return "#!/navigations/" + siteId + "/" + catalogId + "/" + version;
    };
    /* @ngInject */ NavigationEditorLinkComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-navigation-editor-link',
            template: "\n        <div class=\"nav-management-link-container\">\n            <a\n                class=\"nav-management-link-item__link se-catalog-version__link\"\n                [href]=\"getLink()\"\n                translate=\"se.cms.cataloginfo.navigationmanagement\"\n            ></a>\n        </div>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.CATALOG_DETAILS_ITEM_DATA)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ NavigationEditorLinkComponent);
    return /* @ngInject */ NavigationEditorLinkComponent;
}());

var ACTIONABLE_ERRORS = [
    {
        subject: 'name',
        errorCode: 'field.already.exist',
        structure: {
            cmsStructureType: 'ShortString',
            collection: false,
            editable: true,
            i18nKey: 'type.cmsitem.name.name',
            localized: false,
            paged: false,
            qualifier: 'name',
            required: true
        }
    },
    {
        subject: 'label',
        errorCode: 'default.page.label.already.exist',
        structure: {
            cmsStructureType: 'DuplicatePrimaryContentPage',
            collection: false,
            editable: true,
            i18nKey: 'se.cms.page.restore.content.duplicate.primaryforvariation.label',
            localized: false,
            paged: false,
            qualifier: 'label',
            required: true
        }
    },
    {
        subject: 'label',
        errorCode: 'default.page.does.not.exist',
        structure: {
            cmsStructureType: 'MissingPrimaryContentPage',
            collection: false,
            editable: true,
            i18nKey: 'se.cms.page.restore.content.noprimaryforvariation.label',
            localized: false,
            paged: false,
            qualifier: 'label',
            required: true
        }
    },
    {
        subject: 'typeCode',
        errorCode: 'default.page.already.exist',
        structure: {
            cmsStructureType: 'DuplicatePrimaryNonContentPageMessage',
            collection: false,
            editable: true,
            i18nKey: 'type.cmsitem.label.name',
            localized: false,
            paged: false,
            qualifier: 'replace',
            required: true
        }
    }
];
var NON_ACTIONABLE_ERRORS = [
    {
        subject: 'typeCode',
        errorCode: 'default.page.does.not.exist',
        messageKey: 'se.cms.page.restore.noprimaryforvariation.error'
    }
];

var /* @ngInject */ PageRestoreModalService = /** @class */ (function () {
    PageRestoreModalService.$inject = ["alertService", "confirmationModalService", "genericEditorModalService", "crossFrameEventService", "pageRestoredAlertService", "translate"];
    function /* @ngInject */ PageRestoreModalService(alertService, confirmationModalService, genericEditorModalService, crossFrameEventService, pageRestoredAlertService, translate) {
        this.alertService = alertService;
        this.confirmationModalService = confirmationModalService;
        this.genericEditorModalService = genericEditorModalService;
        this.crossFrameEventService = crossFrameEventService;
        this.pageRestoredAlertService = pageRestoredAlertService;
        this.translate = translate;
    }
    /**
     * Handles validation errors depending of their type - show error alert for unsupported errors,
     * show confirmation message for non actionable errors, otherwise show modal with detailed errors
     */
    /* @ngInject */ PageRestoreModalService.prototype.handleRestoreValidationErrors = function (pageInfo, errors) {
        var _this = this;
        var actionableErrors = this.getActionableErrors(errors);
        var nonActionableErrors = this.getNonActionableError(errors);
        var unsupportedErrors = lodash.difference(errors, actionableErrors, nonActionableErrors);
        if (unsupportedErrors.length > 0) {
            this.showErrorAlert(unsupportedErrors);
        }
        else if (nonActionableErrors.length > 0) {
            this.showConfirmationMessage(nonActionableErrors);
        }
        else {
            this.showRestoreEditor(pageInfo, actionableErrors).then(function () {
                _this.crossFrameEventService.publish(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE);
            });
        }
    };
    PageRestoreModalService.prototype.handleRestoreValidationErrors.$inject = ["pageInfo", "errors"];
    /* @ngInject */ PageRestoreModalService.prototype.showRestoreEditor = function (pageInfo, errors) {
        var _this = this;
        var structureFields = this.getRestoreEditorStructureFields(errors);
        var editorData = {
            content: pageInfo,
            title: 'se.cms.page.restore.page.title',
            componentId: pageInfo.uid,
            componentUuid: pageInfo.uuid,
            componentType: pageInfo.typeCode,
            structure: this.buildStructure(structureFields)
        };
        this.forceErrorsDisplayInEditor(pageInfo.componentUuid, errors);
        return this.genericEditorModalService.open(editorData, function () {
            _this.pageRestoredAlertService.displayPageRestoredSuccessAlert(pageInfo);
            _this.crossFrameEventService.publish(smarteditcommons.EVENTS.PAGE_RESTORED);
        }, function (newErrors, ge) {
            var actionableErrors = _this.getActionableErrors(newErrors);
            var unsupportedErrors = lodash.difference(newErrors, actionableErrors);
            if (unsupportedErrors.length > 0) {
                _this.showErrorAlert(unsupportedErrors);
            }
            else {
                structureFields = lodash.concat(structureFields, _this.getRestoreEditorStructureFields(newErrors));
                ge.structure = _this.buildStructure(structureFields);
                _this.forceErrorsDisplayInEditor(pageInfo.componentUuid, newErrors);
            }
        }, {
            modalPanelClass: 'modal-stretched'
        });
    };
    PageRestoreModalService.prototype.showRestoreEditor.$inject = ["pageInfo", "errors"];
    /* @ngInject */ PageRestoreModalService.prototype.forceErrorsDisplayInEditor = function (editorId, errors) {
        var _this = this;
        setTimeout(function () {
            _this.crossFrameEventService.publish(smarteditcommons.GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, {
                messages: errors,
                targetGenericEditorId: editorId
            });
        }, 0);
    };
    PageRestoreModalService.prototype.forceErrorsDisplayInEditor.$inject = ["editorId", "errors"];
    /* @ngInject */ PageRestoreModalService.prototype.buildStructure = function (structureFields) {
        return {
            attributes: structureFields,
            category: 'PAGE'
        };
    };
    PageRestoreModalService.prototype.buildStructure.$inject = ["structureFields"];
    /* @ngInject */ PageRestoreModalService.prototype.getRestoreEditorStructureFields = function (errors) {
        var _this = this;
        return errors.reduce(function (accumulator, currentError) {
            var errorMapping = ACTIONABLE_ERRORS.find(function (actionableErrorMapping) {
                return _this.isSupportedError(currentError) &&
                    _this.isEqualTo(currentError, actionableErrorMapping);
            });
            accumulator.push(errorMapping.structure);
            return accumulator;
        }, []);
    };
    PageRestoreModalService.prototype.getRestoreEditorStructureFields.$inject = ["errors"];
    /* @ngInject */ PageRestoreModalService.prototype.showConfirmationMessage = function (errors) {
        var _this = this;
        var message = errors.reduce(function (accumulator, currentError) {
            var errorMapping = NON_ACTIONABLE_ERRORS.find(function (nonActionableErrorMapping) {
                return _this.isSupportedError(currentError) &&
                    _this.isEqualTo(currentError, nonActionableErrorMapping);
            });
            return accumulator + _this.translate.instant(errorMapping.messageKey) + ' ';
        }, '');
        var modalConfig = {};
        modalConfig.description = message.trim();
        modalConfig.showOkButtonOnly = true;
        modalConfig.title = 'se.cms.page.restore.error.confirmationmodal.title';
        this.confirmationModalService.confirm(modalConfig);
    };
    PageRestoreModalService.prototype.showConfirmationMessage.$inject = ["errors"];
    /* @ngInject */ PageRestoreModalService.prototype.showErrorAlert = function (errors) {
        var errorMessage = errors.reduce(function (accumulator, currentError) { return accumulator + currentError.message + ' '; }, '');
        this.alertService.showDanger(errorMessage.trim());
    };
    PageRestoreModalService.prototype.showErrorAlert.$inject = ["errors"];
    /* @ngInject */ PageRestoreModalService.prototype.getActionableErrors = function (errors) {
        var _this = this;
        return errors.filter(function (error) {
            return ACTIONABLE_ERRORS.some(function (actionableErrorMapping) {
                return _this.isSupportedError(error) && _this.isEqualTo(error, actionableErrorMapping);
            });
        });
    };
    PageRestoreModalService.prototype.getActionableErrors.$inject = ["errors"];
    /* @ngInject */ PageRestoreModalService.prototype.getNonActionableError = function (errors) {
        var _this = this;
        return errors.filter(function (error) {
            return NON_ACTIONABLE_ERRORS.some(function (nonActionableErrorMapping) {
                return _this.isSupportedError(error) && _this.isEqualTo(error, nonActionableErrorMapping);
            });
        });
    };
    PageRestoreModalService.prototype.getNonActionableError.$inject = ["errors"];
    /* @ngInject */ PageRestoreModalService.prototype.isSupportedError = function (error) {
        return error.type === 'ValidationError';
    };
    PageRestoreModalService.prototype.isSupportedError.$inject = ["error"];
    /* @ngInject */ PageRestoreModalService.prototype.isEqualTo = function (error1, error2) {
        return error1.subject === error2.subject && error1.errorCode === error2.errorCode;
    };
    PageRestoreModalService.prototype.isEqualTo.$inject = ["error1", "error2"];
    /* @ngInject */ PageRestoreModalService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.IAlertService,
            smarteditcommons.IConfirmationModalService,
            GenericEditorModalService,
            smarteditcommons.CrossFrameEventService,
            PageRestoredAlertService,
            core$1.TranslateService])
    ], /* @ngInject */ PageRestoreModalService);
    return /* @ngInject */ PageRestoreModalService;
}());

var CMSPageOperation;
(function (CMSPageOperation) {
    CMSPageOperation["TRASH_PAGE"] = "TRASH_PAGE";
})(CMSPageOperation || (CMSPageOperation = {}));
var /* @ngInject */ ManagePageService = /** @class */ (function () {
    ManagePageService.$inject = ["logService", "smarteditRoutingService", "alertService", "cmsitemsRestService", "systemEventService", "crossFrameEventService", "pageInfoService", "confirmationModalService", "pagesVariationsRestService", "waitDialogService", "pageRestoreModalService", "pageRestoredAlertService", "homepageService", "workflowService", "catalogService", "restServiceFactory", "sharedDataService", "catalogVersionRestService"];
    function /* @ngInject */ ManagePageService(logService, smarteditRoutingService, alertService, cmsitemsRestService, systemEventService, crossFrameEventService, pageInfoService, confirmationModalService, pagesVariationsRestService, waitDialogService, pageRestoreModalService, pageRestoredAlertService, homepageService, workflowService, catalogService, restServiceFactory, sharedDataService, catalogVersionRestService) {
        this.logService = logService;
        this.smarteditRoutingService = smarteditRoutingService;
        this.alertService = alertService;
        this.cmsitemsRestService = cmsitemsRestService;
        this.systemEventService = systemEventService;
        this.crossFrameEventService = crossFrameEventService;
        this.pageInfoService = pageInfoService;
        this.confirmationModalService = confirmationModalService;
        this.pagesVariationsRestService = pagesVariationsRestService;
        this.waitDialogService = waitDialogService;
        this.pageRestoreModalService = pageRestoreModalService;
        this.pageRestoredAlertService = pageRestoredAlertService;
        this.homepageService = homepageService;
        this.workflowService = workflowService;
        this.catalogService = catalogService;
        this.restServiceFactory = restServiceFactory;
        this.sharedDataService = sharedDataService;
        this.catalogVersionRestService = catalogVersionRestService;
        this.resourcePageOperationsURI = "/cmssmarteditwebservices/v1/sites/" + smarteditcommons.PAGE_CONTEXT_SITE_ID + "/catalogs/" + cmscommons.PAGE_CONTEXT_CATALOG + "/pages/:pageId/operations";
    }
    /**
     * Get the number of soft deleted pages for the provided context.
     */
    /* @ngInject */ ManagePageService.prototype.getSoftDeletedPagesCount = function (uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var requestParams, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestParams = {
                            pageSize: 10,
                            currentPage: 0,
                            typeCode: 'AbstractPage',
                            itemSearchParams: 'pageStatus:deleted',
                            catalogId: uriContext.CONTEXT_CATALOG,
                            catalogVersion: uriContext.CONTEXT_CATALOG_VERSION,
                            fields: 'BASIC'
                        };
                        return [4 /*yield*/, this.cmsitemsRestService.get(requestParams)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.pagination.totalCount];
                }
            });
        });
    };
    ManagePageService.prototype.getSoftDeletedPagesCount.$inject = ["uriContext"];
    /**
     * This method triggers the soft deletion of a CMS page.
     *
     * @param pageInfo The page object containing the uuid and the name of the page to be deleted.
     */
    /* @ngInject */ ManagePageService.prototype.softDeletePage = function (pageInfo, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var _pageInfo, builtURIContext, confirmationModalDescription, operationConfirmed, exception_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _pageInfo = lodash.cloneDeep(pageInfo);
                        builtURIContext = {
                            catalogId: uriContext.CURRENT_CONTEXT_CATALOG,
                            catalogVersion: uriContext.CURRENT_CONTEXT_CATALOG_VERSION,
                            siteId: uriContext.CURRENT_CONTEXT_SITE_ID
                        };
                        return [4 /*yield*/, this.getConfirmationModalDescription(_pageInfo, uriContext)];
                    case 1:
                        confirmationModalDescription = _a.sent();
                        return [4 /*yield*/, this.confirmSoftDelete(confirmationModalDescription, pageInfo.name)];
                    case 2:
                        operationConfirmed = _a.sent();
                        if (!operationConfirmed) {
                            return [2 /*return*/];
                        }
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        _pageInfo.identifier = pageInfo.uuid;
                        _pageInfo.pageStatus = cmscommons.CMSPageStatus.DELETED;
                        return [4 /*yield*/, this.cmsitemsRestService.update(_pageInfo)];
                    case 4:
                        _a.sent();
                        this.crossFrameEventService.publish(smarteditcommons.EVENTS.PAGE_DELETED);
                        this.alertService.showSuccess({
                            message: 'se.cms.actionitem.page.trash.alert.success.description',
                            messagePlaceholders: {
                                pageName: pageInfo.name
                            }
                        });
                        this.smarteditRoutingService.go('/ng/pages/:siteId/:catalogId/:catalogVersion'
                            .replace(':siteId', builtURIContext.siteId)
                            .replace(':catalogId', builtURIContext.catalogId)
                            .replace(':catalogVersion', builtURIContext.catalogVersion));
                        return [3 /*break*/, 6];
                    case 5:
                        exception_1 = _a.sent();
                        this.logService.warn('Something went wrong when soft deleting page', exception_1);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ManagePageService.prototype.softDeletePage.$inject = ["pageInfo", "uriContext"];
    /**
     * This method triggers the permanent deletion of a CMS page.
     */
    /* @ngInject */ ManagePageService.prototype.hardDeletePage = function (pageInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var operationConfirmed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.confirmHardDelete(pageInfo.name)];
                    case 1:
                        operationConfirmed = _a.sent();
                        if (!operationConfirmed) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.cmsitemsRestService.delete(pageInfo.uuid)];
                    case 2:
                        _a.sent();
                        this.alertService.showSuccess('se.cms.page.permanently.delete.alert.success');
                        this.systemEventService.publishAsync(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE);
                        this.crossFrameEventService.publish(smarteditcommons.EVENTS.PAGE_DELETED);
                        return [2 /*return*/];
                }
            });
        });
    };
    ManagePageService.prototype.hardDeletePage.$inject = ["pageInfo"];
    /**
     *  This method triggers the restoration a CMS page.
     */
    /* @ngInject */ ManagePageService.prototype.restorePage = function (pageInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var _pageInfo, response, exception_2, errors;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _pageInfo = lodash.cloneDeep(pageInfo);
                        _pageInfo.pageStatus = cmscommons.CMSPageStatus.ACTIVE;
                        _pageInfo.identifier = pageInfo.uuid;
                        this.waitDialogService.showWaitModal(null);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.cmsitemsRestService.update(_pageInfo, {
                                headers: { 'Ignore-Interceptor': 'NonValidationErrorInterceptor' }
                            })];
                    case 2:
                        response = _a.sent();
                        this.waitDialogService.hideWaitModal();
                        this.systemEventService.publishAsync(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE, response);
                        this.pageRestoredAlertService.displayPageRestoredSuccessAlert(_pageInfo);
                        this.crossFrameEventService.publish(smarteditcommons.EVENTS.PAGE_RESTORED);
                        return [3 /*break*/, 4];
                    case 3:
                        exception_2 = _a.sent();
                        errors = exception_2.error.errors;
                        this.waitDialogService.hideWaitModal();
                        this.pageRestoreModalService.handleRestoreValidationErrors(_pageInfo, errors);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ManagePageService.prototype.restorePage.$inject = ["pageInfo"];
    /**
     * This method indicates whether the given page can be soft deleted.
     * Only the following pages are eligible for soft deletion:
     * 1. the variation pages
     * 2. the primary pages associated with no variation pages
     * 3. the page is not in a workflow
     */
    /* @ngInject */ ManagePageService.prototype.isPageTrashable = function (cmsPage, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, hasFallbackHomepageOrIsPrimaryWithoutVariations, isInWorkflow, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, Promise.all([
                                this.hasFallbackHomepageOrIsPrimaryWithoutVariations(cmsPage, uriContext),
                                this.workflowService.isPageInWorkflow(cmsPage)
                            ])];
                    case 1:
                        _a = _c.sent(), hasFallbackHomepageOrIsPrimaryWithoutVariations = _a[0], isInWorkflow = _a[1];
                        return [2 /*return*/, hasFallbackHomepageOrIsPrimaryWithoutVariations && !isInWorkflow];
                    case 2:
                        _b = _c.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ManagePageService.prototype.isPageTrashable.$inject = ["cmsPage", "uriContext"];
    /**
     * Determines whether page can be cloned or not
     *
     * Checks if there is permission for given page in given catalog version to be cloned
     * This method uses only "outer" parts for that check so there is no need for iframe to be available
     *
     * !NOTE: Logic here is very similar to logic used in RulesAndPermissionsRegistrationService where "se.cloneable.page" rule is registered. So if any changes are done here it should be considered to adjust those changes in mentioned service as well.
     *
     */
    /* @ngInject */ ManagePageService.prototype.isPageCloneable = function (pageUuid, catalogVersion) {
        return __awaiter(this, void 0, void 0, function () {
            var catalogDescriptor, pageUriContext, _a, catalogs, pageInfo, targets, pageContext;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.sharedDataService.get(smarteditcommons.EXPERIENCE_STORAGE_KEY)];
                    case 1:
                        catalogDescriptor = (_b.sent()).catalogDescriptor;
                        pageUriContext = {
                            CURRENT_CONTEXT_SITE_ID: catalogDescriptor.siteId,
                            CURRENT_CONTEXT_CATALOG: catalogDescriptor.catalogId,
                            CURRENT_CONTEXT_CATALOG_VERSION: catalogDescriptor.catalogVersion
                        };
                        return [4 /*yield*/, Promise.all([
                                this.catalogService.getContentCatalogsForSite(catalogDescriptor.siteId),
                                this.cmsitemsRestService.getById(pageUuid),
                                this.catalogVersionRestService.getCloneableTargets(pageUriContext)
                            ])];
                    case 2:
                        _a = _b.sent(), catalogs = _a[0], pageInfo = _a[1], targets = _a[2];
                        pageContext = catalogs
                            // merge catalog and catalog.parents into one array to simplify searching
                            .reduce(function (acc, catalog) {
                            if (catalog.parents && catalog.parents.length) {
                                acc = acc.concat(catalog.parents);
                            }
                            return acc;
                        }, __spreadArrays(catalogs))
                            // flattening versions
                            .reduce(function (acc, catalog) { return acc.concat(catalog.versions); }, [])
                            // finding demanded version
                            .find(function (version) { return version.uuid === catalogVersion; });
                        if (pageContext === null || pageContext === void 0 ? void 0 : pageContext.active) {
                            return [2 /*return*/, (targets.versions.length > 0 &&
                                    pageInfo.defaultPage &&
                                    !pageInfo.copyToCatalogsDisabled)];
                        }
                        return [2 /*return*/, targets.versions.length > 0];
                }
            });
        });
    };
    ManagePageService.prototype.isPageCloneable.$inject = ["pageUuid", "catalogVersion"];
    /**
     * Get the disabled trash tooltip message.
     */
    /* @ngInject */ ManagePageService.prototype.getDisabledTrashTooltipMessage = function (pageInfo, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var translate, isPageInWorkflow, homepageType;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        translate = 'se.cms.tooltip.movetotrash';
                        return [4 /*yield*/, this.workflowService.isPageInWorkflow(pageInfo)];
                    case 1:
                        isPageInWorkflow = _a.sent();
                        return [4 /*yield*/, this.homepageService.getHomepageType(pageInfo, uriContext)];
                    case 2:
                        homepageType = _a.sent();
                        if (homepageType === exports.HomepageType.CURRENT) {
                            translate = 'se.cms.tooltip.current.homepage.movetotrash';
                        }
                        else if (homepageType === exports.HomepageType.OLD) {
                            translate = 'se.cms.tooltip.old.homepage.movetotrash';
                        }
                        else if (isPageInWorkflow) {
                            translate = 'se.cms.tooltip.page.in.workflow.movetotrash';
                        }
                        return [2 /*return*/, translate];
                }
            });
        });
    };
    ManagePageService.prototype.getDisabledTrashTooltipMessage.$inject = ["pageInfo", "uriContext"];
    /**
     * Will trash the given page in the corresponding active catalog version.
     */
    /* @ngInject */ ManagePageService.prototype.trashPageInActiveCatalogVersion = function (pageUid) {
        return __awaiter(this, void 0, void 0, function () {
            var uriContext, activeVersion, operationConfirmed, exception_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.retrieveUriContext()];
                    case 1:
                        uriContext = _a.sent();
                        return [4 /*yield*/, this.catalogService.getContentCatalogActiveVersion(uriContext)];
                    case 2:
                        activeVersion = _a.sent();
                        return [4 /*yield*/, this.confirmTrashingPageInActiveCatalogVersion(activeVersion)];
                    case 3:
                        operationConfirmed = _a.sent();
                        if (!operationConfirmed) {
                            return [2 /*return*/];
                        }
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        this.pageOperationsRESTService = this.restServiceFactory.get(this.resourcePageOperationsURI.replace(':pageId', pageUid));
                        return [4 /*yield*/, this.pageOperationsRESTService.save({
                                operation: 'TRASH_PAGE',
                                sourceCatalogVersion: uriContext.CURRENT_CONTEXT_CATALOG_VERSION,
                                targetCatalogVersion: activeVersion
                            })];
                    case 5:
                        _a.sent();
                        this.alertService.showSuccess({
                            message: 'se.cms.sync.page.status.success.alert',
                            messagePlaceholders: {
                                pageId: pageUid,
                                catalogVersion: activeVersion
                            }
                        });
                        return [3 /*break*/, 7];
                    case 6:
                        exception_3 = _a.sent();
                        this.logService.warn('trashPageInActiveCatalogVersion - page could not be trashed', exception_3);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    ManagePageService.prototype.trashPageInActiveCatalogVersion.$inject = ["pageUid"];
    /* @ngInject */ ManagePageService.prototype.getConfirmationModalDescription = function (pageInfo, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var pageUUID, homepageType, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 1:
                        pageUUID = _b.sent();
                        if (!pageUUID) {
                            this.logService.error('deletePageService::deletePage - pageUUID is undefined');
                            return [2 /*return*/, Promise.reject()];
                        }
                        return [4 /*yield*/, this.homepageService.getHomepageType(pageInfo, uriContext)];
                    case 2:
                        homepageType = _b.sent();
                        if (homepageType !== null || pageInfo.homepage) {
                            return [2 /*return*/, 'se.cms.actionitem.page.trash.confirmation.description.storefront.homepage'];
                        }
                        return [2 /*return*/, 'se.cms.actionitem.page.trash.confirmation.description.storefront'];
                    case 3:
                        _a = _b.sent();
                        return [2 /*return*/, 'se.cms.actionitem.page.trash.confirmation.description.pagelist'];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ManagePageService.prototype.getConfirmationModalDescription.$inject = ["pageInfo", "uriContext"];
    /* @ngInject */ ManagePageService.prototype.confirmSoftDelete = function (description, pageName) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.confirmationModalService.confirm({
                                description: description,
                                descriptionPlaceholders: {
                                    pageName: pageName
                                },
                                title: 'se.cms.actionitem.page.trash.confirmation.title'
                            })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 2:
                        _a = _b.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ManagePageService.prototype.confirmSoftDelete.$inject = ["description", "pageName"];
    /* @ngInject */ ManagePageService.prototype.confirmHardDelete = function (pageName) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.confirmationModalService.confirm({
                                title: 'se.cms.actionitem.page.permanently.delete.confirmation.title',
                                description: 'se.cms.actionitem.page.permanently.delete.confirmation.description',
                                descriptionPlaceholders: {
                                    pageName: pageName
                                }
                            })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 2:
                        _a = _b.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ManagePageService.prototype.confirmHardDelete.$inject = ["pageName"];
    /* @ngInject */ ManagePageService.prototype.confirmTrashingPageInActiveCatalogVersion = function (activeVersion) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.confirmationModalService.confirm({
                                title: 'se.cms.sync.page.status.confirm.title',
                                description: 'se.cms.sync.page.status.confirm.description',
                                descriptionPlaceholders: {
                                    catalogVersion: activeVersion
                                }
                            })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 2:
                        _a = _b.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ManagePageService.prototype.confirmTrashingPageInActiveCatalogVersion.$inject = ["activeVersion"];
    /* @ngInject */ ManagePageService.prototype.hasFallbackHomepageOrIsPrimaryWithoutVariations = function (cmsPage, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var homepageType, variationPagesUids;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.homepageService.getHomepageType(cmsPage, uriContext)];
                    case 1:
                        homepageType = _a.sent();
                        if (homepageType !== null || cmsPage.homepage) {
                            return [2 /*return*/, this.homepageService.hasFallbackHomePage(uriContext)];
                        }
                        return [4 /*yield*/, this.pagesVariationsRestService.getVariationsForPrimaryPageId(cmsPage.uid)];
                    case 2:
                        variationPagesUids = _a.sent();
                        return [2 /*return*/, variationPagesUids.length === 0];
                }
            });
        });
    };
    ManagePageService.prototype.hasFallbackHomepageOrIsPrimaryWithoutVariations.$inject = ["cmsPage", "uriContext"];
    __decorate([
        smarteditcommons.Cached({
            actions: [smarteditcommons.rarelyChangingContent],
            tags: [smarteditcommons.pageDeletionEvictionTag, smarteditcommons.pageRestoredEvictionTag]
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], /* @ngInject */ ManagePageService.prototype, "getSoftDeletedPagesCount", null);
    /* @ngInject */ ManagePageService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.LogService,
            smarteditcommons.SmarteditRoutingService,
            smarteditcommons.IAlertService,
            cmscommons.CmsitemsRestService,
            smarteditcommons.SystemEventService,
            smarteditcommons.CrossFrameEventService,
            smarteditcommons.IPageInfoService,
            smarteditcommons.IConfirmationModalService,
            PagesVariationsRestService,
            smarteditcommons.IWaitDialogService,
            PageRestoreModalService,
            PageRestoredAlertService,
            HomepageService,
            WorkflowService,
            smarteditcommons.ICatalogService,
            smarteditcommons.IRestServiceFactory,
            smarteditcommons.ISharedDataService,
            CatalogVersionRestService])
    ], /* @ngInject */ ManagePageService);
    return /* @ngInject */ ManagePageService;
}());

var /* @ngInject */ PageFacade = /** @class */ (function () {
    PageFacade.$inject = ["cmsitemsRestService", "crossFrameEventService", "sharedDataService", "urlService", "catalogService"];
    function /* @ngInject */ PageFacade(cmsitemsRestService, crossFrameEventService, sharedDataService, urlService, catalogService) {
        this.cmsitemsRestService = cmsitemsRestService;
        this.crossFrameEventService = crossFrameEventService;
        this.sharedDataService = sharedDataService;
        this.urlService = urlService;
        this.catalogService = catalogService;
    }
    /**
     * Determines if a ContentPage with a given label exists in the given catalog and catalog version
     *
     * @param label The label to search for
     * @param catalogId The catalog ID to search in for the ContentPage
     * @param catalogVersion The catalog version to search in for the ContentPage
     * @return Promise resolving to a boolean determining if the ContentPage exists
     */
    /* @ngInject */ PageFacade.prototype.contentPageWithLabelExists = function (label, catalogId, catalogVersion) {
        return __awaiter(this, void 0, void 0, function () {
            var requestParams, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestParams = {
                            pageSize: 10,
                            currentPage: 0,
                            typeCode: 'ContentPage',
                            itemSearchParams: 'label:' + label,
                            catalogId: catalogId,
                            catalogVersion: catalogVersion
                        };
                        return [4 /*yield*/, this.cmsitemsRestService.get(requestParams)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result && !lodash.isEmpty(result.response)];
                }
            });
        });
    };
    PageFacade.prototype.contentPageWithLabelExists.$inject = ["label", "catalogId", "catalogVersion"];
    /**
     * Retrieves the experience and builds a uri context based on its page context
     *
     * @returns the page uriContext
     */
    /* @ngInject */ PageFacade.prototype.retrievePageUriContext = function () {
        return __awaiter(this, void 0, void 0, function () {
            var experience;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sharedDataService.get(smarteditcommons.EXPERIENCE_STORAGE_KEY)];
                    case 1:
                        experience = (_a.sent());
                        if (!experience) {
                            throw new Error('pageFacade - could not retrieve an experience from sharedDataService');
                        }
                        if (!experience.pageContext) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, this.urlService.buildUriContext(experience.pageContext.siteId, experience.pageContext.catalogId, experience.pageContext.catalogVersion)];
                }
            });
        });
    };
    /**
     * @param page The object representing the CMS page item to create
     * @returns If request is successful, it returns a promise that resolves with the CMS page item object. If
     * the request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ PageFacade.prototype.createPage = function (page) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, newlyCreatedPage;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!page.catalogVersion) return [3 /*break*/, 2];
                        _a = page;
                        return [4 /*yield*/, this.catalogService.getCatalogVersionUUid()];
                    case 1:
                        _a.catalogVersion = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (page.onlyOneRestrictionMustApply === undefined) {
                            page.onlyOneRestrictionMustApply = false;
                        }
                        if (page.restrictions === undefined) {
                            page.restrictions = [];
                        }
                        return [4 /*yield*/, this.cmsitemsRestService.create(page)];
                    case 3:
                        newlyCreatedPage = _b.sent();
                        this.crossFrameEventService.publish(smarteditcommons.EVENTS.PAGE_CREATED, page);
                        return [2 /*return*/, newlyCreatedPage];
                }
            });
        });
    };
    PageFacade.prototype.createPage.$inject = ["page"];
    /**
     * Creates a new CMS page item for a given site.
     *
     * @param page The object representing the CMS page item to create
     * @param siteUid The uid of the target site.
     * @returns If request is successful, it returns a promise that resolves with the CMS page item object. If
     * the request fails, it resolves with errors from the backend.
     */
    /* @ngInject */ PageFacade.prototype.createPageForSite = function (page, siteUid) {
        return __awaiter(this, void 0, void 0, function () {
            var catalogVersionUUid, newlyCreatedPage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.getCatalogVersionUUid()];
                    case 1:
                        catalogVersionUUid = _a.sent();
                        page.catalogVersion = page.catalogVersion || catalogVersionUUid;
                        if (page.onlyOneRestrictionMustApply === undefined) {
                            page.onlyOneRestrictionMustApply = false;
                        }
                        page = lodash.cloneDeep(page);
                        page[cmscommons.CONTEXT_SITE_ID] = siteUid;
                        return [4 /*yield*/, this.cmsitemsRestService.create(page)];
                    case 2:
                        newlyCreatedPage = _a.sent();
                        this.crossFrameEventService.publish(smarteditcommons.EVENTS.PAGE_CREATED, page);
                        return [2 /*return*/, newlyCreatedPage];
                }
            });
        });
    };
    PageFacade.prototype.createPageForSite.$inject = ["page", "siteUid"];
    /* @ngInject */ PageFacade = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [cmscommons.CmsitemsRestService,
            smarteditcommons.CrossFrameEventService,
            smarteditcommons.ISharedDataService,
            smarteditcommons.IUrlService,
            smarteditcommons.ICatalogService])
    ], /* @ngInject */ PageFacade);
    return /* @ngInject */ PageFacade;
}());

window.__smartedit__.addDecoratorPayload("Component", "DeletePageToolbarItemComponent", {
    selector: 'se-delete-page-toolbar-item',
    template: "<div class=\"toolbar-action\" *ngIf=\"isReady\" [attr.data-item-key]=\"toolbarItem.key\"><button type=\"button\" class=\"btn toolbar-action--button\" [disabled]=\"isDeletePageDisabled\" [ngClass]=\"{ 'toolbar-action__disabled' : isDeletePageDisabled }\" (click)=\"deletePage()\"><span class=\"icon-delete se-toolbar-menu-ddlb--button__icon\"></span><div class=\"toolbar-action-button__txt\" translate=\"se.cms.actionitem.page.trash\"></div></button><se-tooltip *ngIf=\"isDeletePageDisabled\" [appendTo]=\"'body'\" [isChevronVisible]=\"true\" [placement]=\"'bottom'\" [triggers]=\"['mouseenter', 'mouseleave']\" [additionalClasses]=\"['se-tooltip--stretched']\"><div se-tooltip-body><span [translate]=\"tooltipMessage\"></span></div></se-tooltip></div>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ DeletePageToolbarItemComponent = /** @class */ (function () {
    DeletePageToolbarItemComponent.$inject = ["pageService", "pageFacade", "managePageService", "systemEventService", "crossFrameEventService", "cdr", "toolbarItem"];
    function /* @ngInject */ DeletePageToolbarItemComponent(pageService, pageFacade, managePageService, systemEventService, crossFrameEventService, cdr, toolbarItem) {
        this.pageService = pageService;
        this.pageFacade = pageFacade;
        this.managePageService = managePageService;
        this.systemEventService = systemEventService;
        this.crossFrameEventService = crossFrameEventService;
        this.cdr = cdr;
        this.toolbarItem = toolbarItem;
    }
    /* @ngInject */ DeletePageToolbarItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.unRegPageChange = this.crossFrameEventService.subscribe(smarteditcommons.EVENTS.PAGE_CHANGE, function () {
            return _this.updateToolbar();
        });
        return this.updateToolbar();
    };
    /* @ngInject */ DeletePageToolbarItemComponent.prototype.ngOnDestroy = function () {
        this.unRegPageChange();
    };
    Object.defineProperty(/* @ngInject */ DeletePageToolbarItemComponent.prototype, "isDeletePageDisabled", {
        get: function () {
            return !this.isDeletePageEnabled;
        },
        enumerable: false,
        configurable: true
    });
    /* @ngInject */ DeletePageToolbarItemComponent.prototype.deletePage = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                    case 1:
                        pageInfo = _a.sent();
                        return [4 /*yield*/, this.managePageService.softDeletePage(pageInfo, this.uriContext)];
                    case 2:
                        _a.sent();
                        this.systemEventService.publishAsync(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE);
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ DeletePageToolbarItemComponent.prototype.updateToolbar = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uriContext, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.markAsNotReady();
                        this.cdr.detectChanges();
                        return [4 /*yield*/, this.pageFacade.retrievePageUriContext()];
                    case 1:
                        uriContext = _d.sent();
                        if (!uriContext) {
                            return [2 /*return*/];
                        }
                        this.uriContext = uriContext;
                        _a = this;
                        return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                    case 2:
                        _a.pageInfo = _d.sent();
                        _b = this;
                        return [4 /*yield*/, this.managePageService.isPageTrashable(this.pageInfo, this.uriContext)];
                    case 3:
                        _b.isDeletePageEnabled = _d.sent();
                        _c = this;
                        return [4 /*yield*/, this.resolveTooltipMessage(this.isDeletePageEnabled, this.pageInfo, this.uriContext)];
                    case 4:
                        _c.tooltipMessage = _d.sent();
                        this.markAsReady();
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ DeletePageToolbarItemComponent.prototype.markAsNotReady = function () {
        this.isReady = false;
        this.isDeletePageEnabled = false;
        this.tooltipMessage = null;
    };
    /* @ngInject */ DeletePageToolbarItemComponent.prototype.markAsReady = function () {
        this.isReady = true;
    };
    /* @ngInject */ DeletePageToolbarItemComponent.prototype.resolveTooltipMessage = function (isDeleteEnabled, pageInfo, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (isDeleteEnabled
                            ? null
                            : this.managePageService.getDisabledTrashTooltipMessage(pageInfo, uriContext))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DeletePageToolbarItemComponent.prototype.resolveTooltipMessage.$inject = ["isDeleteEnabled", "pageInfo", "uriContext"];
    /* @ngInject */ DeletePageToolbarItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-delete-page-toolbar-item',
            template: "<div class=\"toolbar-action\" *ngIf=\"isReady\" [attr.data-item-key]=\"toolbarItem.key\"><button type=\"button\" class=\"btn toolbar-action--button\" [disabled]=\"isDeletePageDisabled\" [ngClass]=\"{ 'toolbar-action__disabled' : isDeletePageDisabled }\" (click)=\"deletePage()\"><span class=\"icon-delete se-toolbar-menu-ddlb--button__icon\"></span><div class=\"toolbar-action-button__txt\" translate=\"se.cms.actionitem.page.trash\"></div></button><se-tooltip *ngIf=\"isDeletePageDisabled\" [appendTo]=\"'body'\" [isChevronVisible]=\"true\" [placement]=\"'bottom'\" [triggers]=\"['mouseenter', 'mouseleave']\" [additionalClasses]=\"['se-tooltip--stretched']\"><div se-tooltip-body><span [translate]=\"tooltipMessage\"></span></div></se-tooltip></div>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(6, core.Inject(smarteditcommons.TOOLBAR_ITEM)),
        __metadata("design:paramtypes", [cmscommons.IPageService,
            PageFacade,
            ManagePageService,
            smarteditcommons.SystemEventService,
            smarteditcommons.CrossFrameEventService,
            core.ChangeDetectorRef, Object])
    ], /* @ngInject */ DeletePageToolbarItemComponent);
    return /* @ngInject */ DeletePageToolbarItemComponent;
}());

var /* @ngInject */ PageEditorModalConfigService = /** @class */ (function () {
    PageEditorModalConfigService.$inject = ["cmsitemsRestService", "pageService", "contextAwarePageStructureService", "contextAwareEditableItemService", "translateService"];
    function /* @ngInject */ PageEditorModalConfigService(cmsitemsRestService, pageService, contextAwarePageStructureService, contextAwareEditableItemService, translateService) {
        this.cmsitemsRestService = cmsitemsRestService;
        this.pageService = pageService;
        this.contextAwarePageStructureService = contextAwarePageStructureService;
        this.contextAwareEditableItemService = contextAwareEditableItemService;
        this.translateService = translateService;
    }
    /** Creates a config for given Page that can be used to open a modal.  */
    /* @ngInject */ PageEditorModalConfigService.prototype.create = function (page) {
        return __awaiter(this, void 0, void 0, function () {
            var config, _a, cmsPage, isPagePrimary, fields;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        config = {
                            title: 'se.cms.pageeditormodal.editpagetab.title',
                            componentUuid: page.uuid,
                            componentType: page.typeCode
                        };
                        return [4 /*yield*/, Promise.all([
                                this.cmsitemsRestService.getById(page.uuid),
                                this.pageService.isPagePrimary(page.uid)
                            ])];
                    case 1:
                        _a = _b.sent(), cmsPage = _a[0], isPagePrimary = _a[1];
                        config.content = cmsPage;
                        config.content.template = cmsPage.masterTemplateId;
                        return [4 /*yield*/, this.contextAwarePageStructureService.getPageStructureForPageEditing(config.content.typeCode, config.content.uid)];
                    case 2:
                        fields = _b.sent();
                        config.structure = fields;
                        if (isPagePrimary) {
                            config.structure.attributes = this.filterPrimaryPageAttributes(config.structure.attributes);
                        }
                        if (!!!page.uid) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.ensureReadOnlyMode(page, config)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/, config];
                }
            });
        });
    };
    PageEditorModalConfigService.prototype.create.$inject = ["page"];
    /* @ngInject */ PageEditorModalConfigService.prototype.filterPrimaryPageAttributes = function (attributes) {
        var _this = this;
        return attributes.filter(function (field) { return _this.isPrimaryPageAttribute(field); });
    };
    PageEditorModalConfigService.prototype.filterPrimaryPageAttributes.$inject = ["attributes"];
    /* @ngInject */ PageEditorModalConfigService.prototype.isPrimaryPageAttribute = function (attribute) {
        return (attribute.qualifier !== 'restrictions' &&
            attribute.qualifier !== 'onlyOneRestrictionMustApply');
    };
    PageEditorModalConfigService.prototype.isPrimaryPageAttribute.$inject = ["attribute"];
    /* @ngInject */ PageEditorModalConfigService.prototype.ensureReadOnlyMode = function (page, config) {
        return __awaiter(this, void 0, void 0, function () {
            var isEditable;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contextAwareEditableItemService.isItemEditable(page.uid)];
                    case 1:
                        isEditable = _a.sent();
                        config.readOnlyMode = !isEditable;
                        if (config.readOnlyMode) {
                            config.messages = [
                                {
                                    type: 'info',
                                    message: this.translateService.instant('se.cms.pageeditormodal.page.readonly.message')
                                }
                            ];
                        }
                        return [2 /*return*/, config];
                }
            });
        });
    };
    PageEditorModalConfigService.prototype.ensureReadOnlyMode.$inject = ["page", "config"];
    /* @ngInject */ PageEditorModalConfigService = __decorate([
        core.Injectable(),
        __metadata("design:paramtypes", [cmscommons.CmsitemsRestService,
            cmscommons.IPageService,
            ContextAwarePageStructureService,
            cmscommons.IContextAwareEditableItemService,
            core$1.TranslateService])
    ], /* @ngInject */ PageEditorModalConfigService);
    return /* @ngInject */ PageEditorModalConfigService;
}());

/**
 * The page editor modal service module provides a service that allows opening an editor modal for a given page. The editor modal is populated with a save and cancel button, and is loaded with the
 * editorTabset of cmssmarteditContainer as its content, providing a way to edit
 * various fields of the given page.
 *
 * Convenience service to open an editor modal window for a given page's data.
 */
var /* @ngInject */ PageEditorModalService = /** @class */ (function () {
    PageEditorModalService.$inject = ["genericEditorModalService", "crossFrameEventService", "systemEventService", "pageEditorModalConfigService", "logService"];
    function /* @ngInject */ PageEditorModalService(genericEditorModalService, crossFrameEventService, systemEventService, pageEditorModalConfigService, logService) {
        this.genericEditorModalService = genericEditorModalService;
        this.crossFrameEventService = crossFrameEventService;
        this.systemEventService = systemEventService;
        this.pageEditorModalConfigService = pageEditorModalConfigService;
        this.logService = logService;
    }
    /**
     * Opens Editor Modal.
     *
     * The editor modal is initialized with a title in the format '<TypeName> Editor', ie: 'Paragraph Editor'.
     * The editor modal is also wired with a save and cancel button.
     *
     * @returns A promise that resolves to the data returned by the modal when it is closed.
     */
    /* @ngInject */ PageEditorModalService.prototype.open = function (page) {
        return __awaiter(this, void 0, void 0, function () {
            var config, updatedCmsPage, error_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageEditorModalConfigService.create(page)];
                    case 1:
                        config = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.genericEditorModalService.open(config, function () {
                                _this.crossFrameEventService.publish(cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.FETCH_SYNC_STATUS_ONCE, page.uuid);
                            })];
                    case 3:
                        updatedCmsPage = _a.sent();
                        this.systemEventService.publishAsync(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE, updatedCmsPage);
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        this.logService.debug('Page Editor Modal dismissed', error_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PageEditorModalService.prototype.open.$inject = ["page"];
    /* @ngInject */ PageEditorModalService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [GenericEditorModalService,
            smarteditcommons.CrossFrameEventService,
            smarteditcommons.SystemEventService,
            PageEditorModalConfigService,
            smarteditcommons.LogService])
    ], /* @ngInject */ PageEditorModalService);
    return /* @ngInject */ PageEditorModalService;
}());

/**
 * Used to manage versions in a page.
 */
var /* @ngInject */ PageVersioningService = /** @class */ (function () {
    PageVersioningService.$inject = ["restServiceFactory"];
    function /* @ngInject */ PageVersioningService(restServiceFactory) {
        this.restServiceFactory = restServiceFactory;
        this.pageVersionsServiceResourceURI = "/cmswebservices/v1/sites/" + smarteditcommons.PAGE_CONTEXT_SITE_ID + "/cmsitems/:pageUuid/versions";
        this.pageVersionsRollbackServiceResourceURI = "/cmswebservices/v1/sites/" + smarteditcommons.PAGE_CONTEXT_SITE_ID + "/cmsitems/:pageUuid/versions/:versionId/rollbacks";
        this.pageVersionRESTService = this.restServiceFactory.get(this.pageVersionsServiceResourceURI);
        this.pageVersionsRollbackRESTService = this.restServiceFactory.get(this.pageVersionsRollbackServiceResourceURI);
    }
    /**
     * Retrieves the list of versions found for the page identified by the provided id. This method is paged.
     *
     * @param payload The payload containing search query params, including the pageable information.
     * @returns A promise that resolves to a paged list of versions.
     */
    /* @ngInject */ PageVersioningService.prototype.findPageVersions = function (payload) {
        return this.pageVersionRESTService.page(payload);
    };
    PageVersioningService.prototype.findPageVersions.$inject = ["payload"];
    /**
     * Retrieves the page version information for the provided versionId.
     */
    /* @ngInject */ PageVersioningService.prototype.getPageVersionForId = function (pageUuid, versionId) {
        return this.pageVersionRESTService.get({
            pageUuid: pageUuid,
            identifier: versionId
        });
    };
    PageVersioningService.prototype.getPageVersionForId.$inject = ["pageUuid", "versionId"];
    /**
     * Retrieves the resource URI to manage page versions.
     */
    /* @ngInject */ PageVersioningService.prototype.getResourceURI = function () {
        return this.pageVersionsServiceResourceURI;
    };
    /* @ngInject */ PageVersioningService.prototype.deletePageVersion = function (pageUuid, versionId) {
        return this.pageVersionRESTService.remove({
            pageUuid: pageUuid,
            identifier: versionId
        });
    };
    PageVersioningService.prototype.deletePageVersion.$inject = ["pageUuid", "versionId"];
    /**
     * Rollbacks the page to the provided version. This process will automatically create a version of the current page.
     */
    /* @ngInject */ PageVersioningService.prototype.rollbackPageVersion = function (pageUuid, versionId) {
        return this.pageVersionsRollbackRESTService.save({ pageUuid: pageUuid, versionId: versionId });
    };
    PageVersioningService.prototype.rollbackPageVersion.$inject = ["pageUuid", "versionId"];
    /* @ngInject */ PageVersioningService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.IRestServiceFactory])
    ], /* @ngInject */ PageVersioningService);
    return /* @ngInject */ PageVersioningService;
}());

/**
 * This service is meant to be used internally by the page versions menu.
 * It allows selecting and deselecting a page version to be rendered in the Versioning Mode.
 */
var /* @ngInject */ PageVersionSelectionService = /** @class */ (function () {
    PageVersionSelectionService.$inject = ["crossFrameEventService", "alertService", "experienceService", "cMSModesService", "pageInfoService", "pageVersioningService", "translateService"];
    function /* @ngInject */ PageVersionSelectionService(crossFrameEventService, alertService, experienceService, cMSModesService, pageInfoService, pageVersioningService, translateService) {
        var _this = this;
        this.crossFrameEventService = crossFrameEventService;
        this.alertService = alertService;
        this.experienceService = experienceService;
        this.cMSModesService = cMSModesService;
        this.pageInfoService = pageInfoService;
        this.pageVersioningService = pageVersioningService;
        this.translateService = translateService;
        this.PAGE_VERSIONS_TOOLBAR_ITEM_KEY = 'se.cms.pageVersionsMenu';
        this.PAGE_VERSION_UNSELECTED_MSG_KEY = 'se.cms.versions.unselect.version';
        this.selectedPageVersionSubject = new rxjs.BehaviorSubject(null);
        this.unSubEventPerspectiveChanged = this.crossFrameEventService.subscribe(smarteditcommons.EVENT_PERSPECTIVE_CHANGED, function () { return _this.removePageVersionOnPerspectiveChange(); });
        this.unSubEventPerspectiveRefreshed = this.crossFrameEventService.subscribe(smarteditcommons.EVENT_PERSPECTIVE_REFRESHED, function () { return _this.resetPageVersionContext(); });
        this.unSubEventPageChange = this.crossFrameEventService.subscribe(smarteditcommons.EVENTS.PAGE_CHANGE, function (_eventId, experience) { return _this.initOnPageChange(experience); });
        this.unSubSelectedPageVersion = this.selectedPageVersionSubject.subscribe(function (value) { return (_this.selectedPageVersion = value); });
    }
    /* @ngInject */ PageVersionSelectionService.prototype.ngOnDestroy = function () {
        this.unSubEventPerspectiveChanged();
        this.unSubEventPerspectiveRefreshed();
        this.unSubEventPageChange();
        this.unSubSelectedPageVersion.unsubscribe();
    };
    /* @ngInject */ PageVersionSelectionService.prototype.getSelectedPageVersion = function () {
        return this.selectedPageVersion;
    };
    /* @ngInject */ PageVersionSelectionService.prototype.getSelectedPageVersion$ = function () {
        return this.selectedPageVersionSubject.asObservable();
    };
    /* @ngInject */ PageVersionSelectionService.prototype.hideToolbarContextIfNotNeeded = function () {
        if (!this.selectedPageVersion) {
            this.crossFrameEventService.publish(smarteditcommons.HIDE_TOOLBAR_ITEM_CONTEXT, this.PAGE_VERSIONS_TOOLBAR_ITEM_KEY);
        }
    };
    /* @ngInject */ PageVersionSelectionService.prototype.showToolbarContextIfNeeded = function () {
        if (this.selectedPageVersion) {
            this.crossFrameEventService.publish(smarteditcommons.SHOW_TOOLBAR_ITEM_CONTEXT, this.PAGE_VERSIONS_TOOLBAR_ITEM_KEY);
        }
    };
    /* @ngInject */ PageVersionSelectionService.prototype.selectPageVersion = function (version) {
        if (!this.isSameVersion(this.selectedPageVersion, version)) {
            this.selectedPageVersionSubject.next(version);
            this.experienceService.updateExperience({
                versionId: version.uid
            });
            this.showToolbarContextIfNeeded();
            this.crossFrameEventService.publish(smarteditcommons.EVENTS.PAGE_SELECTED);
        }
    };
    PageVersionSelectionService.prototype.selectPageVersion.$inject = ["version"];
    /* @ngInject */ PageVersionSelectionService.prototype.deselectPageVersion = function (showAlert) {
        if (showAlert === void 0) { showAlert = true; }
        if (this.selectedPageVersion && showAlert) {
            var msgTranslated = this.translateService.instant(this.PAGE_VERSION_UNSELECTED_MSG_KEY);
            this.alertService.showInfo(msgTranslated);
        }
        this.selectedPageVersionSubject.next(null);
        this.experienceService.updateExperience({
            versionId: null
        });
        this.crossFrameEventService.publish(smarteditcommons.HIDE_TOOLBAR_ITEM_CONTEXT, this.PAGE_VERSIONS_TOOLBAR_ITEM_KEY);
    };
    PageVersionSelectionService.prototype.deselectPageVersion.$inject = ["showAlert"];
    /* @ngInject */ PageVersionSelectionService.prototype.updatePageVersionDetails = function (version) {
        this.selectedPageVersionSubject.next(version);
    };
    PageVersionSelectionService.prototype.updatePageVersionDetails.$inject = ["version"];
    /**
     * Required especially when a version is selected and you refresh the browser.
     */
    /* @ngInject */ PageVersionSelectionService.prototype.initOnPageChange = function (experience) {
        return __awaiter(this, void 0, void 0, function () {
            var pageUuid, version;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(experience.versionId && !this.selectedPageVersion)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 1:
                        pageUuid = _a.sent();
                        return [4 /*yield*/, this.pageVersioningService.getPageVersionForId(pageUuid, String(experience.versionId))];
                    case 2:
                        version = _a.sent();
                        this.selectedPageVersionSubject.next(version);
                        this.showToolbarContextIfNeeded();
                        this.crossFrameEventService.publish(smarteditcommons.EVENTS.PAGE_SELECTED);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageVersionSelectionService.prototype.initOnPageChange.$inject = ["experience"];
    /* @ngInject */ PageVersionSelectionService.prototype.isSameVersion = function (selectedPageVersion, newVersion) {
        return selectedPageVersion !== null && newVersion !== null
            ? this.selectedPageVersion.uid === newVersion.uid
            : false;
    };
    PageVersionSelectionService.prototype.isSameVersion.$inject = ["selectedPageVersion", "newVersion"];
    /* @ngInject */ PageVersionSelectionService.prototype.removePageVersionOnPerspectiveChange = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isVersioningModeActive, pageUuid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cMSModesService.isVersioningPerspectiveActive()];
                    case 1:
                        isVersioningModeActive = _a.sent();
                        if (!this.selectedPageVersion) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 2:
                        pageUuid = _a.sent();
                        if (!isVersioningModeActive || this.selectedPageVersion.itemUUID !== pageUuid) {
                            this.deselectPageVersion();
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageVersionSelectionService.prototype.resetPageVersionContext = function () {
        return __awaiter(this, void 0, void 0, function () {
            var experience;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.experienceService.getCurrentExperience()];
                    case 1:
                        experience = _a.sent();
                        if (!experience.versionId && this.selectedPageVersion) {
                            this.selectedPageVersionSubject.next(null);
                            this.hideToolbarContextIfNotNeeded();
                        }
                        else {
                            this.showToolbarContextIfNeeded();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageVersionSelectionService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.CrossFrameEventService,
            smarteditcommons.IAlertService,
            smarteditcommons.IExperienceService,
            cmscommons.CMSModesService,
            smarteditcommons.IPageInfoService,
            PageVersioningService,
            core$1.TranslateService])
    ], /* @ngInject */ PageVersionSelectionService);
    return /* @ngInject */ PageVersionSelectionService;
}());

/**
 * Used to manage a page version.
 */
var /* @ngInject */ ManagePageVersionService = /** @class */ (function () {
    ManagePageVersionService.$inject = ["alertService", "experienceService", "confirmationModalService", "genericEditorModalService", "pageInfoService", "pageVersioningService", "pageVersionSelectionService"];
    function /* @ngInject */ ManagePageVersionService(alertService, experienceService, confirmationModalService, genericEditorModalService, pageInfoService, pageVersioningService, pageVersionSelectionService) {
        this.alertService = alertService;
        this.experienceService = experienceService;
        this.confirmationModalService = confirmationModalService;
        this.genericEditorModalService = genericEditorModalService;
        this.pageInfoService = pageInfoService;
        this.pageVersioningService = pageVersioningService;
        this.pageVersionSelectionService = pageVersionSelectionService;
    }
    /* @ngInject */ ManagePageVersionService.prototype.createPageVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageUuid, componentData;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 1:
                        pageUuid = _a.sent();
                        componentData = this.getComponentDataForEditor(pageUuid, null);
                        return [2 /*return*/, this.genericEditorModalService.open(componentData, function (result) { return __awaiter(_this, void 0, void 0, function () {
                                var experience;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            experience = {
                                                versionId: result.uid
                                            };
                                            return [4 /*yield*/, this.experienceService.updateExperience(experience)];
                                        case 1:
                                            _a.sent();
                                            this.alertService.showSuccess('se.cms.versions.create.alert.success');
                                            this.pageVersionSelectionService.selectPageVersion(result);
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                }
            });
        });
    };
    /* @ngInject */ ManagePageVersionService.prototype.editPageVersion = function (versionDetails) {
        return __awaiter(this, void 0, void 0, function () {
            var pageUuid, componentData;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 1:
                        pageUuid = _a.sent();
                        componentData = this.getComponentDataForEditor(pageUuid, versionDetails);
                        return [2 /*return*/, this.genericEditorModalService.open(componentData, function (result) {
                                _this.pageVersionSelectionService.updatePageVersionDetails(result);
                            })];
                }
            });
        });
    };
    ManagePageVersionService.prototype.editPageVersion.$inject = ["versionDetails"];
    /* @ngInject */ ManagePageVersionService.prototype.deletePageVersion = function (versionId) {
        return __awaiter(this, void 0, void 0, function () {
            var pageUuid, selectedVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 1:
                        pageUuid = _a.sent();
                        return [4 /*yield*/, this.confirmationModalService.confirm({
                                title: 'se.cms.actionitem.page.version.delete.confirmation.title',
                                description: 'se.cms.actionitem.page.version.delete.confirmation.description'
                            })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.pageVersioningService.deletePageVersion(pageUuid, versionId)];
                    case 3:
                        _a.sent();
                        this.alertService.showSuccess('se.cms.versions.delete.alert.success');
                        selectedVersion = this.pageVersionSelectionService.getSelectedPageVersion();
                        if (!(selectedVersion && selectedVersion.uid === versionId)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.experienceService.updateExperience()];
                    case 4:
                        _a.sent();
                        this.pageVersionSelectionService.deselectPageVersion();
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ManagePageVersionService.prototype.deletePageVersion.$inject = ["versionId"];
    /**
     * Returns an object that contains the information to be displayed and edited in the modal.
     *
     * @param pageUuid the uuid of the page.
     * @param content the content to be populated in the editor, null for create mode.
     */
    /* @ngInject */ ManagePageVersionService.prototype.getComponentDataForEditor = function (pageUuid, content) {
        var componentData = {
            title: content ? 'se.cms.versions.edit' : 'se.cms.versions.create',
            structure: {
                attributes: [
                    {
                        cmsStructureType: 'ShortString',
                        qualifier: 'label',
                        i18nKey: 'se.cms.versions.editor.label.name',
                        required: true
                    },
                    {
                        cmsStructureType: 'ShortString',
                        qualifier: 'description',
                        i18nKey: 'se.cms.versions.editor.description.name'
                    }
                ]
            },
            contentApi: this.pageVersioningService.getResourceURI().replace(':pageUuid', pageUuid)
        };
        if (content) {
            componentData.content = content;
            componentData.componentUuid = content.uid;
            componentData.componentType = 'versioning';
        }
        return componentData;
    };
    ManagePageVersionService.prototype.getComponentDataForEditor.$inject = ["pageUuid", "content"];
    /* @ngInject */ ManagePageVersionService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.IAlertService,
            smarteditcommons.IExperienceService,
            smarteditcommons.IConfirmationModalService,
            GenericEditorModalService,
            smarteditcommons.IPageInfoService,
            PageVersioningService,
            PageVersionSelectionService])
    ], /* @ngInject */ ManagePageVersionService);
    return /* @ngInject */ ManagePageVersionService;
}());

/**
 * This service is used to rollback a page version from the toolbar context.
 */
var /* @ngInject */ RollbackPageVersionService = /** @class */ (function () {
    RollbackPageVersionService.$inject = ["logService", "alertService", "confirmationModalService", "experienceService", "pageInfoService", "pageVersioningService", "pageVersionSelectionService", "systemEventService"];
    function /* @ngInject */ RollbackPageVersionService(logService, alertService, confirmationModalService, experienceService, pageInfoService, pageVersioningService, pageVersionSelectionService, systemEventService) {
        this.logService = logService;
        this.alertService = alertService;
        this.confirmationModalService = confirmationModalService;
        this.experienceService = experienceService;
        this.pageInfoService = pageInfoService;
        this.pageVersioningService = pageVersioningService;
        this.pageVersionSelectionService = pageVersionSelectionService;
        this.systemEventService = systemEventService;
    }
    /* @ngInject */ RollbackPageVersionService.prototype.rollbackPageVersion = function (version) {
        return __awaiter(this, void 0, void 0, function () {
            var pageVersion, TRANSLATE_NS, pageUuid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pageVersion = version || this.pageVersionSelectionService.getSelectedPageVersion();
                        if (!!!pageVersion) return [3 /*break*/, 4];
                        TRANSLATE_NS = 'se.cms.actionitem.page.version.rollback.confirmation';
                        return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 1:
                        pageUuid = _a.sent();
                        return [4 /*yield*/, this.showConfirmationModal(pageVersion.label, TRANSLATE_NS)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.performRollback(pageUuid, pageVersion)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    RollbackPageVersionService.prototype.rollbackPageVersion.$inject = ["version"];
    // Warning! This method is patched in personalization module, be careful when modifying it.
    /* @ngInject */ RollbackPageVersionService.prototype.showConfirmationModal = function (versionLabel, translateNs) {
        return this.confirmationModalService.confirm({
            title: translateNs + ".title",
            description: translateNs + ".description",
            descriptionPlaceholders: {
                versionLabel: versionLabel
            }
        });
    };
    RollbackPageVersionService.prototype.showConfirmationModal.$inject = ["versionLabel", "translateNs"];
    /* @ngInject */ RollbackPageVersionService.prototype.performRollback = function (pageUuid, pageVersion) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.pageVersioningService.rollbackPageVersion(pageUuid, pageVersion.uid)];
                    case 1:
                        _b.sent();
                        // invalidate the content catalog cache: a rollback of a page could replace the existing homepage.
                        this.systemEventService.publishAsync(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE);
                        this.alertService.showSuccess('se.cms.versions.rollback.alert.success');
                        // reload experience
                        return [4 /*yield*/, this.experienceService.updateExperience({})];
                    case 2:
                        // reload experience
                        _b.sent();
                        this.pageVersionSelectionService.deselectPageVersion(false);
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        this.logService.error('RollbackPageVersionService::performRollback - unable to perform page rollback');
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    RollbackPageVersionService.prototype.performRollback.$inject = ["pageUuid", "pageVersion"];
    /* @ngInject */ RollbackPageVersionService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.LogService,
            smarteditcommons.IAlertService,
            smarteditcommons.IConfirmationModalService,
            smarteditcommons.IExperienceService,
            smarteditcommons.IPageInfoService,
            PageVersioningService,
            PageVersionSelectionService,
            smarteditcommons.SystemEventService])
    ], /* @ngInject */ RollbackPageVersionService);
    return /* @ngInject */ RollbackPageVersionService;
}());

window.__smartedit__.addDecoratorPayload("Component", "VersionItemContextComponent", {
    selector: 'se-version-item-context',
    template: "<div class=\"se-version-item-context\"><span class=\"sap-icon--navigation-right-arrow\"></span><se-tooltip *ngIf=\"(pageVersion$ | async) as pageVersion\" [triggers]=\"['mouseenter', 'mouseleave']\" [placement]=\"'bottom'\" [isChevronVisible]=\"true\"><div se-tooltip-trigger class=\"se-version-item-context__info\"><div class=\"se-version-item-context__info-label\" [title]=\"pageVersion.label\">{{ pageVersion.label }}</div><div class=\"se-version-item-context__info-date\">{{ pageVersion.creationtime | date: 'M/d/yy h:mm a' }}</div></div><div se-tooltip-body class=\"se-version-item-context__description-wrapper\"><span class=\"se-version-item-context__description\">{{ pageVersion.description || (EMPTY_DESCRIPTION_MSG_KEY | translate) }}</span></div></se-tooltip><button type=\"button\" (click)=\"deselectPageVersion()\" class=\"se-version-item-context__remove-btn fd-button--light sap-icon--decline\"></button></div>",
    styles: [".se-version-item-context{display:flex;flex-direction:row;align-items:center;height:40px;border-right:1px solid #d9d9d9}.se-version-item-context .sap-icon--navigation-right-arrow{padding-right:12px;color:#51555a}.se-version-item-context__info{display:flex;flex-direction:column}.se-version-item-context__info-label{font-weight:700;font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;max-width:90px}.se-version-item-context__info-date{color:#6a6d70;font-size:.8571428571rem;line-height:1.3333333333;font-weight:400}.se-version-item-context__remove-btn{padding:0;margin:8px;min-width:20px;height:20px;color:#32363a;background:0 0;border:transparent;line-height:1}.se-version-item-context__remove-btn::before{margin:0!important}.se-version-item-context__description-wrapper{word-wrap:break-word}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ VersionItemContextComponent = /** @class */ (function () {
    VersionItemContextComponent.$inject = ["pageVersionSelectionService"];
    function /* @ngInject */ VersionItemContextComponent(pageVersionSelectionService) {
        this.pageVersionSelectionService = pageVersionSelectionService;
        this.EMPTY_DESCRIPTION_MSG_KEY = 'se.cms.versions.no.description';
    }
    /* @ngInject */ VersionItemContextComponent.prototype.ngOnInit = function () {
        this.pageVersion$ = this.pageVersionSelectionService.getSelectedPageVersion$();
        this.pageVersionSelectionService.hideToolbarContextIfNotNeeded();
    };
    /* @ngInject */ VersionItemContextComponent.prototype.deselectPageVersion = function () {
        this.pageVersionSelectionService.deselectPageVersion();
    };
    /* @ngInject */ VersionItemContextComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-version-item-context',
            template: "<div class=\"se-version-item-context\"><span class=\"sap-icon--navigation-right-arrow\"></span><se-tooltip *ngIf=\"(pageVersion$ | async) as pageVersion\" [triggers]=\"['mouseenter', 'mouseleave']\" [placement]=\"'bottom'\" [isChevronVisible]=\"true\"><div se-tooltip-trigger class=\"se-version-item-context__info\"><div class=\"se-version-item-context__info-label\" [title]=\"pageVersion.label\">{{ pageVersion.label }}</div><div class=\"se-version-item-context__info-date\">{{ pageVersion.creationtime | date: 'M/d/yy h:mm a' }}</div></div><div se-tooltip-body class=\"se-version-item-context__description-wrapper\"><span class=\"se-version-item-context__description\">{{ pageVersion.description || (EMPTY_DESCRIPTION_MSG_KEY | translate) }}</span></div></se-tooltip><button type=\"button\" (click)=\"deselectPageVersion()\" class=\"se-version-item-context__remove-btn fd-button--light sap-icon--decline\"></button></div>",
            styles: [".se-version-item-context{display:flex;flex-direction:row;align-items:center;height:40px;border-right:1px solid #d9d9d9}.se-version-item-context .sap-icon--navigation-right-arrow{padding-right:12px;color:#51555a}.se-version-item-context__info{display:flex;flex-direction:column}.se-version-item-context__info-label{font-weight:700;font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;max-width:90px}.se-version-item-context__info-date{color:#6a6d70;font-size:.8571428571rem;line-height:1.3333333333;font-weight:400}.se-version-item-context__remove-btn{padding:0;margin:8px;min-width:20px;height:20px;color:#32363a;background:0 0;border:transparent;line-height:1}.se-version-item-context__remove-btn::before{margin:0!important}.se-version-item-context__description-wrapper{word-wrap:break-word}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [PageVersionSelectionService])
    ], /* @ngInject */ VersionItemContextComponent);
    return /* @ngInject */ VersionItemContextComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "VersionItemComponent", {
    selector: 'se-version-item',
    template: "<div class=\"se-version-item\" [ngClass]=\"{ 'se-version-item--selected': isSelectedVersion() }\"><div class=\"se-version-item__header\" [title]=\"pageVersion.label\"><button class=\"se-version-item__label se-button--text\" (click)=\"selectVersion()\">{{ pageVersion.label }}</button><se-version-item-menu *ngIf=\"isVersionMenuEnabled()\" [item]=\"pageVersion\"></se-version-item-menu></div><div class=\"se-version-item__date\">{{ pageVersion.creationtime | date: 'M/d/yy h:mm a' }}</div><div class=\"se-version-item__description\" *ngIf=\"pageVersion.description\"><se-more-text class=\"se-version-item__description-text\" [text]=\"pageVersion.description\" [limit]=\"32\" [ellipsis]=\"'...'\" [capitalizeLabel]=\"true\"></se-more-text></div></div>",
    styles: [":host(.se-version-item--last) .se-version-item{border-bottom:none}.se-version-item{padding:10px 20px;border-bottom:1px solid #d9d9d9}.se-version-item:hover{background-color:#fafafa}.se-version-item--selected{background-color:rgba(10,110,209,.07)}.se-version-item--selected:hover{background-color:rgba(10,110,209,.1)}.se-version-item__header{display:flex;flex-direction:row;align-items:center;justify-content:space-between}.se-version-item__label{font-weight:700;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;max-width:225px;color:#0a6ed1}.se-version-item__date{color:#6a6d70}.se-version-item__description{display:flex;flex-direction:row;align-items:center;max-width:260px}.se-version-item__description-text{padding-right:2px;width:230px;word-break:break-all;white-space:normal}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ VersionItemComponent = /** @class */ (function () {
    VersionItemComponent.$inject = ["pageVersionSelectionService", "perspectiveService", "cMSModesService"];
    function /* @ngInject */ VersionItemComponent(pageVersionSelectionService, perspectiveService, cMSModesService) {
        this.pageVersionSelectionService = pageVersionSelectionService;
        this.perspectiveService = perspectiveService;
        this.cMSModesService = cMSModesService;
        this.VERSIONING_MODE_KEY = cmscommons.CMSModesService.VERSIONING_PERSPECTIVE_KEY;
    }
    /* @ngInject */ VersionItemComponent.prototype.selectVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isVersioningModeActive;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cMSModesService.isVersioningPerspectiveActive()];
                    case 1:
                        isVersioningModeActive = _a.sent();
                        if (!isVersioningModeActive) {
                            this.perspectiveService.switchTo(this.VERSIONING_MODE_KEY);
                        }
                        this.pageVersionSelectionService.selectPageVersion(this.pageVersion);
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ VersionItemComponent.prototype.isSelectedVersion = function () {
        var selectedVersion = this.pageVersionSelectionService.getSelectedPageVersion();
        return selectedVersion && selectedVersion.uid === this.pageVersion.uid;
    };
    /* @ngInject */ VersionItemComponent.prototype.isVersionMenuEnabled = function () {
        var activePerspective = this.perspectiveService.getActivePerspective();
        return activePerspective && activePerspective.key === this.VERSIONING_MODE_KEY;
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ VersionItemComponent.prototype, "pageVersion", void 0);
    /* @ngInject */ VersionItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-version-item',
            template: "<div class=\"se-version-item\" [ngClass]=\"{ 'se-version-item--selected': isSelectedVersion() }\"><div class=\"se-version-item__header\" [title]=\"pageVersion.label\"><button class=\"se-version-item__label se-button--text\" (click)=\"selectVersion()\">{{ pageVersion.label }}</button><se-version-item-menu *ngIf=\"isVersionMenuEnabled()\" [item]=\"pageVersion\"></se-version-item-menu></div><div class=\"se-version-item__date\">{{ pageVersion.creationtime | date: 'M/d/yy h:mm a' }}</div><div class=\"se-version-item__description\" *ngIf=\"pageVersion.description\"><se-more-text class=\"se-version-item__description-text\" [text]=\"pageVersion.description\" [limit]=\"32\" [ellipsis]=\"'...'\" [capitalizeLabel]=\"true\"></se-more-text></div></div>",
            styles: [":host(.se-version-item--last) .se-version-item{border-bottom:none}.se-version-item{padding:10px 20px;border-bottom:1px solid #d9d9d9}.se-version-item:hover{background-color:#fafafa}.se-version-item--selected{background-color:rgba(10,110,209,.07)}.se-version-item--selected:hover{background-color:rgba(10,110,209,.1)}.se-version-item__header{display:flex;flex-direction:row;align-items:center;justify-content:space-between}.se-version-item__label{font-weight:700;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;max-width:225px;color:#0a6ed1}.se-version-item__date{color:#6a6d70}.se-version-item__description{display:flex;flex-direction:row;align-items:center;max-width:260px}.se-version-item__description-text{padding-right:2px;width:230px;word-break:break-all;white-space:normal}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [PageVersionSelectionService,
            smarteditcommons.IPerspectiveService,
            cmscommons.CMSModesService])
    ], /* @ngInject */ VersionItemComponent);
    return /* @ngInject */ VersionItemComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "VersionItemMenuComponent", {
    selector: 'se-version-item-menu',
    template: "<se-popup-overlay class=\"se-version-item-menu__popup-anchor\" [ngClass]=\"{ 'se-version-item-menu__popup-anchor--open': isMenuOpen }\" [popupOverlay]=\"popupConfig\" [popupOverlayTrigger]=\"isMenuOpen\" (popupOverlayOnHide)=\"hideMenu()\"><div *ngIf=\"menuItems.length > 0\" (click)=\"onButtonClick($event)\" class=\"sap-icon--overflow se-version-item-menu__toggle\"></div><div se-popup-overlay-body class=\"se-version-item-menu fd-menu\"><div class=\"se-version-item-menu__item fd-menu__list\" *ngFor=\"let item of menuItems\" (click)=\"executeItemCallback(item)\"><span class=\"se-version-item-menu__item-link fd-menu__item\">{{ item.i18nKey | translate }}</span></div></div></se-popup-overlay>",
    styles: [".se-version-item-menu{box-shadow:0 6px 12px rgba(0,0,0,.175);background-color:#fff;border-radius:4px!important;min-width:100px;width:fit-content;position:absolute;border:1px solid #d9d9d9;z-index:2000;top:96%;left:initial!important;right:0;transform:translate(5px,8px);right:-11px;top:-8px}.se-version-item-menu::before{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#d9d9d9;border-bottom-color:var(var(--fd-color-neutral-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-8px}.se-version-item-menu::after{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#fff;border-bottom-color:var(var(--fd-color-background-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-7px}.se-version-item-menu::after,.se-version-item-menu::before{right:10px}.se-version-item-menu::after,.se-version-item-menu::before{display:none}.se-version-item-menu__item:last-child .se-version-item-menu__item-link{color:#b00}.se-version-item-menu__popup-anchor{display:flex;flex-direction:row;align-items:center;justify-content:center;font-size:1.1428571429rem;line-height:1.25;font-weight:400}.se-version-item-menu__toggle{height:20px;width:20px;cursor:pointer}.sap-icon--overflow{color:#0a6ed1}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ VersionItemMenuComponent = /** @class */ (function () {
    VersionItemMenuComponent.$inject = ["managePageVersionService", "pageVersionSelectionService", "rollbackPageVersionService", "permissionService", "cdr"];
    function /* @ngInject */ VersionItemMenuComponent(managePageVersionService, pageVersionSelectionService, rollbackPageVersionService, permissionService, cdr) {
        this.managePageVersionService = managePageVersionService;
        this.pageVersionSelectionService = pageVersionSelectionService;
        this.rollbackPageVersionService = rollbackPageVersionService;
        this.permissionService = permissionService;
        this.cdr = cdr;
        this.menuItems = [];
        this.popupConfig = {
            halign: 'left',
            valign: 'bottom'
        };
        this.isMenuOpen = false;
    }
    /* @ngInject */ VersionItemMenuComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.getPermittedButtons(this.getButtonsConfiguration())];
                    case 1:
                        _a.menuItems = _b.sent();
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ VersionItemMenuComponent.prototype.onButtonClick = function (event) {
        event.stopPropagation();
        this.isMenuOpen = !this.isMenuOpen;
    };
    VersionItemMenuComponent.prototype.onButtonClick.$inject = ["event"];
    /* @ngInject */ VersionItemMenuComponent.prototype.hideMenu = function () {
        this.isMenuOpen = false;
    };
    /* @ngInject */ VersionItemMenuComponent.prototype.executeItemCallback = function (menuItem) {
        menuItem.callback(this.item);
        this.hideMenu();
    };
    VersionItemMenuComponent.prototype.executeItemCallback.$inject = ["menuItem"];
    /* @ngInject */ VersionItemMenuComponent.prototype.getPermittedButtons = function (menuItemsConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var buttonsPermissions, permissions;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        buttonsPermissions = menuItemsConfig.map(function (menuItem) {
                            return _this.permissionService.isPermitted([
                                {
                                    names: menuItem.permissions
                                }
                            ]);
                        });
                        return [4 /*yield*/, Promise.all(buttonsPermissions)];
                    case 1:
                        permissions = _a.sent();
                        return [2 /*return*/, menuItemsConfig.filter(function (_menuItem, index) { return permissions[index]; })];
                }
            });
        });
    };
    VersionItemMenuComponent.prototype.getPermittedButtons.$inject = ["menuItemsConfig"];
    /* @ngInject */ VersionItemMenuComponent.prototype.getButtonsConfiguration = function () {
        var _this = this;
        return [
            {
                i18nKey: 'se.cms.version.item.menu.view.label',
                callback: function (versionItem) { return _this.viewItemCallback(versionItem); },
                permissions: ['se.version.page']
            },
            {
                i18nKey: 'se.cms.version.item.menu.edit.label',
                callback: function (versionItem) { return _this.editItemCallback(versionItem); },
                permissions: ['se.edit.version.page']
            },
            {
                i18nKey: 'se.cms.version.item.menu.rollback.label',
                callback: function (versionItem) {
                    return _this.rollbackItemCallback(versionItem);
                },
                permissions: ['se.rollback.version.page.versions.menu']
            },
            {
                i18nKey: 'se.cms.version.item.menu.delete.label',
                callback: function (versionItem) { return _this.deleteItemCallback(versionItem); },
                permissions: ['se.delete.version.page']
            }
        ];
    };
    /* @ngInject */ VersionItemMenuComponent.prototype.deleteItemCallback = function (versionItem) {
        this.managePageVersionService.deletePageVersion(versionItem.uid);
    };
    VersionItemMenuComponent.prototype.deleteItemCallback.$inject = ["versionItem"];
    /* @ngInject */ VersionItemMenuComponent.prototype.editItemCallback = function (versionItem) {
        this.managePageVersionService.editPageVersion(versionItem);
    };
    VersionItemMenuComponent.prototype.editItemCallback.$inject = ["versionItem"];
    /* @ngInject */ VersionItemMenuComponent.prototype.viewItemCallback = function (versionItem) {
        this.pageVersionSelectionService.selectPageVersion(versionItem);
    };
    VersionItemMenuComponent.prototype.viewItemCallback.$inject = ["versionItem"];
    /* @ngInject */ VersionItemMenuComponent.prototype.rollbackItemCallback = function (versionItem) {
        this.rollbackPageVersionService.rollbackPageVersion(versionItem);
    };
    VersionItemMenuComponent.prototype.rollbackItemCallback.$inject = ["versionItem"];
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ VersionItemMenuComponent.prototype, "item", void 0);
    /* @ngInject */ VersionItemMenuComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-version-item-menu',
            template: "<se-popup-overlay class=\"se-version-item-menu__popup-anchor\" [ngClass]=\"{ 'se-version-item-menu__popup-anchor--open': isMenuOpen }\" [popupOverlay]=\"popupConfig\" [popupOverlayTrigger]=\"isMenuOpen\" (popupOverlayOnHide)=\"hideMenu()\"><div *ngIf=\"menuItems.length > 0\" (click)=\"onButtonClick($event)\" class=\"sap-icon--overflow se-version-item-menu__toggle\"></div><div se-popup-overlay-body class=\"se-version-item-menu fd-menu\"><div class=\"se-version-item-menu__item fd-menu__list\" *ngFor=\"let item of menuItems\" (click)=\"executeItemCallback(item)\"><span class=\"se-version-item-menu__item-link fd-menu__item\">{{ item.i18nKey | translate }}</span></div></div></se-popup-overlay>",
            styles: [".se-version-item-menu{box-shadow:0 6px 12px rgba(0,0,0,.175);background-color:#fff;border-radius:4px!important;min-width:100px;width:fit-content;position:absolute;border:1px solid #d9d9d9;z-index:2000;top:96%;left:initial!important;right:0;transform:translate(5px,8px);right:-11px;top:-8px}.se-version-item-menu::before{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#d9d9d9;border-bottom-color:var(var(--fd-color-neutral-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-8px}.se-version-item-menu::after{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#fff;border-bottom-color:var(var(--fd-color-background-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-7px}.se-version-item-menu::after,.se-version-item-menu::before{right:10px}.se-version-item-menu::after,.se-version-item-menu::before{display:none}.se-version-item-menu__item:last-child .se-version-item-menu__item-link{color:#b00}.se-version-item-menu__popup-anchor{display:flex;flex-direction:row;align-items:center;justify-content:center;font-size:1.1428571429rem;line-height:1.25;font-weight:400}.se-version-item-menu__toggle{height:20px;width:20px;cursor:pointer}.sap-icon--overflow{color:#0a6ed1}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [ManagePageVersionService,
            PageVersionSelectionService,
            RollbackPageVersionService,
            smarteditcommons.IPermissionService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ VersionItemMenuComponent);
    return /* @ngInject */ VersionItemMenuComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "VersionsSearchComponent", {
    selector: 'se-versions-search',
    template: "<div class=\"se-versions-panel__search\" *ngIf=\"showSearchControls\"><div class=\"se-input-group\"><input type=\"text\" class=\"se-input-group__input-area\" name=\"search-term\" [ngModel]=\"searchTerm\" (ngModelChange)=\"onChange($event)\" [placeholder]=\"'se.cms.versions.search.placeholder' | translate\"/> <span class=\"sap-icon--search se-input-group__addon\"></span> <button class=\"se-input-group__addon se-input-group__clear-btn se-button--text\" [style.visibility]=\"showResetButton ? 'visible' : 'hidden'\" (click)=\"resetSearchBox()\"><span class=\"sap-icon--decline\"></span></button></div><span class=\"se-versions-panel__count\" [translate]=\"'se.cms.versions.search.versions.found'\" [translateParams]=\"{ versionsFound: versionsFoundCount }\"></span></div>",
    styles: [".se-versions-panel__search{display:flex;flex-direction:row;align-items:center;justify-content:space-between;padding:8px 20px;border-bottom:1px solid #d9d9d9}.se-versions-panel__count{display:flex;flex-direction:row;align-items:center;font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;white-space:nowrap}.se-input-group{flex-grow:1;margin-right:16px}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ VersionsSearchComponent = /** @class */ (function () {
    function /* @ngInject */ VersionsSearchComponent() {
        this.searchTermChange = new core.EventEmitter();
        this.showResetButton = false;
    }
    /* @ngInject */ VersionsSearchComponent.prototype.ngOnInit = function () {
        this.initSearchInputFilter();
    };
    /* @ngInject */ VersionsSearchComponent.prototype.ngOnDestroy = function () {
        this.searchTermSubscription.unsubscribe();
    };
    /* @ngInject */ VersionsSearchComponent.prototype.onChange = function (value) {
        this.searchTermSubject.next(value);
    };
    VersionsSearchComponent.prototype.onChange.$inject = ["value"];
    /* @ngInject */ VersionsSearchComponent.prototype.resetSearchBox = function () {
        this.setSearchTermAndEmit('');
    };
    /* @ngInject */ VersionsSearchComponent.prototype.initSearchInputFilter = function () {
        var _this = this;
        this.searchTermSubject = new rxjs.Subject();
        this.searchTerm$ = this.searchTermSubject
            .asObservable()
            .pipe(operators.debounceTime(500), operators.distinctUntilChanged());
        this.searchTermSubscription = this.searchTerm$.subscribe(function (value) {
            return _this.setSearchTermAndEmit(value);
        });
    };
    /* @ngInject */ VersionsSearchComponent.prototype.setSearchTermAndEmit = function (value) {
        this.searchTerm = value;
        this.showResetButton = this.searchTerm !== '';
        this.searchTermChange.emit(this.searchTerm);
    };
    VersionsSearchComponent.prototype.setSearchTermAndEmit.$inject = ["value"];
    __decorate([
        core.Input(),
        __metadata("design:type", Number)
    ], /* @ngInject */ VersionsSearchComponent.prototype, "versionsFoundCount", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ VersionsSearchComponent.prototype, "showSearchControls", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", Object)
    ], /* @ngInject */ VersionsSearchComponent.prototype, "searchTermChange", void 0);
    /* @ngInject */ VersionsSearchComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-versions-search',
            template: "<div class=\"se-versions-panel__search\" *ngIf=\"showSearchControls\"><div class=\"se-input-group\"><input type=\"text\" class=\"se-input-group__input-area\" name=\"search-term\" [ngModel]=\"searchTerm\" (ngModelChange)=\"onChange($event)\" [placeholder]=\"'se.cms.versions.search.placeholder' | translate\"/> <span class=\"sap-icon--search se-input-group__addon\"></span> <button class=\"se-input-group__addon se-input-group__clear-btn se-button--text\" [style.visibility]=\"showResetButton ? 'visible' : 'hidden'\" (click)=\"resetSearchBox()\"><span class=\"sap-icon--decline\"></span></button></div><span class=\"se-versions-panel__count\" [translate]=\"'se.cms.versions.search.versions.found'\" [translateParams]=\"{ versionsFound: versionsFoundCount }\"></span></div>",
            styles: [".se-versions-panel__search{display:flex;flex-direction:row;align-items:center;justify-content:space-between;padding:8px 20px;border-bottom:1px solid #d9d9d9}.se-versions-panel__count{display:flex;flex-direction:row;align-items:center;font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;white-space:nowrap}.se-input-group{flex-grow:1;margin-right:16px}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        })
    ], /* @ngInject */ VersionsSearchComponent);
    return /* @ngInject */ VersionsSearchComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "VersionsPanelComponent", {
    selector: 'se-versions-panel',
    template: "<div class=\"se-toolbar-menu-content--wrapper\"><div class=\"se-toolbar-menu-content__header\"><div class=\"se-toolbar-menu-content__header-title\" translate=\"se.cms.actionitem.page.versions\"></div><button class=\"se-versions-panel__manage-btn fd-button fd-button--compact\" *ngIf=\"showManageButton\" (click)=\"switchToVersioningMode()\" translate=\"se.cms.toolbaritem.versioning.manageversions.name\"></button></div><div class=\"se-versions-toolbar-menu-content__body\" [ngClass]=\"{ 'se-versions-toolbar-menu-content__body--narrow': showManageButton }\"><se-versions-search [versionsFoundCount]=\"versionsFound\" [showSearchControls]=\"pageHasVersions()\" (searchTermChange)=\"onSearchTermChanged($event)\"></se-versions-search><div><se-infinite-scrolling class=\"se-versions-panel__infinite-scroll\" *ngIf=\"pageHasVersionsOrIsLoading()\" [pageSize]=\"10\" [mask]=\"searchTerm\" [fetchPage]=\"fetchPageOfVersions\" (itemsChange)=\"onVersionItemsLoaded($event)\"><div *ngFor=\"let item of versionItems; let isLast = last\"><se-version-item [ngClass]=\"{ 'se-version-item--last': isLast }\" [pageVersion]=\"item\"></se-version-item></div></se-infinite-scrolling><div class=\"se-versions-panel__empty-list\" *ngIf=\"!pageHasVersionsOrIsLoading()\"><img src=\"static-resources/images/emptyVersions.svg\" alt=\"no versions\"/> <span class=\"se-versions-panel__no-versions-message\" translate=\"se.cms.toolbaritem.versioning.noversionsfound\"></span> <a class=\"se-versions-panel__manage-link fd-link\" *ngIf=\"showManageLink\" (click)=\"switchToVersioningMode()\" translate=\"se.cms.toolbaritem.versioning.manageversionslink.name\"></a></div></div></div></div>",
    styles: [".se-versions-panel .se-toolbar-menu-content__header{padding:20px;display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;height:53px;padding-top:15px;height:48px}.se-versions-panel .se-toolbar-menu-content__header:first-child{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-versions-panel .se-versions-toolbar-menu-content__body .se-infinite-scrolling__container{width:340px;max-height:350px;overflow-y:auto;margin-bottom:8px}.se-versions-panel .se-versions-toolbar-menu-content__body--narrow .se-infinite-scrolling__container{width:300px}.se-versions-panel__empty-list{display:flex;flex-direction:column;align-items:center;color:#51555a;width:280px;padding:20px}.se-versions-panel__no-versions-message{padding:8px 0 4px}.se-versions-panel__manage-link{margin-bottom:20px;cursor:pointer}.se-versions-panel__manage-link:hover{text-decoration:none}"],
    encapsulation: core.ViewEncapsulation.None,
    host: {
        '[class.se-versions-panel]': 'true'
    },
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ VersionsPanelComponent = /** @class */ (function () {
    VersionsPanelComponent.$inject = ["pageVersioningService", "perspectiveService", "logService", "cdr"];
    function /* @ngInject */ VersionsPanelComponent(pageVersioningService, perspectiveService, logService, cdr) {
        var _this = this;
        this.pageVersioningService = pageVersioningService;
        this.perspectiveService = perspectiveService;
        this.logService = logService;
        this.cdr = cdr;
        this.switchMode = new core.EventEmitter();
        this.searchTerm = '';
        this.totalPageVersions = 0;
        this.isLoading = true;
        this.VERSIONING_MODE_KEY = cmscommons.CMSModesService.VERSIONING_PERSPECTIVE_KEY;
        this.fetchPageOfVersions = function (search, pageSize, currentPage) { return _this.loadVersions(search, pageSize, currentPage); };
    }
    /* @ngInject */ VersionsPanelComponent.prototype.ngOnInit = function () {
        this.showManageLink = this.canShowManageLink();
    };
    /* @ngInject */ VersionsPanelComponent.prototype.onVersionItemsLoaded = function (versionItems) {
        this.versionItems = versionItems;
    };
    VersionsPanelComponent.prototype.onVersionItemsLoaded.$inject = ["versionItems"];
    /* @ngInject */ VersionsPanelComponent.prototype.onSearchTermChanged = function (newSearchTerm) {
        this.searchTerm = newSearchTerm;
    };
    VersionsPanelComponent.prototype.onSearchTermChanged.$inject = ["newSearchTerm"];
    /* @ngInject */ VersionsPanelComponent.prototype.switchToVersioningMode = function () {
        this.perspectiveService.switchTo(this.VERSIONING_MODE_KEY);
        this.switchMode.emit();
    };
    /* @ngInject */ VersionsPanelComponent.prototype.pageHasVersions = function () {
        return this.totalPageVersions > 0;
    };
    /* @ngInject */ VersionsPanelComponent.prototype.pageHasVersionsOrIsLoading = function () {
        return this.pageHasVersions() || this.isLoading;
    };
    /* @ngInject */ VersionsPanelComponent.prototype.canShowManageButton = function () {
        return this.showManageLink && this.pageHasVersions();
    };
    /* @ngInject */ VersionsPanelComponent.prototype.canShowManageLink = function () {
        var activePerspective = this.perspectiveService.getActivePerspective();
        return activePerspective && activePerspective.key !== this.VERSIONING_MODE_KEY;
    };
    /* @ngInject */ VersionsPanelComponent.prototype.loadVersions = function (mask, pageSize, currentPage) {
        return __awaiter(this, void 0, void 0, function () {
            var page, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.pageVersioningService.findPageVersions({
                                pageUuid: this.pageUuid,
                                currentPage: currentPage,
                                mask: mask,
                                pageSize: pageSize
                            })];
                    case 1:
                        page = _b.sent();
                        this.versionsFound = page.pagination.totalCount;
                        if (this.isLoading) {
                            this.isLoading = false;
                            this.totalPageVersions = this.versionsFound;
                            this.showManageButton = this.canShowManageButton();
                        }
                        this.cdr.detectChanges();
                        return [2 /*return*/, page];
                    case 2:
                        _a = _b.sent();
                        this.logService.error("Cannot find page versions for page " + this.pageUuid + ".");
                        return [2 /*return*/, null];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    VersionsPanelComponent.prototype.loadVersions.$inject = ["mask", "pageSize", "currentPage"];
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ VersionsPanelComponent.prototype, "pageUuid", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", Object)
    ], /* @ngInject */ VersionsPanelComponent.prototype, "switchMode", void 0);
    /* @ngInject */ VersionsPanelComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-versions-panel',
            template: "<div class=\"se-toolbar-menu-content--wrapper\"><div class=\"se-toolbar-menu-content__header\"><div class=\"se-toolbar-menu-content__header-title\" translate=\"se.cms.actionitem.page.versions\"></div><button class=\"se-versions-panel__manage-btn fd-button fd-button--compact\" *ngIf=\"showManageButton\" (click)=\"switchToVersioningMode()\" translate=\"se.cms.toolbaritem.versioning.manageversions.name\"></button></div><div class=\"se-versions-toolbar-menu-content__body\" [ngClass]=\"{ 'se-versions-toolbar-menu-content__body--narrow': showManageButton }\"><se-versions-search [versionsFoundCount]=\"versionsFound\" [showSearchControls]=\"pageHasVersions()\" (searchTermChange)=\"onSearchTermChanged($event)\"></se-versions-search><div><se-infinite-scrolling class=\"se-versions-panel__infinite-scroll\" *ngIf=\"pageHasVersionsOrIsLoading()\" [pageSize]=\"10\" [mask]=\"searchTerm\" [fetchPage]=\"fetchPageOfVersions\" (itemsChange)=\"onVersionItemsLoaded($event)\"><div *ngFor=\"let item of versionItems; let isLast = last\"><se-version-item [ngClass]=\"{ 'se-version-item--last': isLast }\" [pageVersion]=\"item\"></se-version-item></div></se-infinite-scrolling><div class=\"se-versions-panel__empty-list\" *ngIf=\"!pageHasVersionsOrIsLoading()\"><img src=\"static-resources/images/emptyVersions.svg\" alt=\"no versions\"/> <span class=\"se-versions-panel__no-versions-message\" translate=\"se.cms.toolbaritem.versioning.noversionsfound\"></span> <a class=\"se-versions-panel__manage-link fd-link\" *ngIf=\"showManageLink\" (click)=\"switchToVersioningMode()\" translate=\"se.cms.toolbaritem.versioning.manageversionslink.name\"></a></div></div></div></div>",
            styles: [".se-versions-panel .se-toolbar-menu-content__header{padding:20px;display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;height:53px;padding-top:15px;height:48px}.se-versions-panel .se-toolbar-menu-content__header:first-child{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-versions-panel .se-versions-toolbar-menu-content__body .se-infinite-scrolling__container{width:340px;max-height:350px;overflow-y:auto;margin-bottom:8px}.se-versions-panel .se-versions-toolbar-menu-content__body--narrow .se-infinite-scrolling__container{width:300px}.se-versions-panel__empty-list{display:flex;flex-direction:column;align-items:center;color:#51555a;width:280px;padding:20px}.se-versions-panel__no-versions-message{padding:8px 0 4px}.se-versions-panel__manage-link{margin-bottom:20px;cursor:pointer}.se-versions-panel__manage-link:hover{text-decoration:none}"],
            encapsulation: core.ViewEncapsulation.None,
            host: {
                '[class.se-versions-panel]': 'true'
            },
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [PageVersioningService,
            smarteditcommons.IPerspectiveService,
            smarteditcommons.LogService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ VersionsPanelComponent);
    return /* @ngInject */ VersionsPanelComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageVersionMenuComponent", {
    selector: 'se-page-version-menu',
    template: "\n        <div\n            class=\"se-toolbar-menu-content se-toolbar-menu-content--versions\"\n            *ngIf=\"actionItem.isOpen\"\n        >\n            <se-versions-panel\n                *ngIf=\"pageUuid\"\n                [pageUuid]=\"pageUuid\"\n                (switchMode)=\"onSwitchMode()\"\n            ></se-versions-panel>\n        </div>\n    "
});
var /* @ngInject */ PageVersionMenuComponent = /** @class */ (function () {
    PageVersionMenuComponent.$inject = ["pageInfoService", "pageVersionSelectionService", "actionItem"];
    function /* @ngInject */ PageVersionMenuComponent(pageInfoService, pageVersionSelectionService, actionItem) {
        this.pageInfoService = pageInfoService;
        this.pageVersionSelectionService = pageVersionSelectionService;
        this.actionItem = actionItem;
    }
    /* @ngInject */ PageVersionMenuComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.pageVersionSelectionService.showToolbarContextIfNeeded();
                        _a = this;
                        return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 1:
                        _a.pageUuid = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageVersionMenuComponent.prototype.onSwitchMode = function () {
        this.actionItem.isOpen = false;
    };
    /* @ngInject */ PageVersionMenuComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-version-menu',
            template: "\n        <div\n            class=\"se-toolbar-menu-content se-toolbar-menu-content--versions\"\n            *ngIf=\"actionItem.isOpen\"\n        >\n            <se-versions-panel\n                *ngIf=\"pageUuid\"\n                [pageUuid]=\"pageUuid\"\n                (switchMode)=\"onSwitchMode()\"\n            ></se-versions-panel>\n        </div>\n    "
        }),
        __param(2, core.Inject(smarteditcommons.TOOLBAR_ITEM)),
        __metadata("design:paramtypes", [smarteditcommons.IPageInfoService,
            PageVersionSelectionService, Object])
    ], /* @ngInject */ PageVersionMenuComponent);
    return /* @ngInject */ PageVersionMenuComponent;
}());

var VersioningModule = /** @class */ (function () {
    function VersioningModule() {
    }
    VersioningModule = __decorate([
        core.NgModule({
            imports: [
                smarteditcommons.TranslationModule.forChild(),
                common.CommonModule,
                forms.FormsModule,
                smarteditcommons.TooltipModule,
                smarteditcommons.PopupOverlayModule,
                smarteditcommons.MoreTextModule,
                smarteditcommons.InfiniteScrollingModule
            ],
            declarations: [
                VersionItemContextComponent,
                VersionItemMenuComponent,
                VersionItemComponent,
                VersionsSearchComponent,
                VersionsPanelComponent,
                PageVersionMenuComponent
            ],
            entryComponents: [PageVersionMenuComponent, VersionItemContextComponent],
            providers: [
                PageVersioningService,
                PageVersionSelectionService,
                ManagePageVersionService,
                RollbackPageVersionService
            ]
        })
    ], VersioningModule);
    return VersioningModule;
}());

/**
 * This service is used to provide all the information necessary to properly display the Page Info Menu.
 */
var /* @ngInject */ PageInfoMenuService = /** @class */ (function () {
    PageInfoMenuService.$inject = ["displayConditionsFacade", "logService", "pageEditorModalService", "pageService", "pageVersionSelectionService", "translateService", "typeStructureRestService"];
    function /* @ngInject */ PageInfoMenuService(displayConditionsFacade, logService, pageEditorModalService, pageService, pageVersionSelectionService, translateService, typeStructureRestService) {
        this.displayConditionsFacade = displayConditionsFacade;
        this.logService = logService;
        this.pageEditorModalService = pageEditorModalService;
        this.pageService = pageService;
        this.pageVersionSelectionService = pageVersionSelectionService;
        this.translateService = translateService;
        this.typeStructureRestService = typeStructureRestService;
        this.ALL_RESTRICTIONS_CRITERIA_LABEL = 'se.cms.restrictions.criteria.all';
        this.ANY_RESTRICTIONS_CRITERIA_LABEL = 'se.cms.restrictions.criteria.any';
        this.isPageEditorOpened = false;
    }
    /* @ngInject */ PageInfoMenuService.prototype.openPageEditor = function (pageInfo) {
        var _this = this;
        if (lodash.isNil(pageInfo)) {
            this.logService.warn("[" + this.constructor.name + "] - Cannot open page editor. Provided page is empty.");
            return;
        }
        if (!this.isPageEditorOpened) {
            this.isPageEditorOpened = true;
            this.pageEditorModalService.open(pageInfo).finally(function () {
                _this.isPageEditorOpened = false;
            });
        }
    };
    PageInfoMenuService.prototype.openPageEditor.$inject = ["pageInfo"];
    /**
     * Retrieves the information for the current page and prepares it to be displayed in the Page Info Menu.
     */
    /* @ngInject */ PageInfoMenuService.prototype.getCurrentPageInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageInfo, primaryPageName, pageInfoForViewing, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.pageService.getCurrentPageInfoByVersion(this.getCurrentPageVersionId())];
                    case 1:
                        pageInfo = _b.sent();
                        return [4 /*yield*/, this.getPrimaryPageName(pageInfo)];
                    case 2:
                        primaryPageName = _b.sent();
                        pageInfo.template = pageInfo.masterTemplateId;
                        pageInfoForViewing = lodash.cloneDeep(pageInfo);
                        pageInfoForViewing.content = pageInfo;
                        pageInfoForViewing.primaryPage = primaryPageName;
                        pageInfoForViewing.localizedType = pageInfo.typeCode;
                        pageInfoForViewing.displayCondition = this.getPageDisplayCondition(pageInfo);
                        pageInfoForViewing.restrictionsCriteria = this.getPageRestrictionsCriteria(pageInfo);
                        // Note: In the previous implementation of the page info, there was a call to the catalog service to retrieve the URI context
                        // and assign it to the page content. However, that field doesn't seem to be in use anymore, so it was removed.
                        return [2 /*return*/, pageInfoForViewing];
                    case 3:
                        _a = _b.sent();
                        this.logService.warn("[" + this.constructor.name + "] - Cannot retrieve page info. Please try again later.");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieves the page structure and adapts the fields to match the order expected in the Page Info Menu.
     */
    /* @ngInject */ PageInfoMenuService.prototype.getPageStructureForViewing = function (pageTypeCode, isPrimaryPage) {
        return __awaiter(this, void 0, void 0, function () {
            var structureToMap, structure, fieldsInRightOrder, nameField, descriptionFlag, descriptionField, titleFlag, titleField, labelFlag, labelField, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.typeStructureRestService.getStructureByType(pageTypeCode)];
                    case 1:
                        structureToMap = _b.sent();
                        structure = structureToMap.map(function (field) { return (__assign(__assign({}, field), { editable: false })); });
                        // This method needs to ensure that the page structure contains only the fields needed for viewing and in the right order.
                        // The final list of attributes will have our fields in the right order. Any other fields in the structure, will appear at the end.
                        this.removeFieldFromStructure(structure, 'uid');
                        this.removeFieldFromStructure(structure, 'restrictions');
                        fieldsInRightOrder = [];
                        nameField = this.removeFieldFromStructure(structure, 'name');
                        nameField.cmsStructureType = 'InfoPageName';
                        this.addFieldToStructure(fieldsInRightOrder, nameField);
                        this.addFieldToStructure(fieldsInRightOrder, this.buildField('displayCondition'));
                        descriptionFlag = this.structureContainsItemByFieldQualifier(structure, 'description');
                        if (descriptionFlag) {
                            descriptionField = this.removeFieldFromStructure(structure, 'description');
                            descriptionField.cmsStructureType = 'InfoPageName';
                            this.addFieldToStructure(fieldsInRightOrder, descriptionField);
                        }
                        titleFlag = this.structureContainsItemByFieldQualifier(structure, 'title');
                        if (titleFlag) {
                            titleField = this.removeFieldFromStructure(structure, 'title');
                            titleField.cmsStructureType = 'InfoPageName';
                            this.addFieldToStructure(fieldsInRightOrder, titleField);
                        }
                        labelFlag = this.structureContainsItemByFieldQualifier(structure, 'label');
                        if (labelFlag) {
                            labelField = this.removeFieldFromStructure(structure, 'label');
                            labelField.cmsStructureType = 'InfoPageName';
                            this.addFieldToStructure(fieldsInRightOrder, labelField);
                        }
                        this.addFieldToStructure(fieldsInRightOrder, this.buildField('localizedType'));
                        this.addFieldToStructure(fieldsInRightOrder, this.buildField('template'));
                        if (!isPrimaryPage) {
                            this.addFieldToStructure(fieldsInRightOrder, this.buildField('primaryPage'));
                            this.addFieldToStructure(fieldsInRightOrder, this.buildField('restrictions', 'RestrictionsList'));
                        }
                        this.addFieldToStructure(fieldsInRightOrder, this.removeFieldFromStructure(structure, 'creationtime'));
                        this.addFieldToStructure(fieldsInRightOrder, this.removeFieldFromStructure(structure, 'modifiedtime'));
                        return [2 /*return*/, {
                                attributes: lodash.concat(fieldsInRightOrder, structure),
                                category: 'PAGE'
                            }];
                    case 2:
                        _a = _b.sent();
                        this.logService.warn("[" + this.constructor.name + "] - Cannot retrieve page info structure. Please try again later.");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PageInfoMenuService.prototype.getPageStructureForViewing.$inject = ["pageTypeCode", "isPrimaryPage"];
    // ------------------------------------------------------------------------
    // Helper Methods
    // ------------------------------------------------------------------------
    /* @ngInject */ PageInfoMenuService.prototype.addFieldToStructure = function (structure, field) {
        if (field) {
            structure.push(field);
        }
    };
    PageInfoMenuService.prototype.addFieldToStructure.$inject = ["structure", "field"];
    /* @ngInject */ PageInfoMenuService.prototype.buildField = function (qualifier, cmsStructureType) {
        if (cmsStructureType === void 0) { cmsStructureType = 'ShortString'; }
        return {
            cmsStructureType: cmsStructureType,
            qualifier: qualifier,
            i18nKey: 'se.cms.pageinfo.page.' + qualifier.toLocaleLowerCase(),
            editable: false
        };
    };
    PageInfoMenuService.prototype.buildField.$inject = ["qualifier", "cmsStructureType"];
    /* @ngInject */ PageInfoMenuService.prototype.structureContainsItemByFieldQualifier = function (structure, fieldQualifier) {
        return !!structure.find(function (item) { return item.qualifier === fieldQualifier; });
    };
    PageInfoMenuService.prototype.structureContainsItemByFieldQualifier.$inject = ["structure", "fieldQualifier"];
    /* @ngInject */ PageInfoMenuService.prototype.removeFieldFromStructure = function (structure, fieldQualifier) {
        var removedElements = lodash.remove(structure, function (field) { return field.qualifier === fieldQualifier; });
        return removedElements[0];
    };
    PageInfoMenuService.prototype.removeFieldFromStructure.$inject = ["structure", "fieldQualifier"];
    /* @ngInject */ PageInfoMenuService.prototype.getPrimaryPageName = function (pageInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var name_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isVariationPage(pageInfo)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.displayConditionsFacade.getPrimaryPageForVariationPage(pageInfo.uid)];
                    case 1:
                        name_1 = (_a.sent()).name;
                        return [2 /*return*/, name_1 || null];
                    case 2: return [2 /*return*/, null];
                }
            });
        });
    };
    PageInfoMenuService.prototype.getPrimaryPageName.$inject = ["pageInfo"];
    /* @ngInject */ PageInfoMenuService.prototype.isVariationPage = function (pageInfo) {
        return !pageInfo.defaultPage;
    };
    PageInfoMenuService.prototype.isVariationPage.$inject = ["pageInfo"];
    /* @ngInject */ PageInfoMenuService.prototype.getPageDisplayCondition = function (pageInfo) {
        var conditionTranslKey = this.isVariationPage(pageInfo)
            ? 'page.displaycondition.variation'
            : 'page.displaycondition.primary';
        return this.translateService.instant(conditionTranslKey);
    };
    PageInfoMenuService.prototype.getPageDisplayCondition.$inject = ["pageInfo"];
    /* @ngInject */ PageInfoMenuService.prototype.getPageRestrictionsCriteria = function (pageInfo) {
        if (this.isVariationPage(pageInfo) && pageInfo.onlyOneRestrictionMustApply !== undefined) {
            var criteriaTranslKey = pageInfo.onlyOneRestrictionMustApply
                ? this.ANY_RESTRICTIONS_CRITERIA_LABEL
                : this.ALL_RESTRICTIONS_CRITERIA_LABEL;
            return this.translateService.instant(criteriaTranslKey);
        }
        return null;
    };
    PageInfoMenuService.prototype.getPageRestrictionsCriteria.$inject = ["pageInfo"];
    /* @ngInject */ PageInfoMenuService.prototype.getCurrentPageVersionId = function () {
        var pageVersion = this.pageVersionSelectionService.getSelectedPageVersion();
        return pageVersion ? pageVersion.uid : null;
    };
    /* @ngInject */ PageInfoMenuService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [DisplayConditionsFacade,
            smarteditcommons.LogService,
            PageEditorModalService,
            cmscommons.IPageService,
            PageVersionSelectionService,
            core$1.TranslateService,
            TypeStructureRestService])
    ], /* @ngInject */ PageInfoMenuService);
    return /* @ngInject */ PageInfoMenuService;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageInfoMenuComponent", {
    selector: 'se-page-info-menu',
    template: "<div class=\"toolbar-action\" data-item-key=\"se.cms.pageInfoMenu\"><fd-popover [(isOpen)]=\"toolbarItem.isOpen\" (isOpenChange)=\"onDropdownToggle($event)\" [closeOnOutsideClick]=\"true\"><fd-popover-control><button type=\"button\" class=\"btn toolbar-action--button\" [attr.aria-pressed]=\"toolbarItem.isOpen\"><span class=\"hyicon hyicon-pageinfo se-toolbar-menu-ddlb--button__icon\"></span><div class=\"se-toolbar-page-info-wrapper\"><span class=\"toolbar-action-button__txt\" [translate]=\"toolbarItem.name\"></span></div></button></fd-popover-control><fd-popover-body><div class=\"se-page-info__dropdown-menu toolbar-action--include\"><div class=\"se-page-info-menu\" *ngIf=\"toolbarItem.isOpen\"><se-prevent-vertical-overflow><div class=\"se-page-info-menu__header\"><span class=\"se-page-info-menu__header-title\" translate=\"se.cms.pageinfo.information.title\"></span><div *seHasOperationPermission=\"editPagePermission\"><button class=\"se-page-info__edit-btn fd-button--compact\" *ngIf=\"isReady\" translate=\"se.cms.contextmenu.title.edit\" (click)=\"onEditPageClick()\"></button></div></div><div *ngIf=\"isReady\" class=\"se-page-info-menu__body\"><se-generic-editor [smarteditComponentId]=\"pageInfo.uid\" [smarteditComponentType]=\"pageInfo.typeCode\" [structure]=\"pageStructure\" [content]=\"pageInfo\"></se-generic-editor></div></se-prevent-vertical-overflow></div></div></fd-popover-body></fd-popover></div>",
    styles: [".se-page-info-menu__header{padding:20px;display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;height:53px;padding-top:15px;height:48px}.se-page-info-menu__header:first-child{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-page-info-menu__body{width:100%;height:400px;overflow-y:auto}.se-page-info-menu__body--title{text-transform:capitalize}.se-page-info__dropdown-menu{box-shadow:0 6px 12px rgba(0,0,0,.175);background-color:#fff;border-radius:4px!important;min-width:100px;width:fit-content;position:absolute;border:1px solid #d9d9d9;z-index:2000;top:96%}.se-page-info__dropdown-menu::before{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#d9d9d9;border-bottom-color:var(var(--fd-color-neutral-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-8px}.se-page-info__dropdown-menu::after{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#fff;border-bottom-color:var(var(--fd-color-background-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-7px}.se-page-info__dropdown-menu::after,.se-page-info__dropdown-menu::before{left:14px}.se-page-info__dropdown-menu input{color:#32363a!important}.se-page-info-menu se-ge-tab{display:grid;grid-template-columns:repeat(1,1fr);grid-gap:0 16px;width:368px}.se-page-info-menu__body .fd-form-control[type=email]:disabled .fd-popover-custom,.se-page-info-menu__body .fd-form-control[type=text]:disabled .fd-popover-custom,.se-page-info-menu__body .se-select.is-disabled .fd-popover-custom,.se-tabset-wrapper .fd-form-control[type=email]:disabled .fd-popover-custom,.se-tabset-wrapper .fd-form-control[type=text]:disabled .fd-popover-custom,.se-tabset-wrapper .se-select.is-disabled .fd-popover-custom{opacity:1}.se-page-info-menu__body .fd-form-control[type=email]:disabled .fd-popover-custom .toggle-button,.se-page-info-menu__body .fd-form-control[type=text]:disabled .fd-popover-custom .toggle-button,.se-page-info-menu__body .se-select.is-disabled .fd-popover-custom .toggle-button,.se-tabset-wrapper .fd-form-control[type=email]:disabled .fd-popover-custom .toggle-button,.se-tabset-wrapper .fd-form-control[type=text]:disabled .fd-popover-custom .toggle-button,.se-tabset-wrapper .se-select.is-disabled .fd-popover-custom .toggle-button{border:none;opacity:1;color:#32363a;padding:0;line-height:1rem}.se-page-info-menu__body .fd-form-control[type=email]:disabled .fd-popover-custom .toggle-button::after,.se-page-info-menu__body .fd-form-control[type=text]:disabled .fd-popover-custom .toggle-button::after,.se-page-info-menu__body .se-select.is-disabled .fd-popover-custom .toggle-button::after,.se-tabset-wrapper .fd-form-control[type=email]:disabled .fd-popover-custom .toggle-button::after,.se-tabset-wrapper .fd-form-control[type=text]:disabled .fd-popover-custom .toggle-button::after,.se-tabset-wrapper .se-select.is-disabled .fd-popover-custom .toggle-button::after{display:none}"],
    encapsulation: core.ViewEncapsulation.None
});
var /* @ngInject */ PageInfoMenuComponent = /** @class */ (function () {
    PageInfoMenuComponent.$inject = ["toolbarItem", "pageInfoMenuService", "pageService", "catalogService", "systemEventService"];
    function /* @ngInject */ PageInfoMenuComponent(toolbarItem, pageInfoMenuService, pageService, catalogService, systemEventService) {
        this.toolbarItem = toolbarItem;
        this.pageInfoMenuService = pageInfoMenuService;
        this.pageService = pageService;
        this.catalogService = catalogService;
        this.systemEventService = systemEventService;
        this.cmsPage = null;
        this.uriContext = null;
        this.isReady = false;
    }
    /* @ngInject */ PageInfoMenuComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.unRegContentCatalogUpdate = this.systemEventService.subscribe(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE, function () { return _this.setPageData(); });
                        return [4 /*yield*/, this.setPageData()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageInfoMenuComponent.prototype.ngOnDestroy = function () {
        this.unRegContentCatalogUpdate();
    };
    /* @ngInject */ PageInfoMenuComponent.prototype.onEditPageClick = function () {
        this.pageInfoMenuService.openPageEditor(this.pageInfo.content);
        this.closeMenu();
    };
    /* @ngInject */ PageInfoMenuComponent.prototype.setPageData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, page, uriContext;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.pageService.getCurrentPageInfo(),
                            this.catalogService.retrieveUriContext()
                        ])];
                    case 1:
                        _a = _b.sent(), page = _a[0], uriContext = _a[1];
                        this.cmsPage = page;
                        this.uriContext = uriContext;
                        this.editPagePermission = [
                            {
                                names: ['se.edit.page.type'],
                                context: {
                                    typeCode: page.typeCode
                                }
                            },
                            {
                                names: ['se.edit.page.link']
                            }
                        ];
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageInfoMenuComponent.prototype.onDropdownToggle = function (open) {
        return __awaiter(this, void 0, void 0, function () {
            var pageInfo, pageStructure;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!open) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.pageInfoMenuService.getCurrentPageInfo()];
                    case 1:
                        pageInfo = (_a.sent());
                        this.pageInfo = pageInfo;
                        return [4 /*yield*/, this.pageInfoMenuService.getPageStructureForViewing(pageInfo.typeCode, pageInfo.defaultPage)];
                    case 2:
                        pageStructure = (_a.sent());
                        this.pageStructure = pageStructure;
                        this.isReady = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    PageInfoMenuComponent.prototype.onDropdownToggle.$inject = ["open"];
    /* @ngInject */ PageInfoMenuComponent.prototype.closeMenu = function () {
        this.toolbarItem.isOpen = false;
    };
    /* @ngInject */ PageInfoMenuComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-info-menu',
            template: "<div class=\"toolbar-action\" data-item-key=\"se.cms.pageInfoMenu\"><fd-popover [(isOpen)]=\"toolbarItem.isOpen\" (isOpenChange)=\"onDropdownToggle($event)\" [closeOnOutsideClick]=\"true\"><fd-popover-control><button type=\"button\" class=\"btn toolbar-action--button\" [attr.aria-pressed]=\"toolbarItem.isOpen\"><span class=\"hyicon hyicon-pageinfo se-toolbar-menu-ddlb--button__icon\"></span><div class=\"se-toolbar-page-info-wrapper\"><span class=\"toolbar-action-button__txt\" [translate]=\"toolbarItem.name\"></span></div></button></fd-popover-control><fd-popover-body><div class=\"se-page-info__dropdown-menu toolbar-action--include\"><div class=\"se-page-info-menu\" *ngIf=\"toolbarItem.isOpen\"><se-prevent-vertical-overflow><div class=\"se-page-info-menu__header\"><span class=\"se-page-info-menu__header-title\" translate=\"se.cms.pageinfo.information.title\"></span><div *seHasOperationPermission=\"editPagePermission\"><button class=\"se-page-info__edit-btn fd-button--compact\" *ngIf=\"isReady\" translate=\"se.cms.contextmenu.title.edit\" (click)=\"onEditPageClick()\"></button></div></div><div *ngIf=\"isReady\" class=\"se-page-info-menu__body\"><se-generic-editor [smarteditComponentId]=\"pageInfo.uid\" [smarteditComponentType]=\"pageInfo.typeCode\" [structure]=\"pageStructure\" [content]=\"pageInfo\"></se-generic-editor></div></se-prevent-vertical-overflow></div></div></fd-popover-body></fd-popover></div>",
            styles: [".se-page-info-menu__header{padding:20px;display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;height:53px;padding-top:15px;height:48px}.se-page-info-menu__header:first-child{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-page-info-menu__body{width:100%;height:400px;overflow-y:auto}.se-page-info-menu__body--title{text-transform:capitalize}.se-page-info__dropdown-menu{box-shadow:0 6px 12px rgba(0,0,0,.175);background-color:#fff;border-radius:4px!important;min-width:100px;width:fit-content;position:absolute;border:1px solid #d9d9d9;z-index:2000;top:96%}.se-page-info__dropdown-menu::before{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#d9d9d9;border-bottom-color:var(var(--fd-color-neutral-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-8px}.se-page-info__dropdown-menu::after{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#fff;border-bottom-color:var(var(--fd-color-background-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-7px}.se-page-info__dropdown-menu::after,.se-page-info__dropdown-menu::before{left:14px}.se-page-info__dropdown-menu input{color:#32363a!important}.se-page-info-menu se-ge-tab{display:grid;grid-template-columns:repeat(1,1fr);grid-gap:0 16px;width:368px}.se-page-info-menu__body .fd-form-control[type=email]:disabled .fd-popover-custom,.se-page-info-menu__body .fd-form-control[type=text]:disabled .fd-popover-custom,.se-page-info-menu__body .se-select.is-disabled .fd-popover-custom,.se-tabset-wrapper .fd-form-control[type=email]:disabled .fd-popover-custom,.se-tabset-wrapper .fd-form-control[type=text]:disabled .fd-popover-custom,.se-tabset-wrapper .se-select.is-disabled .fd-popover-custom{opacity:1}.se-page-info-menu__body .fd-form-control[type=email]:disabled .fd-popover-custom .toggle-button,.se-page-info-menu__body .fd-form-control[type=text]:disabled .fd-popover-custom .toggle-button,.se-page-info-menu__body .se-select.is-disabled .fd-popover-custom .toggle-button,.se-tabset-wrapper .fd-form-control[type=email]:disabled .fd-popover-custom .toggle-button,.se-tabset-wrapper .fd-form-control[type=text]:disabled .fd-popover-custom .toggle-button,.se-tabset-wrapper .se-select.is-disabled .fd-popover-custom .toggle-button{border:none;opacity:1;color:#32363a;padding:0;line-height:1rem}.se-page-info-menu__body .fd-form-control[type=email]:disabled .fd-popover-custom .toggle-button::after,.se-page-info-menu__body .fd-form-control[type=text]:disabled .fd-popover-custom .toggle-button::after,.se-page-info-menu__body .se-select.is-disabled .fd-popover-custom .toggle-button::after,.se-tabset-wrapper .fd-form-control[type=email]:disabled .fd-popover-custom .toggle-button::after,.se-tabset-wrapper .fd-form-control[type=text]:disabled .fd-popover-custom .toggle-button::after,.se-tabset-wrapper .se-select.is-disabled .fd-popover-custom .toggle-button::after{display:none}"],
            encapsulation: core.ViewEncapsulation.None
        }),
        __param(0, core.Inject(smarteditcommons.TOOLBAR_ITEM)),
        __metadata("design:paramtypes", [Object, PageInfoMenuService,
            cmscommons.IPageService,
            smarteditcommons.ICatalogService,
            smarteditcommons.SystemEventService])
    ], /* @ngInject */ PageInfoMenuComponent);
    return /* @ngInject */ PageInfoMenuComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageListLinkComponent", {
    selector: 'se-page-list-link',
    template: "<div><a class=\"page-list-link-item__link\" [href]=\"getLink()\" translate=\"se.cms.cataloginfo.pagelist\"></a></div>"
});
var /* @ngInject */ PageListLinkComponent = /** @class */ (function () {
    PageListLinkComponent.$inject = ["catalogDetails"];
    function /* @ngInject */ PageListLinkComponent(catalogDetails) {
        this.catalogDetails = catalogDetails;
    }
    /* @ngInject */ PageListLinkComponent.prototype.getLink = function () {
        var _a = this.catalogDetails, siteId = _a.siteId, catalogId = _a.catalog.catalogId, version = _a.catalogVersion.version;
        return "#!/ng/pages/" + siteId + "/" + catalogId + "/" + version;
    };
    /* @ngInject */ PageListLinkComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-list-link',
            template: "<div><a class=\"page-list-link-item__link\" [href]=\"getLink()\" translate=\"se.cms.cataloginfo.pagelist\"></a></div>"
        }),
        __param(0, core.Inject(smarteditcommons.CATALOG_DETAILS_ITEM_DATA)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ PageListLinkComponent);
    return /* @ngInject */ PageListLinkComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "TrashLinkComponent", {
    selector: 'se-trash-link',
    template: "<div *ngIf=\"isNonActiveCatalog\" (click)=\"goToTrash()\" class=\"se-page-list__page-link--right\"><a translate=\"se.cms.pagelist.trashcan.link.text\" [translateParams]=\"trashedPagesTranslationData\" class=\"se-page-list__page-link-anchor\"></a> <span class=\"se-page-list__page-link-icon sap-icon--navigation-right-arrow\"></span></div>",
    styles: [".se-page-list{background-color:#edeff0;min-height:100vh;height:100%}.se-page-list__page-link-anchor{text-decoration:none!important;color:#51555a}.se-page-list__page-link-anchor:hover{color:#0a6ed1}.se-page-list__header{padding:16px 30px;background-color:#fff}.se-page-list__page-link-icon{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#51555a}.se-page-list__catalog-name{font-size:1.7142857143rem;line-height:1.3333333333;font-weight:400;display:block;margin-bottom:4px}.se-page-list__sub-title{color:#6a6d70}.se-page-list__body{padding:20px 20px 70px}.se-page-list__page-link--left{cursor:pointer}.se-page-list__page-link--left .se-page-list__page-link-anchor{margin-left:3px}.se-page-list__page-link--right{cursor:pointer}.se-page-list__page-link--right .se-page-list__page-link-anchor{margin-right:3px}.se-page-list__table-header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;background-color:#fff;height:56px;padding:20px;border-radius:4px 4px 0 0}.se-page-list__table-header--right{display:flex;flex-direction:row;align-items:center}.se-page-list__table-header .se-paged-list__page-count-wrapper{font-size:1.1428571429rem;line-height:1.25;font-weight:400;margin-right:auto}.se-page-list__table-body{padding-bottom:16px}.se-page-list__table-body .se-data-table__arrow{margin-left:2px}.se-page-list__table-body .se-paged-list-item{cursor:default}.se-page-list__search{margin-right:16px;width:380px}.se-page-list__add{text-transform:capitalize}.se-paged-list__header{font-size:1rem;line-height:1.4285714286;font-weight:400}.se-paged-list__header-dropdownitems,.se-paged-list__header-pageStatus,.se-paged-list__header-syncStatus{cursor:default}.se-paged-list-item-name a{text-decoration:none!important}.se-sync-btn__status--done{color:#0a7e3e}.se-sync-btn__status--not{color:#e9730c}.ySmartEditTrashPageToolbar{background-color:#fff}.fd-table td.se-paged-list-item-numberOfRestrictions,.fd-table td.se-paged-list-item-syncStatus,.fd-table th.se-paged-list__header-numberOfRestrictions,.fd-table th.se-paged-list__header-syncStatus{text-align:center}.fd-table td.se-paged-list-item-syncStatus{font-size:1.1428571429rem;line-height:1.25;font-weight:400}"]
});
var /* @ngInject */ TrashLinkComponent = /** @class */ (function () {
    TrashLinkComponent.$inject = ["route", "routingsService", "managePageService", "urlService", "catalogService", "systemEventService"];
    function /* @ngInject */ TrashLinkComponent(route, routingsService, managePageService, urlService, catalogService, systemEventService) {
        this.route = route;
        this.routingsService = routingsService;
        this.managePageService = managePageService;
        this.urlService = urlService;
        this.catalogService = catalogService;
        this.systemEventService = systemEventService;
        this.isNonActiveCatalog = false;
    }
    /* @ngInject */ TrashLinkComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isNonActiveCatalog;
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        (_a = this.route.snapshot.params, this.siteId = _a.siteId, this.catalogId = _a.catalogId, this.catalogVersion = _a.catalogVersion);
                        this.uriContext = this.urlService.buildUriContext(this.siteId, this.catalogId, this.catalogVersion);
                        return [4 /*yield*/, this.catalogService.isContentCatalogVersionNonActive()];
                    case 1:
                        isNonActiveCatalog = _b.sent();
                        this.isNonActiveCatalog = isNonActiveCatalog;
                        if (isNonActiveCatalog) {
                            this.updateTrashedPagesCount();
                        }
                        this.unsubscribeContentCatalogUpdateEvent = this.systemEventService.subscribe(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE, function () { return _this.updateTrashedPagesCount(); });
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ TrashLinkComponent.prototype.ngOnDestroy = function () {
        this.unsubscribeContentCatalogUpdateEvent();
    };
    /* @ngInject */ TrashLinkComponent.prototype.updateTrashedPagesCount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var trashedPagesCount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.managePageService.getSoftDeletedPagesCount(this.uriContext)];
                    case 1:
                        trashedPagesCount = _a.sent();
                        this.trashedPagesTranslationData = {
                            totalCount: trashedPagesCount
                        };
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ TrashLinkComponent.prototype.goToTrash = function () {
        this.routingsService.go(("" + smarteditcommons.NG_ROUTE_PREFIX + cmscommons.TRASHED_PAGE_LIST_PATH)
            .replace(':siteId', this.siteId)
            .replace(':catalogId', this.catalogId)
            .replace(':catalogVersion', this.catalogVersion));
    };
    /* @ngInject */ TrashLinkComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-trash-link',
            template: "<div *ngIf=\"isNonActiveCatalog\" (click)=\"goToTrash()\" class=\"se-page-list__page-link--right\"><a translate=\"se.cms.pagelist.trashcan.link.text\" [translateParams]=\"trashedPagesTranslationData\" class=\"se-page-list__page-link-anchor\"></a> <span class=\"se-page-list__page-link-icon sap-icon--navigation-right-arrow\"></span></div>",
            styles: [".se-page-list{background-color:#edeff0;min-height:100vh;height:100%}.se-page-list__page-link-anchor{text-decoration:none!important;color:#51555a}.se-page-list__page-link-anchor:hover{color:#0a6ed1}.se-page-list__header{padding:16px 30px;background-color:#fff}.se-page-list__page-link-icon{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#51555a}.se-page-list__catalog-name{font-size:1.7142857143rem;line-height:1.3333333333;font-weight:400;display:block;margin-bottom:4px}.se-page-list__sub-title{color:#6a6d70}.se-page-list__body{padding:20px 20px 70px}.se-page-list__page-link--left{cursor:pointer}.se-page-list__page-link--left .se-page-list__page-link-anchor{margin-left:3px}.se-page-list__page-link--right{cursor:pointer}.se-page-list__page-link--right .se-page-list__page-link-anchor{margin-right:3px}.se-page-list__table-header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;background-color:#fff;height:56px;padding:20px;border-radius:4px 4px 0 0}.se-page-list__table-header--right{display:flex;flex-direction:row;align-items:center}.se-page-list__table-header .se-paged-list__page-count-wrapper{font-size:1.1428571429rem;line-height:1.25;font-weight:400;margin-right:auto}.se-page-list__table-body{padding-bottom:16px}.se-page-list__table-body .se-data-table__arrow{margin-left:2px}.se-page-list__table-body .se-paged-list-item{cursor:default}.se-page-list__search{margin-right:16px;width:380px}.se-page-list__add{text-transform:capitalize}.se-paged-list__header{font-size:1rem;line-height:1.4285714286;font-weight:400}.se-paged-list__header-dropdownitems,.se-paged-list__header-pageStatus,.se-paged-list__header-syncStatus{cursor:default}.se-paged-list-item-name a{text-decoration:none!important}.se-sync-btn__status--done{color:#0a7e3e}.se-sync-btn__status--not{color:#e9730c}.ySmartEditTrashPageToolbar{background-color:#fff}.fd-table td.se-paged-list-item-numberOfRestrictions,.fd-table td.se-paged-list-item-syncStatus,.fd-table th.se-paged-list__header-numberOfRestrictions,.fd-table th.se-paged-list__header-syncStatus{text-align:center}.fd-table td.se-paged-list-item-syncStatus{font-size:1.1428571429rem;line-height:1.25;font-weight:400}"]
        }),
        __metadata("design:paramtypes", [router.ActivatedRoute,
            smarteditcommons.SmarteditRoutingService,
            ManagePageService,
            smarteditcommons.IUrlService,
            smarteditcommons.ICatalogService,
            smarteditcommons.SystemEventService])
    ], /* @ngInject */ TrashLinkComponent);
    return /* @ngInject */ TrashLinkComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "SynchronizeCatalogComponent", {
    selector: 'se-synchronize-catalog',
    template: "<div class=\"se-synchronize-catalog\"><div class=\"se-synchronize-catalog__sync-info\"><div *ngIf=\"isSyncJobFinished()\"><label class=\"se-synchronize-catalog__sync-info__sync-label\" *ngIf=\"catalogVersion.active\"><span translate=\"se.cms.cataloginfo.lastsyncedfrom\"></span>&nbsp; <span>{{ syncJobStatus.source }}</span></label> <label class=\"se-synchronize-catalog__sync-info__sync-label\" *ngIf=\"!catalogVersion.active\" translate=\"se.cms.cataloginfo.lastsynced\"></label> <span class=\"se-synchronize-catalog__sync-info__last-synched\">{{ syncJobStatus.syncEndTime | date: 'M/d/yy h:mm a' }}</span></div><span class=\"se-synchronize-catalog__in-progress\" *ngIf=\"isSyncJobInProgress()\" translate=\"se.sync.status.synced.inprogress\"></span> <span class=\"label-error se-synchronize-catalog__sync-failed\" *ngIf=\"isSyncJobFailed()\" translate=\"se.sync.status.synced.syncfailed\"></span></div><ng-container *seHasOperationPermission=\"syncCatalogPermission\"><ng-container *ngIf=\"!catalogVersion.active\"><button class=\"se-synchronize-catalog__sync-btn fd-button--emphasized\" [disabled]=\"!isSyncButtonEnabled()\" (click)=\"syncCatalog()\" translate=\"se.cms.cataloginfo.btn.sync\"></button></ng-container></ng-container></div>",
    styles: [".se-synchronize-catalog{display:flex;flex-direction:row;align-items:center;justify-content:flex-end}.se-synchronize-catalog__sync-info{display:flex;flex-direction:row;align-items:center}.se-synchronize-catalog__sync-btn{margin-left:20px}.se-synchronize-catalog__sync-info__sync-label:first-child{font-weight:700}.se-synchronize-catalog__sync-info__last-synched,.se-synchronize-catalog__sync-info__sync-label{color:#6a6d70;display:block;text-align:right;margin:0}.se-synchronize-catalog__in-progress{color:#0a7e3e}.se-synchronize-catalog__sync-failed{color:#b00}"],
    providers: [smarteditcommons.L10nPipe],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ SynchronizeCatalogComponent = /** @class */ (function () {
    SynchronizeCatalogComponent.$inject = ["synchronizationService", "confirmationModalService", "systemEventService", "l10nPipe", "cdr"];
    function /* @ngInject */ SynchronizeCatalogComponent(synchronizationService, confirmationModalService, systemEventService, l10nPipe, cdr) {
        this.synchronizationService = synchronizationService;
        this.confirmationModalService = confirmationModalService;
        this.systemEventService = systemEventService;
        this.l10nPipe = l10nPipe;
        this.cdr = cdr;
    }
    /* @ngInject */ SynchronizeCatalogComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.syncJobStatus = {
                            syncStartTime: '',
                            syncEndTime: '',
                            status: null,
                            source: '',
                            target: ''
                        };
                        this.targetCatalogVersion = this.activeCatalogVersion.version;
                        this.sourceCatalogVersion = !this.catalogVersion.active
                            ? this.catalogVersion.version
                            : null;
                        this.syncCatalogPermission = [
                            {
                                names: ['se.sync.catalog'],
                                context: {
                                    catalogId: this.catalog.catalogId,
                                    catalogVersion: this.sourceCatalogVersion,
                                    targetCatalogVersion: this.targetCatalogVersion
                                }
                            }
                        ];
                        this.catalogDto = {
                            catalogId: this.catalog.catalogId,
                            targetCatalogVersion: this.targetCatalogVersion,
                            sourceCatalogVersion: this.sourceCatalogVersion
                        };
                        this.synchronizationService.startAutoGetSyncData(this.catalogDto, function (job) {
                            return _this.updateSyncStatusData(job);
                        });
                        return [4 /*yield*/, this.callGetSyncData()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ SynchronizeCatalogComponent.prototype.ngOnDestroy = function () {
        this.synchronizationService.stopAutoGetSyncData(this.catalogDto);
    };
    /* @ngInject */ SynchronizeCatalogComponent.prototype.isSyncJobFinished = function () {
        return this.syncJobStatus.status === cmscommons.JOB_STATUS.FINISHED;
    };
    /* @ngInject */ SynchronizeCatalogComponent.prototype.isSyncJobInProgress = function () {
        return (this.syncJobStatus.status === cmscommons.JOB_STATUS.RUNNING ||
            this.syncJobStatus.status === cmscommons.JOB_STATUS.UNKNOWN);
    };
    /* @ngInject */ SynchronizeCatalogComponent.prototype.isSyncJobFailed = function () {
        return (this.syncJobStatus.status === cmscommons.JOB_STATUS.ERROR ||
            this.syncJobStatus.status === cmscommons.JOB_STATUS.FAILURE);
    };
    /* @ngInject */ SynchronizeCatalogComponent.prototype.isSyncButtonEnabled = function () {
        return !this.isSyncJobInProgress();
    };
    /* @ngInject */ SynchronizeCatalogComponent.prototype.syncCatalog = function () {
        return __awaiter(this, void 0, void 0, function () {
            var catalogName, job;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.translateCatalogName(this.catalog.name)];
                    case 1:
                        catalogName = _a.sent();
                        return [4 /*yield*/, this.confirmationModalService
                                .confirm({
                                title: 'se.sync.confirmation.title',
                                description: 'se.sync.confirm.msg',
                                descriptionPlaceholders: {
                                    catalogName: catalogName
                                }
                            })
                                .catch(function () { return Promise.reject(); })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.synchronizationService.updateCatalogSync(this.catalogDto)];
                    case 3:
                        job = _a.sent();
                        this.updateSyncStatusData(job);
                        this.systemEventService.publishAsync(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE, job);
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ SynchronizeCatalogComponent.prototype.translateCatalogName = function (catalogName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.l10nPipe.transform(catalogName).pipe(operators.take(1)).toPromise()];
            });
        });
    };
    SynchronizeCatalogComponent.prototype.translateCatalogName.$inject = ["catalogName"];
    /* @ngInject */ SynchronizeCatalogComponent.prototype.callGetSyncData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var syncStatus;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.synchronizationService.getCatalogSyncStatus(this.catalogDto)];
                    case 1:
                        syncStatus = _a.sent();
                        this.updateSyncStatusData(syncStatus);
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ SynchronizeCatalogComponent.prototype.updateSyncStatusData = function (syncStatus) {
        this.syncJobStatus = {
            syncStartTime: syncStatus.creationDate,
            syncEndTime: syncStatus.endDate,
            status: syncStatus.syncStatus,
            source: syncStatus.sourceCatalogVersion ? syncStatus.sourceCatalogVersion : '',
            target: syncStatus.targetCatalogVersion ? syncStatus.targetCatalogVersion : ''
        };
        this.cdr.detectChanges();
    };
    SynchronizeCatalogComponent.prototype.updateSyncStatusData.$inject = ["syncStatus"];
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ SynchronizeCatalogComponent.prototype, "catalog", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ SynchronizeCatalogComponent.prototype, "catalogVersion", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ SynchronizeCatalogComponent.prototype, "activeCatalogVersion", void 0);
    /* @ngInject */ SynchronizeCatalogComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-synchronize-catalog',
            template: "<div class=\"se-synchronize-catalog\"><div class=\"se-synchronize-catalog__sync-info\"><div *ngIf=\"isSyncJobFinished()\"><label class=\"se-synchronize-catalog__sync-info__sync-label\" *ngIf=\"catalogVersion.active\"><span translate=\"se.cms.cataloginfo.lastsyncedfrom\"></span>&nbsp; <span>{{ syncJobStatus.source }}</span></label> <label class=\"se-synchronize-catalog__sync-info__sync-label\" *ngIf=\"!catalogVersion.active\" translate=\"se.cms.cataloginfo.lastsynced\"></label> <span class=\"se-synchronize-catalog__sync-info__last-synched\">{{ syncJobStatus.syncEndTime | date: 'M/d/yy h:mm a' }}</span></div><span class=\"se-synchronize-catalog__in-progress\" *ngIf=\"isSyncJobInProgress()\" translate=\"se.sync.status.synced.inprogress\"></span> <span class=\"label-error se-synchronize-catalog__sync-failed\" *ngIf=\"isSyncJobFailed()\" translate=\"se.sync.status.synced.syncfailed\"></span></div><ng-container *seHasOperationPermission=\"syncCatalogPermission\"><ng-container *ngIf=\"!catalogVersion.active\"><button class=\"se-synchronize-catalog__sync-btn fd-button--emphasized\" [disabled]=\"!isSyncButtonEnabled()\" (click)=\"syncCatalog()\" translate=\"se.cms.cataloginfo.btn.sync\"></button></ng-container></ng-container></div>",
            styles: [".se-synchronize-catalog{display:flex;flex-direction:row;align-items:center;justify-content:flex-end}.se-synchronize-catalog__sync-info{display:flex;flex-direction:row;align-items:center}.se-synchronize-catalog__sync-btn{margin-left:20px}.se-synchronize-catalog__sync-info__sync-label:first-child{font-weight:700}.se-synchronize-catalog__sync-info__last-synched,.se-synchronize-catalog__sync-info__sync-label{color:#6a6d70;display:block;text-align:right;margin:0}.se-synchronize-catalog__in-progress{color:#0a7e3e}.se-synchronize-catalog__sync-failed{color:#b00}"],
            providers: [smarteditcommons.L10nPipe],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [cmscommons.SynchronizationService,
            smarteditcommons.IConfirmationModalService,
            smarteditcommons.SystemEventService,
            smarteditcommons.L10nPipe,
            core.ChangeDetectorRef])
    ], /* @ngInject */ SynchronizeCatalogComponent);
    return /* @ngInject */ SynchronizeCatalogComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageSynchronizationHeaderComponent", {
    selector: 'se-page-synchronization-header',
    template: "<ng-container *ngIf=\"ready\"><div class=\"se-sync-panel-header\"><span class=\"se-sync-panel-header__sub-header\" [translate]=\"getSubHeaderText()\"></span></div><div *ngIf=\"isNewPage()\" class=\"se-sync-panel-new-page\"><div class=\"se-sync-panel-new-page__header\" translate=\"se.cms.synchronization.page.new.header\"></div><div class=\"se-sync-panel-new-page__message\">{{ headerText }}</div></div><div class=\"se-sync-panel-header__timestamp\" *ngIf=\"!isNewPage()\"><div translate=\"se.cms.synchronization.panel.lastsync.text\"></div><span class=\"se-sync-panel-header__timestamp-text\">{{ syncStatus.lastSyncStatus | date: 'M/d/yy h:mm a' }}</span></div></ng-container>",
    styles: [".se-sync-panel-header{padding:0 20px 20px;border-bottom:1px solid #d9d9d9;min-width:400px}.se-sync-panel-header__sub-header{padding-top:4px;color:#51555a}.se-sync-panel-header__timestamp{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#51555a;position:absolute;left:20px;bottom:23px;width:150px}.se-sync-panel-new-page{padding:20px}.se-sync-panel-new-page__header{font-weight:700;padding-bottom:4px}.se-sync-panel-new-page__message{white-space:normal}"],
    providers: [smarteditcommons.L10nPipe],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ PageSynchronizationHeaderComponent = /** @class */ (function () {
    PageSynchronizationHeaderComponent.$inject = ["sharedDataService", "catalogService", "cmsitemsRestService", "translateService", "l10nPipe", "cdr"];
    function /* @ngInject */ PageSynchronizationHeaderComponent(sharedDataService, catalogService, cmsitemsRestService, translateService, l10nPipe, cdr) {
        this.sharedDataService = sharedDataService;
        this.catalogService = catalogService;
        this.cmsitemsRestService = cmsitemsRestService;
        this.translateService = translateService;
        this.l10nPipe = l10nPipe;
        this.cdr = cdr;
        this.ready = false;
    }
    /* @ngInject */ PageSynchronizationHeaderComponent.prototype.ngOnChanges = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.syncStatus) {
                            return [2 /*return*/];
                        }
                        this.ready = false;
                        return [4 /*yield*/, this.updateHeaderText()];
                    case 1:
                        _a.sent();
                        this.ready = true;
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageSynchronizationHeaderComponent.prototype.getSubHeaderText = function () {
        if (this.isDefaultSubHeader()) {
            return 'se.cms.synchronization.page.header';
        }
        else if (this.isSyncOldHomeHeader()) {
            return 'se.cms.synchronization.page.header.old.homepage';
        }
    };
    /* @ngInject */ PageSynchronizationHeaderComponent.prototype.isNewPage = function () {
        return this.pageSyncConditions.pageHasNoDepOrNoSyncStatus;
    };
    /* @ngInject */ PageSynchronizationHeaderComponent.prototype.isSyncOldHomeHeader = function () {
        return (this.pageSyncConditions.pageHasSyncStatus && !this.pageSyncConditions.canSyncHomepage);
    };
    /* @ngInject */ PageSynchronizationHeaderComponent.prototype.isDefaultSubHeader = function () {
        return !this.isSyncOldHomeHeader() && !this.isNewPage();
    };
    /* @ngInject */ PageSynchronizationHeaderComponent.prototype.updateHeaderText = function () {
        return __awaiter(this, void 0, void 0, function () {
            var experience, _a, catalogId, catalogName, catalogVersion, itemNames;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.sharedDataService.get(smarteditcommons.EXPERIENCE_STORAGE_KEY)];
                    case 1:
                        experience = (_b.sent());
                        return [4 /*yield*/, this.getCurrentCatalogIdFromExperience(experience)];
                    case 2:
                        _a = _b.sent(), catalogId = _a.catalogId, catalogName = _a.catalogName;
                        return [4 /*yield*/, this.catalogService.getActiveContentCatalogVersionByCatalogId(catalogId)];
                    case 3:
                        catalogVersion = _b.sent();
                        return [4 /*yield*/, (this.pageSyncConditions.pageHasUnavailableDependencies
                                ? this.fetchUnavailableDependencies()
                                : null)];
                    case 4:
                        itemNames = _b.sent();
                        this.headerText = this.pageSyncConditions.pageHasUnavailableDependencies
                            ? this.translateService.instant('se.cms.synchronization.page.unavailable.items.description', {
                                itemNames: itemNames,
                                catalogName: catalogName,
                                catalogVersion: catalogVersion
                            })
                            : this.translateService.instant('se.cms.synchronization.page.new.description', {
                                catalogName: catalogName,
                                catalogVersion: catalogVersion
                            });
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageSynchronizationHeaderComponent.prototype.userIsInsidePage = function (pageContext) {
        return !!pageContext;
    };
    PageSynchronizationHeaderComponent.prototype.userIsInsidePage.$inject = ["pageContext"];
    /* @ngInject */ PageSynchronizationHeaderComponent.prototype.getCurrentCatalogIdFromExperience = function (_a) {
        var pageContext = _a.pageContext, catalogDescriptor = _a.catalogDescriptor;
        return __awaiter(this, void 0, void 0, function () {
            var catalogId, catalogName, catalogNameTranslated;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        catalogId = this.userIsInsidePage(pageContext)
                            ? pageContext.catalogId
                            : catalogDescriptor.catalogId;
                        catalogName = this.userIsInsidePage(pageContext)
                            ? pageContext.catalogName
                            : catalogDescriptor.name;
                        return [4 /*yield*/, this.l10nPipe
                                .transform(catalogName)
                                .pipe(operators.take(1))
                                .toPromise()];
                    case 1:
                        catalogNameTranslated = _b.sent();
                        return [2 /*return*/, {
                                catalogId: catalogId,
                                catalogName: catalogNameTranslated
                            }];
                }
            });
        });
    };
    PageSynchronizationHeaderComponent.prototype.getCurrentCatalogIdFromExperience.$inject = ["_a"];
    /* @ngInject */ PageSynchronizationHeaderComponent.prototype.fetchUnavailableDependencies = function () {
        var itemIds = this.syncStatus.unavailableDependencies.map(function (_a) {
            var itemId = _a.itemId;
            return itemId;
        });
        return this.cmsitemsRestService
            .getByIds(itemIds)
            .then(function (_a) {
            var response = _a.response;
            return response.map(function (_a) {
                var name = _a.name;
                return name;
            }).join(', ');
        });
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ PageSynchronizationHeaderComponent.prototype, "syncStatus", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ PageSynchronizationHeaderComponent.prototype, "pageSyncConditions", void 0);
    /* @ngInject */ PageSynchronizationHeaderComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-synchronization-header',
            template: "<ng-container *ngIf=\"ready\"><div class=\"se-sync-panel-header\"><span class=\"se-sync-panel-header__sub-header\" [translate]=\"getSubHeaderText()\"></span></div><div *ngIf=\"isNewPage()\" class=\"se-sync-panel-new-page\"><div class=\"se-sync-panel-new-page__header\" translate=\"se.cms.synchronization.page.new.header\"></div><div class=\"se-sync-panel-new-page__message\">{{ headerText }}</div></div><div class=\"se-sync-panel-header__timestamp\" *ngIf=\"!isNewPage()\"><div translate=\"se.cms.synchronization.panel.lastsync.text\"></div><span class=\"se-sync-panel-header__timestamp-text\">{{ syncStatus.lastSyncStatus | date: 'M/d/yy h:mm a' }}</span></div></ng-container>",
            styles: [".se-sync-panel-header{padding:0 20px 20px;border-bottom:1px solid #d9d9d9;min-width:400px}.se-sync-panel-header__sub-header{padding-top:4px;color:#51555a}.se-sync-panel-header__timestamp{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#51555a;position:absolute;left:20px;bottom:23px;width:150px}.se-sync-panel-new-page{padding:20px}.se-sync-panel-new-page__header{font-weight:700;padding-bottom:4px}.se-sync-panel-new-page__message{white-space:normal}"],
            providers: [smarteditcommons.L10nPipe],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [smarteditcommons.ISharedDataService,
            smarteditcommons.ICatalogService,
            cmscommons.CmsitemsRestService,
            core$1.TranslateService,
            smarteditcommons.L10nPipe,
            core.ChangeDetectorRef])
    ], /* @ngInject */ PageSynchronizationHeaderComponent);
    return /* @ngInject */ PageSynchronizationHeaderComponent;
}());

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
var PAGE_SYNC_STATUS_READY = 'PAGE_SYNC_STATUS_READY';

window.__smartedit__.addDecoratorPayload("Component", "PageSynchronizationPanelComponent", {
    selector: 'se-page-synchronization-panel',
    template: "<se-page-synchronization-header class=\"se-sync-panel__sync-status\" [syncStatus]=\"syncStatus\" [pageSyncConditions]=\"pageSyncConditions\"></se-page-synchronization-header><se-synchronization-panel *ngIf=\"!showFooter\" [itemId]=\"cmsPage.uuid\" [showFooter]=\"false\" [getSyncStatus]=\"getSyncStatus\" [performSync]=\"performSync\" (selectedItemsUpdate)=\"onSelectedItemsUpdate($event)\" (syncStatusReady)=\"onSyncStatusReady($event)\" (getApi)=\"onGetApi($event)\"></se-synchronization-panel><se-synchronization-panel *ngIf=\"showFooter\" [itemId]=\"cmsPage.uuid\" [getSyncStatus]=\"getSyncStatus\" [performSync]=\"performSync\" (syncStatusReady)=\"onSyncStatusReady($event)\" (getApi)=\"onGetApi($event)\"></se-synchronization-panel>"
});
var /* @ngInject */ PageSynchronizationPanelComponent = /** @class */ (function () {
    PageSynchronizationPanelComponent.$inject = ["pageService", "homepageService", "crossFrameEventService", "syncPollingService", "translateService"];
    function /* @ngInject */ PageSynchronizationPanelComponent(pageService, homepageService, crossFrameEventService, syncPollingService, translateService) {
        var _this = this;
        this.pageService = pageService;
        this.homepageService = homepageService;
        this.crossFrameEventService = crossFrameEventService;
        this.syncPollingService = syncPollingService;
        this.translateService = translateService;
        this.getSyncStatus = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, canSyncHomepage, syncStatus;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.homepageService.canSyncHomepage(this.cmsPage, this.uriContext),
                            this.syncPollingService.getSyncStatus(this.cmsPage.uuid, this.uriContext),
                            this.evaluateIfSyncIsApproved()
                        ])];
                    case 1:
                        _a = _b.sent(), canSyncHomepage = _a[0], syncStatus = _a[1];
                        this.pageSyncConditions.canSyncHomepage = canSyncHomepage;
                        this.syncStatus = syncStatus;
                        return [2 /*return*/, this.syncStatus];
                }
            });
        }); };
        this.performSync = function (items) {
            return _this.syncPollingService.performSync(items, _this.uriContext);
        };
        this.syncStatusReady = function (syncStatus) {
            _this.pageSyncConditions.pageHasUnavailableDependencies =
                syncStatus.unavailableDependencies.length > 0;
            _this.pageSyncConditions.pageHasSyncStatus = !!syncStatus.lastSyncStatus;
            _this.pageSyncConditions.pageHasNoDepOrNoSyncStatus =
                _this.pageSyncConditions.pageHasUnavailableDependencies ||
                    !_this.pageSyncConditions.pageHasSyncStatus;
            _this.pageSyncConditions = lodash.cloneDeep(_this.pageSyncConditions);
            if (_this.pageSyncConditions.pageHasUnavailableDependencies) {
                _this.hidePageSync();
            }
            else if (!_this.pageSyncConditions.pageHasSyncStatus) {
                _this.showPageSync();
            }
            else {
                _this.enableSlotsSync();
            }
            _this.crossFrameEventService.publish(PAGE_SYNC_STATUS_READY, _this.pageSyncConditions);
        };
        this.selectedItemsUpdate = new core.EventEmitter();
        this.showFooter = true;
        this.syncStatus = null;
        this.pageSyncConditions = {
            canSyncHomepage: false,
            pageHasUnavailableDependencies: false,
            pageHasSyncStatus: false,
            pageHasNoDepOrNoSyncStatus: false
        };
    }
    /* @ngInject */ PageSynchronizationPanelComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.unSubPageUpdatedEvent = this.crossFrameEventService.subscribe(smarteditcommons.EVENTS.PAGE_UPDATED, function () { return _this.evaluateIfSyncIsApproved(); });
    };
    /* @ngInject */ PageSynchronizationPanelComponent.prototype.ngOnDestroy = function () {
        this.unSubPageUpdatedEvent();
    };
    /* @ngInject */ PageSynchronizationPanelComponent.prototype.onGetApi = function (api) {
        var _this = this;
        this.synchronizationPanelApi = api;
        this.synchronizationPanelApi.disableItem = function (item) {
            return !_this.pageSyncConditions.canSyncHomepage && item === _this.syncStatus;
        };
    };
    PageSynchronizationPanelComponent.prototype.onGetApi.$inject = ["api"];
    /* @ngInject */ PageSynchronizationPanelComponent.prototype.onSyncStatusReady = function (syncStatus) {
        this.syncStatusReady(syncStatus);
    };
    PageSynchronizationPanelComponent.prototype.onSyncStatusReady.$inject = ["syncStatus"];
    /* @ngInject */ PageSynchronizationPanelComponent.prototype.onSelectedItemsUpdate = function (items) {
        this.selectedItemsUpdate.emit(items);
    };
    PageSynchronizationPanelComponent.prototype.onSelectedItemsUpdate.$inject = ["items"];
    /* @ngInject */ PageSynchronizationPanelComponent.prototype.syncItems = function () {
        return this.synchronizationPanel.syncItems();
    };
    /* @ngInject */ PageSynchronizationPanelComponent.prototype.evaluateIfSyncIsApproved = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isPageApproved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageService.isPageApproved(this.cmsPage.uuid)];
                    case 1:
                        isPageApproved = _a.sent();
                        if (!isPageApproved) {
                            this.disablePageSync();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageSynchronizationPanelComponent.prototype.disablePageSync = function () {
        this.synchronizationPanelApi.setMessage({
            type: smarteditcommons.IAlertServiceType.WARNING,
            description: this.translateService.instant('se.cms.synchronization.slot.disabled.msg')
        });
        this.synchronizationPanelApi.disableItemList(true);
    };
    /* @ngInject */ PageSynchronizationPanelComponent.prototype.hidePageSync = function () {
        this.synchronizationPanelApi.displayItemList(false);
    };
    /* @ngInject */ PageSynchronizationPanelComponent.prototype.showPageSync = function () {
        this.synchronizationPanelApi.selectAll();
        this.synchronizationPanelApi.displayItemList(false);
    };
    /* @ngInject */ PageSynchronizationPanelComponent.prototype.enableSlotsSync = function () {
        this.synchronizationPanelApi.displayItemList(true);
    };
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ PageSynchronizationPanelComponent.prototype, "selectedItemsUpdate", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ PageSynchronizationPanelComponent.prototype, "uriContext", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ PageSynchronizationPanelComponent.prototype, "cmsPage", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ PageSynchronizationPanelComponent.prototype, "showFooter", void 0);
    __decorate([
        core.ViewChild(cmscommons.SynchronizationPanelComponent, { static: false }),
        __metadata("design:type", cmscommons.SynchronizationPanelComponent)
    ], /* @ngInject */ PageSynchronizationPanelComponent.prototype, "synchronizationPanel", void 0);
    /* @ngInject */ PageSynchronizationPanelComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-synchronization-panel',
            template: "<se-page-synchronization-header class=\"se-sync-panel__sync-status\" [syncStatus]=\"syncStatus\" [pageSyncConditions]=\"pageSyncConditions\"></se-page-synchronization-header><se-synchronization-panel *ngIf=\"!showFooter\" [itemId]=\"cmsPage.uuid\" [showFooter]=\"false\" [getSyncStatus]=\"getSyncStatus\" [performSync]=\"performSync\" (selectedItemsUpdate)=\"onSelectedItemsUpdate($event)\" (syncStatusReady)=\"onSyncStatusReady($event)\" (getApi)=\"onGetApi($event)\"></se-synchronization-panel><se-synchronization-panel *ngIf=\"showFooter\" [itemId]=\"cmsPage.uuid\" [getSyncStatus]=\"getSyncStatus\" [performSync]=\"performSync\" (syncStatusReady)=\"onSyncStatusReady($event)\" (getApi)=\"onGetApi($event)\"></se-synchronization-panel>"
        }),
        __metadata("design:paramtypes", [cmscommons.IPageService,
            HomepageService,
            smarteditcommons.CrossFrameEventService,
            cmscommons.ISyncPollingService,
            core$1.TranslateService])
    ], /* @ngInject */ PageSynchronizationPanelComponent);
    return /* @ngInject */ PageSynchronizationPanelComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageSynchronizationPanelModalComponent", {
    selector: 'se-page-synchronization-panel-modal',
    template: "\n        <se-page-synchronization-panel\n            *ngIf=\"isReady\"\n            (selectedItemsUpdate)=\"onSelectedItemsUpdate($event)\"\n            [uriContext]=\"data.uriContext\"\n            [cmsPage]=\"data.cmsPage\"\n            [showFooter]=\"false\"\n        ></se-page-synchronization-panel>\n    ",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var PageSynchronizationPanelModalComponent = /** @class */ (function () {
    function PageSynchronizationPanelModalComponent(modalManager, cdr) {
        this.modalManager = modalManager;
        this.cdr = cdr;
        this.syncBtnId = 'sync';
    }
    PageSynchronizationPanelModalComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.modalManager.addButtons([
            {
                id: 'cancel',
                label: 'se.cms.component.confirmation.modal.cancel',
                style: smarteditcommons.FundamentalModalButtonStyle.Default,
                action: smarteditcommons.FundamentalModalButtonAction.Dismiss
            },
            {
                id: this.syncBtnId,
                label: 'se.cms.actionitem.page.sync',
                style: smarteditcommons.FundamentalModalButtonStyle.Primary,
                action: smarteditcommons.FundamentalModalButtonAction.Close,
                disabled: true,
                callback: function () {
                    return rxjs.from(_this.pageSynchronizationPanelComponent.syncItems());
                }
            }
        ]);
        this.modalManager
            .getModalData()
            .pipe(operators.take(1))
            .subscribe(function (data) {
            _this.data = data;
            _this.isReady = true;
            _this.cdr.detectChanges();
        });
    };
    PageSynchronizationPanelModalComponent.prototype.onSelectedItemsUpdate = function (selectedItems) {
        if (selectedItems.length === 0) {
            this.modalManager.disableButton(this.syncBtnId);
            return;
        }
        this.modalManager.enableButton(this.syncBtnId);
    };
    __decorate([
        core.ViewChild(PageSynchronizationPanelComponent, { static: false }),
        __metadata("design:type", PageSynchronizationPanelComponent)
    ], PageSynchronizationPanelModalComponent.prototype, "pageSynchronizationPanelComponent", void 0);
    PageSynchronizationPanelModalComponent = __decorate([
        core.Component({
            selector: 'se-page-synchronization-panel-modal',
            template: "\n        <se-page-synchronization-panel\n            *ngIf=\"isReady\"\n            (selectedItemsUpdate)=\"onSelectedItemsUpdate($event)\"\n            [uriContext]=\"data.uriContext\"\n            [cmsPage]=\"data.cmsPage\"\n            [showFooter]=\"false\"\n        ></se-page-synchronization-panel>\n    ",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [smarteditcommons.FundamentalModalManagerService,
            core.ChangeDetectorRef])
    ], PageSynchronizationPanelModalComponent);
    return PageSynchronizationPanelModalComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageSyncMenuToolbarItemComponent", {
    selector: 'se-page-sync-menu-toolbar-item',
    template: "<ng-container *seHasOperationPermission=\"'se.sync.catalog'\"><fd-popover [(isOpen)]=\"toolbarItem.isOpen\" [closeOnOutsideClick]=\"true\"><fd-popover-control><button type=\"button\" class=\"btn toolbar-action--button\" [attr.aria-expanded]=\"toolbarItem.isOpen\"><span class=\"icon-synchronize se-toolbar-menu-ddlb--button__icon\"><span *ngIf=\"isNotInSync\" class=\"hyicon hyicon-caution se-toolbar-menu-ddlb--button__caution\"></span> </span><span class=\"toolbar-action-button__txt\" [ngClass]=\"{'se-toolbar-menu-ddlb--button__txt': isNotInSync }\" [translate]=\"toolbarItem.name\"></span></button></fd-popover-control><fd-popover-body><div *ngIf=\"toolbarItem.isOpen && isReady\" class=\"toolbar-action--include se-sync-menu-content__dropdown\"><se-prevent-vertical-overflow><div class=\"se-sync-menu-content__header\"><span class=\"se-sync-menu-content__header-title\" translate=\"se.cms.synchronization.page.title\"></span><se-help *ngIf=\"!syncPageConditions?.canSyncHomepage && !syncPageConditions?.pageHasNoDepOrNoSyncStatus\" class=\"se-page-sync__y-help\"><span>{{ helpText }}</span></se-help></div><se-page-synchronization-panel [cmsPage]=\"cmsPage\" [uriContext]=\"uriContext\"></se-page-synchronization-panel></se-prevent-vertical-overflow></div></fd-popover-body></fd-popover></ng-container>",
    styles: [".se-toolbar-menu-ddlb--button__icon{position:relative}.se-toolbar-menu-ddlb--button__caution{position:absolute;color:#e9730c;right:-9px;bottom:1px}.se-sync-menu-content__header{padding:15px 20px 0}.se-sync-menu-content__header-title{text-transform:capitalize;font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-sync-menu-content__dropdown{box-shadow:0 6px 12px rgba(0,0,0,.175);background-color:#fff;border-radius:4px!important;min-width:100px;width:fit-content;position:absolute;border:1px solid #d9d9d9;z-index:2000;top:96%;max-width:400px}.se-sync-menu-content__dropdown::before{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#d9d9d9;border-bottom-color:var(var(--fd-color-neutral-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-8px}.se-sync-menu-content__dropdown::after{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#fff;border-bottom-color:var(var(--fd-color-background-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-7px}.se-sync-menu-content__dropdown::after,.se-sync-menu-content__dropdown::before{left:14px}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ PageSyncMenuToolbarItemComponent = /** @class */ (function () {
    PageSyncMenuToolbarItemComponent.$inject = ["crossFrameEventService", "systemEventService", "catalogService", "pageService", "pageInfoService", "syncPollingService", "translateService", "logService", "cdr", "toolbarItem"];
    function /* @ngInject */ PageSyncMenuToolbarItemComponent(crossFrameEventService, systemEventService, catalogService, pageService, pageInfoService, syncPollingService, translateService, logService, cdr, toolbarItem) {
        this.crossFrameEventService = crossFrameEventService;
        this.systemEventService = systemEventService;
        this.catalogService = catalogService;
        this.pageService = pageService;
        this.pageInfoService = pageInfoService;
        this.syncPollingService = syncPollingService;
        this.translateService = translateService;
        this.logService = logService;
        this.cdr = cdr;
        this.toolbarItem = toolbarItem;
        this.isReady = false;
    }
    /* @ngInject */ PageSyncMenuToolbarItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.unRegisterPageChange = this.crossFrameEventService.subscribe(smarteditcommons.EVENTS.PAGE_CHANGE, function () {
            return _this.setup();
        });
        this.unRegisterSyncPageConditions = this.systemEventService.subscribe(PAGE_SYNC_STATUS_READY, function (_event, syncPageConditions) {
            _this.syncPageConditions = syncPageConditions;
            _this.setHelpText();
            _this.cdr.detectChanges();
        });
        return this.setup();
    };
    /* @ngInject */ PageSyncMenuToolbarItemComponent.prototype.ngOnDestroy = function () {
        this.unRegisterSyncPageConditions();
        this.unRegisterPageChange();
        if (this.unRegisterSyncPolling) {
            this.unRegisterSyncPolling();
        }
    };
    /* @ngInject */ PageSyncMenuToolbarItemComponent.prototype.setup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isNonActive, error_1;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.isReady = false;
                        this.isNotInSync = false;
                        this.cdr.detectChanges();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.fetchSynchronizationPanelInfo()];
                    case 2:
                        _a = _b.sent(), this.cmsPage = _a[0], this.uriContext = _a[1];
                        return [4 /*yield*/, this.catalogService.isContentCatalogVersionNonActive()];
                    case 3:
                        isNonActive = _b.sent();
                        if (!isNonActive) {
                            return [2 /*return*/];
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _b.sent();
                        this.logService.error('Failed to setup PageSyncMenuToolbarItemComponent', error_1);
                        return [2 /*return*/];
                    case 5:
                        this.subscribeSyncPolling();
                        this.fetchSyncStatusAndSetIsNotInSync();
                        this.isReady = true;
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageSyncMenuToolbarItemComponent.prototype.fetchSynchronizationPanelInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.all([
                        this.pageService.getCurrentPageInfo(),
                        this.catalogService.retrieveUriContext()
                    ]).catch(function (error) {
                        _this.logService.error('Failed to fetch Synchronization Panel Info', error);
                        throw new Error(error);
                    })];
            });
        });
    };
    /* @ngInject */ PageSyncMenuToolbarItemComponent.prototype.subscribeSyncPolling = function () {
        var _this = this;
        if (this.unRegisterSyncPolling) {
            this.unRegisterSyncPolling();
        }
        this.unRegisterSyncPolling = this.crossFrameEventService.subscribe(cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.FAST_FETCH, function () { return _this.fetchSyncStatusAndSetIsNotInSync(); });
    };
    /* @ngInject */ PageSyncMenuToolbarItemComponent.prototype.fetchSyncStatusAndSetIsNotInSync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var syncStatus;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchSyncStatus()];
                    case 1:
                        syncStatus = _a.sent();
                        this.isNotInSync = !cmscommons.synchronizationUtils.isInSync(syncStatus);
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageSyncMenuToolbarItemComponent.prototype.fetchSyncStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageUUID;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 1:
                        pageUUID = _a.sent();
                        return [2 /*return*/, this.syncPollingService.getSyncStatus(pageUUID)];
                }
            });
        });
    };
    /* @ngInject */ PageSyncMenuToolbarItemComponent.prototype.setHelpText = function () {
        var helpText = this.translateService.instant('se.cms.synchronization.page.header');
        if (!this.syncPageConditions.pageHasNoDepOrNoSyncStatus) {
            helpText += " " + this.translateService.instant('se.cms.synchronization.page.header.help');
        }
        this.helpText = helpText;
    };
    /* @ngInject */ PageSyncMenuToolbarItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-sync-menu-toolbar-item',
            template: "<ng-container *seHasOperationPermission=\"'se.sync.catalog'\"><fd-popover [(isOpen)]=\"toolbarItem.isOpen\" [closeOnOutsideClick]=\"true\"><fd-popover-control><button type=\"button\" class=\"btn toolbar-action--button\" [attr.aria-expanded]=\"toolbarItem.isOpen\"><span class=\"icon-synchronize se-toolbar-menu-ddlb--button__icon\"><span *ngIf=\"isNotInSync\" class=\"hyicon hyicon-caution se-toolbar-menu-ddlb--button__caution\"></span> </span><span class=\"toolbar-action-button__txt\" [ngClass]=\"{'se-toolbar-menu-ddlb--button__txt': isNotInSync }\" [translate]=\"toolbarItem.name\"></span></button></fd-popover-control><fd-popover-body><div *ngIf=\"toolbarItem.isOpen && isReady\" class=\"toolbar-action--include se-sync-menu-content__dropdown\"><se-prevent-vertical-overflow><div class=\"se-sync-menu-content__header\"><span class=\"se-sync-menu-content__header-title\" translate=\"se.cms.synchronization.page.title\"></span><se-help *ngIf=\"!syncPageConditions?.canSyncHomepage && !syncPageConditions?.pageHasNoDepOrNoSyncStatus\" class=\"se-page-sync__y-help\"><span>{{ helpText }}</span></se-help></div><se-page-synchronization-panel [cmsPage]=\"cmsPage\" [uriContext]=\"uriContext\"></se-page-synchronization-panel></se-prevent-vertical-overflow></div></fd-popover-body></fd-popover></ng-container>",
            styles: [".se-toolbar-menu-ddlb--button__icon{position:relative}.se-toolbar-menu-ddlb--button__caution{position:absolute;color:#e9730c;right:-9px;bottom:1px}.se-sync-menu-content__header{padding:15px 20px 0}.se-sync-menu-content__header-title{text-transform:capitalize;font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-sync-menu-content__dropdown{box-shadow:0 6px 12px rgba(0,0,0,.175);background-color:#fff;border-radius:4px!important;min-width:100px;width:fit-content;position:absolute;border:1px solid #d9d9d9;z-index:2000;top:96%;max-width:400px}.se-sync-menu-content__dropdown::before{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#d9d9d9;border-bottom-color:var(var(--fd-color-neutral-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-8px}.se-sync-menu-content__dropdown::after{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#fff;border-bottom-color:var(var(--fd-color-background-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-7px}.se-sync-menu-content__dropdown::after,.se-sync-menu-content__dropdown::before{left:14px}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(9, core.Inject(smarteditcommons.TOOLBAR_ITEM)),
        __metadata("design:paramtypes", [smarteditcommons.CrossFrameEventService,
            smarteditcommons.SystemEventService,
            smarteditcommons.ICatalogService,
            cmscommons.IPageService,
            smarteditcommons.IPageInfoService,
            cmscommons.ISyncPollingService,
            core$1.TranslateService,
            smarteditcommons.LogService,
            core.ChangeDetectorRef, Object])
    ], /* @ngInject */ PageSyncMenuToolbarItemComponent);
    return /* @ngInject */ PageSyncMenuToolbarItemComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "CatalogDetailsSyncComponent", {
    selector: 'se-catalog-details-sync',
    template: "\n        <se-synchronize-catalog\n            [catalog]=\"catalogDetails.catalog\"\n            [catalogVersion]=\"catalogDetails.catalogVersion\"\n            [activeCatalogVersion]=\"catalogDetails.activeCatalogVersion\"\n        >\n        </se-synchronize-catalog>\n    "
});
var /* @ngInject */ CatalogDetailsSyncComponent = /** @class */ (function () {
    CatalogDetailsSyncComponent.$inject = ["catalogDetails"];
    function /* @ngInject */ CatalogDetailsSyncComponent(catalogDetails) {
        this.catalogDetails = catalogDetails;
    }
    /* @ngInject */ CatalogDetailsSyncComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-catalog-details-sync',
            template: "\n        <se-synchronize-catalog\n            [catalog]=\"catalogDetails.catalog\"\n            [catalogVersion]=\"catalogDetails.catalogVersion\"\n            [activeCatalogVersion]=\"catalogDetails.activeCatalogVersion\"\n        >\n        </se-synchronize-catalog>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.CATALOG_DETAILS_ITEM_DATA)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ CatalogDetailsSyncComponent);
    return /* @ngInject */ CatalogDetailsSyncComponent;
}());

var SynchronizationModule = /** @class */ (function () {
    function SynchronizationModule() {
    }
    SynchronizationModule = __decorate([
        core.NgModule({
            imports: [
                common.CommonModule,
                smarteditcommons.TranslationModule.forChild(),
                core$2.PopoverModule,
                smarteditcommons.L10nPipeModule,
                smarteditcommons.HasOperationPermissionDirectiveModule,
                cmscommons.SynchronizationPanelModule,
                smarteditcommons.PreventVerticalOverflowModule,
                smarteditcommons.HelpModule
            ],
            declarations: [
                SynchronizeCatalogComponent,
                PageSynchronizationHeaderComponent,
                PageSynchronizationPanelComponent,
                PageSynchronizationPanelModalComponent,
                PageSyncMenuToolbarItemComponent,
                CatalogDetailsSyncComponent
            ],
            entryComponents: [
                SynchronizeCatalogComponent,
                PageSynchronizationHeaderComponent,
                PageSynchronizationPanelComponent,
                PageSynchronizationPanelModalComponent,
                PageSyncMenuToolbarItemComponent,
                CatalogDetailsSyncComponent
            ]
        })
    ], SynchronizationModule);
    return SynchronizationModule;
}());

var PAGE_APPROVAL_SELECTOR_CLOSE_CALLBACK_ID = 'pageApprovalSelectorClose';
window.__smartedit__.addDecoratorPayload("Component", "PageApprovalSelectorComponent", {
    selector: 'se-page-approval-selector',
    template: "<se-dropdown-menu *ngIf=\"showDropdown\" [useProjectedAnchor]=\"true\" [dropdownItems]=\"pageApprovalOptions$ | async\" [(isOpen)]=\"isOpen\" (isOpenChange)=\"onDropdownToggle($event)\" [additionalClasses]=\"['se-page-approval-selector-list']\"><button class=\"se-page-approval-selector__toggle-btn fd-button--light sap-icon--navigation-down-arrow\"></button></se-dropdown-menu>",
    styles: [".se-page-approval-selector__toggle-btn{color:#0a6ed1}.se-page-approval-selector__toggle-btn::before{font-size:1rem;line-height:1.4285714286;font-weight:400}.se-page-approval-selector__toggle-btn:active,.se-page-approval-selector__toggle-btn:focus{box-shadow:none}.se-page-approval-selector__toggle-btn:active,.se-page-approval-selector__toggle-btn:hover{outline:0;border-color:var(--sapButton_Hover_BorderColor);background-color:#fff}.se-page-approval-selector__icon--draft,.se-page-approval-selector__icon--ready-to-sync{width:12px;height:12px;border-radius:50%;margin-right:10px}.se-page-approval-selector__icon--draft{background-color:#6a6d70}.se-page-approval-selector__icon--ready-to-sync{background-color:#0a6ed1}.se-page-approval-selector-list{margin:0;min-width:190px;border:1px solid transparent;box-shadow:0 2px 8px 0 #d9d9d9;border-radius:4px}.se-page-approval-selector .se-dropdown-item{display:flex;align-items:center}.se-page-approval-selector .se-dropdown-item:hover{background-color:var(--sapBackgroundColor,#f7f7f7)}.se-page-approval-selector .fd-popover-container-custom{box-shadow:var(--sapContent_Shadow0)}.se-page-approval-selector .fd-menu{padding:0}"],
    host: {
        '[class.se-page-approval-selector]': 'true'
    },
    encapsulation: core.ViewEncapsulation.None,
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ PageApprovalSelectorComponent = /** @class */ (function () {
    PageApprovalSelectorComponent.$inject = ["iframeClickDetectionService", "pageService", "waitDialogService", "workflowService", "crossFrameEventService", "routingService", "logService", "cdr"];
    function /* @ngInject */ PageApprovalSelectorComponent(iframeClickDetectionService, pageService, waitDialogService, workflowService, crossFrameEventService, routingService, logService, cdr) {
        var _this = this;
        this.iframeClickDetectionService = iframeClickDetectionService;
        this.pageService = pageService;
        this.waitDialogService = waitDialogService;
        this.workflowService = workflowService;
        this.crossFrameEventService = crossFrameEventService;
        this.routingService = routingService;
        this.logService = logService;
        this.cdr = cdr;
        this.isOpen = false;
        this.showDropdown = true;
        this.pageApprovalOptionsSubject = new rxjs.BehaviorSubject({
            CHECK: {
                status: cmscommons.CmsApprovalStatus.CHECK,
                key: 'se.cms.page.approval.check',
                icon: 'se-page-approval-selector__icon--draft',
                callback: function (_selectedItem, clickedItem) {
                    return _this.selectApprovalStatus(clickedItem);
                }
            },
            APPROVED: {
                status: cmscommons.CmsApprovalStatus.APPROVED,
                key: 'se.cms.page.approval.approved',
                icon: 'se-page-approval-selector__icon--ready-to-sync',
                callback: function (_selectedItem, clickedItem) {
                    return _this.selectApprovalStatus(clickedItem);
                }
            }
        });
    }
    /* @ngInject */ PageApprovalSelectorComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.unRegWfFinishedHandler = this.crossFrameEventService.subscribe(cmscommons.WORKFLOW_FINISHED_EVENT, function () { return _this.hideComponentIfWorkflowInProgress(); });
                        this.unRegPerspectiveChangedHandler = this.crossFrameEventService.subscribe(smarteditcommons.EVENT_PERSPECTIVE_CHANGED, function () { return _this.hideComponentIfWorkflowInProgress(); });
                        this.iframeClickDetectionService.registerCallback(PAGE_APPROVAL_SELECTOR_CLOSE_CALLBACK_ID, function () { return _this.closeDropdown(); });
                        this.pageApprovalOptions$ = this.pageApprovalOptionsSubject.pipe(operators.map(function (options) { return Object.values(options).filter(function (option) { return !option.selected; }); }));
                        return [4 /*yield*/, this.hideComponentIfWorkflowInProgress()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageApprovalSelectorComponent.prototype.ngOnDestroy = function () {
        this.unRegWfFinishedHandler();
        this.unRegPerspectiveChangedHandler();
        this.iframeClickDetectionService.removeCallback(PAGE_APPROVAL_SELECTOR_CLOSE_CALLBACK_ID);
    };
    /* @ngInject */ PageApprovalSelectorComponent.prototype.onDropdownToggle = function (isOpen) {
        return __awaiter(this, void 0, void 0, function () {
            var approvalStatus;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!isOpen) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getCurrentPageApprovalStatus()];
                    case 1:
                        approvalStatus = _a.sent();
                        this.selectOption(approvalStatus);
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    PageApprovalSelectorComponent.prototype.onDropdownToggle.$inject = ["isOpen"];
    /* @ngInject */ PageApprovalSelectorComponent.prototype.selectApprovalStatus = function (_a) {
        var status = _a.status;
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.waitDialogService.showWaitModal(null);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.pageService.forcePageApprovalStatus(status)];
                    case 2:
                        _b.sent();
                        this.crossFrameEventService.publish(smarteditcommons.EVENTS.PAGE_UPDATED);
                        this.routingService.reload();
                        return [3 /*break*/, 5];
                    case 3:
                        error_1 = _b.sent();
                        this.logService.warn("[PageApprovalSelector] - Can't change page status.", error_1);
                        return [3 /*break*/, 5];
                    case 4:
                        this.waitDialogService.hideWaitModal();
                        this.unselectOptions();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PageApprovalSelectorComponent.prototype.selectApprovalStatus.$inject = ["_a"];
    /* @ngInject */ PageApprovalSelectorComponent.prototype.getCurrentPageApprovalStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            var approvalStatus;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                    case 1:
                        approvalStatus = (_a.sent()).approvalStatus;
                        return [2 /*return*/, approvalStatus];
                }
            });
        });
    };
    /* @ngInject */ PageApprovalSelectorComponent.prototype.hideComponentIfWorkflowInProgress = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uuid, workflow;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                    case 1:
                        uuid = (_a.sent()).uuid;
                        return [4 /*yield*/, this.workflowService.getActiveWorkflowForPageUuid(uuid)];
                    case 2:
                        workflow = _a.sent();
                        this.showDropdown = !workflow;
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageApprovalSelectorComponent.prototype.selectOption = function (option) {
        this.unselectOptions();
        var options = this.getOptions();
        if (options[option]) {
            options[option].selected = true;
        }
        this.pageApprovalOptionsSubject.next(options);
    };
    PageApprovalSelectorComponent.prototype.selectOption.$inject = ["option"];
    /* @ngInject */ PageApprovalSelectorComponent.prototype.unselectOptions = function () {
        var options = this.getOptions();
        Object.keys(options).forEach(function (key) {
            options[key].selected = false;
        });
        this.pageApprovalOptionsSubject.next(options);
    };
    /* @ngInject */ PageApprovalSelectorComponent.prototype.getOptions = function () {
        return __assign({}, this.pageApprovalOptionsSubject.getValue());
    };
    /* @ngInject */ PageApprovalSelectorComponent.prototype.closeDropdown = function () {
        this.isOpen = false;
        this.cdr.detectChanges();
    };
    /* @ngInject */ PageApprovalSelectorComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-approval-selector',
            template: "<se-dropdown-menu *ngIf=\"showDropdown\" [useProjectedAnchor]=\"true\" [dropdownItems]=\"pageApprovalOptions$ | async\" [(isOpen)]=\"isOpen\" (isOpenChange)=\"onDropdownToggle($event)\" [additionalClasses]=\"['se-page-approval-selector-list']\"><button class=\"se-page-approval-selector__toggle-btn fd-button--light sap-icon--navigation-down-arrow\"></button></se-dropdown-menu>",
            styles: [".se-page-approval-selector__toggle-btn{color:#0a6ed1}.se-page-approval-selector__toggle-btn::before{font-size:1rem;line-height:1.4285714286;font-weight:400}.se-page-approval-selector__toggle-btn:active,.se-page-approval-selector__toggle-btn:focus{box-shadow:none}.se-page-approval-selector__toggle-btn:active,.se-page-approval-selector__toggle-btn:hover{outline:0;border-color:var(--sapButton_Hover_BorderColor);background-color:#fff}.se-page-approval-selector__icon--draft,.se-page-approval-selector__icon--ready-to-sync{width:12px;height:12px;border-radius:50%;margin-right:10px}.se-page-approval-selector__icon--draft{background-color:#6a6d70}.se-page-approval-selector__icon--ready-to-sync{background-color:#0a6ed1}.se-page-approval-selector-list{margin:0;min-width:190px;border:1px solid transparent;box-shadow:0 2px 8px 0 #d9d9d9;border-radius:4px}.se-page-approval-selector .se-dropdown-item{display:flex;align-items:center}.se-page-approval-selector .se-dropdown-item:hover{background-color:var(--sapBackgroundColor,#f7f7f7)}.se-page-approval-selector .fd-popover-container-custom{box-shadow:var(--sapContent_Shadow0)}.se-page-approval-selector .fd-menu{padding:0}"],
            host: {
                '[class.se-page-approval-selector]': 'true'
            },
            encapsulation: core.ViewEncapsulation.None,
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [smarteditcommons.IIframeClickDetectionService,
            cmscommons.IPageService,
            smarteditcommons.IWaitDialogService,
            WorkflowService,
            smarteditcommons.CrossFrameEventService,
            smarteditcommons.SmarteditRoutingService,
            smarteditcommons.LogService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ PageApprovalSelectorComponent);
    return /* @ngInject */ PageApprovalSelectorComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageDisplayStatusWrapperComponent", {
    selector: 'se-page-display-status-wrapper',
    template: "\n        <div class=\"se-page-status-toolbar-container\">\n            <se-page-display-status></se-page-display-status>\n        </div>\n    ",
    styles: [
        "\n            .se-page-status-toolbar-container {\n                padding-left: 5px;\n                padding-right: 20px;\n                height: 100%;\n                display: flex;\n                align-items: center;\n                border-left: 1px solid fd-color('neutral', 3);\n            }\n        "
    ],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ PageDisplayStatusWrapperComponent = /** @class */ (function () {
    function /* @ngInject */ PageDisplayStatusWrapperComponent() {
    }
    /* @ngInject */ PageDisplayStatusWrapperComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-display-status-wrapper',
            template: "\n        <div class=\"se-page-status-toolbar-container\">\n            <se-page-display-status></se-page-display-status>\n        </div>\n    ",
            styles: [
                "\n            .se-page-status-toolbar-container {\n                padding-left: 5px;\n                padding-right: 20px;\n                height: 100%;\n                display: flex;\n                align-items: center;\n                border-left: 1px solid fd-color('neutral', 3);\n            }\n        "
            ],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        })
    ], /* @ngInject */ PageDisplayStatusWrapperComponent);
    return /* @ngInject */ PageDisplayStatusWrapperComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageWorkflowMenuAllTasksTabComponent", {
    selector: 'se-page-workflow-menu-all-tasks-tab',
    template: "\n        <se-page-workflow-menu-tasks-tab\n            [actions]=\"actions\"\n            [workflow]=\"workflow\"\n            [canMakeDecisions]=\"false\"\n        >\n        </se-page-workflow-menu-tasks-tab>\n    "
});
var PageWorkflowMenuAllTasksTabComponent = /** @class */ (function () {
    function PageWorkflowMenuAllTasksTabComponent(tabData) {
        var _a;
        (_a = tabData.model, this.actions = _a.actions, this.workflow = _a.workflow);
    }
    PageWorkflowMenuAllTasksTabComponent = __decorate([
        core.Component({
            selector: 'se-page-workflow-menu-all-tasks-tab',
            template: "\n        <se-page-workflow-menu-tasks-tab\n            [actions]=\"actions\"\n            [workflow]=\"workflow\"\n            [canMakeDecisions]=\"false\"\n        >\n        </se-page-workflow-menu-tasks-tab>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.TAB_DATA)),
        __metadata("design:paramtypes", [Object])
    ], PageWorkflowMenuAllTasksTabComponent);
    return PageWorkflowMenuAllTasksTabComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageWorkflowMenuCurrentTasksTabComponent", {
    selector: 'se-page-workflow-menu-current-tasks-tab',
    template: "\n        <se-page-workflow-menu-tasks-tab\n            [actions]=\"currentActions\"\n            [workflow]=\"workflow\"\n            [canMakeDecisions]=\"true\"\n        >\n        </se-page-workflow-menu-tasks-tab>\n    "
});
var PageWorkflowMenuCurrentTasksTabComponent = /** @class */ (function () {
    function PageWorkflowMenuCurrentTasksTabComponent(tabData) {
        var _a;
        (_a = tabData.model, this.actions = _a.actions, this.workflow = _a.workflow);
    }
    PageWorkflowMenuCurrentTasksTabComponent.prototype.ngOnInit = function () {
        this.currentActions = this.actions.filter(function (action) { return action.status.toLowerCase() === WorkflowActionStatus.IN_PROGRESS; });
    };
    PageWorkflowMenuCurrentTasksTabComponent = __decorate([
        core.Component({
            selector: 'se-page-workflow-menu-current-tasks-tab',
            template: "\n        <se-page-workflow-menu-tasks-tab\n            [actions]=\"currentActions\"\n            [workflow]=\"workflow\"\n            [canMakeDecisions]=\"true\"\n        >\n        </se-page-workflow-menu-tasks-tab>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.TAB_DATA)),
        __metadata("design:paramtypes", [Object])
    ], PageWorkflowMenuCurrentTasksTabComponent);
    return PageWorkflowMenuCurrentTasksTabComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageWorkflowMenuComponent", {
    selector: 'se-page-workflow-menu',
    template: "<div *ngIf=\"isReady\"><div *ngIf=\"!pageHasWorkflow && isWorkflowEnabled\"><ng-container *seHasOperationPermission=\"'se.start.page.workflow'\"><button id=\"smartEditPerspectiveToolbar_option_se.cms.startWorkflow_btn\" class=\"btn toolbar-action--button\" type=\"button\" (click)=\"startWorkflow()\" aria-expanded=\"false\"><span id=\"smartEditPerspectiveToolbar_option_se.cms.startWorkflow_btn_lbl\" class=\"toolbar-action-button__txt\" translate=\"se.cms.workflow.toolbar.start.workflow\"></span></button></ng-container></div><div *seHasOperationPermission=\"'se.view.page.workflowMenu'\"><fd-popover *ngIf=\"pageHasWorkflow\" class=\"toolbar-action\" [closeOnOutsideClick]=\"true\" [isOpen]=\"actionItem.isOpen\" (isOpenChange)=\"onDropdownToggle($event)\"><fd-popover-control><button type=\"button\" class=\"page-tasks-btn toolbar-action--button\" [attr.aria-expanded]=\"actionItem.isOpen\"><span class=\"page-tasks-btn__icon sap-icon--workflow-tasks\"></span> <span class=\"page-tasks-btn__label\" translate=\"se.cms.workflow.toolbar.view.workflow.menu\"></span></button></fd-popover-control><fd-popover-body><div *ngIf=\"actionItem.isOpen\" class=\"toolbar-action--include se-page-workflow-menu\"><div class=\"se-page-workflow-menu__header\"><div class=\"se-page-workflow-menu__header-text\" translate=\"se.cms.workflow.toolbar.view.workflow.menu\"></div><div class=\"se-page-workflow-menu__header-menu\"><se-workflow-item-menu [workflowInfo]=\"workflow\"></se-workflow-item-menu></div></div><div class=\"se-version-toolbar-menu-content__body\"><div class=\"se-page-workflow-menu-tabs\"><se-tabs *ngIf=\"areTabsReady; else spinner\" [tabsList]=\"tabsList\" [model]=\"tabsData\" [numTabsDisplayed]=\"2\"></se-tabs><ng-template #spinner><se-spinner [isSpinning]=\"true\"></se-spinner></ng-template></div></div></div></fd-popover-body></fd-popover></div></div>",
    styles: ["/*!\n * Fundamental Library Styles v0.4.1\n * Copyright (c) 2020 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n.fd-button-split+()\n    .fd-button\n*/.fd-button-split{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0;margin:0;border:0;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle;position:relative}.fd-button-split:after,.fd-button-split:before{-webkit-box-sizing:inherit;box-sizing:inherit;font-size:inherit}.fd-button-split :first-child{margin:0;border-top-right-radius:0;border-bottom-right-radius:0}.fd-button-split :nth-child(2){margin:0;border-top-left-radius:0;border-bottom-left-radius:0;border-left-width:0}.fd-button-split[dir=rtl] :first-child,[dir=rtl] .fd-button-split :first-child{border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:.25rem;border-top-right-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-right-radius:.25rem;border-bottom-right-radius:var(--sapButton_BorderCornerRadius,.25rem)}.fd-button-split[dir=rtl] :nth-child(2),[dir=rtl] .fd-button-split :nth-child(2){border-top-left-radius:.25rem;border-top-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-left-radius:.25rem;border-bottom-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-top-right-radius:0;border-bottom-right-radius:0;border-left-width:.0625rem;border-left-width:var(--sapButton_BorderWidth,.0625rem);border-right-width:0}.fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:1px}.fd-button-split [class*=\"--emphasized\"][dir=rtl]:first-child,[dir=rtl] .fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:0;margin-left:1px}se-page-workflow-menu .toolbar-action .page-tasks-btn[aria-expanded=true]{background-color:rgba(10,110,209,.07)}se-page-workflow-menu .toolbar-action .page-tasks-btn__label{font-size:14px;color:#32363a}se-page-workflow-menu .toolbar-action .page-tasks-btn__icon{color:#0a6ed1;font-size:18px;margin-right:8px}se-page-workflow-menu .se-page-workflow-menu{box-shadow:0 6px 12px rgba(0,0,0,.175);background-color:#fff;border-radius:4px!important;min-width:100px;width:fit-content;position:absolute;border:1px solid #d9d9d9;z-index:2000;top:96%;min-width:350px;min-height:130px;right:-126px;left:auto;font-size:14px;font-family:'72',-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;line-height:20/14}se-page-workflow-menu .se-page-workflow-menu::before{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#d9d9d9;border-bottom-color:var(var(--fd-color-neutral-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-8px}se-page-workflow-menu .se-page-workflow-menu::after{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#fff;border-bottom-color:var(var(--fd-color-background-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-7px}se-page-workflow-menu .se-page-workflow-menu,se-page-workflow-menu .se-page-workflow-menu::after,se-page-workflow-menu .se-page-workflow-menu::before{left:50%;transform:translate(-50%)}se-page-workflow-menu .se-page-workflow-menu__header{display:flex;justify-content:space-between}se-page-workflow-menu .se-page-workflow-menu__header-text{font-size:16px;padding:20px 0 0 16px}se-page-workflow-menu .se-page-workflow-menu__header-menu{padding:16px 16px 0 0}se-page-workflow-menu .se-page-workflow-menu-tabs .se-tabset{margin:0}se-page-workflow-menu .se-page-workflow-menu-tabs .se-tabset__tab{margin-left:16px}se-page-workflow-menu .se-page-workflow-menu-tabs .se-tabset__link{color:#32363a}se-page-workflow-menu .se-page-workflow-menu-tabs .se-tabset__link:hover{color:#0a6ed1}"],
    encapsulation: core.ViewEncapsulation.None,
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ PageWorkflowMenuComponent = /** @class */ (function () {
    PageWorkflowMenuComponent.$inject = ["workflowService", "workflowFacade", "systemEventService", "routingService", "pageService", "cdr", "actionItem"];
    function /* @ngInject */ PageWorkflowMenuComponent(workflowService, workflowFacade, systemEventService, routingService, pageService, cdr, actionItem) {
        this.workflowService = workflowService;
        this.workflowFacade = workflowFacade;
        this.systemEventService = systemEventService;
        this.routingService = routingService;
        this.pageService = pageService;
        this.cdr = cdr;
        this.actionItem = actionItem;
        this.isReady = false;
        this.isWorkflowEnabled = false;
        this.areTabsReady = false;
        this.pageHasWorkflow = false;
        this.tabsList = [
            {
                id: 'currentTasksTab',
                title: 'se.cms.page.workflow.tabs.currenttasks',
                hasErrors: false,
                component: PageWorkflowMenuCurrentTasksTabComponent
            },
            {
                id: 'allTasksTab',
                title: 'se.cms.page.workflow.tabs.alltasks',
                hasErrors: false,
                component: PageWorkflowMenuAllTasksTabComponent
            }
        ];
        this.tabsData = {
            workflow: null,
            actions: []
        };
    }
    /* @ngInject */ PageWorkflowMenuComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.unRegOpenMenuEvent = this.systemEventService.subscribe(CMS_EVENT_OPEN_PAGE_WORKFLOW_MENU, function (_eventId, open) { return _this.onDropdownToggle(open); });
                        this.unRegPerspectiveChangedEvent = this.systemEventService.subscribe(smarteditcommons.EVENT_PERSPECTIVE_CHANGED, function () { return _this.loadWorkflow(); });
                        this.unRegWorkflowFinishedEvent = this.systemEventService.subscribe(cmscommons.WORKFLOW_FINISHED_EVENT, function () { return _this.loadWorkflow(); });
                        this.unRegDecisionSelectedEvent = this.systemEventService.subscribe(WORKFLOW_DECISION_SELECTED_EVENT, function () { return _this.closeDropdown(); });
                        this.unRegWorkflowRefreshEvent = this.systemEventService.subscribe(WORKFLOW_REFRESH_EVENT, function () { return _this.loadWorkflow(); });
                        return [4 /*yield*/, this.loadWorkflow()];
                    case 1:
                        _a.sent();
                        this.isReady = true;
                        this.actionItem.isOpen = false;
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageWorkflowMenuComponent.prototype.ngOnDestroy = function () {
        this.unRegOpenMenuEvent();
        this.unRegPerspectiveChangedEvent();
        this.unRegWorkflowFinishedEvent();
        this.unRegDecisionSelectedEvent();
        this.unRegWorkflowRefreshEvent();
    };
    Object.defineProperty(/* @ngInject */ PageWorkflowMenuComponent.prototype, "workflow", {
        get: function () {
            return this._workflow;
        },
        set: function (value) {
            this._workflow = value;
            this.tabsData.workflow = value;
        },
        enumerable: false,
        configurable: true
    });
    /* @ngInject */ PageWorkflowMenuComponent.prototype.onDropdownToggle = function (open) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.actionItem.isOpen = open;
                        if (!open) {
                            return [2 /*return*/];
                        }
                        this.systemEventService.publish(WORKFLOW_TASKS_MENU_OPENED_EVENT);
                        return [4 /*yield*/, this.loadWorkflowAndActions()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PageWorkflowMenuComponent.prototype.onDropdownToggle.$inject = ["open"];
    /* @ngInject */ PageWorkflowMenuComponent.prototype.startWorkflow = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.workflowFacade.startWorkflow()];
                    case 1:
                        _a.sent();
                        this.routingService.reload();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageWorkflowMenuComponent.prototype.loadWorkflowAndActions = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.areTabsReady = false;
                        this.cdr.detectChanges();
                        return [4 /*yield*/, this.loadWorkflow(false)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.loadActions()];
                    case 2:
                        _a.sent();
                        this.areTabsReady = true;
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageWorkflowMenuComponent.prototype.loadWorkflow = function (detectChanges) {
        if (detectChanges === void 0) { detectChanges = true; }
        return __awaiter(this, void 0, void 0, function () {
            var page, workflow;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                    case 1:
                        page = _a.sent();
                        return [4 /*yield*/, this.workflowService.getActiveWorkflowForPageUuid(page.uuid)];
                    case 2:
                        workflow = _a.sent();
                        this.workflow = workflow;
                        this.pageHasWorkflow = !!workflow;
                        this.isWorkflowEnabled = page.displayStatus === 'DRAFT';
                        if (detectChanges) {
                            this.cdr.detectChanges();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PageWorkflowMenuComponent.prototype.loadWorkflow.$inject = ["detectChanges"];
    /* @ngInject */ PageWorkflowMenuComponent.prototype.loadActions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var actions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.workflowFacade.getAllActionsForWorkflow(this.workflow.workflowCode)];
                    case 1:
                        actions = _a.sent();
                        this.setActions(actions);
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageWorkflowMenuComponent.prototype.setActions = function (actions) {
        var _this = this;
        actions.sort(function (a, b) { return _this.actionComparator(a, b); });
        this.tabsData.actions = actions;
    };
    PageWorkflowMenuComponent.prototype.setActions.$inject = ["actions"];
    /* @ngInject */ PageWorkflowMenuComponent.prototype.closeDropdown = function () {
        this.actionItem.isOpen = false;
        this.cdr.detectChanges();
    };
    /* @ngInject */ PageWorkflowMenuComponent.prototype.actionComparator = function (a, b) {
        var priorityA = this.getActionPriority(a);
        var priorityB = this.getActionPriority(b);
        return priorityA !== priorityB
            ? priorityA - priorityB
            : a.startedAgoInMillis - b.startedAgoInMillis;
    };
    PageWorkflowMenuComponent.prototype.actionComparator.$inject = ["a", "b"];
    /* @ngInject */ PageWorkflowMenuComponent.prototype.getActionPriority = function (action) {
        switch (action.status.toLowerCase()) {
            case WorkflowActionStatus.IN_PROGRESS:
                return 1;
            case WorkflowActionStatus.PENDING:
                return 2;
            case WorkflowActionStatus.COMPLETED:
                return 3;
            default:
                return 4;
        }
    };
    PageWorkflowMenuComponent.prototype.getActionPriority.$inject = ["action"];
    /* @ngInject */ PageWorkflowMenuComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-workflow-menu',
            template: "<div *ngIf=\"isReady\"><div *ngIf=\"!pageHasWorkflow && isWorkflowEnabled\"><ng-container *seHasOperationPermission=\"'se.start.page.workflow'\"><button id=\"smartEditPerspectiveToolbar_option_se.cms.startWorkflow_btn\" class=\"btn toolbar-action--button\" type=\"button\" (click)=\"startWorkflow()\" aria-expanded=\"false\"><span id=\"smartEditPerspectiveToolbar_option_se.cms.startWorkflow_btn_lbl\" class=\"toolbar-action-button__txt\" translate=\"se.cms.workflow.toolbar.start.workflow\"></span></button></ng-container></div><div *seHasOperationPermission=\"'se.view.page.workflowMenu'\"><fd-popover *ngIf=\"pageHasWorkflow\" class=\"toolbar-action\" [closeOnOutsideClick]=\"true\" [isOpen]=\"actionItem.isOpen\" (isOpenChange)=\"onDropdownToggle($event)\"><fd-popover-control><button type=\"button\" class=\"page-tasks-btn toolbar-action--button\" [attr.aria-expanded]=\"actionItem.isOpen\"><span class=\"page-tasks-btn__icon sap-icon--workflow-tasks\"></span> <span class=\"page-tasks-btn__label\" translate=\"se.cms.workflow.toolbar.view.workflow.menu\"></span></button></fd-popover-control><fd-popover-body><div *ngIf=\"actionItem.isOpen\" class=\"toolbar-action--include se-page-workflow-menu\"><div class=\"se-page-workflow-menu__header\"><div class=\"se-page-workflow-menu__header-text\" translate=\"se.cms.workflow.toolbar.view.workflow.menu\"></div><div class=\"se-page-workflow-menu__header-menu\"><se-workflow-item-menu [workflowInfo]=\"workflow\"></se-workflow-item-menu></div></div><div class=\"se-version-toolbar-menu-content__body\"><div class=\"se-page-workflow-menu-tabs\"><se-tabs *ngIf=\"areTabsReady; else spinner\" [tabsList]=\"tabsList\" [model]=\"tabsData\" [numTabsDisplayed]=\"2\"></se-tabs><ng-template #spinner><se-spinner [isSpinning]=\"true\"></se-spinner></ng-template></div></div></div></fd-popover-body></fd-popover></div></div>",
            styles: ["/*!\n * Fundamental Library Styles v0.4.1\n * Copyright (c) 2020 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n.fd-button-split+()\n    .fd-button\n*/.fd-button-split{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0;margin:0;border:0;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle;position:relative}.fd-button-split:after,.fd-button-split:before{-webkit-box-sizing:inherit;box-sizing:inherit;font-size:inherit}.fd-button-split :first-child{margin:0;border-top-right-radius:0;border-bottom-right-radius:0}.fd-button-split :nth-child(2){margin:0;border-top-left-radius:0;border-bottom-left-radius:0;border-left-width:0}.fd-button-split[dir=rtl] :first-child,[dir=rtl] .fd-button-split :first-child{border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:.25rem;border-top-right-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-right-radius:.25rem;border-bottom-right-radius:var(--sapButton_BorderCornerRadius,.25rem)}.fd-button-split[dir=rtl] :nth-child(2),[dir=rtl] .fd-button-split :nth-child(2){border-top-left-radius:.25rem;border-top-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-left-radius:.25rem;border-bottom-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-top-right-radius:0;border-bottom-right-radius:0;border-left-width:.0625rem;border-left-width:var(--sapButton_BorderWidth,.0625rem);border-right-width:0}.fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:1px}.fd-button-split [class*=\"--emphasized\"][dir=rtl]:first-child,[dir=rtl] .fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:0;margin-left:1px}se-page-workflow-menu .toolbar-action .page-tasks-btn[aria-expanded=true]{background-color:rgba(10,110,209,.07)}se-page-workflow-menu .toolbar-action .page-tasks-btn__label{font-size:14px;color:#32363a}se-page-workflow-menu .toolbar-action .page-tasks-btn__icon{color:#0a6ed1;font-size:18px;margin-right:8px}se-page-workflow-menu .se-page-workflow-menu{box-shadow:0 6px 12px rgba(0,0,0,.175);background-color:#fff;border-radius:4px!important;min-width:100px;width:fit-content;position:absolute;border:1px solid #d9d9d9;z-index:2000;top:96%;min-width:350px;min-height:130px;right:-126px;left:auto;font-size:14px;font-family:'72',-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;line-height:20/14}se-page-workflow-menu .se-page-workflow-menu::before{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#d9d9d9;border-bottom-color:var(var(--fd-color-neutral-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-8px}se-page-workflow-menu .se-page-workflow-menu::after{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#fff;border-bottom-color:var(var(--fd-color-background-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-7px}se-page-workflow-menu .se-page-workflow-menu,se-page-workflow-menu .se-page-workflow-menu::after,se-page-workflow-menu .se-page-workflow-menu::before{left:50%;transform:translate(-50%)}se-page-workflow-menu .se-page-workflow-menu__header{display:flex;justify-content:space-between}se-page-workflow-menu .se-page-workflow-menu__header-text{font-size:16px;padding:20px 0 0 16px}se-page-workflow-menu .se-page-workflow-menu__header-menu{padding:16px 16px 0 0}se-page-workflow-menu .se-page-workflow-menu-tabs .se-tabset{margin:0}se-page-workflow-menu .se-page-workflow-menu-tabs .se-tabset__tab{margin-left:16px}se-page-workflow-menu .se-page-workflow-menu-tabs .se-tabset__link{color:#32363a}se-page-workflow-menu .se-page-workflow-menu-tabs .se-tabset__link:hover{color:#0a6ed1}"],
            encapsulation: core.ViewEncapsulation.None,
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(6, core.Inject(smarteditcommons.TOOLBAR_ITEM)),
        __metadata("design:paramtypes", [WorkflowService,
            WorkflowFacade,
            smarteditcommons.SystemEventService,
            smarteditcommons.SmarteditRoutingService,
            cmscommons.IPageService,
            core.ChangeDetectorRef, Object])
    ], /* @ngInject */ PageWorkflowMenuComponent);
    return /* @ngInject */ PageWorkflowMenuComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "WorkflowInboxComponent", {
    selector: 'se-workflow-inbox',
    template: "<fd-popover class=\"toolbar-action se-workflow-inbox-container dropdown\" [class.open]=\"actionItem.isOpen\" [(isOpen)]=\"actionItem.isOpen\" (isOpenChange)=\"onDropdownToggle(isOpen)\" [closeOnOutsideClick]=\"true\" [triggers]=\"['click']\" [placement]=\"'bottom-' + actionItem.dropdownPosition\"><fd-popover-control class=\"se-workflow-inbox-toggle-control\"><button type=\"button\" class=\"se-workflow-inbox-toggle toolbar-action--button--compact\" [attr.aria-pressed]=\"actionItem.isOpen\"><span class=\"se-toolbar-actions__icon sap-icon--task\"></span><se-workflow-inbox-badge></se-workflow-inbox-badge></button></fd-popover-control><fd-popover-body><div [ngClass]=\"{\n                'se-toolbar__dropdown--right': actionItem.dropdownPosition === 'right',\n                'se-toolbar__dropdown--center': actionItem.dropdownPosition === 'center',\n                'se-toolbar__dropdown--left': actionItem.dropdownPosition === 'left'\n            }\" class=\"toolbar-action--include--compact\"><div *ngIf=\"actionItem.isOpen\" class=\"se-workflow-inbox\"><div class=\"se-workflow-inbox\"><div class=\"se-workflow-inbox-header\"><div class=\"se-workflow-inbox-header__title\" [translate]=\"'se.cms.workflow.toolbar.inbox'\"></div></div><div class=\"se-workflow-inbox-tasks se-cms-dev-workflow-inbox-tasks fd-panel__body\"><div *ngIf=\"!tasksNotReady && totalNumberOfTasks === 0\" class=\"se-workflow-inbox-tasks__no-tasks\"><img src=\"static-resources/images/Inbox.svg\" alt=\"empty-inbox\"/> <span class=\"se-workflow-inbox__empty-inbox-message\" [translate]=\"'se.cms.workflow.toolbar.inbox.emptyinbox.message'\"></span> <span class=\"se-workflow-inbox__empty-inbox-message-alt\" [translate]=\"'se.cms.workflow.toolbar.inbox.emptyinbox.message.alt'\"></span></div><se-infinite-scrolling class=\"se-version-panel__infinite-scroll se-infinite-scrolling--narrowed\" [pageSize]=\"pageSize\" [fetchPage]=\"fetchPageOfInboxTasks\" (itemsChange)=\"onInboxTasksLoaded($event)\"><div *ngFor=\"let task of workflowTasks; let i = index; let last = last; trackBy: trackByIndex\" class=\"se-workflow-inbox-task se-cms-dev-workflow-inbox-task\"><se-workflow-inbox-task id=\"workflow-inbox-task-{{i}}\" [class.se-workflow-inbox-task-last]=\"last\" [task]=\"task\"></se-workflow-inbox-task></div></se-infinite-scrolling></div></div></div></div></fd-popover-body></fd-popover>",
    styles: [".se-workflow-inbox-toggle{outline:0}.se-workflow-inbox-header{padding:20px;display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;height:53px;padding-top:15px;height:48px;font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a;border-bottom:1px solid #d9d9d9;padding:10px 0 15px 20px;height:46px}.se-workflow-inbox-header:first-child{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-workflow-inbox-tasks{padding:16px 0 8px;width:280px}.se-workflow-inbox-tasks__no-tasks{display:flex;flex-direction:column;align-items:center}.se-workflow-inbox__empty-inbox-message{color:#51555a;padding:8px 0 4px}.se-workflow-inbox__empty-inbox-message-alt{font-size:13px;color:#6a6d70;padding-bottom:30px}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ WorkflowInboxComponent = /** @class */ (function () {
    WorkflowInboxComponent.$inject = ["workflowFacade", "systemEventService", "workflowTasksPollingService", "actionItem", "cdr"];
    function /* @ngInject */ WorkflowInboxComponent(workflowFacade, systemEventService, workflowTasksPollingService, actionItem, cdr) {
        var _this = this;
        this.workflowFacade = workflowFacade;
        this.systemEventService = systemEventService;
        this.workflowTasksPollingService = workflowTasksPollingService;
        this.actionItem = actionItem;
        this.cdr = cdr;
        this.pageSize = 10;
        this.workflowTasks = [];
        this.fetchPageOfInboxTasks = function (search, pageSize, currentPage) { return _this.loadInboxTasks(search, pageSize, currentPage); };
    }
    /* @ngInject */ WorkflowInboxComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.tasksNotReady = true;
        this.unRegisterOpenDropdownEvent = this.systemEventService.subscribe(CMS_EVENT_OPEN_WORKFLOW_INBOX_DROPDOWN, function () { return _this.openDropdown(); });
        this.unRegisterWorkflowCreatedEvent = this.systemEventService.subscribe(cmscommons.WORKFLOW_CREATED_EVENT, function () { return _this.loadInboxTasks('', _this.pageSize, 0); });
        this.unRegWorkflowTasksMenuOpenedEvent = this.systemEventService.subscribe(WORKFLOW_TASKS_MENU_OPENED_EVENT, function () { return _this.hideDropdown(); });
    };
    /* @ngInject */ WorkflowInboxComponent.prototype.ngOnDestroy = function () {
        this.workflowTasksPollingService.stopPolling();
        this.unRegisterOpenDropdownEvent();
        this.unRegisterWorkflowCreatedEvent();
        this.unRegWorkflowTasksMenuOpenedEvent();
    };
    /* @ngInject */ WorkflowInboxComponent.prototype.loadInboxTasks = function (mask, pageSize, currentPage) {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.workflowFacade.getWorkflowInboxTasks({
                            currentPage: currentPage,
                            mask: mask,
                            pageSize: pageSize
                        })];
                    case 1:
                        page = _a.sent();
                        this.tasksNotReady = false;
                        this.totalNumberOfTasks = page.pagination.totalCount;
                        this.workflowFacade.updateWorkflowTasksCount(this.totalNumberOfTasks);
                        this.cdr.detectChanges();
                        return [2 /*return*/, page];
                }
            });
        });
    };
    WorkflowInboxComponent.prototype.loadInboxTasks.$inject = ["mask", "pageSize", "currentPage"];
    /* @ngInject */ WorkflowInboxComponent.prototype.onInboxTasksLoaded = function (workflowTasks) {
        this.workflowTasks = workflowTasks;
    };
    WorkflowInboxComponent.prototype.onInboxTasksLoaded.$inject = ["workflowTasks"];
    /* @ngInject */ WorkflowInboxComponent.prototype.onDropdownToggle = function (isOpen) {
        if (isOpen) {
            this.workflowTasksPollingService.stopPolling();
            return;
        }
        this.workflowTasksPollingService.startPolling();
        this.tasksNotReady = true;
    };
    WorkflowInboxComponent.prototype.onDropdownToggle.$inject = ["isOpen"];
    /* @ngInject */ WorkflowInboxComponent.prototype.trackByIndex = function (index) {
        return index;
    };
    WorkflowInboxComponent.prototype.trackByIndex.$inject = ["index"];
    /* @ngInject */ WorkflowInboxComponent.prototype.openDropdown = function () {
        this.actionItem.isOpen = true;
        this.cdr.detectChanges();
    };
    /* @ngInject */ WorkflowInboxComponent.prototype.hideDropdown = function () {
        this.actionItem.isOpen = false;
        this.cdr.detectChanges();
    };
    /* @ngInject */ WorkflowInboxComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-workflow-inbox',
            template: "<fd-popover class=\"toolbar-action se-workflow-inbox-container dropdown\" [class.open]=\"actionItem.isOpen\" [(isOpen)]=\"actionItem.isOpen\" (isOpenChange)=\"onDropdownToggle(isOpen)\" [closeOnOutsideClick]=\"true\" [triggers]=\"['click']\" [placement]=\"'bottom-' + actionItem.dropdownPosition\"><fd-popover-control class=\"se-workflow-inbox-toggle-control\"><button type=\"button\" class=\"se-workflow-inbox-toggle toolbar-action--button--compact\" [attr.aria-pressed]=\"actionItem.isOpen\"><span class=\"se-toolbar-actions__icon sap-icon--task\"></span><se-workflow-inbox-badge></se-workflow-inbox-badge></button></fd-popover-control><fd-popover-body><div [ngClass]=\"{\n                'se-toolbar__dropdown--right': actionItem.dropdownPosition === 'right',\n                'se-toolbar__dropdown--center': actionItem.dropdownPosition === 'center',\n                'se-toolbar__dropdown--left': actionItem.dropdownPosition === 'left'\n            }\" class=\"toolbar-action--include--compact\"><div *ngIf=\"actionItem.isOpen\" class=\"se-workflow-inbox\"><div class=\"se-workflow-inbox\"><div class=\"se-workflow-inbox-header\"><div class=\"se-workflow-inbox-header__title\" [translate]=\"'se.cms.workflow.toolbar.inbox'\"></div></div><div class=\"se-workflow-inbox-tasks se-cms-dev-workflow-inbox-tasks fd-panel__body\"><div *ngIf=\"!tasksNotReady && totalNumberOfTasks === 0\" class=\"se-workflow-inbox-tasks__no-tasks\"><img src=\"static-resources/images/Inbox.svg\" alt=\"empty-inbox\"/> <span class=\"se-workflow-inbox__empty-inbox-message\" [translate]=\"'se.cms.workflow.toolbar.inbox.emptyinbox.message'\"></span> <span class=\"se-workflow-inbox__empty-inbox-message-alt\" [translate]=\"'se.cms.workflow.toolbar.inbox.emptyinbox.message.alt'\"></span></div><se-infinite-scrolling class=\"se-version-panel__infinite-scroll se-infinite-scrolling--narrowed\" [pageSize]=\"pageSize\" [fetchPage]=\"fetchPageOfInboxTasks\" (itemsChange)=\"onInboxTasksLoaded($event)\"><div *ngFor=\"let task of workflowTasks; let i = index; let last = last; trackBy: trackByIndex\" class=\"se-workflow-inbox-task se-cms-dev-workflow-inbox-task\"><se-workflow-inbox-task id=\"workflow-inbox-task-{{i}}\" [class.se-workflow-inbox-task-last]=\"last\" [task]=\"task\"></se-workflow-inbox-task></div></se-infinite-scrolling></div></div></div></div></fd-popover-body></fd-popover>",
            styles: [".se-workflow-inbox-toggle{outline:0}.se-workflow-inbox-header{padding:20px;display:flex;flex-direction:row;align-items:center;justify-content:space-between;border-bottom:1px solid #d9d9d9;height:53px;padding-top:15px;height:48px;font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a;border-bottom:1px solid #d9d9d9;padding:10px 0 15px 20px;height:46px}.se-workflow-inbox-header:first-child{font-size:1.1428571429rem;line-height:1.25;font-weight:400;color:#32363a}.se-workflow-inbox-tasks{padding:16px 0 8px;width:280px}.se-workflow-inbox-tasks__no-tasks{display:flex;flex-direction:column;align-items:center}.se-workflow-inbox__empty-inbox-message{color:#51555a;padding:8px 0 4px}.se-workflow-inbox__empty-inbox-message-alt{font-size:13px;color:#6a6d70;padding-bottom:30px}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(3, core.Inject(smarteditcommons.TOOLBAR_ITEM)),
        __metadata("design:paramtypes", [WorkflowFacade,
            smarteditcommons.SystemEventService,
            WorkflowTasksPollingService, Object, core.ChangeDetectorRef])
    ], /* @ngInject */ WorkflowInboxComponent);
    return /* @ngInject */ WorkflowInboxComponent;
}());

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
deprecate();
var /* @ngInject */ CmssmarteditContainer = /** @class */ (function () {
    function /* @ngInject */ CmssmarteditContainer() {
    }
    /* @ngInject */ CmssmarteditContainer = __decorate([
        smarteditcommons.SeModule({
            imports: [
                CmsSmarteditServicesModule,
                CmsSmarteditComponentsModule,
                cmscommons.CmsResourceLocationsModule,
                'legacyCatalogDetailsModule',
                'resourceLocationsModule',
                'cmssmarteditContainerTemplates',
                'componentMenuModule',
                'cmscommonsTemplates',
                'genericEditorModule',
                'smarteditServicesModule',
                'cmsItemDropdownModule',
                'catalogAwareRouteResolverModule',
                'functionsModule',
                CmsGenericEditorConfigurationServiceModule
            ],
            providers: __spreadArrays(smarteditcommons.moduleUtils.provideValues({
                PRODUCT_CATEGORY_RESOURCE_URI: PRODUCT_CATEGORY_RESOURCE_URI,
                PRODUCT_CATEGORY_RESOURCE_BASE_URI: PRODUCT_CATEGORY_RESOURCE_BASE_URI,
                PRODUCT_CATEGORY_SEARCH_RESOURCE_URI: PRODUCT_CATEGORY_SEARCH_RESOURCE_URI
            })),
            config: ["PAGE_LIST_PATH", "TRASHED_PAGE_LIST_PATH", "NAVIGATION_MANAGEMENT_PAGE_PATH", "$routeProvider", "catalogAwareRouteResolverFunctions", function (PAGE_LIST_PATH, TRASHED_PAGE_LIST_PATH, NAVIGATION_MANAGEMENT_PAGE_PATH, $routeProvider, catalogAwareRouteResolverFunctions) {
                'ngInject';
                smarteditcommons.SeRouteService.init($routeProvider);
                smarteditcommons.SeRouteService.provideLegacyRoute({
                    path: PAGE_LIST_PATH,
                    route: {
                        redirectTo: "" + smarteditcommons.NG_ROUTE_PREFIX + PAGE_LIST_PATH
                    }
                });
                smarteditcommons.SeRouteService.provideLegacyRoute({
                    path: TRASHED_PAGE_LIST_PATH,
                    route: {
                        redirectTo: "" + smarteditcommons.NG_ROUTE_PREFIX + TRASHED_PAGE_LIST_PATH
                    }
                });
                smarteditcommons.SeRouteService.provideLegacyRoute({
                    path: NAVIGATION_MANAGEMENT_PAGE_PATH,
                    route: {
                        redirectTo: "" + smarteditcommons.NG_ROUTE_PREFIX + NAVIGATION_MANAGEMENT_PAGE_PATH
                    }
                });
            }],
            initialize: 
            /* jshint -W098*/
            /* need to inject for gatewayProxy initialization of componentVisibilityAlertService*/
            ["$log", "$rootScope", "$routeParams", "$route", "NAVIGATION_MANAGEMENT_PAGE_PATH", "toolbarServiceFactory", "systemEventService", "catalogDetailsService", "featureService", "perspectiveService", "editorFieldMappingService", "genericEditorTabService", "cmsDragAndDropService", "editorModalService", "clonePageWizardService", "componentVisibilityAlertService", "cmsGenericEditorConfigurationService", "managePageVersionService", "rollbackPageVersionService", "inViewElementObserver", "COMPONENT_CLASS", "smarteditRoutingService", function ($log, $rootScope, $routeParams, $route, NAVIGATION_MANAGEMENT_PAGE_PATH, toolbarServiceFactory, systemEventService, catalogDetailsService, featureService, perspectiveService, editorFieldMappingService, genericEditorTabService, cmsDragAndDropService, editorModalService, // TODO: Iframe does not work properly without it. Nothing happens when you click on "Edit" component button.
            clonePageWizardService, componentVisibilityAlertService, cmsGenericEditorConfigurationService, managePageVersionService, rollbackPageVersionService, inViewElementObserver, COMPONENT_CLASS, smarteditRoutingService) {
                'ngInject';
                smarteditRoutingService.init();
                // Configure generic editor
                cmsGenericEditorConfigurationService.setDefaultEditorFieldMappings();
                cmsGenericEditorConfigurationService.setDefaultTabFieldMappings();
                cmsGenericEditorConfigurationService.setDefaultTabsConfiguration();
                featureService.addToolbarItem({
                    toolbarId: 'smartEditPerspectiveToolbar',
                    key: 'se.cms.componentMenuTemplate',
                    type: 'HYBRID_ACTION',
                    nameI18nKey: 'se.cms.componentmenu.btn.label.addcomponent',
                    descriptionI18nKey: 'cms.toolbaritem.componentmenutemplate.description',
                    priority: 100,
                    section: 'left',
                    dropdownPosition: 'left',
                    iconClassName: 'icon-add se-toolbar-menu-ddlb--button__icon',
                    callback: function () {
                        systemEventService.publish('ySEComponentMenuOpen', {});
                    },
                    include: 'componentMenuWrapperTemplate.html',
                    permissions: ['se.add.component'],
                    keepAliveOnClose: true
                });
                featureService.addToolbarItem({
                    toolbarId: 'smartEditPerspectiveToolbar',
                    key: 'se.cms.pageInfoMenu',
                    type: 'TEMPLATE',
                    nameI18nKey: 'se.cms.pageinfo.menu.btn.label',
                    priority: 140,
                    section: 'left',
                    component: PageInfoMenuComponent,
                    permissions: ['se.read.page']
                });
                featureService.addToolbarItem({
                    toolbarId: 'smartEditPerspectiveToolbar',
                    key: 'se.cms.clonePageMenu',
                    type: 'ACTION',
                    nameI18nKey: 'se.cms.clonepage.menu.btn.label',
                    iconClassName: 'icon-duplicate se-toolbar-menu-ddlb--button__icon',
                    callback: function () {
                        clonePageWizardService.openClonePageWizard();
                    },
                    priority: 130,
                    section: 'left',
                    permissions: ['se.clone.page']
                });
                // sync 120
                featureService.addToolbarItem({
                    toolbarId: 'smartEditPerspectiveToolbar',
                    key: 'se.cms.pageSyncMenu',
                    nameI18nKey: 'se.cms.toolbaritem.pagesyncmenu.name',
                    type: 'TEMPLATE',
                    component: PageSyncMenuToolbarItemComponent,
                    priority: 102,
                    section: 'left',
                    permissions: ['se.sync.page']
                });
                featureService.addToolbarItem({
                    toolbarId: 'smartEditPerspectiveToolbar',
                    key: 'deletePageMenu',
                    nameI18nKey: 'se.cms.actionitem.page.trash',
                    type: 'TEMPLATE',
                    component: DeletePageToolbarItemComponent,
                    priority: 150,
                    section: 'left',
                    permissions: ['se.delete.page.menu']
                });
                // versions 102
                featureService.addToolbarItem({
                    toolbarId: 'smartEditPerspectiveToolbar',
                    key: 'se.cms.pageVersionsMenu',
                    type: 'HYBRID_ACTION',
                    nameI18nKey: 'se.cms.actionitem.page.versions',
                    priority: 104,
                    section: 'left',
                    iconClassName: 'icon-timesheet se-toolbar-menu-ddlb--button__icon',
                    component: PageVersionMenuComponent,
                    contextComponent: VersionItemContextComponent,
                    permissions: ['se.version.page'],
                    keepAliveOnClose: true
                });
                featureService.addToolbarItem({
                    toolbarId: 'smartEditPerspectiveToolbar',
                    key: 'se.cms.createVersionMenu',
                    type: 'ACTION',
                    nameI18nKey: 'se.cms.actionitem.page.versions.create',
                    iconClassName: 'icon-add se-toolbar-menu-ddlb--button__icon',
                    callback: function () {
                        managePageVersionService.createPageVersion();
                    },
                    priority: 120,
                    section: 'left',
                    permissions: ['se.version.page', 'se.create.version.page']
                });
                featureService.addToolbarItem({
                    toolbarId: 'smartEditPerspectiveToolbar',
                    key: 'se.cms.rollbackVersionMenu',
                    type: 'ACTION',
                    nameI18nKey: 'se.cms.actionitem.page.versions.rollback',
                    iconClassName: 'hyicon hyicon-rollback se-toolbar-menu-ddlb--button__icon',
                    callback: function () {
                        rollbackPageVersionService.rollbackPageVersion();
                    },
                    priority: 120,
                    section: 'left',
                    permissions: ['se.version.page', 'se.rollback.version.page']
                });
                featureService.addToolbarItem({
                    toolbarId: 'smartEditPerspectiveToolbar',
                    key: 'se.cms.pageWorkflowMenu',
                    type: 'TEMPLATE',
                    nameI18nKey: 'se.cms.workflow.toolbar.view.workflow.menu',
                    component: PageWorkflowMenuComponent,
                    priority: 110,
                    section: 'right'
                });
                featureService.addToolbarItem({
                    toolbarId: 'smartEditPerspectiveToolbar',
                    key: 'se.cms.pageDisplayStatus',
                    type: 'TEMPLATE',
                    nameI18nKey: 'se.cms.page.display.status',
                    component: PageDisplayStatusWrapperComponent,
                    priority: 120,
                    section: 'right',
                    permissions: ['se.show.page.status']
                });
                featureService.addToolbarItem({
                    toolbarId: 'smartEditPerspectiveToolbar',
                    key: 'se.cms.pageApprovalSelector',
                    type: 'TEMPLATE',
                    nameI18nKey: 'se.cms.page.approval.selector',
                    component: PageApprovalSelectorComponent,
                    priority: 165,
                    section: 'right',
                    permissions: ['se.force.page.approval']
                });
                var smartEditHeaderToolbarService = toolbarServiceFactory.getToolbarService('smartEditHeaderToolbar');
                smartEditHeaderToolbarService.addItems([
                    {
                        key: 'se.cms.workflowInbox',
                        type: smarteditcommons.ToolbarItemType.TEMPLATE,
                        component: WorkflowInboxComponent,
                        priority: 4,
                        section: smarteditcommons.ToolbarSection.right,
                        dropdownPosition: smarteditcommons.ToolbarDropDownPosition.right
                    }
                ]);
                var smartEditNavigationToolbarService = toolbarServiceFactory.getToolbarService('smartEditNavigationToolbar');
                smartEditNavigationToolbarService.addItems([
                    {
                        key: 'se.cms.shortcut',
                        type: smarteditcommons.ToolbarItemType.TEMPLATE,
                        include: 'ShortcutLinkWrapperTemplate.html',
                        priority: 1,
                        section: smarteditcommons.ToolbarSection.left
                    }
                ]);
                var smartEditPagesToolbarService = toolbarServiceFactory.getToolbarService('smartEditPagesToolbar');
                smartEditPagesToolbarService.addItems([
                    {
                        key: 'se.cms.shortcut',
                        type: smarteditcommons.ToolbarItemType.TEMPLATE,
                        include: 'ShortcutLinkWrapperTemplate.html',
                        priority: 1,
                        section: smarteditcommons.ToolbarSection.left
                    },
                    {
                        key: 'se.cms.trash.page.link',
                        type: smarteditcommons.ToolbarItemType.TEMPLATE,
                        component: TrashLinkComponent,
                        priority: 1,
                        section: smarteditcommons.ToolbarSection.right
                    }
                ]);
                catalogDetailsService.addItems([
                    {
                        component: PageListLinkComponent
                    },
                    {
                        component: NavigationEditorLinkComponent
                    }
                ]);
                catalogDetailsService.addItems([
                    {
                        component: CatalogDetailsSyncComponent
                    }
                ], smarteditcommons.CATALOG_DETAILS_COLUMNS.RIGHT);
                featureService.register({
                    key: 'se.cms.html5DragAndDrop.outer',
                    nameI18nKey: 'se.cms.dragAndDrop.name',
                    descriptionI18nKey: 'se.cms.dragAndDrop.description',
                    enablingCallback: function () {
                        cmsDragAndDropService.register();
                        cmsDragAndDropService.apply();
                    },
                    disablingCallback: function () {
                        cmsDragAndDropService.unregister();
                    }
                });
                perspectiveService.register({
                    key: cmscommons.CMSModesService.BASIC_PERSPECTIVE_KEY,
                    nameI18nKey: 'se.cms.perspective.basic.name',
                    descriptionI18nKey: 'se.hotkey.tooltip',
                    features: [
                        'se.contextualMenu',
                        'se.cms.dragandropbutton',
                        'se.cms.remove',
                        'se.cms.edit',
                        'se.cms.componentMenuTemplate',
                        'se.cms.clonePageMenu',
                        'se.cms.pageInfoMenu',
                        'se.emptySlotFix',
                        'se.cms.html5DragAndDrop',
                        'disableSharedSlotEditing',
                        'sharedSlotDisabledDecorator',
                        'se.cms.html5DragAndDrop.outer',
                        'externalComponentDecorator',
                        'externalcomponentbutton',
                        'externalSlotDisabledDecorator',
                        'clonecomponentbutton',
                        'deletePageMenu',
                        'se.cms.pageWorkflowMenu',
                        'se.cms.pageDisplayStatus',
                        'se.cms.pageApprovalSelector',
                        'se.cms.sharedcomponentbutton'
                    ],
                    perspectives: []
                });
                /* Note: For advance edit mode, the ordering of the entries in the features list will determine the order the buttons will show in the slot contextual menu */
                /* externalSlotDisabledDecorator will be removed after 2105 release */
                perspectiveService.register({
                    key: cmscommons.CMSModesService.ADVANCED_PERSPECTIVE_KEY,
                    nameI18nKey: 'se.cms.perspective.advanced.name',
                    descriptionI18nKey: 'se.hotkey.tooltip',
                    features: [
                        'se.slotContextualMenu',
                        'se.slotSyncButton',
                        'se.slotSharedButton',
                        'se.slotContextualMenuVisibility',
                        'se.contextualMenu',
                        'se.cms.dragandropbutton',
                        'se.cms.remove',
                        'se.cms.edit',
                        'se.cms.componentMenuTemplate',
                        'se.cms.clonePageMenu',
                        'se.cms.pageInfoMenu',
                        'se.cms.pageSyncMenu',
                        'se.emptySlotFix',
                        'se.cms.html5DragAndDrop',
                        'se.cms.html5DragAndDrop.outer',
                        'syncIndicator',
                        'externalSlotDisabledDecorator',
                        'externalComponentDecorator',
                        'externalcomponentbutton',
                        'clonecomponentbutton',
                        'slotUnsharedButton',
                        'deletePageMenu',
                        'se.cms.pageVersionsMenu',
                        'se.cms.pageWorkflowMenu',
                        'se.cms.pageDisplayStatus',
                        'se.cms.pageApprovalSelector',
                        'se.cms.sharedcomponentbutton'
                    ],
                    perspectives: []
                });
                perspectiveService.register({
                    key: cmscommons.CMSModesService.VERSIONING_PERSPECTIVE_KEY,
                    nameI18nKey: 'se.cms.perspective.versioning.name',
                    descriptionI18nKey: 'se.cms.perspective.versioning.description',
                    features: [
                        'se.cms.pageVersionsMenu',
                        'se.cms.createVersionMenu',
                        'se.cms.rollbackVersionMenu',
                        'se.cms.pageInfoMenu',
                        'disableSharedSlotEditing',
                        'sharedSlotDisabledDecorator',
                        'externalSlotDisabledDecorator',
                        'externalComponentDecorator'
                    ],
                    perspectives: [],
                    permissions: ['se.version.page'],
                    isHotkeyDisabled: true
                });
                inViewElementObserver.addSelector("." + COMPONENT_CLASS, function () {
                    cmsDragAndDropService.update();
                });
            }]
        })
    ], /* @ngInject */ CmssmarteditContainer);
    return /* @ngInject */ CmssmarteditContainer;
}());

var /* @ngInject */ SelectComponentTypeModalService = /** @class */ (function () {
    SelectComponentTypeModalService.$inject = ["logService", "modalService"];
    function /* @ngInject */ SelectComponentTypeModalService(logService, modalService) {
        this.logService = logService;
        this.modalService = modalService;
    }
    /* @ngInject */ SelectComponentTypeModalService.prototype.open = function (subTypes) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.modalService
                        .open({
                        component: SelectComponentTypeModalComponent,
                        data: {
                            subTypes: subTypes
                        },
                        config: {
                            modalPanelClass: 'modal-lg'
                        },
                        templateConfig: {
                            title: 'se.cms.nestedcomponenteditor.select.type'
                        }
                    })
                        .afterClosed.toPromise()
                        .catch(function (error) {
                        _this.logService.debug('Select Component Type Modal dismissed', error);
                    })];
            });
        });
    };
    SelectComponentTypeModalService.prototype.open.$inject = ["subTypes"];
    /* @ngInject */ SelectComponentTypeModalService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.LogService, smarteditcommons.ModalService])
    ], /* @ngInject */ SelectComponentTypeModalService);
    return /* @ngInject */ SelectComponentTypeModalService;
}());

var /* @ngInject */ NestedComponentManagementService = /** @class */ (function () {
    NestedComponentManagementService.$inject = ["editorModalService"];
    function /* @ngInject */ NestedComponentManagementService(editorModalService) {
        this.editorModalService = editorModalService;
    }
    /* @ngInject */ NestedComponentManagementService.prototype.openNestedComponentEditor = function (componentInfo, editorStackId) {
        var componentAttributes = this.prepareComponentAttributes(componentInfo);
        return this.editorModalService.open(componentAttributes, null, null, null, null, editorStackId);
    };
    NestedComponentManagementService.prototype.openNestedComponentEditor.$inject = ["componentInfo", "editorStackId"];
    /* @ngInject */ NestedComponentManagementService.prototype.prepareComponentAttributes = function (_a) {
        var componentUuid = _a.componentUuid, componentType = _a.componentType, content = _a.content;
        return {
            smarteditComponentUuid: componentUuid,
            smarteditComponentType: componentType,
            content: lodash.defaultsDeep({}, content, {
                typeCode: componentType,
                itemtype: componentType,
                visible: true
            })
        };
    };
    NestedComponentManagementService.prototype.prepareComponentAttributes.$inject = ["_a"];
    /* @ngInject */ NestedComponentManagementService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [cmscommons.IEditorModalService])
    ], /* @ngInject */ NestedComponentManagementService);
    return /* @ngInject */ NestedComponentManagementService;
}());

/**
 * Implementation of Dropdown Populator for "CMSItemDropdown" Structure Type.
 * Methods of this service will be used to populate the dropdown rendered by GenericEditorDropdownComponent.
 */
var /* @ngInject */ CMSItemDropdownDropdownPopulator = /** @class */ (function (_super) {
    __extends(/* @ngInject */ CMSItemDropdownDropdownPopulator, _super);
    CMSItemDropdownDropdownPopulator.$inject = ["genericEditorStackService", "languageService", "translateService", "uriDropdownPopulator"];
    function /* @ngInject */ CMSItemDropdownDropdownPopulator(genericEditorStackService, languageService, translateService, uriDropdownPopulator) {
        var _this = _super.call(this, lodash, languageService, translateService) || this;
        _this.genericEditorStackService = genericEditorStackService;
        _this.uriDropdownPopulator = uriDropdownPopulator;
        _this.CMS_ITEMS_URI = '/cmswebservices/v1/sites/CURRENT_CONTEXT_SITE_ID/cmsitems';
        return _this;
    }
    /* @ngInject */ CMSItemDropdownDropdownPopulator.prototype.fetchAll = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var items;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.preparePayload(payload);
                        return [4 /*yield*/, this.uriDropdownPopulator.fetchAll(payload)];
                    case 1:
                        items = _a.sent();
                        return [2 /*return*/, this.getNonNestedComponents(payload.field.editorStackId, items)];
                }
            });
        });
    };
    CMSItemDropdownDropdownPopulator.prototype.fetchAll.$inject = ["payload"];
    /* @ngInject */ CMSItemDropdownDropdownPopulator.prototype.fetchPage = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.preparePayload(payload);
                        return [4 /*yield*/, this.uriDropdownPopulator.fetchPage(payload)];
                    case 1:
                        page = _a.sent();
                        page.response = this.getNonNestedComponents(payload.field.editorStackId, page.response);
                        return [2 /*return*/, page];
                }
            });
        });
    };
    CMSItemDropdownDropdownPopulator.prototype.fetchPage.$inject = ["payload"];
    /* @ngInject */ CMSItemDropdownDropdownPopulator.prototype.getItem = function (payload) {
        this.preparePayload(payload);
        return this.uriDropdownPopulator.getItem(payload);
    };
    CMSItemDropdownDropdownPopulator.prototype.getItem.$inject = ["payload"];
    /* @ngInject */ CMSItemDropdownDropdownPopulator.prototype.preparePayload = function (payload) {
        payload.field.uri = this.CMS_ITEMS_URI;
    };
    CMSItemDropdownDropdownPopulator.prototype.preparePayload.$inject = ["payload"];
    /* @ngInject */ CMSItemDropdownDropdownPopulator.prototype.getNonNestedComponents = function (editorStackId, components) {
        // Get the IDs of the components that are already opened in the editor's stack.
        var componentsInStack = this.genericEditorStackService
            .getEditorsStack(editorStackId)
            .filter(function (componentInStack) { return componentInStack.component.uuid; })
            .map(function (componentInStack) { return componentInStack.component.uuid; });
        components = components.filter(function (componentInList) {
            return !componentInList.uuid || !componentsInStack.includes(componentInList.uuid);
        });
        return components;
    };
    CMSItemDropdownDropdownPopulator.prototype.getNonNestedComponents.$inject = ["editorStackId", "components"];
    /* @ngInject */ CMSItemDropdownDropdownPopulator = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.GenericEditorStackService,
            smarteditcommons.LanguageService,
            core$1.TranslateService,
            smarteditcommons.UriDropdownPopulator])
    ], /* @ngInject */ CMSItemDropdownDropdownPopulator);
    return /* @ngInject */ CMSItemDropdownDropdownPopulator;
}(smarteditcommons.DropdownPopulatorInterface));

var CmsComponentsModule = /** @class */ (function () {
    function CmsComponentsModule() {
    }
    CmsComponentsModule = __decorate([
        core.NgModule({
            imports: [
                common.CommonModule,
                smarteditcommons.TranslationModule.forChild(),
                ComponentMenuModule,
                PageRestrictionsModule
            ],
            providers: [
                SelectComponentTypeModalService,
                NestedComponentManagementService,
                {
                    provide: smarteditcommons.CustomDropdownPopulatorsToken,
                    useClass: CMSItemDropdownDropdownPopulator,
                    multi: true
                }
            ],
            declarations: [
                SubTypeSelectorComponent,
                SelectComponentTypeModalComponent,
                ComponentRestrictionsEditorComponent,
                CmsDropdownItemComponent
            ],
            entryComponents: [
                SubTypeSelectorComponent,
                SelectComponentTypeModalComponent,
                ComponentRestrictionsEditorComponent,
                CmsDropdownItemComponent
            ]
        })
    ], CmsComponentsModule);
    return CmsComponentsModule;
}());

window.__smartedit__.addDecoratorPayload("Component", "NavigationManagementPageComponent", {
    selector: 'se-navigation-management-page',
    template: "<div class=\"se-navigation-management-page-list-template\"><div class=\"se-toolbar-group\"><se-toolbar cssClass=\"se-toolbar--shell\" imageRoot=\"imageRoot\" toolbarName=\"smartEditHeaderToolbar\"></se-toolbar><se-toolbar cssClass=\"se-toolbar--shell se-toolbar--shortcut\" imageRoot=\"imageRoot\" toolbarName=\"smartEditNavigationToolbar\"></se-toolbar></div><div class=\"se-navigation-editor-wrapper\" *ngIf=\"readOnly !== undefined\"><div class=\"se-navigation-editor-header\"><h1 class=\"se-navigation-editor-header__title\" translate=\"se.cms.navigationmanagement.title\"></h1><h4 class=\"se-navigation-editor-header__sub-title\">{{ catalogName | seL10n | async }} - {{ catalogVersion }}</h4></div><se-navigation-editor-tree [uriContext]=\"uriContext\" [readOnly]=\"readOnly\"></se-navigation-editor-tree></div></div>",
    styles: [".se-navigation-editor-wrapper{min-height:100vh;padding:95px 30px 30px 30px;background-color:#edeff0}.se-navigation-editor-header{position:relative;min-height:100%;background-color:#fff;font-family:\"72\",web,\"Open Sans\",sans-serif;margin:0 -30px 20px -30px;padding:16px 30px}.se-navigation-editor-header__title{font-size:1.7142857143rem;line-height:1.3333333333;font-weight:400;color:#32363a;margin:0;padding:0}.se-navigation-editor-header__sub-title{font-size:1rem;line-height:1.4285714286;font-weight:400;color:#6a6d70;margin:0;padding:5px 0 0 0}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ NavigationManagementPageComponent = /** @class */ (function () {
    NavigationManagementPageComponent.$inject = ["activatedRoute", "urlService", "permissionService", "catalogService", "cdr"];
    function /* @ngInject */ NavigationManagementPageComponent(activatedRoute, urlService, permissionService, catalogService, cdr) {
        this.activatedRoute = activatedRoute;
        this.urlService = urlService;
        this.permissionService = permissionService;
        this.catalogService = catalogService;
        this.cdr = cdr;
    }
    /* @ngInject */ NavigationManagementPageComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, siteId, catalogId, catalogVersion;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.activatedRoute.snapshot.params, siteId = _a.siteId, catalogId = _a.catalogId, catalogVersion = _a.catalogVersion;
                        this.catalogVersion = catalogVersion;
                        this.uriContext = this.urlService.buildUriContext(siteId, catalogId, catalogVersion);
                        return [4 /*yield*/, Promise.all([this.setCatalogName(siteId, catalogId), this.setReadOnly()])];
                    case 1:
                        _b.sent();
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ NavigationManagementPageComponent.prototype.setCatalogName = function (siteId, catalogId) {
        return __awaiter(this, void 0, void 0, function () {
            var catalogs, foundCatalog;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.getContentCatalogsForSite(siteId)];
                    case 1:
                        catalogs = _a.sent();
                        foundCatalog = catalogs.find(function (catalog) { return catalog.catalogId === catalogId; });
                        this.catalogName = (foundCatalog === null || foundCatalog === void 0 ? void 0 : foundCatalog.name) || {};
                        return [2 /*return*/];
                }
            });
        });
    };
    NavigationManagementPageComponent.prototype.setCatalogName.$inject = ["siteId", "catalogId"];
    /* @ngInject */ NavigationManagementPageComponent.prototype.setReadOnly = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isPermissionGranted;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.permissionService.isPermitted([
                            {
                                names: ['se.edit.navigation']
                            }
                        ])];
                    case 1:
                        isPermissionGranted = _a.sent();
                        this.readOnly = !isPermissionGranted;
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ NavigationManagementPageComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-navigation-management-page',
            template: "<div class=\"se-navigation-management-page-list-template\"><div class=\"se-toolbar-group\"><se-toolbar cssClass=\"se-toolbar--shell\" imageRoot=\"imageRoot\" toolbarName=\"smartEditHeaderToolbar\"></se-toolbar><se-toolbar cssClass=\"se-toolbar--shell se-toolbar--shortcut\" imageRoot=\"imageRoot\" toolbarName=\"smartEditNavigationToolbar\"></se-toolbar></div><div class=\"se-navigation-editor-wrapper\" *ngIf=\"readOnly !== undefined\"><div class=\"se-navigation-editor-header\"><h1 class=\"se-navigation-editor-header__title\" translate=\"se.cms.navigationmanagement.title\"></h1><h4 class=\"se-navigation-editor-header__sub-title\">{{ catalogName | seL10n | async }} - {{ catalogVersion }}</h4></div><se-navigation-editor-tree [uriContext]=\"uriContext\" [readOnly]=\"readOnly\"></se-navigation-editor-tree></div></div>",
            styles: [".se-navigation-editor-wrapper{min-height:100vh;padding:95px 30px 30px 30px;background-color:#edeff0}.se-navigation-editor-header{position:relative;min-height:100%;background-color:#fff;font-family:\"72\",web,\"Open Sans\",sans-serif;margin:0 -30px 20px -30px;padding:16px 30px}.se-navigation-editor-header__title{font-size:1.7142857143rem;line-height:1.3333333333;font-weight:400;color:#32363a;margin:0;padding:0}.se-navigation-editor-header__sub-title{font-size:1rem;line-height:1.4285714286;font-weight:400;color:#6a6d70;margin:0;padding:5px 0 0 0}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [router.ActivatedRoute,
            smarteditcommons.IUrlService,
            smarteditcommons.IPermissionService,
            smarteditcommons.ICatalogService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ NavigationManagementPageComponent);
    return /* @ngInject */ NavigationManagementPageComponent;
}());

/**
 * Used for converting Tree Nodes that are displayed in Breadcrumb.
 */
var /* @ngInject */ NodeAncestryService = /** @class */ (function () {
    function /* @ngInject */ NodeAncestryService() {
    }
    /* @ngInject */ NodeAncestryService.prototype.buildOrderedListOfAncestors = function (nodes, uid) {
        var ancestry = lodash.reverse(this.fetchAncestors(nodes, uid));
        var level = -1;
        return ancestry.map(function (node) {
            var nextLevel = ++level;
            return __assign(__assign({}, lodash.cloneDeep(node)), { level: nextLevel, formattedLevel: nextLevel === 0
                    ? 'se.cms.navigationcomponent.management.node.level.root'
                    : 'se.cms.navigationcomponent.management.node.level.non.root' });
        });
    };
    NodeAncestryService.prototype.buildOrderedListOfAncestors.$inject = ["nodes", "uid"];
    /* @ngInject */ NodeAncestryService.prototype.fetchAncestors = function (nodes, uid) {
        var parent = nodes.find(function (element) { return element.uid === uid; });
        if (!parent) {
            return [];
        }
        return [parent].concat(this.fetchAncestors(nodes, parent.parentUid));
    };
    NodeAncestryService.prototype.fetchAncestors.$inject = ["nodes", "uid"];
    /* @ngInject */ NodeAncestryService = __decorate([
        smarteditcommons.SeDowngradeService()
    ], /* @ngInject */ NodeAncestryService);
    return /* @ngInject */ NodeAncestryService;
}());

/*
 * This service updates the navigation node by making REST call to the cmswebservices navigations API.
 */
var /* @ngInject */ NavigationEditorNodeService = /** @class */ (function () {
    NavigationEditorNodeService.$inject = ["cmsitemsRestService", "nodeAncestryService", "restServiceFactory"];
    function /* @ngInject */ NavigationEditorNodeService(cmsitemsRestService, nodeAncestryService, restServiceFactory) {
        this.cmsitemsRestService = cmsitemsRestService;
        this.nodeAncestryService = nodeAncestryService;
        this.navigationNodeRestService = restServiceFactory.get(cmscommons.NAVIGATION_MANAGEMENT_RESOURCE_URI);
    }
    /* @ngInject */ NavigationEditorNodeService.prototype.getNavigationNode = function (nodeUid, uriParams) {
        var payload = __assign({ identifier: nodeUid }, uriParams);
        return this.navigationNodeRestService.get(payload);
    };
    NavigationEditorNodeService.prototype.getNavigationNode.$inject = ["nodeUid", "uriParams"];
    /**
     * Updates the position of the navigation node within the children collection of its parent.
     * Fetches the parent node, and reorders the children, then updates the parent with the new child order.
     *
     * @param node The navigation node to be updated.
     *
     * E.g. Navigation Management Page -> Edit Node
     */
    /* @ngInject */ NavigationEditorNodeService.prototype.updateNavigationNodePosition = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var parentNode, currentIndex, targetIndex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cmsitemsRestService.getById(node.parent.uuid)];
                    case 1:
                        parentNode = _a.sent();
                        parentNode.children = parentNode.children || [];
                        currentIndex = parentNode.children.findIndex(function (child) { return child.uuid === node.uuid; });
                        targetIndex = node.position;
                        if (currentIndex < 0 || node.position === undefined) {
                            throw new Error("navigationEditorNodeService.updateNavigationNodePosition() - invalid index: move FROM [" + currentIndex + "] TO [" + targetIndex + "]");
                        }
                        // update parent children with the new child
                        parentNode.children.splice(targetIndex, 0, parentNode.children.splice(currentIndex, 1)[0]);
                        parentNode.identifier = parentNode.uuid;
                        return [2 /*return*/, this.cmsitemsRestService.update(parentNode)];
                }
            });
        });
    };
    NavigationEditorNodeService.prototype.updateNavigationNodePosition.$inject = ["node"];
    /**
     * Returns the list of nodes belonging to the ancestry of the node identified by its uid. This list includes the queried node as well.
     */
    /* @ngInject */ NavigationEditorNodeService.prototype.getNavigationNodeAncestry = function (nodeUid, uriParams) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = __assign({ ancestorTrailFrom: nodeUid }, uriParams);
                        return [4 /*yield*/, this.navigationNodeRestService.get(payload)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.nodeAncestryService.buildOrderedListOfAncestors(smarteditcommons.apiUtils.getDataFromResponse(response), nodeUid)];
                }
            });
        });
    };
    NavigationEditorNodeService.prototype.getNavigationNodeAncestry.$inject = ["nodeUid", "uriParams"];
    /* @ngInject */ NavigationEditorNodeService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [cmscommons.CmsitemsRestService,
            NodeAncestryService,
            smarteditcommons.IRestServiceFactory])
    ], /* @ngInject */ NavigationEditorNodeService);
    return /* @ngInject */ NavigationEditorNodeService;
}());

window.__smartedit__.addDecoratorPayload("Component", "BreadcrumbComponent", {
    selector: 'se-breadcrumb',
    template: "<div class=\"se-breadcrumb\"><div *ngFor=\"let node of breadcrumb; index as idx; last as isLast\" class=\"se-breadcrumb__node\"><div class=\"se-breadcrumb__info\" [ngClass]=\"{'se-breadcrumb__info--last': isLast}\"><span class=\"se-breadcrumb__info--level\">{{ node.formattedLevel | translate: node }}</span> <span class=\"se-breadcrumb__info--name\">{{ node.name }}</span></div><div class=\"se-breadcrumb__divider\" *ngIf=\"idx < breadcrumb.length - 1\"><span class=\"sap-icon--navigation-right-arrow\"></span></div></div></div>",
    styles: [".se-breadcrumb{border-bottom:1px solid #eeeeef;margin-bottom:35px}.se-breadcrumb__divider,.se-breadcrumb__info,.se-breadcrumb__node{display:inline-block}.se-breadcrumb__info--last{border-bottom:3px solid #0a6ed1;padding-top:10px;padding-bottom:10px}.se-breadcrumb__info--level{display:block;text-transform:uppercase;color:#51555a;font-family:\"72\",web,\"Open Sans\",sans-serif;font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;font-weight:700}.se-breadcrumb__info--name{display:block;color:#51555a;font-family:\"72\",web,\"Open Sans\",sans-serif;font-size:1rem;line-height:1.4285714286;font-weight:400;font-weight:400}.se-breadcrumb__divider{margin-left:15px;margin-right:15px;margin-top:5px;vertical-align:top}.se-breadcrumb__node:last-child .se-breadcrumb__info--level,.se-breadcrumb__node:last-child .se-breadcrumb__info--name{color:#0a6ed1}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    encapsulation: core.ViewEncapsulation.None
});
var /* @ngInject */ BreadcrumbComponent = /** @class */ (function () {
    BreadcrumbComponent.$inject = ["navigationEditorNodeService", "cmsitemsRestService", "cdr"];
    function /* @ngInject */ BreadcrumbComponent(navigationEditorNodeService, cmsitemsRestService, cdr) {
        this.navigationEditorNodeService = navigationEditorNodeService;
        this.cmsitemsRestService = cmsitemsRestService;
        this.cdr = cdr;
    }
    /* @ngInject */ BreadcrumbComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uid, ancestry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.nodeUid && !this.nodeUuid) {
                            throw new Error('BreadcrumbComponent requires either nodeUid or nodeUuid');
                        }
                        return [4 /*yield*/, this.getUid()];
                    case 1:
                        uid = _a.sent();
                        return [4 /*yield*/, this.navigationEditorNodeService.getNavigationNodeAncestry(uid, this.uriContext)];
                    case 2:
                        ancestry = _a.sent();
                        this.breadcrumb = ancestry;
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ BreadcrumbComponent.prototype.getUid = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cmsItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.nodeUid) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.cmsitemsRestService.getById(this.nodeUuid)];
                    case 1:
                        cmsItem = _a.sent();
                        return [2 /*return*/, cmsItem.uid];
                    case 2: return [2 /*return*/, this.nodeUid];
                }
            });
        });
    };
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ BreadcrumbComponent.prototype, "nodeUid", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ BreadcrumbComponent.prototype, "nodeUuid", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ BreadcrumbComponent.prototype, "uriContext", void 0);
    /* @ngInject */ BreadcrumbComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-breadcrumb',
            template: "<div class=\"se-breadcrumb\"><div *ngFor=\"let node of breadcrumb; index as idx; last as isLast\" class=\"se-breadcrumb__node\"><div class=\"se-breadcrumb__info\" [ngClass]=\"{'se-breadcrumb__info--last': isLast}\"><span class=\"se-breadcrumb__info--level\">{{ node.formattedLevel | translate: node }}</span> <span class=\"se-breadcrumb__info--name\">{{ node.name }}</span></div><div class=\"se-breadcrumb__divider\" *ngIf=\"idx < breadcrumb.length - 1\"><span class=\"sap-icon--navigation-right-arrow\"></span></div></div></div>",
            styles: [".se-breadcrumb{border-bottom:1px solid #eeeeef;margin-bottom:35px}.se-breadcrumb__divider,.se-breadcrumb__info,.se-breadcrumb__node{display:inline-block}.se-breadcrumb__info--last{border-bottom:3px solid #0a6ed1;padding-top:10px;padding-bottom:10px}.se-breadcrumb__info--level{display:block;text-transform:uppercase;color:#51555a;font-family:\"72\",web,\"Open Sans\",sans-serif;font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;font-weight:700}.se-breadcrumb__info--name{display:block;color:#51555a;font-family:\"72\",web,\"Open Sans\",sans-serif;font-size:1rem;line-height:1.4285714286;font-weight:400;font-weight:400}.se-breadcrumb__divider{margin-left:15px;margin-right:15px;margin-top:5px;vertical-align:top}.se-breadcrumb__node:last-child .se-breadcrumb__info--level,.se-breadcrumb__node:last-child .se-breadcrumb__info--name{color:#0a6ed1}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            encapsulation: core.ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [NavigationEditorNodeService,
            cmscommons.CmsitemsRestService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ BreadcrumbComponent);
    return /* @ngInject */ BreadcrumbComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "NavigationNodePickerRenderComponent", {
    selector: 'se-navigation-node-picker-render',
    template: "<div class=\"se-tree-node__name col-xs-6\" [title]=\"node.name | seL10n | async\"><span>{{ node.name | seL10n | async }}</span></div><div class=\"col-sm-4 pull-right tree-node se-navigation-picker-renderer\" (click)=\"pick(node)\" *ngIf=\"isEditable()\"><a translate=\"se.cms.navigationcomponent.management.node.selection.select.action\" class=\"btn btn-link se-navigation-picker-renderer__btn\"></a></div>"
});
var /* @ngInject */ NavigationNodePickerRenderComponent = /** @class */ (function () {
    NavigationNodePickerRenderComponent.$inject = ["parent", "node"];
    function /* @ngInject */ NavigationNodePickerRenderComponent(parent, node) {
        this.parent = parent;
        this.node = node;
    }
    /* @ngInject */ NavigationNodePickerRenderComponent.prototype.ngOnInit = function () {
        var _a;
        (_a = this.parent.nodeActions, this.pick = _a.pick, this.isEditable = _a.isEditable);
    };
    /* @ngInject */ NavigationNodePickerRenderComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-navigation-node-picker-render',
            template: "<div class=\"se-tree-node__name col-xs-6\" [title]=\"node.name | seL10n | async\"><span>{{ node.name | seL10n | async }}</span></div><div class=\"col-sm-4 pull-right tree-node se-navigation-picker-renderer\" (click)=\"pick(node)\" *ngIf=\"isEditable()\"><a translate=\"se.cms.navigationcomponent.management.node.selection.select.action\" class=\"btn btn-link se-navigation-picker-renderer__btn\"></a></div>"
        }),
        __param(0, core.Inject(core.forwardRef(function () { return smarteditcommons.TreeComponent; }))),
        __param(1, core.Inject(smarteditcommons.TREE_NODE)),
        __metadata("design:paramtypes", [smarteditcommons.TreeComponent, Object])
    ], /* @ngInject */ NavigationNodePickerRenderComponent);
    return /* @ngInject */ NavigationNodePickerRenderComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "NavigationNodePickerComponent", {
    selector: 'se-navigation-node-picker',
    template: "<div class=\"categoryTable\"><div class=\"tablehead clearfix hidden-xs se-navigation-editor-tree__head\"><div translate=\"se.ytree.template.header.name\" class=\"se-navigation-editor-tree__name col-md-offset-1 col-sm-5\"></div></div><se-tree [nodeUri]=\"nodeURI\" [rootNodeUid]=\"rootNodeUid\" [nodeComponent]=\"nodePickerRenderComponent\" [removeDefaultTemplate]=\"removeDefaultTemplate\" [nodeActions]=\"actions\"></se-tree></div>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ NavigationNodePickerComponent = /** @class */ (function () {
    NavigationNodePickerComponent.$inject = ["cmsitemsRestService", "systemEventService"];
    function /* @ngInject */ NavigationNodePickerComponent(cmsitemsRestService, systemEventService) {
        this.cmsitemsRestService = cmsitemsRestService;
        this.systemEventService = systemEventService;
        this.nodePickerRenderComponent = NavigationNodePickerRenderComponent;
        this.removeDefaultTemplate = true;
        this.rootNodeUid = cmscommons.NAVIGATION_NODE_ROOT_NODE_UID;
        this.editable = true;
    }
    /* @ngInject */ NavigationNodePickerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.nodeURI = new smarteditcommons.URIBuilder(cmscommons.NAVIGATION_MANAGEMENT_RESOURCE_URI)
            .replaceParams(this.uriContext)
            .build();
        this.actions = {
            pick: function (treeService, node) { return __awaiter(_this, void 0, void 0, function () {
                var requestParams, result, foundNode, idObject;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            requestParams = {
                                pageSize: 10,
                                currentPage: 0,
                                mask: node.uid,
                                typeCode: 'CMSNavigationNode',
                                itemSearchParams: ''
                            };
                            return [4 /*yield*/, this.cmsitemsRestService.get(requestParams)];
                        case 1:
                            result = _a.sent();
                            foundNode = result.response.find(function (element) { return element.uid === node.uid; });
                            idObject = {
                                nodeUuid: foundNode === null || foundNode === void 0 ? void 0 : foundNode.uuid,
                                nodeUid: node.uid
                            };
                            this.systemEventService.publishAsync(SELECTED_NODE, idObject);
                            return [2 /*return*/];
                    }
                });
            }); },
            isEditable: function () { return _this.editable; }
        };
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ NavigationNodePickerComponent.prototype, "uriContext", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ NavigationNodePickerComponent.prototype, "editable", void 0);
    /* @ngInject */ NavigationNodePickerComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-navigation-node-picker',
            template: "<div class=\"categoryTable\"><div class=\"tablehead clearfix hidden-xs se-navigation-editor-tree__head\"><div translate=\"se.ytree.template.header.name\" class=\"se-navigation-editor-tree__name col-md-offset-1 col-sm-5\"></div></div><se-tree [nodeUri]=\"nodeURI\" [rootNodeUid]=\"rootNodeUid\" [nodeComponent]=\"nodePickerRenderComponent\" [removeDefaultTemplate]=\"removeDefaultTemplate\" [nodeActions]=\"actions\"></se-tree></div>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [cmscommons.CmsitemsRestService,
            smarteditcommons.SystemEventService])
    ], /* @ngInject */ NavigationNodePickerComponent);
    return /* @ngInject */ NavigationNodePickerComponent;
}());

/**
 * Convenience service to open an editor modal window for a given navigation node's data.
 */
var /* @ngInject */ NavigationNodeEditorModalService = /** @class */ (function () {
    NavigationNodeEditorModalService.$inject = ["genericEditorModalService", "catalogService"];
    function /* @ngInject */ NavigationNodeEditorModalService(genericEditorModalService, catalogService) {
        this.genericEditorModalService = genericEditorModalService;
        this.catalogService = catalogService;
    }
    /**
     *
     * Opens a modal for creating and editing a navigation node with the CSM items API. Leave the current parameter to trigger
     * a creation operation.
     *
     * @param uriContext The uri context of the navigational node.
     * @param parent The parent navigational node.
     * @param current The current navigational node. If the current node is left empty, the modal
     * will process a creation operation.
     */
    /* @ngInject */ NavigationNodeEditorModalService.prototype.open = function (uriContext, parent, current) {
        return __awaiter(this, void 0, void 0, function () {
            var content, catalogVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        content = null;
                        if (!!current) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.catalogService.getCatalogVersionUUid(uriContext)];
                    case 1:
                        catalogVersion = _a.sent();
                        content = {
                            catalogVersion: catalogVersion,
                            parent: parent.uuid,
                            itemtype: cmscommons.NAVIGATION_NODE_TYPECODE,
                            visible: true
                        };
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.genericEditorModalService.open({
                            componentUuid: current ? current.uuid : null,
                            componentType: cmscommons.NAVIGATION_NODE_TYPECODE,
                            content: content,
                            title: 'se.cms.navigationmanagement.node.edit.title'
                        }, function (item) { return item; }, null, {
                            modalPanelClass: 'modal-stretched'
                        })];
                }
            });
        });
    };
    NavigationNodeEditorModalService.prototype.open.$inject = ["uriContext", "parent", "current"];
    /* @ngInject */ NavigationNodeEditorModalService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [GenericEditorModalService,
            smarteditcommons.ICatalogService])
    ], /* @ngInject */ NavigationNodeEditorModalService);
    return /* @ngInject */ NavigationNodeEditorModalService;
}());

// TODO: unit tests
var /* @ngInject */ NavigationEditorTreeActions = /** @class */ (function () {
    NavigationEditorTreeActions.$inject = ["logService", "cmsitemsRestService", "confirmationModalService", "navigationEditorNodeService", "navigationNodeEditorModalService"];
    function /* @ngInject */ NavigationEditorTreeActions(logService, cmsitemsRestService, confirmationModalService, navigationEditorNodeService, navigationNodeEditorModalService) {
        this.logService = logService;
        this.cmsitemsRestService = cmsitemsRestService;
        this.confirmationModalService = confirmationModalService;
        this.navigationEditorNodeService = navigationEditorNodeService;
        this.navigationNodeEditorModalService = navigationNodeEditorModalService;
    }
    /* @ngInject */ NavigationEditorTreeActions_1 = /* @ngInject */ NavigationEditorTreeActions;
    /**
     * Sets fields required for this service to work properly
     */
    /* @ngInject */ NavigationEditorTreeActions.prototype.setup = function (readOnly, rootNodeUid, uriContext) {
        this.readOnly = readOnly;
        this.rootNodeUid = rootNodeUid;
        this.uriContext = uriContext;
    };
    NavigationEditorTreeActions.prototype.setup.$inject = ["readOnly", "rootNodeUid", "uriContext"];
    /**
     * Exposes methods of this service to a literal object.
     *
     * This literal object is used by `TreeComponent#setNodeActions` (smarteditcommons)
     * It sets new context and "inject" treeService param for all methods using `.bind`
     *
     * It is done this way, so TreeComponent can easily iterate over the methods, if we would passed instance of this class it wouldn't be easy to iterate over these methods
     */
    /* @ngInject */ NavigationEditorTreeActions.prototype.getActions = function () {
        var _this = this;
        return {
            isReadOnly: function () { return _this.isReadOnly(); },
            hasChildren: function (treeService, nodeData) { return _this.hasChildren(treeService, nodeData); },
            fetchData: function (treeService, nodeData) {
                return _this.fetchData(treeService, nodeData);
            },
            removeItem: function (treeService, nodeData) { return _this.removeItem(treeService, nodeData); },
            performMove: function (treeService, nodeData, refreshNodeItself) { return _this.performMove(treeService, nodeData, refreshNodeItself); },
            dragAndDrop: function (treeService, event) { return _this.dragAndDrop(treeService, event); },
            moveUp: function (treeService, nodeData) { return _this.moveUp(treeService, nodeData); },
            moveDown: function (treeService, nodeData) { return _this.moveDown(treeService, nodeData); },
            isMoveUpAllowed: function (treeService, nodeData) { return _this.isMoveUpAllowed(treeService, nodeData); },
            isMoveDownAllowed: function (treeService, nodeData) { return _this.isMoveDownAllowed(treeService, nodeData); },
            refreshNode: function (treeService, nodeData) {
                return _this.refreshNode(treeService, nodeData);
            },
            refreshParentNode: function (treeService, nodeData) {
                return _this.refreshParentNode(treeService, nodeData);
            },
            editNavigationNode: function (treeService, nodeData) {
                return _this.editNavigationNode(treeService, nodeData);
            },
            addTopLevelNode: function (treeService, nodeData) { return _this.addTopLevelNode(treeService, nodeData); },
            getEntryString: function (treeService, nodeData) { return _this.getEntryString(treeService, nodeData); },
            getEntryTooltipString: function (treeService, nodeData) { return _this.getEntryTooltipString(treeService, nodeData); },
            addNewChild: function (treeService, nodeData) {
                return _this.addNewChild(treeService, nodeData);
            },
            addNewSibling: function (treeService, nodeData) {
                return _this.addNewSibling(treeService, nodeData);
            },
            getDropdownItems: function (treeService) { return _this.getDropdownItems(treeService); },
            _findNodeById: function (treeService, nodeUid) { return _this._findNodeById(treeService, nodeUid); },
            _expandIfNeeded: function (treeService, nodeData) {
                return _this._expandIfNeeded(treeService, nodeData);
            }
        };
    };
    /* @ngInject */ NavigationEditorTreeActions.prototype.getNavigationNodeCMSItemByUid = function (uid) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cmsitemsRestService.get({
                            typeCode: cmscommons.NAVIGATION_NODE_TYPECODE,
                            pageSize: 1,
                            currentPage: 0,
                            itemSearchParams: 'uid:' + uid
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.response[0]];
                }
            });
        });
    };
    NavigationEditorTreeActions.prototype.getNavigationNodeCMSItemByUid.$inject = ["uid"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.hasNotMoved = function (source, destinationPosition, destinationParent) {
        return (source.position === destinationPosition && source.parentUid === destinationParent.uid);
    };
    NavigationEditorTreeActions.prototype.hasNotMoved.$inject = ["source", "destinationPosition", "destinationParent"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.getEntriesCommaSeparated = function (entries) {
        return entries.map(function (entry) { return entry.name + " (" + entry.itemType + ")"; }).join(', ');
    };
    NavigationEditorTreeActions.prototype.getEntriesCommaSeparated.$inject = ["entries"];
    /** Actions */
    /* @ngInject */ NavigationEditorTreeActions.prototype.isReadOnly = function () {
        return this.readOnly;
    };
    /* @ngInject */ NavigationEditorTreeActions.prototype.hasChildren = function (_treeService, nodeData) {
        return nodeData.hasChildren;
    };
    NavigationEditorTreeActions.prototype.hasChildren.$inject = ["_treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.fetchData = function (treeService, nodeData) {
        return __awaiter(this, void 0, void 0, function () {
            var node;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (nodeData.initiated) {
                            return [2 /*return*/, nodeData.nodes];
                        }
                        if (!(nodeData.uid === cmscommons.NAVIGATION_NODE_ROOT_NODE_UID)) return [3 /*break*/, 2];
                        nodeData.initiated = false;
                        return [4 /*yield*/, this.getNavigationNodeCMSItemByUid(this.rootNodeUid)];
                    case 1:
                        node = _a.sent();
                        lodash.assign(nodeData, node);
                        _a.label = 2;
                    case 2:
                        nodeData.removeAllNodes();
                        return [2 /*return*/, treeService.fetchChildren(nodeData)];
                }
            });
        });
    };
    NavigationEditorTreeActions.prototype.fetchData.$inject = ["treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.removeItem = function (treeService, node) {
        return __awaiter(this, void 0, void 0, function () {
            var isConfirmed, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.readOnly) {
                            throw /* @ngInject */ NavigationEditorTreeActions_1.READY_ONLY_ERROR_I18N;
                        }
                        isConfirmed = true;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        // IMPORTANT NOTE
                        // `confirmationModalService.confirm` resolves to null
                        // that's why `isConfirmed` is not set here
                        return [4 /*yield*/, this.confirmationModalService.confirm({
                                description: 'se.cms.navigationmanagement.navnode.removenode.confirmation.message',
                                title: 'se.cms.navigationmanagement.navnode.removenode.confirmation.title'
                            })];
                    case 2:
                        // IMPORTANT NOTE
                        // `confirmationModalService.confirm` resolves to null
                        // that's why `isConfirmed` is not set here
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        isConfirmed = false;
                        return [3 /*break*/, 4];
                    case 4:
                        if (!isConfirmed) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.cmsitemsRestService.delete(node.uuid)];
                    case 5:
                        _b.sent();
                        this.refreshParentNode(treeService, node);
                        _b.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    NavigationEditorTreeActions.prototype.removeItem.$inject = ["treeService", "node"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.performMove = function (treeService, node, refreshNodeItself) {
        return __awaiter(this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.readOnly) {
                            throw /* @ngInject */ NavigationEditorTreeActions_1.READY_ONLY_ERROR_I18N;
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 9, , 10]);
                        return [4 /*yield*/, this.navigationEditorNodeService.updateNavigationNodePosition(node)];
                    case 2:
                        _a.sent();
                        if (!!node) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.fetchData(treeService, treeService.root)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 4:
                        if (!refreshNodeItself) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.refreshNode(treeService, node)];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 6: return [4 /*yield*/, this.refreshParentNode(treeService, node)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        err_1 = _a.sent();
                        this.logService.error("Error updating node position:\n" + err_1);
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    NavigationEditorTreeActions.prototype.performMove.$inject = ["treeService", "node", "refreshNodeItself"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.dragAndDrop = function (treeService, event) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeData, destinationNodes, destination, destinationParent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeData = event.sourceNode;
                        destinationNodes = event.destinationNodes;
                        destination = destinationNodes.find(function (node) { return node.uid !== nodeData.uid; });
                        // this method is still triggered on drop, even if drop is not allowed
                        // so its possible that destination does not exist, in which case we return silently
                        if (!destination) {
                            return [2 /*return*/];
                        }
                        destinationParent = destination.parent;
                        if (this.hasNotMoved(nodeData, event.position, destinationParent)) {
                            return [2 /*return*/];
                        }
                        nodeData.position = event.position;
                        nodeData.setParent(destinationParent);
                        return [4 /*yield*/, this.performMove(treeService, nodeData, true)];
                    case 1:
                        _a.sent();
                        if (event.sourceParentNode.uid !== event.destinationParentNode.uid) {
                            this.refreshNode(treeService, event.sourceParentNode);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    NavigationEditorTreeActions.prototype.dragAndDrop.$inject = ["treeService", "event"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.moveUp = function (treeService, nodeData) {
        if (this.readOnly) {
            throw /* @ngInject */ NavigationEditorTreeActions_1.READY_ONLY_ERROR_I18N;
        }
        nodeData.position = nodeData.position - 1;
        return this.performMove(treeService, nodeData);
    };
    NavigationEditorTreeActions.prototype.moveUp.$inject = ["treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.moveDown = function (treeService, nodeData) {
        if (this.readOnly) {
            throw /* @ngInject */ NavigationEditorTreeActions_1.READY_ONLY_ERROR_I18N;
        }
        nodeData.position = nodeData.position + 1;
        return this.performMove(treeService, nodeData);
    };
    NavigationEditorTreeActions.prototype.moveDown.$inject = ["treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.isMoveUpAllowed = function (_treeService, nodeData) {
        return nodeData.position !== 0;
    };
    NavigationEditorTreeActions.prototype.isMoveUpAllowed.$inject = ["_treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.isMoveDownAllowed = function (_treeService, nodeData) {
        nodeData.parent.nodes = nodeData.parent.nodes || [];
        return nodeData.position < nodeData.parent.nodes.length - 1;
    };
    NavigationEditorTreeActions.prototype.isMoveDownAllowed.$inject = ["_treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.refreshNode = function (treeService, nodeData) {
        nodeData.setInitiated(false);
        return treeService.fetchChildren(nodeData);
    };
    NavigationEditorTreeActions.prototype.refreshNode.$inject = ["treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.refreshParentNode = function (treeService, nodeData) {
        return this.refreshNode(treeService, nodeData.parent);
    };
    NavigationEditorTreeActions.prototype.refreshParentNode.$inject = ["treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.editNavigationNode = function (treeService, nodeData) {
        return __awaiter(this, void 0, void 0, function () {
            var targetNode, refreshedNode, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, this.navigationNodeEditorModalService.open(this.uriContext, nodeData.parent, nodeData)];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.refreshNode(treeService, nodeData.parent)];
                    case 2:
                        _b.sent();
                        targetNode = void 0;
                        if (nodeData.parent.uid === cmscommons.NAVIGATION_NODE_ROOT_NODE_UID) {
                            targetNode = nodeData;
                        }
                        else {
                            targetNode = nodeData.parent;
                        }
                        return [4 /*yield*/, this.navigationEditorNodeService.getNavigationNode(targetNode.uid, this.uriContext)];
                    case 3:
                        refreshedNode = _b.sent();
                        lodash.assign(targetNode, refreshedNode);
                        if (nodeData.parent.uid === cmscommons.NAVIGATION_NODE_ROOT_NODE_UID) {
                            return [2 /*return*/, this.refreshNode(treeService, nodeData)];
                        }
                        return [2 /*return*/, this.refreshParentNode(treeService, nodeData)];
                    case 4:
                        _a = _b.sent();
                        this.logService.warn('navigationNodeEditorModalService closed when editing navigation node');
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    NavigationEditorTreeActions.prototype.editNavigationNode.$inject = ["treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.addTopLevelNode = function (treeService, nodeData) {
        return __awaiter(this, void 0, void 0, function () {
            var created, node;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.addNewChild(treeService, nodeData)];
                    case 1:
                        created = !!(_a.sent());
                        if (!created) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.getNavigationNodeCMSItemByUid(this.rootNodeUid)];
                    case 2:
                        node = _a.sent();
                        return [4 /*yield*/, this.fetchData(treeService, node)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NavigationEditorTreeActions.prototype.addTopLevelNode.$inject = ["treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.getEntryString = function (_treeService, node) {
        return this.getEntriesCommaSeparated(node.entries || []);
    };
    NavigationEditorTreeActions.prototype.getEntryString.$inject = ["_treeService", "node"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.getEntryTooltipString = function (_treeService, node) {
        return __spreadArrays([
            '<div>'
        ], (node.entries || []).map(function (entry) { return "<div>" + entry.name + " (" + entry.itemType + ")</div>"; }), [
            '</div>'
        ]).join('');
    };
    NavigationEditorTreeActions.prototype.getEntryTooltipString.$inject = ["_treeService", "node"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.addNewChild = function (treeService, nodeData) {
        return __awaiter(this, void 0, void 0, function () {
            var parent, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        parent = nodeData ? nodeData : this._findNodeById(treeService, this.rootNodeUid);
                        return [4 /*yield*/, this._expandIfNeeded(treeService, nodeData)];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.navigationNodeEditorModalService.open(this.uriContext, parent)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/, this.refreshNode(treeService, parent)];
                    case 4:
                        _a = _b.sent();
                        this.logService.warn('navigationNodeEditorModalService closed when adding new child');
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    NavigationEditorTreeActions.prototype.addNewChild.$inject = ["treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.addNewSibling = function (treeService, nodeData) {
        return __awaiter(this, void 0, void 0, function () {
            var parent, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        parent = nodeData.parent;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.navigationNodeEditorModalService.open(this.uriContext, parent)];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, this.refreshNode(treeService, parent)];
                    case 3:
                        _a = _b.sent();
                        this.logService.warn('navigationNodeEditorModalService closed when adding new sibling');
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NavigationEditorTreeActions.prototype.addNewSibling.$inject = ["treeService", "nodeData"];
    /* @ngInject */ NavigationEditorTreeActions.prototype.getDropdownItems = function (treeService) {
        var _this = this;
        return [
            {
                key: 'se.cms.navigationmanagement.navnode.edit',
                callback: function (node) {
                    _this.editNavigationNode(treeService, node);
                }
            },
            {
                key: 'se.cms.navigationmanagement.navnode.removenode',
                customCss: 'se-dropdown-item__delete',
                callback: function (node) {
                    _this.removeItem(treeService, node);
                }
            },
            {
                key: 'se.cms.navigationmanagement.navnode.move.up',
                condition: function (node) {
                    return _this.isMoveUpAllowed(treeService, node);
                },
                callback: function (node) {
                    _this.moveUp(treeService, node);
                }
            },
            {
                key: 'se.cms.navigationmanagement.navnode.move.down',
                condition: function (node) {
                    return _this.isMoveDownAllowed(treeService, node);
                },
                callback: function (node) {
                    _this.moveDown(treeService, node);
                }
            },
            {
                key: 'se.cms.navigationmanagement.navnode.addchild',
                callback: function (node) {
                    _this.addNewChild(treeService, node);
                }
            },
            {
                key: 'se.cms.navigationmanagement.navnode.addsibling',
                callback: function (node) {
                    _this.addNewSibling(treeService, node);
                }
            }
        ];
    };
    NavigationEditorTreeActions.prototype.getDropdownItems.$inject = ["treeService"];
    /* @ngInject */ NavigationEditorTreeActions.prototype._findNodeById = function (treeService, nodeUid) {
        return treeService.getNodeById(nodeUid);
    };
    NavigationEditorTreeActions.prototype._findNodeById.$inject = ["treeService", "nodeUid"];
    /* @ngInject */ NavigationEditorTreeActions.prototype._expandIfNeeded = function (treeService, nodeData) {
        return nodeData && !nodeData.isExpanded ? treeService.toggle(nodeData) : Promise.resolve();
    };
    NavigationEditorTreeActions.prototype._expandIfNeeded.$inject = ["treeService", "nodeData"];
    var /* @ngInject */ NavigationEditorTreeActions_1;
    /* @ngInject */ NavigationEditorTreeActions.READY_ONLY_ERROR_I18N = 'navigation.in.readonly.mode';
    __decorate([
        smarteditcommons.InvalidateCache(cmscommons.cmsitemsEvictionTag),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], /* @ngInject */ NavigationEditorTreeActions.prototype, "getNavigationNodeCMSItemByUid", null);
    /* @ngInject */ NavigationEditorTreeActions = /* @ngInject */ NavigationEditorTreeActions_1 = __decorate([
        core.Injectable(),
        __metadata("design:paramtypes", [smarteditcommons.LogService,
            cmscommons.CmsitemsRestService,
            smarteditcommons.IConfirmationModalService,
            NavigationEditorNodeService,
            NavigationNodeEditorModalService])
    ], /* @ngInject */ NavigationEditorTreeActions);
    return /* @ngInject */ NavigationEditorTreeActions;
}());

var /* @ngInject */ NavigationEditorTreeDragOptions = /** @class */ (function () {
    function /* @ngInject */ NavigationEditorTreeDragOptions() {
    }
    /**
     * Sets the dragAndDrop callback handler
     *
     * @param dragAndDropFunc Function to be called when `onDropCallback` is called
     */
    /* @ngInject */ NavigationEditorTreeDragOptions.prototype.setup = function (dragAndDropFunc) {
        this.dragAndDropHandler = dragAndDropFunc;
    };
    NavigationEditorTreeDragOptions.prototype.setup.$inject = ["dragAndDropFunc"];
    /**
     * Exposes methods of this service to a literal object.
     *
     * This literal object is used by `TreeComponent#setNodeActions` (smarteditcommons)
     * It sets new context and "inject" param for all methods using `.bind`
     *
     * It is done this way, so TreeComponent can easily iterate over the methods, if we would passed instance of this class it wouldn't be easy to iterate over these methods
     */
    /* @ngInject */ NavigationEditorTreeDragOptions.prototype.getDragOptions = function () {
        var _this = this;
        return {
            onDropCallback: function (event) {
                return _this.onDropCallback(event);
            },
            allowDropCallback: this.allowDropCallback,
            beforeDropCallback: this.beforeDropCallback
        };
    };
    /* @ngInject */ NavigationEditorTreeDragOptions.prototype.onDropCallback = function (event) {
        this.dragAndDropHandler(event);
    };
    NavigationEditorTreeDragOptions.prototype.onDropCallback.$inject = ["event"];
    /* @ngInject */ NavigationEditorTreeDragOptions.prototype.allowDropCallback = function (event) {
        return event.sourceNode.parent.uid === event.destinationNodes[0].parent.uid;
    };
    NavigationEditorTreeDragOptions.prototype.allowDropCallback.$inject = ["event"];
    /* @ngInject */ NavigationEditorTreeDragOptions.prototype.beforeDropCallback = function (event) {
        if (event.sourceNode.parent.uid !== event.destinationNodes[0].parent.uid) {
            return Promise.resolve({
                confirmDropI18nKey: 'se.cms.navigationmanagement.navnode.confirmation'
            });
        }
        return Promise.resolve(true);
    };
    NavigationEditorTreeDragOptions.prototype.beforeDropCallback.$inject = ["event"];
    /* @ngInject */ NavigationEditorTreeDragOptions = __decorate([
        core.Injectable()
    ], /* @ngInject */ NavigationEditorTreeDragOptions);
    return /* @ngInject */ NavigationEditorTreeDragOptions;
}());

window.__smartedit__.addDecoratorPayload("Component", "NavigationNodeComponent", {
    selector: 'se-navigation-node',
    template: "<div class=\"pull-right dropdown tree-node se-tree-node__actions col-sm-1\" [hidden]=\"isReadOnly\"><se-dropdown-menu [dropdownItems]=\"dropdownItems\" [selectedItem]=\"node\" class=\"pull-right se-tree-node__actions--more-menu\"></se-dropdown-menu></div><div class=\"se-tree-node__name col-xs-3\" [title]=\"node.name | seL10n | async\"><span>{{ node.name | seL10n | async }}</span></div><div class=\"pull-right tree-node se-tree-node__entry col-xs-5\"><se-tooltip class=\"se-dropdown-item__delete-page-popover\" [triggers]=\"['mouseenter', 'mouseleave']\" [isChevronVisible]=\"true\" [appendTo]=\"'body'\"><span se-tooltip-trigger class=\"se-tree-node__popover\"><span>{{ entryString }} </span></span><span se-tooltip-body>{{ entryString }}</span></se-tooltip></div><div class=\"se-tree-node__title col-xs-2\"><span [hidden]=\"!node.title\">{{ node.title | seL10n | async }}</span></div>",
    styles: ["se-navigation-node .se-dropdown-item__delete-page-popover,se-navigation-node .se-dropdown-item__delete-page-popover .se-tooltip{max-width:100%}"],
    encapsulation: core.ViewEncapsulation.None,
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var NavigationNodeComponent = /** @class */ (function () {
    function NavigationNodeComponent(parent, node) {
        this.parent = parent;
        this.node = node;
        this.dropdownItems = [];
    }
    NavigationNodeComponent.prototype.ngOnInit = function () {
        var _a = this.parent
            .nodeActions, getDropdownItems = _a.getDropdownItems, isReadOnly = _a.isReadOnly, getEntryString = _a.getEntryString;
        this.dropdownItems = getDropdownItems();
        this.isReadOnly = isReadOnly();
        this.entryString = getEntryString(this.node);
    };
    NavigationNodeComponent = __decorate([
        core.Component({
            selector: 'se-navigation-node',
            template: "<div class=\"pull-right dropdown tree-node se-tree-node__actions col-sm-1\" [hidden]=\"isReadOnly\"><se-dropdown-menu [dropdownItems]=\"dropdownItems\" [selectedItem]=\"node\" class=\"pull-right se-tree-node__actions--more-menu\"></se-dropdown-menu></div><div class=\"se-tree-node__name col-xs-3\" [title]=\"node.name | seL10n | async\"><span>{{ node.name | seL10n | async }}</span></div><div class=\"pull-right tree-node se-tree-node__entry col-xs-5\"><se-tooltip class=\"se-dropdown-item__delete-page-popover\" [triggers]=\"['mouseenter', 'mouseleave']\" [isChevronVisible]=\"true\" [appendTo]=\"'body'\"><span se-tooltip-trigger class=\"se-tree-node__popover\"><span>{{ entryString }} </span></span><span se-tooltip-body>{{ entryString }}</span></se-tooltip></div><div class=\"se-tree-node__title col-xs-2\"><span [hidden]=\"!node.title\">{{ node.title | seL10n | async }}</span></div>",
            styles: ["se-navigation-node .se-dropdown-item__delete-page-popover,se-navigation-node .se-dropdown-item__delete-page-popover .se-tooltip{max-width:100%}"],
            encapsulation: core.ViewEncapsulation.None,
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(0, core.Inject(core.forwardRef(function () { return smarteditcommons.TreeComponent; }))),
        __param(1, core.Inject(smarteditcommons.TREE_NODE)),
        __metadata("design:paramtypes", [smarteditcommons.TreeComponent, Object])
    ], NavigationNodeComponent);
    return NavigationNodeComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "NavigationEditorTreeComponent", {
    selector: 'se-navigation-editor-tree',
    template: "<div class=\"se-navigation-editor-tree__header\" *ngIf=\"!readOnly\"><button class=\"se-navigation-editor-tree__btn fd-button\" (click)=\"actions.addTopLevelNode()\"><span [translate]=\"'se.cms.navigationmanagement.add.top.level.node'\" class=\"se-navigation-editor-tree__btn--text\"></span></button></div><div class=\"se-navigation-editor-tree categoryTable\"><div class=\"tablehead clearfix hidden-xs se-navigation-editor-tree__head\"><div [translate]=\"'se.ytree.template.header.name'\" class=\"se-navigation-editor-tree__name col-xs-3\"></div><div [translate]=\"'se.ytree.template.header.title'\" class=\"se-navigation-editor-tree__title col-xs-3\"></div><div class=\"col-xs-1 pull-right\"></div><div [translate]=\"'se.ytree.template.header.entry'\" class=\"se-navigation-editor-tree__entry col-xs-5 pull-right\"></div></div><se-tree [nodeUri]=\"nodeURI\" [rootNodeUid]=\"rootNodeUid\" [nodeComponent]=\"nodeComponent\" [removeDefaultTemplate]=\"true\" [nodeActions]=\"actions\" [dragOptions]=\"dragOptions\"></se-tree></div>",
    styles: [".se-navigation-editor-tree__header{height:55px;width:100%;border-radius:4px 4px 0 0;background-color:#fff;display:flex;align-items:center;justify-content:flex-end;padding-right:1rem}.se-navigation-editor-tree__name{padding-left:45px}.se-navigation-editor-tree__name.col-md-offset-1{margin-left:0}.se-navigation-editor-tree__title{padding-left:60px}.tablehead.se-navigation-editor-tree__head{border-top:1px solid #eeeeef;background-color:#fafafa;font-size:1rem;line-height:1.4285714286;font-weight:400;font-family:\"72\",web,\"Open Sans\",sans-serif;color:#6a6d70;height:40px;padding:10px 0}.fd-modal__body .se-navigation-editor-tree__entry,.modal-dialog .se-navigation-editor-tree__entry{width:155px;padding-left:55px}.fd-modal__body .se-navigation-editor-tree__name,.modal-dialog .se-navigation-editor-tree__name{width:200px}.fd-modal__body .se-navigation-editor-tree__head,.modal-dialog .se-navigation-editor-tree__head{margin:0 -20px 0 -20px;padding-left:20px;padding-right:20px}.se-navigation-editor-tree__btn{margin-right:1rem}"],
    providers: [NavigationEditorTreeDragOptions, NavigationEditorTreeActions],
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    encapsulation: core.ViewEncapsulation.None
});
var /* @ngInject */ NavigationEditorTreeComponent = /** @class */ (function () {
    NavigationEditorTreeComponent.$inject = ["dragOptionsService", "actionsService"];
    function /* @ngInject */ NavigationEditorTreeComponent(dragOptionsService, actionsService) {
        this.dragOptionsService = dragOptionsService;
        this.actionsService = actionsService;
        this.nodeComponent = NavigationNodeComponent;
    }
    /* @ngInject */ NavigationEditorTreeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.nodeURI = new smarteditcommons.URIBuilder(cmscommons.NAVIGATION_MANAGEMENT_RESOURCE_URI)
            .replaceParams(this.uriContext)
            .build();
        this.rootNodeUid = this.rootNodeUid || cmscommons.NAVIGATION_NODE_ROOT_NODE_UID;
        this.actionsService.setup(this.readOnly, this.rootNodeUid, this.uriContext);
        this.actions = this.actionsService.getActions();
        if (!this.readOnly) {
            this.dragOptionsService.setup(function (event) {
                _this.actions.dragAndDrop(event);
            });
            this.dragOptions = this.dragOptionsService.getDragOptions();
        }
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ NavigationEditorTreeComponent.prototype, "uriContext", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ NavigationEditorTreeComponent.prototype, "readOnly", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ NavigationEditorTreeComponent.prototype, "rootNodeUid", void 0);
    /* @ngInject */ NavigationEditorTreeComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-navigation-editor-tree',
            template: "<div class=\"se-navigation-editor-tree__header\" *ngIf=\"!readOnly\"><button class=\"se-navigation-editor-tree__btn fd-button\" (click)=\"actions.addTopLevelNode()\"><span [translate]=\"'se.cms.navigationmanagement.add.top.level.node'\" class=\"se-navigation-editor-tree__btn--text\"></span></button></div><div class=\"se-navigation-editor-tree categoryTable\"><div class=\"tablehead clearfix hidden-xs se-navigation-editor-tree__head\"><div [translate]=\"'se.ytree.template.header.name'\" class=\"se-navigation-editor-tree__name col-xs-3\"></div><div [translate]=\"'se.ytree.template.header.title'\" class=\"se-navigation-editor-tree__title col-xs-3\"></div><div class=\"col-xs-1 pull-right\"></div><div [translate]=\"'se.ytree.template.header.entry'\" class=\"se-navigation-editor-tree__entry col-xs-5 pull-right\"></div></div><se-tree [nodeUri]=\"nodeURI\" [rootNodeUid]=\"rootNodeUid\" [nodeComponent]=\"nodeComponent\" [removeDefaultTemplate]=\"true\" [nodeActions]=\"actions\" [dragOptions]=\"dragOptions\"></se-tree></div>",
            styles: [".se-navigation-editor-tree__header{height:55px;width:100%;border-radius:4px 4px 0 0;background-color:#fff;display:flex;align-items:center;justify-content:flex-end;padding-right:1rem}.se-navigation-editor-tree__name{padding-left:45px}.se-navigation-editor-tree__name.col-md-offset-1{margin-left:0}.se-navigation-editor-tree__title{padding-left:60px}.tablehead.se-navigation-editor-tree__head{border-top:1px solid #eeeeef;background-color:#fafafa;font-size:1rem;line-height:1.4285714286;font-weight:400;font-family:\"72\",web,\"Open Sans\",sans-serif;color:#6a6d70;height:40px;padding:10px 0}.fd-modal__body .se-navigation-editor-tree__entry,.modal-dialog .se-navigation-editor-tree__entry{width:155px;padding-left:55px}.fd-modal__body .se-navigation-editor-tree__name,.modal-dialog .se-navigation-editor-tree__name{width:200px}.fd-modal__body .se-navigation-editor-tree__head,.modal-dialog .se-navigation-editor-tree__head{margin:0 -20px 0 -20px;padding-left:20px;padding-right:20px}.se-navigation-editor-tree__btn{margin-right:1rem}"],
            providers: [NavigationEditorTreeDragOptions, NavigationEditorTreeActions],
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            encapsulation: core.ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [NavigationEditorTreeDragOptions,
            NavigationEditorTreeActions])
    ], /* @ngInject */ NavigationEditorTreeComponent);
    return /* @ngInject */ NavigationEditorTreeComponent;
}());

var NavigationModule = /** @class */ (function () {
    function NavigationModule() {
    }
    NavigationModule = __decorate([
        core.NgModule({
            imports: [
                common.CommonModule,
                smarteditcommons.DropdownMenuModule,
                smarteditcommons.L10nPipeModule,
                smarteditcommons.TranslationModule.forChild(),
                smarteditcommons.NgTreeModule,
                smarteditcommons.TooltipModule,
                smarteditcontainer.ToolbarModule
            ],
            declarations: [
                NavigationEditorTreeComponent,
                NavigationNodeComponent,
                NavigationEditorLinkComponent,
                BreadcrumbComponent,
                NavigationNodePickerComponent,
                NavigationNodePickerRenderComponent,
                NavigationNodeSelectorComponent,
                NavigationManagementPageComponent
            ],
            entryComponents: [
                NavigationEditorTreeComponent,
                NavigationNodeComponent,
                NavigationEditorLinkComponent,
                BreadcrumbComponent,
                NavigationNodePickerComponent,
                NavigationNodePickerRenderComponent,
                NavigationNodeSelectorComponent
            ],
            exports: [NavigationEditorTreeComponent],
            providers: [NodeAncestryService, NavigationEditorNodeService, NavigationNodeEditorModalService]
        })
    ], NavigationModule);
    return NavigationModule;
}());

var PageBuilder = /** @class */ (function () {
    function PageBuilder(catalogService, contextAwarePageStructureService, restrictionsStepHandler, uriContext) {
        var _this = this;
        this.catalogService = catalogService;
        this.contextAwarePageStructureService = contextAwarePageStructureService;
        this.restrictionsStepHandler = restrictionsStepHandler;
        this.uriContext = uriContext;
        this.model = {};
        this.page = {
            restrictions: []
        };
        this.catalogService.getCatalogVersionUUid(this.uriContext).then(function (catalogVersionUuid) {
            _this.page.catalogVersion = catalogVersionUuid;
        });
    }
    PageBuilder.prototype.pageTypeSelected = function (pageTypeObject) {
        this.model.pageType = pageTypeObject;
        this.model.pageTemplate = null;
        return this.updatePageInfoFields();
    };
    PageBuilder.prototype.pageTemplateSelected = function (pageTemplateObject) {
        this.model.pageTemplate = pageTemplateObject;
    };
    PageBuilder.prototype.getPageTypeCode = function () {
        var _a;
        return ((_a = this.model.pageType) === null || _a === void 0 ? void 0 : _a.code) || null;
    };
    PageBuilder.prototype.getTemplateUuid = function () {
        var _a;
        return ((_a = this.model.pageTemplate) === null || _a === void 0 ? void 0 : _a.uuid) || '';
    };
    PageBuilder.prototype.getPage = function () {
        var _a, _b;
        this.page.typeCode = this.getPageTypeCode();
        this.page.itemtype = this.page.typeCode;
        this.page.type = ((_a = this.model.pageType) === null || _a === void 0 ? void 0 : _a.type) || null;
        this.page.masterTemplate = this.getTemplateUuid() || null;
        this.page.template = ((_b = this.model.pageTemplate) === null || _b === void 0 ? void 0 : _b.uid) || null;
        return this.page;
    };
    PageBuilder.prototype.getPageRestrictions = function () {
        return this.page.restrictions;
    };
    PageBuilder.prototype.setPageUid = function (uid) {
        this.page.uid = uid;
    };
    PageBuilder.prototype.setRestrictions = function (onlyOneRestrictionMustApply, restrictions) {
        this.page.onlyOneRestrictionMustApply = onlyOneRestrictionMustApply;
        this.page.restrictions = restrictions;
    };
    PageBuilder.prototype.getPageInfoStructure = function () {
        return this.model.pageInfoFields;
    };
    PageBuilder.prototype.displayConditionSelected = function (displayConditionResult) {
        var isPrimaryPage = displayConditionResult.isPrimary;
        this.page.defaultPage = isPrimaryPage;
        this.page.homepage = displayConditionResult.homepage;
        if (isPrimaryPage) {
            this.page.label = null;
            this.restrictionsStepHandler.hideStep();
        }
        else {
            this.page.label = displayConditionResult.primaryPage
                ? displayConditionResult.primaryPage.label
                : '';
            this.restrictionsStepHandler.showStep();
        }
        return this.updatePageInfoFields();
    };
    PageBuilder.prototype.updatePageInfoFields = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageInfoFields;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.page.defaultPage !== undefined)) return [3 /*break*/, 3];
                        if (!this.model.pageType) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.contextAwarePageStructureService.getPageStructureForNewPage(this.model.pageType.code, this.page.defaultPage)];
                    case 1:
                        pageInfoFields = _a.sent();
                        this.model.pageInfoFields = pageInfoFields;
                        return [3 /*break*/, 3];
                    case 2:
                        this.model.pageInfoFields = {};
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return PageBuilder;
}());
var /* @ngInject */ PageBuilderFactory = /** @class */ (function () {
    PageBuilderFactory.$inject = ["catalogService", "contextAwarePageStructureService"];
    function /* @ngInject */ PageBuilderFactory(catalogService, contextAwarePageStructureService) {
        this.catalogService = catalogService;
        this.contextAwarePageStructureService = contextAwarePageStructureService;
    }
    /* @ngInject */ PageBuilderFactory.prototype.createPageBuilder = function (restrictionsStepHandler, uriContext) {
        return new PageBuilder(this.catalogService, this.contextAwarePageStructureService, restrictionsStepHandler, uriContext);
    };
    PageBuilderFactory.prototype.createPageBuilder.$inject = ["restrictionsStepHandler", "uriContext"];
    /* @ngInject */ PageBuilderFactory = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.ICatalogService,
            ContextAwarePageStructureService])
    ], /* @ngInject */ PageBuilderFactory);
    return /* @ngInject */ PageBuilderFactory;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageDisplayStatusComponent", {
    selector: 'se-page-display-status',
    template: "<ng-container *ngIf=\"showLastSyncTime; else pageStatus\"><se-tooltip [triggers]=\"['click']\" [placement]=\"'left'\" [isChevronVisible]=\"true\"><ng-container se-tooltip-trigger *ngTemplateOutlet=\"pageStatus\"></ng-container><div se-tooltip-body class=\"popover-tooltip\"><ng-container *ngIf=\"hasBeenSynchedBefore(); else notPublished\"><span [translate]=\"'se.cms.page.displaystatus.lastpublished.date'\"></span> <span>&ngsp;{{ lastSynchedDate | date: 'M/d/yy h:mm a' }}</span></ng-container><ng-template #notPublished><span [translate]=\"'se.cms.page.displaystatus.not.published'\"></span></ng-template></div></se-tooltip></ng-container><ng-template #pageStatus><se-page-status [uuid]=\"page?.uuid\" [displayStatus]=\"page?.displayStatus\"></se-page-status></ng-template>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ PageDisplayStatusComponent = /** @class */ (function () {
    PageDisplayStatusComponent.$inject = ["pageService", "crossFrameEventService", "systemEventService", "cdr"];
    function /* @ngInject */ PageDisplayStatusComponent(pageService, crossFrameEventService, systemEventService, cdr) {
        this.pageService = pageService;
        this.crossFrameEventService = crossFrameEventService;
        this.systemEventService = systemEventService;
        this.cdr = cdr;
        this.showLastSyncTime = true;
    }
    /* @ngInject */ PageDisplayStatusComponent.prototype.ngOnInit = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var pageUuid;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.unRegPageSyncEvent = this.crossFrameEventService.subscribe(cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.FAST_FETCH, function (_eventId, eventData) { return _this.updateLastSynchedDate(eventData); });
                        this.unRegPageUpdatedEvent = this.crossFrameEventService.subscribe(smarteditcommons.EVENTS.PAGE_UPDATED, function (_eventId, eventData) {
                            return _this.updatePageInfo((eventData === null || eventData === void 0 ? void 0 : eventData.uuid) || null);
                        });
                        pageUuid = ((_a = this.cmsPage) === null || _a === void 0 ? void 0 : _a.uuid) || null;
                        return [4 /*yield*/, this.initPageInfo(pageUuid)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageDisplayStatusComponent.prototype.ngOnDestroy = function () {
        this.unRegPageSyncEvent();
        this.unRegPageUpdatedEvent();
    };
    /* @ngInject */ PageDisplayStatusComponent.prototype.hasBeenSynchedBefore = function () {
        return this.lastSynchedDate !== undefined;
    };
    /* @ngInject */ PageDisplayStatusComponent.prototype.initPageInfo = function (pageUuid) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, (pageUuid ? this.cmsPage : this.pageService.getCurrentPageInfo())];
                    case 1:
                        _a.page = _b.sent();
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    PageDisplayStatusComponent.prototype.initPageInfo.$inject = ["pageUuid"];
    /* @ngInject */ PageDisplayStatusComponent.prototype.updateLastSynchedDate = function (syncStatus) {
        if (this.canUpdateLastSynchedDate(syncStatus.itemId)) {
            this.lastSynchedDate = syncStatus.lastSyncStatus;
            this.cdr.detectChanges();
        }
    };
    PageDisplayStatusComponent.prototype.updateLastSynchedDate.$inject = ["syncStatus"];
    /* @ngInject */ PageDisplayStatusComponent.prototype.updatePageInfo = function (updatedPageUuid) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var displayStatusPrevious, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!this.canUpdatePageInfo(updatedPageUuid)) {
                            return [2 /*return*/];
                        }
                        displayStatusPrevious = (_a = this.page) === null || _a === void 0 ? void 0 : _a.displayStatus;
                        _b = this;
                        return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                    case 1:
                        _b.page = _c.sent();
                        if (!!displayStatusPrevious && this.page.displayStatus === 'DRAFT') {
                            this.systemEventService.publish(WORKFLOW_REFRESH_EVENT);
                        }
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    PageDisplayStatusComponent.prototype.updatePageInfo.$inject = ["updatedPageUuid"];
    /* @ngInject */ PageDisplayStatusComponent.prototype.canUpdateLastSynchedDate = function (syncStatusItemId) {
        return this.page && this.page.uuid === syncStatusItemId;
    };
    PageDisplayStatusComponent.prototype.canUpdateLastSynchedDate.$inject = ["syncStatusItemId"];
    /* @ngInject */ PageDisplayStatusComponent.prototype.canUpdatePageInfo = function (cmsPageUuidToUpdate) {
        return !cmsPageUuidToUpdate || (this.page && this.page.uuid === cmsPageUuidToUpdate);
    };
    PageDisplayStatusComponent.prototype.canUpdatePageInfo.$inject = ["cmsPageUuidToUpdate"];
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ PageDisplayStatusComponent.prototype, "cmsPage", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ PageDisplayStatusComponent.prototype, "showLastSyncTime", void 0);
    /* @ngInject */ PageDisplayStatusComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-display-status',
            template: "<ng-container *ngIf=\"showLastSyncTime; else pageStatus\"><se-tooltip [triggers]=\"['click']\" [placement]=\"'left'\" [isChevronVisible]=\"true\"><ng-container se-tooltip-trigger *ngTemplateOutlet=\"pageStatus\"></ng-container><div se-tooltip-body class=\"popover-tooltip\"><ng-container *ngIf=\"hasBeenSynchedBefore(); else notPublished\"><span [translate]=\"'se.cms.page.displaystatus.lastpublished.date'\"></span> <span>&ngsp;{{ lastSynchedDate | date: 'M/d/yy h:mm a' }}</span></ng-container><ng-template #notPublished><span [translate]=\"'se.cms.page.displaystatus.not.published'\"></span></ng-template></div></se-tooltip></ng-container><ng-template #pageStatus><se-page-status [uuid]=\"page?.uuid\" [displayStatus]=\"page?.displayStatus\"></se-page-status></ng-template>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [cmscommons.IPageService,
            smarteditcommons.CrossFrameEventService,
            smarteditcommons.SystemEventService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ PageDisplayStatusComponent);
    return /* @ngInject */ PageDisplayStatusComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageStatusComponent", {
    selector: 'se-page-status',
    template: "<div class=\"se-page-status\"><div class=\"se-page-status__icon\" [ngClass]=\"statusIconCssClass\"></div><div class=\"se-page-status__label\">{{ statusLabel | translate }}</div></div>",
    styles: [".se-page-status{display:flex;flex-direction:row;align-items:center}.se-page-status__label{white-space:nowrap}.se-page-status__icon{float:left;margin-left:10px;margin-right:10px}.se-page-status__icon--draft{width:12px;height:12px;border-radius:50%;background-color:#74777a}.se-page-status__icon--in_progress{width:12px;height:12px;border-radius:50%;background-color:#e9730c}.se-page-status__icon--ready_to_sync{width:12px;height:12px;border-radius:50%;background-color:#0a6ed1}.se-page-status__icon--synced{width:12px;height:12px;border-radius:50%;background-color:#0a7e3e}.se-page-status__icon--locked{color:#32363a}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var PageStatusComponent = /** @class */ (function () {
    function PageStatusComponent(workflowService, cdr) {
        this.workflowService = workflowService;
        this.cdr = cdr;
        this.LOCALIZATION_PREFIX = 'se.cms.page.displaystatus.';
    }
    PageStatusComponent.prototype.ngOnChanges = function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var uuidChange, displayStatusChange, detectChanges, _a, displayStatusLC;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        uuidChange = changes.uuid;
                        displayStatusChange = changes.displayStatus;
                        detectChanges = false;
                        if (!(uuidChange && uuidChange.currentValue)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.isPageLockedToCurrentUser(this.uuid)];
                    case 1:
                        _a.isPageLocked = _b.sent();
                        detectChanges = true;
                        _b.label = 2;
                    case 2:
                        if (displayStatusChange && displayStatusChange.currentValue) {
                            displayStatusLC = this.displayStatus.toLowerCase();
                            this.statusLabel = "" + this.LOCALIZATION_PREFIX + displayStatusLC;
                            this.statusIconCssClass = this.getStatusIconCssClass(this.isPageLocked, displayStatusLC);
                        }
                        if (detectChanges) {
                            this.cdr.detectChanges();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PageStatusComponent.prototype.isPageLockedToCurrentUser = function (uuid) {
        return __awaiter(this, void 0, void 0, function () {
            var workflow;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.workflowService.getActiveWorkflowForPageUuid(uuid)];
                    case 1:
                        workflow = _a.sent();
                        return [2 /*return*/, workflow && !workflow.isAvailableForCurrentPrincipal];
                }
            });
        });
    };
    PageStatusComponent.prototype.getStatusIconCssClass = function (isPageLocked, displayStatus) {
        return isPageLocked
            ? 'icon-locked se-page-status__icon--locked'
            : "se-page-status__icon--" + displayStatus;
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], PageStatusComponent.prototype, "uuid", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], PageStatusComponent.prototype, "displayStatus", void 0);
    PageStatusComponent = __decorate([
        core.Component({
            selector: 'se-page-status',
            template: "<div class=\"se-page-status\"><div class=\"se-page-status__icon\" [ngClass]=\"statusIconCssClass\"></div><div class=\"se-page-status__label\">{{ statusLabel | translate }}</div></div>",
            styles: [".se-page-status{display:flex;flex-direction:row;align-items:center}.se-page-status__label{white-space:nowrap}.se-page-status__icon{float:left;margin-left:10px;margin-right:10px}.se-page-status__icon--draft{width:12px;height:12px;border-radius:50%;background-color:#74777a}.se-page-status__icon--in_progress{width:12px;height:12px;border-radius:50%;background-color:#e9730c}.se-page-status__icon--ready_to_sync{width:12px;height:12px;border-radius:50%;background-color:#0a6ed1}.se-page-status__icon--synced{width:12px;height:12px;border-radius:50%;background-color:#0a7e3e}.se-page-status__icon--locked{color:#32363a}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [WorkflowService, core.ChangeDetectorRef])
    ], PageStatusComponent);
    return PageStatusComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageWorkflowMenuTasksTabComponent", {
    selector: 'se-page-workflow-menu-tasks-tab',
    template: "\n        <div class=\"se-page-workflow-tasks-wrapper\">\n            <div *ngFor=\"let action of actions\">\n                <div class=\"se-page-workflow-task fd-panel\">\n                    <div>\n                        <se-workflow-action-item\n                            [workflow]=\"workflow\"\n                            [workflowAction]=\"action\"\n                            [canMakeDecisions]=\"canMakeDecisions\"\n                        ></se-workflow-action-item>\n                    </div>\n                </div>\n                <br />\n            </div>\n        </div>\n    ",
    styles: [".se-page-workflow-tasks-wrapper{max-height:400px;overflow-y:scroll;padding:15px 15px 0 15px;width:100%}.se-page-workflow-tasks-wrapper .fd-panel{box-shadow:0 0 4px 0 rgba(0,0,0,.15);max-width:320px}"]
});
var PageWorkflowMenuTasksTabComponent = /** @class */ (function () {
    function PageWorkflowMenuTasksTabComponent() {
    }
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], PageWorkflowMenuTasksTabComponent.prototype, "actions", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], PageWorkflowMenuTasksTabComponent.prototype, "workflow", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], PageWorkflowMenuTasksTabComponent.prototype, "canMakeDecisions", void 0);
    PageWorkflowMenuTasksTabComponent = __decorate([
        core.Component({
            selector: 'se-page-workflow-menu-tasks-tab',
            template: "\n        <div class=\"se-page-workflow-tasks-wrapper\">\n            <div *ngFor=\"let action of actions\">\n                <div class=\"se-page-workflow-task fd-panel\">\n                    <div>\n                        <se-workflow-action-item\n                            [workflow]=\"workflow\"\n                            [workflowAction]=\"action\"\n                            [canMakeDecisions]=\"canMakeDecisions\"\n                        ></se-workflow-action-item>\n                    </div>\n                </div>\n                <br />\n            </div>\n        </div>\n    ",
            styles: [".se-page-workflow-tasks-wrapper{max-height:400px;overflow-y:scroll;padding:15px 15px 0 15px;width:100%}.se-page-workflow-tasks-wrapper .fd-panel{box-shadow:0 0 4px 0 rgba(0,0,0,.15);max-width:320px}"]
        })
    ], PageWorkflowMenuTasksTabComponent);
    return PageWorkflowMenuTasksTabComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "WorkflowInboxBadgeComponent", {
    selector: 'se-workflow-inbox-badge',
    template: "<ng-container *ngIf=\"inboxCount$ | async as count\"><div *ngIf=\"count > 0\" aria-label=\"Notifications\"><div class=\"fd-counter fd-counter--notification se-inbox-badge\" aria-label=\"Unread count\">{{ stringifyCount(count) }}</div></div></ng-container>",
    styles: [".se-inbox-badge{transform:none;top:-2px;left:22px;font-size:10px;border-radius:8px;padding:2px 4px}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ WorkflowInboxBadgeComponent = /** @class */ (function () {
    WorkflowInboxBadgeComponent.$inject = ["workflowService"];
    function /* @ngInject */ WorkflowInboxBadgeComponent(workflowService) {
        this.workflowService = workflowService;
    }
    /* @ngInject */ WorkflowInboxBadgeComponent.prototype.ngOnInit = function () {
        this.inboxCount$ = this.workflowService.getTotalNumberOfActiveWorkflowTasks();
    };
    /* @ngInject */ WorkflowInboxBadgeComponent.prototype.stringifyCount = function (count) {
        return count <= 99 ? String(count) : '99+';
    };
    WorkflowInboxBadgeComponent.prototype.stringifyCount.$inject = ["count"];
    /* @ngInject */ WorkflowInboxBadgeComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-workflow-inbox-badge',
            template: "<ng-container *ngIf=\"inboxCount$ | async as count\"><div *ngIf=\"count > 0\" aria-label=\"Notifications\"><div class=\"fd-counter fd-counter--notification se-inbox-badge\" aria-label=\"Unread count\">{{ stringifyCount(count) }}</div></div></ng-container>",
            styles: [".se-inbox-badge{transform:none;top:-2px;left:22px;font-size:10px;border-radius:8px;padding:2px 4px}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [WorkflowService])
    ], /* @ngInject */ WorkflowInboxBadgeComponent);
    return /* @ngInject */ WorkflowInboxBadgeComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "WorkflowInboxTaskComponent", {
    selector: 'se-workflow-inbox-task',
    template: "<div class=\"se-workflow-inbox-task-header\"><a href=\"#\" (click)=\"onClick($event)\">{{ taskName | async }}</a></div><div class=\"se-workflow-inbox-task-desc\">{{ taskDescription | async }}</div><div class=\"se-workflow-inbox-task-body\">{{ getTaskCreatedAgo() }}</div>",
    styles: [":host{white-space:normal}:host(.se-workflow-inbox-task-last) .se-workflow-inbox-task-body{border-bottom:none;margin-bottom:0}.se-workflow-inbox-task-header a{font-size:1rem;line-height:1.4285714286;font-weight:400;font-weight:700;text-decoration:none;margin-bottom:4px}.se-workflow-inbox-task-desc{font-size:1rem;line-height:1.4285714286;font-weight:400;color:#32363a}.se-workflow-inbox-task-body{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#74777a;text-transform:lowercase;margin:8px 0 20px;padding-bottom:12px;border-bottom:1px solid #d9d9d9}"],
    providers: [smarteditcommons.L10nPipe],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ WorkflowInboxTaskComponent = /** @class */ (function () {
    WorkflowInboxTaskComponent.$inject = ["cMSTimeService", "workflowService", "l10nPipe"];
    function /* @ngInject */ WorkflowInboxTaskComponent(cMSTimeService, workflowService, l10nPipe) {
        this.cMSTimeService = cMSTimeService;
        this.workflowService = workflowService;
        this.l10nPipe = l10nPipe;
    }
    /* @ngInject */ WorkflowInboxTaskComponent.prototype.ngOnInit = function () {
        this.taskName = this.getTaskName();
        this.taskDescription = this.getTaskDescription();
    };
    /* @ngInject */ WorkflowInboxTaskComponent.prototype.getTaskName = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.l10nPipe.transform(this.task.action.name).pipe(operators.take(1)).toPromise()];
            });
        });
    };
    /* @ngInject */ WorkflowInboxTaskComponent.prototype.getTaskDescription = function () {
        return __awaiter(this, void 0, void 0, function () {
            var catalogName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.l10nPipe
                            .transform(this.task.attachments[0].catalogName)
                            .pipe(operators.take(1))
                            .toPromise()];
                    case 1:
                        catalogName = _a.sent();
                        return [2 /*return*/, catalogName + " " + this.task.attachments[0].catalogVersion + " | " + this.task.attachments[0].pageName];
                }
            });
        });
    };
    /* @ngInject */ WorkflowInboxTaskComponent.prototype.getTaskCreatedAgo = function () {
        return this.cMSTimeService.getTimeAgo(this.task.action.startedAgoInMillis);
    };
    /* @ngInject */ WorkflowInboxTaskComponent.prototype.onClick = function ($event) {
        $event.preventDefault();
        this.workflowService.loadExperienceAndOpenPageWorkflowMenu(this.task);
    };
    WorkflowInboxTaskComponent.prototype.onClick.$inject = ["$event"];
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ WorkflowInboxTaskComponent.prototype, "task", void 0);
    /* @ngInject */ WorkflowInboxTaskComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-workflow-inbox-task',
            template: "<div class=\"se-workflow-inbox-task-header\"><a href=\"#\" (click)=\"onClick($event)\">{{ taskName | async }}</a></div><div class=\"se-workflow-inbox-task-desc\">{{ taskDescription | async }}</div><div class=\"se-workflow-inbox-task-body\">{{ getTaskCreatedAgo() }}</div>",
            styles: [":host{white-space:normal}:host(.se-workflow-inbox-task-last) .se-workflow-inbox-task-body{border-bottom:none;margin-bottom:0}.se-workflow-inbox-task-header a{font-size:1rem;line-height:1.4285714286;font-weight:400;font-weight:700;text-decoration:none;margin-bottom:4px}.se-workflow-inbox-task-desc{font-size:1rem;line-height:1.4285714286;font-weight:400;color:#32363a}.se-workflow-inbox-task-body{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#74777a;text-transform:lowercase;margin:8px 0 20px;padding-bottom:12px;border-bottom:1px solid #d9d9d9}"],
            providers: [smarteditcommons.L10nPipe],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [cmscommons.CMSTimeService,
            WorkflowService,
            smarteditcommons.L10nPipe])
    ], /* @ngInject */ WorkflowInboxTaskComponent);
    return /* @ngInject */ WorkflowInboxTaskComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "WorkflowItemMenuComponent", {
    selector: 'se-workflow-item-menu',
    template: "<se-popup-overlay class=\"popup-anchor\" [ngClass]=\"{ 'popup-anchor--open': isMenuOpen }\" [popupOverlay]=\"popupConfig\" [popupOverlayTrigger]=\"isMenuOpen\" (popupOverlayOnHide)=\"hideMenu()\"><span *ngIf=\"menuItems.length > 0\" (click)=\"toggleMenu()\" class=\"workflow-item-menu__toggle-btn sap-icon--overflow\"></span><div se-popup-overlay-body><div class=\"workflow-item-menu\"><div class=\"workflow-item-menu__item\" *ngFor=\"let dropdownItem of menuItems\"><ng-container class=\"container\" [ngSwitch]=\"dropdownItem.i18nKey\"><div *ngSwitchCase=\"'se.cms.actionitem.page.workflow.description'\" class=\"workflow-description\"><div class=\"se-dropdown-item--label\"><div class=\"workflow-description__label fd-has-type-1 fd-has-margin-bottom-tiny\"><div [translate]=\"dropdownItem.i18nKey\"></div><div *seHasOperationPermission=\"'se.edit.workflow.workflowMenu'\"><a title=\"Edit\" class=\"workflow-description__edit-btn sap-icon--edit fd-has-float-right\" (click)=\"editDescription()\"></a></div></div><div *ngIf=\"workflowInfo.description; else noDescription\" class=\"workflow-description__text\">{{ workflowInfo.description }}</div><ng-template #noDescription><div translate=\"se.cms.actionitem.page.workflow.no.description\"></div></ng-template></div></div><div *ngSwitchCase=\"'se.cms.actionitem.page.workflow.cancel'\" class=\"workflow-cancel-btn fd-has-color-status-3\" [translate]=\"dropdownItem.i18nKey\" (click)=\"cancelWorkflow()\"></div></ng-container></div></div></div></se-popup-overlay>",
    styles: [".popup-anchor{display:flex;flex-direction:row;align-items:center;justify-content:center;font-size:1.1428571429rem;line-height:1.25;font-weight:400;padding-top:5px;width:32px;height:32px;border-radius:4px}.popup-anchor--open{background-color:#eeeeef}.workflow-item-menu{box-shadow:0 6px 12px rgba(0,0,0,.175);background-color:#fff;border-radius:4px!important;min-width:100px;width:fit-content;position:absolute;border:1px solid #d9d9d9;z-index:2000;top:96%;left:initial!important;right:0;transform:translate(5px,8px);right:-11px;top:-8px}.workflow-item-menu::before{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#d9d9d9;border-bottom-color:var(var(--fd-color-neutral-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-8px}.workflow-item-menu::after{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#fff;border-bottom-color:var(var(--fd-color-background-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-7px}.workflow-item-menu::after,.workflow-item-menu::before{right:10px}.workflow-item-menu::after,.workflow-item-menu::before{display:none}.workflow-description{min-width:225px;padding:20px}.workflow-description__label{color:#32363a;display:flex;justify-content:space-between}.workflow-description__label .sap-icon--edit{cursor:pointer}.workflow-description__label .sap-icon--edit:hover{text-decoration:none}.workflow-description__description{color:#51555a}.workflow-cancel-btn{cursor:pointer;padding:12px 20px;border-top:1px solid #fafafa}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ WorkflowItemMenuComponent = /** @class */ (function () {
    WorkflowItemMenuComponent.$inject = ["systemEventService", "workflowFacade", "routingService", "permissionService", "cdr"];
    function /* @ngInject */ WorkflowItemMenuComponent(systemEventService, workflowFacade, routingService, permissionService, cdr) {
        this.systemEventService = systemEventService;
        this.workflowFacade = workflowFacade;
        this.routingService = routingService;
        this.permissionService = permissionService;
        this.cdr = cdr;
        this.isMenuOpen = false;
        this.popupConfig = {
            halign: 'left',
            valign: 'bottom'
        };
        this.menuItems = [];
    }
    /* @ngInject */ WorkflowItemMenuComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.unRegWorkflowMenuOpenedEvent = this.systemEventService.subscribe(WORKFLOW_ITEM_MENU_OPENED_EVENT, function (_eventId, eventData) {
                            return _this.onWorkflowItemMenuOpen(eventData);
                        });
                        _a = this;
                        return [4 /*yield*/, this.getPermittedButtons([
                                {
                                    i18nKey: 'se.cms.actionitem.page.workflow.description',
                                    permissions: ['se.view.page.workflowMenu']
                                },
                                {
                                    i18nKey: 'se.cms.actionitem.page.workflow.cancel',
                                    permissions: ['se.cancel.page.workflowMenu']
                                }
                            ])];
                    case 1:
                        _a.menuItems = _b.sent();
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ WorkflowItemMenuComponent.prototype.ngOnDestroy = function () {
        this.unRegWorkflowMenuOpenedEvent();
    };
    /* @ngInject */ WorkflowItemMenuComponent.prototype.toggleMenu = function () {
        this.isMenuOpen = !this.isMenuOpen;
        if (this.isMenuOpen && this.workflowInfo) {
            this.systemEventService.publishAsync(WORKFLOW_ITEM_MENU_OPENED_EVENT, {
                uid: this.workflowInfo.workflowCode
            });
        }
    };
    /* @ngInject */ WorkflowItemMenuComponent.prototype.hideMenu = function () {
        this.isMenuOpen = false;
    };
    /* @ngInject */ WorkflowItemMenuComponent.prototype.editDescription = function () {
        return __awaiter(this, void 0, void 0, function () {
            var updatedWorkflow;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.hideMenu();
                        return [4 /*yield*/, this.workflowFacade.editWorkflow(this.workflowInfo)];
                    case 1:
                        updatedWorkflow = _a.sent();
                        this.workflowInfo.description = updatedWorkflow.description;
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ WorkflowItemMenuComponent.prototype.cancelWorkflow = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.hideMenu();
                        return [4 /*yield*/, this.workflowFacade.cancelWorflow(this.workflowInfo)];
                    case 1:
                        _a.sent();
                        this.routingService.reload();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ WorkflowItemMenuComponent.prototype.onWorkflowItemMenuOpen = function (eventData) {
        if (this.workflowInfo.workflowCode !== eventData.uid) {
            this.hideMenu();
            this.cdr.detectChanges();
        }
    };
    WorkflowItemMenuComponent.prototype.onWorkflowItemMenuOpen.$inject = ["eventData"];
    /* @ngInject */ WorkflowItemMenuComponent.prototype.getPermittedButtons = function (menuItemsConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var buttonsPermissions, permissions;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        buttonsPermissions = menuItemsConfig.map(function (menuItem) {
                            return Promise.resolve(_this.permissionService.isPermitted([
                                {
                                    names: menuItem.permissions
                                }
                            ]));
                        });
                        return [4 /*yield*/, Promise.all(buttonsPermissions)];
                    case 1:
                        permissions = _a.sent();
                        return [2 /*return*/, menuItemsConfig.filter(function (_menuItem, index) { return permissions[index]; })];
                }
            });
        });
    };
    WorkflowItemMenuComponent.prototype.getPermittedButtons.$inject = ["menuItemsConfig"];
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ WorkflowItemMenuComponent.prototype, "workflowInfo", void 0);
    /* @ngInject */ WorkflowItemMenuComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-workflow-item-menu',
            template: "<se-popup-overlay class=\"popup-anchor\" [ngClass]=\"{ 'popup-anchor--open': isMenuOpen }\" [popupOverlay]=\"popupConfig\" [popupOverlayTrigger]=\"isMenuOpen\" (popupOverlayOnHide)=\"hideMenu()\"><span *ngIf=\"menuItems.length > 0\" (click)=\"toggleMenu()\" class=\"workflow-item-menu__toggle-btn sap-icon--overflow\"></span><div se-popup-overlay-body><div class=\"workflow-item-menu\"><div class=\"workflow-item-menu__item\" *ngFor=\"let dropdownItem of menuItems\"><ng-container class=\"container\" [ngSwitch]=\"dropdownItem.i18nKey\"><div *ngSwitchCase=\"'se.cms.actionitem.page.workflow.description'\" class=\"workflow-description\"><div class=\"se-dropdown-item--label\"><div class=\"workflow-description__label fd-has-type-1 fd-has-margin-bottom-tiny\"><div [translate]=\"dropdownItem.i18nKey\"></div><div *seHasOperationPermission=\"'se.edit.workflow.workflowMenu'\"><a title=\"Edit\" class=\"workflow-description__edit-btn sap-icon--edit fd-has-float-right\" (click)=\"editDescription()\"></a></div></div><div *ngIf=\"workflowInfo.description; else noDescription\" class=\"workflow-description__text\">{{ workflowInfo.description }}</div><ng-template #noDescription><div translate=\"se.cms.actionitem.page.workflow.no.description\"></div></ng-template></div></div><div *ngSwitchCase=\"'se.cms.actionitem.page.workflow.cancel'\" class=\"workflow-cancel-btn fd-has-color-status-3\" [translate]=\"dropdownItem.i18nKey\" (click)=\"cancelWorkflow()\"></div></ng-container></div></div></div></se-popup-overlay>",
            styles: [".popup-anchor{display:flex;flex-direction:row;align-items:center;justify-content:center;font-size:1.1428571429rem;line-height:1.25;font-weight:400;padding-top:5px;width:32px;height:32px;border-radius:4px}.popup-anchor--open{background-color:#eeeeef}.workflow-item-menu{box-shadow:0 6px 12px rgba(0,0,0,.175);background-color:#fff;border-radius:4px!important;min-width:100px;width:fit-content;position:absolute;border:1px solid #d9d9d9;z-index:2000;top:96%;left:initial!important;right:0;transform:translate(5px,8px);right:-11px;top:-8px}.workflow-item-menu::before{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#d9d9d9;border-bottom-color:var(var(--fd-color-neutral-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-8px}.workflow-item-menu::after{height:0;width:0;border-style:solid;border-width:0 8px 8px 8px;border-bottom-color:#fff;border-bottom-color:var(var(--fd-color-background-4));border-left-color:transparent;border-right-color:transparent;content:\"\";position:absolute;top:-7px}.workflow-item-menu::after,.workflow-item-menu::before{right:10px}.workflow-item-menu::after,.workflow-item-menu::before{display:none}.workflow-description{min-width:225px;padding:20px}.workflow-description__label{color:#32363a;display:flex;justify-content:space-between}.workflow-description__label .sap-icon--edit{cursor:pointer}.workflow-description__label .sap-icon--edit:hover{text-decoration:none}.workflow-description__description{color:#51555a}.workflow-cancel-btn{cursor:pointer;padding:12px 20px;border-top:1px solid #fafafa}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [smarteditcommons.SystemEventService,
            WorkflowFacade,
            smarteditcommons.SmarteditRoutingService,
            smarteditcommons.IPermissionService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ WorkflowItemMenuComponent);
    return /* @ngInject */ WorkflowItemMenuComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "WorkflowActionCommentComponent", {
    selector: 'se-workflow-action-comment',
    template: "<ng-container *ngIf=\"isDecisionComment; then decisionComment; else generalComment\"></ng-container><ng-template #decisionComment><div class=\"se-workflow-action-comment\"><div class=\"fd-tile\"><div class=\"fd-tile__content\"><h2 class=\"fd-tile__title se-workflow-action-comment__header sap-icon--workflow-tasks sap-icon--m\" [class.sap-icon--flip-h]=\"!isIncomingDecision()\">{{ actionComment.decisionName }}</h2><p class=\"fd-has-type-minus-1\">{{ actionComment.authorName }} | {{ createdAgo }}</p><p *ngIf=\"!!actionComment.text\"><strong>{{'se.cms.page.workflow.action.item.comment.header' | translate}}:</strong><ng-container *ngTemplateOutlet=\"comment\"></ng-container></p></div></div></div></ng-template><ng-template #generalComment><div class=\"se-workflow-action-comment\"><div class=\"fd-tile\"><div class=\"fd-tile__content\"><h2 class=\"fd-panel__title\">{{'se.cms.page.workflow.action.item.comment.header' | translate}}</h2><p>{{ createdAgo }}</p><p class=\"se-workflow-action-comment__author\">{{ actionComment.authorName }}</p><ng-container *ngTemplateOutlet=\"comment\"></ng-container></div></div></div></ng-template><ng-template #comment><se-more-text class=\"se-workflow-action-comment__body\" [ellipsis]=\"'...'\" [text]=\"actionComment.text\"></se-more-text></ng-template>",
    styles: ["/*!\n * Fundamental Library Styles v0.4.1\n * Copyright (c) 2020 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n.fd-button-split+()\n    .fd-button\n*/.fd-button-split{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0;margin:0;border:0;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle;position:relative}.fd-button-split:after,.fd-button-split:before{-webkit-box-sizing:inherit;box-sizing:inherit;font-size:inherit}.fd-button-split :first-child{margin:0;border-top-right-radius:0;border-bottom-right-radius:0}.fd-button-split :nth-child(2){margin:0;border-top-left-radius:0;border-bottom-left-radius:0;border-left-width:0}.fd-button-split[dir=rtl] :first-child,[dir=rtl] .fd-button-split :first-child{border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:.25rem;border-top-right-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-right-radius:.25rem;border-bottom-right-radius:var(--sapButton_BorderCornerRadius,.25rem)}.fd-button-split[dir=rtl] :nth-child(2),[dir=rtl] .fd-button-split :nth-child(2){border-top-left-radius:.25rem;border-top-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-left-radius:.25rem;border-bottom-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-top-right-radius:0;border-bottom-right-radius:0;border-left-width:.0625rem;border-left-width:var(--sapButton_BorderWidth,.0625rem);border-right-width:0}.fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:1px}.fd-button-split [class*=\"--emphasized\"][dir=rtl]:first-child,[dir=rtl] .fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:0;margin-left:1px}.se-workflow-action-comment{margin:20px 15px 10px 45px;border-style:solid;border-width:1px;border-color:#eeeeef;border-radius:3px;position:relative}.se-workflow-action-comment::before{height:0;width:0;border-style:solid;border-width:6.5px 8px 6.5px 0;border-bottom-color:transparent;border-right-color:#eeeeef;border-top-color:transparent;content:\"\";position:absolute;top:14px;left:-9px}.se-workflow-action-comment::after{height:0;width:0;border-style:solid;border-width:6.5px 8px 6.5px 0;border-bottom-color:transparent;border-right-color:#fff;border-top-color:transparent;content:\"\";position:absolute;top:14px;left:-7px}.se-workflow-action-comment__header{position:relative;font-weight:700;font-size:13px;margin-bottom:3px!important}.se-workflow-action-comment__header:before{position:absolute;top:-8px;left:-56px;font-size:18px;background:#fff;padding:8px}.se-workflow-action-comment__header.sap-icon--flip-h::before{transform:scaleX(-1)}.se-workflow-action-comment__author{margin-bottom:25px}.se-workflow-action-comment__body{overflow-wrap:anywhere}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ WorkflowActionCommentComponent = /** @class */ (function () {
    WorkflowActionCommentComponent.$inject = ["cMSTimeService"];
    function /* @ngInject */ WorkflowActionCommentComponent(cMSTimeService) {
        this.cMSTimeService = cMSTimeService;
    }
    /* @ngInject */ WorkflowActionCommentComponent.prototype.ngOnInit = function () {
        this.isDecisionComment = !!this.actionComment.decisionName;
    };
    Object.defineProperty(/* @ngInject */ WorkflowActionCommentComponent.prototype, "createdAgo", {
        get: function () {
            if (!!this.actionComment.createdAgoInMillis) {
                return this.cMSTimeService.getTimeAgo(this.actionComment.createdAgoInMillis);
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    /* @ngInject */ WorkflowActionCommentComponent.prototype.isIncomingDecision = function () {
        return !(this.actionComment.originalActionCode === this.workflowAction.code);
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ WorkflowActionCommentComponent.prototype, "actionComment", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ WorkflowActionCommentComponent.prototype, "workflowAction", void 0);
    /* @ngInject */ WorkflowActionCommentComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-workflow-action-comment',
            template: "<ng-container *ngIf=\"isDecisionComment; then decisionComment; else generalComment\"></ng-container><ng-template #decisionComment><div class=\"se-workflow-action-comment\"><div class=\"fd-tile\"><div class=\"fd-tile__content\"><h2 class=\"fd-tile__title se-workflow-action-comment__header sap-icon--workflow-tasks sap-icon--m\" [class.sap-icon--flip-h]=\"!isIncomingDecision()\">{{ actionComment.decisionName }}</h2><p class=\"fd-has-type-minus-1\">{{ actionComment.authorName }} | {{ createdAgo }}</p><p *ngIf=\"!!actionComment.text\"><strong>{{'se.cms.page.workflow.action.item.comment.header' | translate}}:</strong><ng-container *ngTemplateOutlet=\"comment\"></ng-container></p></div></div></div></ng-template><ng-template #generalComment><div class=\"se-workflow-action-comment\"><div class=\"fd-tile\"><div class=\"fd-tile__content\"><h2 class=\"fd-panel__title\">{{'se.cms.page.workflow.action.item.comment.header' | translate}}</h2><p>{{ createdAgo }}</p><p class=\"se-workflow-action-comment__author\">{{ actionComment.authorName }}</p><ng-container *ngTemplateOutlet=\"comment\"></ng-container></div></div></div></ng-template><ng-template #comment><se-more-text class=\"se-workflow-action-comment__body\" [ellipsis]=\"'...'\" [text]=\"actionComment.text\"></se-more-text></ng-template>",
            styles: ["/*!\n * Fundamental Library Styles v0.4.1\n * Copyright (c) 2020 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n.fd-button-split+()\n    .fd-button\n*/.fd-button-split{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0;margin:0;border:0;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle;position:relative}.fd-button-split:after,.fd-button-split:before{-webkit-box-sizing:inherit;box-sizing:inherit;font-size:inherit}.fd-button-split :first-child{margin:0;border-top-right-radius:0;border-bottom-right-radius:0}.fd-button-split :nth-child(2){margin:0;border-top-left-radius:0;border-bottom-left-radius:0;border-left-width:0}.fd-button-split[dir=rtl] :first-child,[dir=rtl] .fd-button-split :first-child{border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:.25rem;border-top-right-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-right-radius:.25rem;border-bottom-right-radius:var(--sapButton_BorderCornerRadius,.25rem)}.fd-button-split[dir=rtl] :nth-child(2),[dir=rtl] .fd-button-split :nth-child(2){border-top-left-radius:.25rem;border-top-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-left-radius:.25rem;border-bottom-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-top-right-radius:0;border-bottom-right-radius:0;border-left-width:.0625rem;border-left-width:var(--sapButton_BorderWidth,.0625rem);border-right-width:0}.fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:1px}.fd-button-split [class*=\"--emphasized\"][dir=rtl]:first-child,[dir=rtl] .fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:0;margin-left:1px}.se-workflow-action-comment{margin:20px 15px 10px 45px;border-style:solid;border-width:1px;border-color:#eeeeef;border-radius:3px;position:relative}.se-workflow-action-comment::before{height:0;width:0;border-style:solid;border-width:6.5px 8px 6.5px 0;border-bottom-color:transparent;border-right-color:#eeeeef;border-top-color:transparent;content:\"\";position:absolute;top:14px;left:-9px}.se-workflow-action-comment::after{height:0;width:0;border-style:solid;border-width:6.5px 8px 6.5px 0;border-bottom-color:transparent;border-right-color:#fff;border-top-color:transparent;content:\"\";position:absolute;top:14px;left:-7px}.se-workflow-action-comment__header{position:relative;font-weight:700;font-size:13px;margin-bottom:3px!important}.se-workflow-action-comment__header:before{position:absolute;top:-8px;left:-56px;font-size:18px;background:#fff;padding:8px}.se-workflow-action-comment__header.sap-icon--flip-h::before{transform:scaleX(-1)}.se-workflow-action-comment__author{margin-bottom:25px}.se-workflow-action-comment__body{overflow-wrap:anywhere}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [cmscommons.CMSTimeService])
    ], /* @ngInject */ WorkflowActionCommentComponent);
    return /* @ngInject */ WorkflowActionCommentComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "WorkflowActionItemComponent", {
    selector: 'se-workflow-action-item',
    template: "<div class=\"se-workflow-action-item\" [ngClass]=\"getWorkflowActionStatusClass()\"><se-collapsible-container class=\"se-catalog-details__collapse se-collapsible-container--noshadow fd-panel\" [id]=\"workflowAction.code\" (getApi)=\"setCollapsibleContainerApi($event)\"><se-collapsible-container-header><div class=\"fd-panel__header\"><div class=\"fd-panel__head\"><h1 class=\"fd-panel__title\">{{ workflowAction.name | seL10n | async }}</h1><p class=\"fd-panel__description\">{{ getReadableStatus() | translate }} {{ getActiveSince() }}</p></div></div><div class=\"fd-panel__body\">{{ workflowAction.description | seL10n | async }}<div *ngIf=\"canShowDecisionButtons()\" class=\"se-workflow-action-item__decision-buttons fd-dropdown\"><div class=\"fd-popover\"><div class=\"fd-popover__control\"><div [ngClass]=\"{ 'fd-button-split': workflowAction.decisions.length > 1 }\"><button class=\"se-workflow-action-item__decision-button fd-button--compact\" [id]=\"workflowAction.code + '-decision-button'\" (click)=\"onMainButtonClick($event, workflowAction.decisions[0])\" type=\"button\">{{ workflowAction.decisions[0].name | seL10n | async }}</button><se-popup-overlay [popupOverlay]=\"{\n                                        halign: 'right',\n                                        valign: 'bottom'\n                                    }\" [popupOverlayTrigger]=\"isMenuOpen\" (popupOverlayOnHide)=\"onMenuHide()\"><button *ngIf=\"workflowAction.decisions.length > 1\" [id]=\"workflowAction.code + '-decision-split-button'\" class=\"fd-button--compact menu-button sap-icon--slim-arrow-down\" (click)=\"onSplitButtonClick($event)\"></button><div se-popup-overlay-body class=\"fd-popover__body fd-popover__body--right fd-popover__body--no-arrow se-workflow-action-item__decision-list\"><nav class=\"fd-menu\"><ul class=\"fd-menu__list\"><li *ngFor=\"let decision of workflowAction.decisions\"><a class=\"fd-menu__item se-workflow-action-item__decision\" (click)=\"onMainButtonClick($event, decision)\">{{ decision.name | seL10n | async }}</a></li></ul></nav></div></se-popup-overlay></div></div></div></div></div></se-collapsible-container-header><se-collapsible-container-content><div class=\"se-workflow-action-item__content\" *ngIf=\"canShowComments()\"><span *ngIf=\"!hasComments\" class=\"se-workflow-action-item__comment-list fd-has-font-style-italic fd-has-color-text-4\" [translate]=\"'se.cms.actionitem.page.workflow.action.no.comments.available'\"></span><se-infinite-scrolling [pageSize]=\"pageSize\" [fetchPage]=\"fetchPageOfComments\" (itemsChange)=\"onCommentsLoaded($event)\"><div *ngFor=\"let actionComment of workflowActionComments; trackBy: trackByIndex\"><se-workflow-action-comment [workflowAction]=\"workflowAction\" [actionComment]=\"actionComment\"></se-workflow-action-comment></div></se-infinite-scrolling></div></se-collapsible-container-content></se-collapsible-container></div>",
    styles: ["/*!\n * Fundamental Library Styles v0.4.1\n * Copyright (c) 2020 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n.fd-button-split+()\n    .fd-button\n*/.fd-button-split{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0;margin:0;border:0;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle;position:relative}.fd-button-split:after,.fd-button-split:before{-webkit-box-sizing:inherit;box-sizing:inherit;font-size:inherit}.fd-button-split :first-child{margin:0;border-top-right-radius:0;border-bottom-right-radius:0}.fd-button-split :nth-child(2){margin:0;border-top-left-radius:0;border-bottom-left-radius:0;border-left-width:0}.fd-button-split[dir=rtl] :first-child,[dir=rtl] .fd-button-split :first-child{border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:.25rem;border-top-right-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-right-radius:.25rem;border-bottom-right-radius:var(--sapButton_BorderCornerRadius,.25rem)}.fd-button-split[dir=rtl] :nth-child(2),[dir=rtl] .fd-button-split :nth-child(2){border-top-left-radius:.25rem;border-top-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-left-radius:.25rem;border-bottom-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-top-right-radius:0;border-bottom-right-radius:0;border-left-width:.0625rem;border-left-width:var(--sapButton_BorderWidth,.0625rem);border-right-width:0}.fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:1px}.fd-button-split [class*=\"--emphasized\"][dir=rtl]:first-child,[dir=rtl] .fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:0;margin-left:1px}se-workflow-action-item .se-workflow-action-item{border-left:6px solid #fff;border-radius:4px 0 0 4px}se-workflow-action-item .se-workflow-action-item--started{border-left:6px solid #e9730c}se-workflow-action-item .se-workflow-action-item--completed{border-left:6px solid #0a7e3e}se-workflow-action-item .se-workflow-action-item__decision-buttons{margin:10px -30px 10px 0;text-align:right}se-workflow-action-item .se-workflow-action-item__decision-buttons .fd-button-split .menu-button{border-left:0;border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:4px;border-bottom-right-radius:4px}se-workflow-action-item .se-workflow-action-item__decision-buttons .fd-button-split .menu-button:focus{box-shadow:none}se-workflow-action-item .se-workflow-action-item__content{min-height:30px}se-workflow-action-item .se-workflow-action-item__content-status{float:left;overflow:hidden}se-workflow-action-item .se-workflow-action-item__content se-infinite-scrolling .se-infinite-scrolling__container{max-height:none;overflow-y:auto;position:relative;margin-top:-20px;width:100%}se-workflow-action-item .se-workflow-action-item__content se-infinite-scrolling .se-infinite-scrolling__container::before{content:\"\";height:100%;border-left:1px solid #eeeeef;position:absolute;left:20px;top:40px;height:calc(100% - 120px)}se-workflow-action-item .se-workflow-action-item__comment-list{margin-left:5%;margin-top:5%;margin-bottom:5%}se-workflow-action-item .se-workflow-action-item__decision-list{min-width:160px;right:-38px;background:#fff}se-workflow-action-item .se-workflow-action-item__decision-list .fd-menu__list{text-align:left}se-workflow-action-item .se-workflow-action-item__decision:hover{text-decoration:none}se-workflow-action-item se-collapsible-container-header .fd-panel__body,se-workflow-action-item se-collapsible-container-header .fd-panel__header{border-bottom:none;padding:10px 16px;display:flex;flex-direction:column;align-items:flex-start;white-space:pre-wrap}se-workflow-action-item se-collapsible-container-header .fd-panel_body{color:#32363a;padding-top:0}se-workflow-action-item se-collapsible-container-header .fd-panel__title{margin-top:0;font-size:13px;font-weight:700}"],
    encapsulation: core.ViewEncapsulation.None,
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ WorkflowActionItemComponent = /** @class */ (function () {
    WorkflowActionItemComponent.$inject = ["workflowFacade", "cMSTimeService", "systemEventService", "routingService", "cdr"];
    function /* @ngInject */ WorkflowActionItemComponent(workflowFacade, cMSTimeService, systemEventService, routingService, cdr) {
        var _this = this;
        this.workflowFacade = workflowFacade;
        this.cMSTimeService = cMSTimeService;
        this.systemEventService = systemEventService;
        this.routingService = routingService;
        this.cdr = cdr;
        this.isMenuOpen = false;
        this.hasComments = true;
        this.pageSize = 10;
        this.fetchPageOfComments = function (mask, pageSize, currentPage) { return _this.loadCommentsAndSetHasCommentsFlag(mask, pageSize, currentPage); };
    }
    /* @ngInject */ WorkflowActionItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.unRegWorkflowMenuOpenedEvent = this.systemEventService.subscribe(WORKFLOW_ITEM_MENU_OPENED_EVENT, function (eventId, eventData) {
            return _this.onOtherMenuOpening(eventId, eventData);
        });
    };
    /* @ngInject */ WorkflowActionItemComponent.prototype.ngOnDestroy = function () {
        this.unRegWorkflowMenuOpenedEvent();
    };
    /* @ngInject */ WorkflowActionItemComponent.prototype.onCommentsLoaded = function (comments) {
        this.workflowActionComments = comments;
    };
    WorkflowActionItemComponent.prototype.onCommentsLoaded.$inject = ["comments"];
    /* @ngInject */ WorkflowActionItemComponent.prototype.setCollapsibleContainerApi = function ($api) {
        this.collapsibleContainerApi = $api;
    };
    WorkflowActionItemComponent.prototype.setCollapsibleContainerApi.$inject = ["$api"];
    /* @ngInject */ WorkflowActionItemComponent.prototype.getWorkflowActionStatusClass = function () {
        switch (this.workflowAction.status.toLowerCase()) {
            case WorkflowActionStatus.IN_PROGRESS:
                return 'se-workflow-action-item--started';
            case WorkflowActionStatus.COMPLETED:
                return 'se-workflow-action-item--completed';
            default:
                return null;
        }
    };
    /* @ngInject */ WorkflowActionItemComponent.prototype.getReadableStatus = function () {
        switch (this.workflowAction.status.toLowerCase()) {
            case WorkflowActionStatus.IN_PROGRESS:
                return 'se.cms.actionitem.page.workflow.action.status.started';
            case WorkflowActionStatus.PENDING:
                return 'se.cms.actionitem.page.workflow.action.status.not.started';
            default:
                return this.workflowAction.status;
        }
    };
    /* @ngInject */ WorkflowActionItemComponent.prototype.getActiveSince = function () {
        if (!!this.workflowAction.startedAgoInMillis) {
            return this.cMSTimeService.getTimeAgo(this.workflowAction.startedAgoInMillis);
        }
        return null;
    };
    /* @ngInject */ WorkflowActionItemComponent.prototype.canShowDecisionButtons = function () {
        return (this.canMakeDecisions &&
            this.workflowAction.isCurrentUserParticipant &&
            this.workflowAction.decisions.length > 0);
    };
    /* @ngInject */ WorkflowActionItemComponent.prototype.canShowComments = function () {
        var isContainerExpanded = this.collapsibleContainerApi && this.collapsibleContainerApi.isExpanded();
        return (isContainerExpanded ||
            (this.workflowActionComments && this.workflowActionComments.length > 0));
    };
    /* @ngInject */ WorkflowActionItemComponent.prototype.onMainButtonClick = function ($event, decision) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                $event.preventDefault();
                $event.stopPropagation();
                this.isMenuOpen = false;
                this.makeDecision(decision).then(function () {
                    _this.routingService.reload();
                });
                return [2 /*return*/];
            });
        });
    };
    WorkflowActionItemComponent.prototype.onMainButtonClick.$inject = ["$event", "decision"];
    /* @ngInject */ WorkflowActionItemComponent.prototype.onSplitButtonClick = function ($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.isMenuOpen = !this.isMenuOpen;
        if (this.isMenuOpen) {
            this.systemEventService.publishAsync(WORKFLOW_ITEM_MENU_OPENED_EVENT, {
                code: this.workflowAction.code
            });
        }
    };
    WorkflowActionItemComponent.prototype.onSplitButtonClick.$inject = ["$event"];
    /* @ngInject */ WorkflowActionItemComponent.prototype.onMenuHide = function () {
        this.isMenuOpen = false;
    };
    /* @ngInject */ WorkflowActionItemComponent.prototype.trackByIndex = function (index) {
        return index;
    };
    WorkflowActionItemComponent.prototype.trackByIndex.$inject = ["index"];
    /* @ngInject */ WorkflowActionItemComponent.prototype.loadCommentsAndSetHasCommentsFlag = function (mask, pageSize, currentPage) {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadComments(mask, pageSize, currentPage)];
                    case 1:
                        page = _a.sent();
                        this.hasComments = page.pagination.totalCount > 0;
                        this.cdr.detectChanges();
                        return [2 /*return*/, page];
                }
            });
        });
    };
    WorkflowActionItemComponent.prototype.loadCommentsAndSetHasCommentsFlag.$inject = ["mask", "pageSize", "currentPage"];
    /* @ngInject */ WorkflowActionItemComponent.prototype.loadComments = function (mask, pageSize, currentPage) {
        return this.workflowFacade.getCommentsForWorkflowAction(this.workflow.workflowCode, this.workflowAction.code, {
            mask: mask,
            pageSize: pageSize,
            currentPage: currentPage
        });
    };
    WorkflowActionItemComponent.prototype.loadComments.$inject = ["mask", "pageSize", "currentPage"];
    /* @ngInject */ WorkflowActionItemComponent.prototype.makeDecision = function (decision) {
        this.systemEventService.publish(WORKFLOW_DECISION_SELECTED_EVENT);
        return this.workflowFacade.makeDecision(this.workflow.workflowCode, this.workflowAction, decision);
    };
    WorkflowActionItemComponent.prototype.makeDecision.$inject = ["decision"];
    /* @ngInject */ WorkflowActionItemComponent.prototype.onOtherMenuOpening = function (_eventId, eventData) {
        if (this.workflowAction.code !== eventData.code) {
            this.isMenuOpen = false;
            this.cdr.detectChanges();
        }
    };
    WorkflowActionItemComponent.prototype.onOtherMenuOpening.$inject = ["_eventId", "eventData"];
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ WorkflowActionItemComponent.prototype, "workflow", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ WorkflowActionItemComponent.prototype, "workflowAction", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ WorkflowActionItemComponent.prototype, "canMakeDecisions", void 0);
    /* @ngInject */ WorkflowActionItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-workflow-action-item',
            template: "<div class=\"se-workflow-action-item\" [ngClass]=\"getWorkflowActionStatusClass()\"><se-collapsible-container class=\"se-catalog-details__collapse se-collapsible-container--noshadow fd-panel\" [id]=\"workflowAction.code\" (getApi)=\"setCollapsibleContainerApi($event)\"><se-collapsible-container-header><div class=\"fd-panel__header\"><div class=\"fd-panel__head\"><h1 class=\"fd-panel__title\">{{ workflowAction.name | seL10n | async }}</h1><p class=\"fd-panel__description\">{{ getReadableStatus() | translate }} {{ getActiveSince() }}</p></div></div><div class=\"fd-panel__body\">{{ workflowAction.description | seL10n | async }}<div *ngIf=\"canShowDecisionButtons()\" class=\"se-workflow-action-item__decision-buttons fd-dropdown\"><div class=\"fd-popover\"><div class=\"fd-popover__control\"><div [ngClass]=\"{ 'fd-button-split': workflowAction.decisions.length > 1 }\"><button class=\"se-workflow-action-item__decision-button fd-button--compact\" [id]=\"workflowAction.code + '-decision-button'\" (click)=\"onMainButtonClick($event, workflowAction.decisions[0])\" type=\"button\">{{ workflowAction.decisions[0].name | seL10n | async }}</button><se-popup-overlay [popupOverlay]=\"{\n                                        halign: 'right',\n                                        valign: 'bottom'\n                                    }\" [popupOverlayTrigger]=\"isMenuOpen\" (popupOverlayOnHide)=\"onMenuHide()\"><button *ngIf=\"workflowAction.decisions.length > 1\" [id]=\"workflowAction.code + '-decision-split-button'\" class=\"fd-button--compact menu-button sap-icon--slim-arrow-down\" (click)=\"onSplitButtonClick($event)\"></button><div se-popup-overlay-body class=\"fd-popover__body fd-popover__body--right fd-popover__body--no-arrow se-workflow-action-item__decision-list\"><nav class=\"fd-menu\"><ul class=\"fd-menu__list\"><li *ngFor=\"let decision of workflowAction.decisions\"><a class=\"fd-menu__item se-workflow-action-item__decision\" (click)=\"onMainButtonClick($event, decision)\">{{ decision.name | seL10n | async }}</a></li></ul></nav></div></se-popup-overlay></div></div></div></div></div></se-collapsible-container-header><se-collapsible-container-content><div class=\"se-workflow-action-item__content\" *ngIf=\"canShowComments()\"><span *ngIf=\"!hasComments\" class=\"se-workflow-action-item__comment-list fd-has-font-style-italic fd-has-color-text-4\" [translate]=\"'se.cms.actionitem.page.workflow.action.no.comments.available'\"></span><se-infinite-scrolling [pageSize]=\"pageSize\" [fetchPage]=\"fetchPageOfComments\" (itemsChange)=\"onCommentsLoaded($event)\"><div *ngFor=\"let actionComment of workflowActionComments; trackBy: trackByIndex\"><se-workflow-action-comment [workflowAction]=\"workflowAction\" [actionComment]=\"actionComment\"></se-workflow-action-comment></div></se-infinite-scrolling></div></se-collapsible-container-content></se-collapsible-container></div>",
            styles: ["/*!\n * Fundamental Library Styles v0.4.1\n * Copyright (c) 2020 SAP SE or an SAP affiliate company.\n * Licensed under Apache License 2.0 (https://github.com/SAP/fundamental-styles/blob/master/LICENSE)\n *//*!\n.fd-button-split+()\n    .fd-button\n*/.fd-button-split{font-size:.875rem;font-size:var(--sapFontSize,.875rem);line-height:1.42857;color:#32363a;color:var(--sapTextColor,#32363a);font-family:\"72\",\"72full\",Arial,Helvetica,sans-serif;font-family:var(--sapFontFamily, \"72\", \"72full\", Arial, Helvetica, sans-serif);font-weight:400;-webkit-font-smoothing:antialiased;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0;margin:0;border:0;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle;position:relative}.fd-button-split:after,.fd-button-split:before{-webkit-box-sizing:inherit;box-sizing:inherit;font-size:inherit}.fd-button-split :first-child{margin:0;border-top-right-radius:0;border-bottom-right-radius:0}.fd-button-split :nth-child(2){margin:0;border-top-left-radius:0;border-bottom-left-radius:0;border-left-width:0}.fd-button-split[dir=rtl] :first-child,[dir=rtl] .fd-button-split :first-child{border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:.25rem;border-top-right-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-right-radius:.25rem;border-bottom-right-radius:var(--sapButton_BorderCornerRadius,.25rem)}.fd-button-split[dir=rtl] :nth-child(2),[dir=rtl] .fd-button-split :nth-child(2){border-top-left-radius:.25rem;border-top-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-bottom-left-radius:.25rem;border-bottom-left-radius:var(--sapButton_BorderCornerRadius,.25rem);border-top-right-radius:0;border-bottom-right-radius:0;border-left-width:.0625rem;border-left-width:var(--sapButton_BorderWidth,.0625rem);border-right-width:0}.fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:1px}.fd-button-split [class*=\"--emphasized\"][dir=rtl]:first-child,[dir=rtl] .fd-button-split [class*=\"--emphasized\"]:first-child{margin-right:0;margin-left:1px}se-workflow-action-item .se-workflow-action-item{border-left:6px solid #fff;border-radius:4px 0 0 4px}se-workflow-action-item .se-workflow-action-item--started{border-left:6px solid #e9730c}se-workflow-action-item .se-workflow-action-item--completed{border-left:6px solid #0a7e3e}se-workflow-action-item .se-workflow-action-item__decision-buttons{margin:10px -30px 10px 0;text-align:right}se-workflow-action-item .se-workflow-action-item__decision-buttons .fd-button-split .menu-button{border-left:0;border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:4px;border-bottom-right-radius:4px}se-workflow-action-item .se-workflow-action-item__decision-buttons .fd-button-split .menu-button:focus{box-shadow:none}se-workflow-action-item .se-workflow-action-item__content{min-height:30px}se-workflow-action-item .se-workflow-action-item__content-status{float:left;overflow:hidden}se-workflow-action-item .se-workflow-action-item__content se-infinite-scrolling .se-infinite-scrolling__container{max-height:none;overflow-y:auto;position:relative;margin-top:-20px;width:100%}se-workflow-action-item .se-workflow-action-item__content se-infinite-scrolling .se-infinite-scrolling__container::before{content:\"\";height:100%;border-left:1px solid #eeeeef;position:absolute;left:20px;top:40px;height:calc(100% - 120px)}se-workflow-action-item .se-workflow-action-item__comment-list{margin-left:5%;margin-top:5%;margin-bottom:5%}se-workflow-action-item .se-workflow-action-item__decision-list{min-width:160px;right:-38px;background:#fff}se-workflow-action-item .se-workflow-action-item__decision-list .fd-menu__list{text-align:left}se-workflow-action-item .se-workflow-action-item__decision:hover{text-decoration:none}se-workflow-action-item se-collapsible-container-header .fd-panel__body,se-workflow-action-item se-collapsible-container-header .fd-panel__header{border-bottom:none;padding:10px 16px;display:flex;flex-direction:column;align-items:flex-start;white-space:pre-wrap}se-workflow-action-item se-collapsible-container-header .fd-panel_body{color:#32363a;padding-top:0}se-workflow-action-item se-collapsible-container-header .fd-panel__title{margin-top:0;font-size:13px;font-weight:700}"],
            encapsulation: core.ViewEncapsulation.None,
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [WorkflowFacade,
            cmscommons.CMSTimeService,
            smarteditcommons.SystemEventService,
            smarteditcommons.SmarteditRoutingService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ WorkflowActionItemComponent);
    return /* @ngInject */ WorkflowActionItemComponent;
}());

var WorkflowModule = /** @class */ (function () {
    function WorkflowModule() {
    }
    WorkflowModule = __decorate([
        core.NgModule({
            imports: [
                smarteditcommons.TranslationModule.forChild(),
                common.CommonModule,
                core$2.PopoverModule,
                smarteditcommons.InfiniteScrollingModule,
                smarteditcommons.MoreTextModule,
                smarteditcommons.CollapsibleContainerModule,
                smarteditcommons.PopupOverlayModule,
                smarteditcommons.TooltipModule,
                smarteditcommons.DropdownMenuModule,
                smarteditcommons.HasOperationPermissionDirectiveModule,
                smarteditcommons.SpinnerModule,
                smarteditcommons.TabsModule,
                smarteditcommons.L10nPipeModule
            ],
            declarations: [
                WorkflowInboxSingleTaskAnnouncementComponent,
                WorkflowInboxMultipleTasksAnnouncementComponent,
                WorkflowInboxTaskComponent,
                WorkflowInboxBadgeComponent,
                WorkflowInboxComponent,
                WorkflowActionCommentComponent,
                WorkflowActionItemComponent,
                PageDisplayStatusComponent,
                PageDisplayStatusWrapperComponent,
                PageStatusComponent,
                PageApprovalSelectorComponent,
                WorkflowItemMenuComponent,
                PageWorkflowMenuComponent,
                PageWorkflowMenuCurrentTasksTabComponent,
                PageWorkflowMenuAllTasksTabComponent,
                PageWorkflowMenuTasksTabComponent
            ],
            entryComponents: [
                WorkflowInboxSingleTaskAnnouncementComponent,
                WorkflowInboxMultipleTasksAnnouncementComponent,
                WorkflowInboxTaskComponent,
                WorkflowInboxBadgeComponent,
                WorkflowInboxComponent,
                WorkflowActionCommentComponent,
                WorkflowActionItemComponent,
                PageDisplayStatusComponent,
                PageDisplayStatusWrapperComponent,
                PageStatusComponent,
                PageApprovalSelectorComponent,
                WorkflowItemMenuComponent,
                PageWorkflowMenuComponent,
                PageWorkflowMenuCurrentTasksTabComponent,
                PageWorkflowMenuAllTasksTabComponent,
                PageWorkflowMenuTasksTabComponent
            ],
            exports: [PageDisplayStatusComponent],
            providers: [
                WorkflowTasksPollingService,
                WorkflowService,
                WorkflowInboxAnnouncementService,
                WorkflowFacade,
                smarteditcommons.L10nPipe,
                smarteditcommons.moduleUtils.bootstrap(function (crossFrameEventService, pageInfoService, workflowService, notificationService, smarteditRoutingService, 
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                workflowInboxAnnouncementService // initializes subscriber for tasks pooling service
                ) {
                    var NOTIFICATION_ID = 'PAGE_IN_WORKFLOW_NOTIFICATION_ID';
                    var NOTIFICATION_TEMPLATE = 'pageInWorkflowNotificationTemplate.html';
                    crossFrameEventService.subscribe(smarteditcommons.EVENTS.PAGE_CHANGE, function () {
                        // Using pageInfoService.getPageUUID instead of pageService.getCurrentPageInfo because pageInfoService uses information from the DOM
                        // instead of fetching from the backend and hence preventing any race condition while clearing the cache.
                        pageInfoService.getPageUUID().then(function (pageUuid) {
                            workflowService
                                .getActiveWorkflowForPageUuid(pageUuid)
                                .then(function (workflow) {
                                if (workflow !== null && !workflow.isAvailableForCurrentPrincipal) {
                                    notificationService.pushNotification({
                                        id: NOTIFICATION_ID,
                                        templateUrl: NOTIFICATION_TEMPLATE
                                    });
                                }
                                else {
                                    notificationService.removeNotification(NOTIFICATION_ID);
                                }
                            });
                        });
                    });
                    smarteditRoutingService.routeChangeSuccess().subscribe(function (event) {
                        var url = smarteditRoutingService.getCurrentUrlFromEvent(event);
                        if (url !== "/" + smarteditcommons.NG_ROUTE_PREFIX + smarteditcommons.STORE_FRONT_CONTEXT) {
                            notificationService.removeNotification(NOTIFICATION_ID);
                        }
                    });
                }, [
                    smarteditcommons.CrossFrameEventService,
                    smarteditcommons.IPageInfoService,
                    WorkflowService,
                    smarteditcommons.INotificationService,
                    smarteditcommons.SmarteditRoutingService,
                    WorkflowInboxAnnouncementService
                ])
            ]
        })
    ], WorkflowModule);
    return WorkflowModule;
}());

var RestrictionsStepHandler = /** @class */ (function () {
    function RestrictionsStepHandler(wizardManager, restrictionsEditorFunctionBindings, stepProperties) {
        this.wizardManager = wizardManager;
        this.restrictionsEditorFunctionBindings = restrictionsEditorFunctionBindings;
        this.stepDetails = stepProperties;
    }
    RestrictionsStepHandler.prototype.hideStep = function () {
        if (this.isStepOnWizard()) {
            this.wizardManager.removeStepById(this.getStepId());
        }
    };
    RestrictionsStepHandler.prototype.showStep = function () {
        if (!this.isStepOnWizard()) {
            this.wizardManager.addStep(this.stepDetails, this.wizardManager.getStepsCount());
        }
    };
    RestrictionsStepHandler.prototype.isStepValid = function () {
        return (this.restrictionsEditorFunctionBindings.isDirty &&
            this.restrictionsEditorFunctionBindings.isDirty());
    };
    RestrictionsStepHandler.prototype.getStepId = function () {
        return this.stepDetails.id;
    };
    RestrictionsStepHandler.prototype.goToStep = function () {
        this.wizardManager.goToStepWithId(this.getStepId());
    };
    RestrictionsStepHandler.prototype.isStepOnWizard = function () {
        return this.wizardManager.containsStep(this.getStepId());
    };
    return RestrictionsStepHandler;
}());
var /* @ngInject */ RestrictionsStepHandlerFactory = /** @class */ (function () {
    function /* @ngInject */ RestrictionsStepHandlerFactory() {
    }
    /* @ngInject */ RestrictionsStepHandlerFactory.prototype.createRestrictionsStepHandler = function (wizardManager, restrictionsEditorFunctionBindings, stepProperties) {
        return new RestrictionsStepHandler(wizardManager, restrictionsEditorFunctionBindings, stepProperties);
    };
    RestrictionsStepHandlerFactory.prototype.createRestrictionsStepHandler.$inject = ["wizardManager", "restrictionsEditorFunctionBindings", "stepProperties"];
    /* @ngInject */ RestrictionsStepHandlerFactory = __decorate([
        smarteditcommons.SeDowngradeService()
    ], /* @ngInject */ RestrictionsStepHandlerFactory);
    return /* @ngInject */ RestrictionsStepHandlerFactory;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageTypeStepComponent", {
    selector: 'se-page-type-step',
    template: "\n        <se-select-page-type\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            (onTypeSelected)=\"wizardApi.typeSelected($event)\"\n        >\n        </se-select-page-type>\n    "
});
var /* @ngInject */ PageTypeStepComponent = /** @class */ (function () {
    PageTypeStepComponent.$inject = ["wizardApi"];
    function /* @ngInject */ PageTypeStepComponent(wizardApi) {
        this.wizardApi = wizardApi;
    }
    /* @ngInject */ PageTypeStepComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-type-step',
            template: "\n        <se-select-page-type\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            (onTypeSelected)=\"wizardApi.typeSelected($event)\"\n        >\n        </se-select-page-type>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.WIZARD_API)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ PageTypeStepComponent);
    return /* @ngInject */ PageTypeStepComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageTemplateStepComponent", {
    selector: 'se-page-template-step',
    template: "\n        <se-select-page-template\n            [uriContext]=\"wizardApi.uriContext\"\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            (onTemplateSelected)=\"wizardApi.templateSelected($event)\"\n        >\n        </se-select-page-template>\n    "
});
var /* @ngInject */ PageTemplateStepComponent = /** @class */ (function () {
    PageTemplateStepComponent.$inject = ["wizardApi"];
    function /* @ngInject */ PageTemplateStepComponent(wizardApi) {
        this.wizardApi = wizardApi;
    }
    /* @ngInject */ PageTemplateStepComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-template-step',
            template: "\n        <se-select-page-template\n            [uriContext]=\"wizardApi.uriContext\"\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            (onTemplateSelected)=\"wizardApi.templateSelected($event)\"\n        >\n        </se-select-page-template>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.WIZARD_API)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ PageTemplateStepComponent);
    return /* @ngInject */ PageTemplateStepComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageInfoStepComponent", {
    selector: 'se-page-info-step',
    template: "\n        <span *ngIf=\"wizardApi.isPageInfoActive()\">\n            <se-generic-editor\n                [structure]=\"wizardApi.getPageInfoStructure()\"\n                [content]=\"wizardApi.getPageInfo()\"\n                [(submit)]=\"wizardApi.callbacks.savePageInfo\"\n                [(reset)]=\"wizardApi.callbacks.resetPageInfo\"\n                [(isDirty)]=\"wizardApi.callbacks.isDirtyPageInfo\"\n                [(isValid)]=\"wizardApi.callbacks.isValidPageInfo\"\n            >\n            </se-generic-editor>\n        </span>\n    "
});
var /* @ngInject */ PageInfoStepComponent = /** @class */ (function () {
    PageInfoStepComponent.$inject = ["wizardApi"];
    function /* @ngInject */ PageInfoStepComponent(wizardApi) {
        this.wizardApi = wizardApi;
    }
    /* @ngInject */ PageInfoStepComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-info-step',
            template: "\n        <span *ngIf=\"wizardApi.isPageInfoActive()\">\n            <se-generic-editor\n                [structure]=\"wizardApi.getPageInfoStructure()\"\n                [content]=\"wizardApi.getPageInfo()\"\n                [(submit)]=\"wizardApi.callbacks.savePageInfo\"\n                [(reset)]=\"wizardApi.callbacks.resetPageInfo\"\n                [(isDirty)]=\"wizardApi.callbacks.isDirtyPageInfo\"\n                [(isValid)]=\"wizardApi.callbacks.isValidPageInfo\"\n            >\n            </se-generic-editor>\n        </span>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.WIZARD_API)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ PageInfoStepComponent);
    return /* @ngInject */ PageInfoStepComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageDisplayConditionStepComponent", {
    selector: 'se-page-condition-step',
    template: "\n        <se-event-message\n            class=\"existing-homepage__ymessage\"\n            [showEvent]=\"'CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO'\"\n            [hideEvent]=\"'CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO'\"\n        >\n        </se-event-message>\n\n        <se-new-page-display-condition\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            [uriContext]=\"wizardApi.uriContext\"\n            [resultFn]=\"wizardApi.variationResult\"\n        ></se-new-page-display-condition>\n    "
});
var /* @ngInject */ PageDisplayConditionStepComponent = /** @class */ (function () {
    PageDisplayConditionStepComponent.$inject = ["wizardApi"];
    function /* @ngInject */ PageDisplayConditionStepComponent(wizardApi) {
        this.wizardApi = wizardApi;
    }
    /* @ngInject */ PageDisplayConditionStepComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-condition-step',
            template: "\n        <se-event-message\n            class=\"existing-homepage__ymessage\"\n            [showEvent]=\"'CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO'\"\n            [hideEvent]=\"'CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO'\"\n        >\n        </se-event-message>\n\n        <se-new-page-display-condition\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            [uriContext]=\"wizardApi.uriContext\"\n            [resultFn]=\"wizardApi.variationResult\"\n        ></se-new-page-display-condition>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.WIZARD_API)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ PageDisplayConditionStepComponent);
    return /* @ngInject */ PageDisplayConditionStepComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageRestrictionsStepComponent", {
    selector: 'se-page-restrictions-step',
    template: "\n        <span *ngIf=\"wizardApi.isRestrictionsActive()\" class=\"se-create-page-restriction-step\">\n            <div *ngIf=\"wizardApi.getPageRestrictions().length > 1\">\n                <se-page-restrictions-info-message></se-page-restrictions-info-message>\n            </div>\n            <se-restrictions-editor\n                [editable]=\"true\"\n                [(resetFn)]=\"wizardApi.restrictionsEditorFunctionBindings.reset\"\n                [(cancelFn)]=\"wizardApi.restrictionsEditorFunctionBindings.cancel\"\n                [(isDirtyFn)]=\"wizardApi.restrictionsEditorFunctionBindings.isDirty\"\n                (onRestrictionsChange)=\"wizardApi.restrictionsResult($event)\"\n                [getRestrictionTypes]=\"wizardApi.getRestrictionTypes\"\n                [getSupportedRestrictionTypes]=\"wizardApi.getSupportedRestrictionTypes\"\n                [item]=\"wizardApi.getPageInfo()\"\n                [restrictionUuids]=\"wizardApi.getPageRestrictions()\"\n            >\n            </se-restrictions-editor>\n        </span>\n    "
});
var /* @ngInject */ PageRestrictionsStepComponent = /** @class */ (function () {
    PageRestrictionsStepComponent.$inject = ["wizardApi"];
    function /* @ngInject */ PageRestrictionsStepComponent(wizardApi) {
        this.wizardApi = wizardApi;
    }
    /* @ngInject */ PageRestrictionsStepComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-restrictions-step',
            template: "\n        <span *ngIf=\"wizardApi.isRestrictionsActive()\" class=\"se-create-page-restriction-step\">\n            <div *ngIf=\"wizardApi.getPageRestrictions().length > 1\">\n                <se-page-restrictions-info-message></se-page-restrictions-info-message>\n            </div>\n            <se-restrictions-editor\n                [editable]=\"true\"\n                [(resetFn)]=\"wizardApi.restrictionsEditorFunctionBindings.reset\"\n                [(cancelFn)]=\"wizardApi.restrictionsEditorFunctionBindings.cancel\"\n                [(isDirtyFn)]=\"wizardApi.restrictionsEditorFunctionBindings.isDirty\"\n                (onRestrictionsChange)=\"wizardApi.restrictionsResult($event)\"\n                [getRestrictionTypes]=\"wizardApi.getRestrictionTypes\"\n                [getSupportedRestrictionTypes]=\"wizardApi.getSupportedRestrictionTypes\"\n                [item]=\"wizardApi.getPageInfo()\"\n                [restrictionUuids]=\"wizardApi.getPageRestrictions()\"\n            >\n            </se-restrictions-editor>\n        </span>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.WIZARD_API)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ PageRestrictionsStepComponent);
    return /* @ngInject */ PageRestrictionsStepComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "AddPageWizardComponent", {
    selector: 'se-add-page-wizard',
    template: ''
});
var /* @ngInject */ AddPageWizardComponent = /** @class */ (function () {
    AddPageWizardComponent.$inject = ["wizardManager", "pageBuilderFactory", "restrictionsStepHandlerFactory", "experienceService", "confirmationModalService", "systemEventService", "restrictionTypesService", "restrictionsService", "pageFacade"];
    function /* @ngInject */ AddPageWizardComponent(wizardManager, pageBuilderFactory, restrictionsStepHandlerFactory, experienceService, confirmationModalService, systemEventService, restrictionTypesService, restrictionsService, pageFacade) {
        var _this = this;
        this.wizardManager = wizardManager;
        this.pageBuilderFactory = pageBuilderFactory;
        this.restrictionsStepHandlerFactory = restrictionsStepHandlerFactory;
        this.experienceService = experienceService;
        this.confirmationModalService = confirmationModalService;
        this.systemEventService = systemEventService;
        this.restrictionTypesService = restrictionTypesService;
        this.restrictionsService = restrictionsService;
        this.pageFacade = pageFacade;
        // Enumerable methods
        // This way of defining method creates a public field in class instead of prototype method
        // which allows then to be reassigned/extended in ModalWizardTemplateComponent#assignAngularController
        this.getWizardConfig = function () { return ({
            isFormValid: function (stepId) { return _this.isFormValid(stepId); },
            onNext: function () { return _this.onNext(); },
            onDone: function () { return _this.onDone(); },
            onCancel: function () { return _this.onCancel(); },
            steps: [
                {
                    id: _this.ADD_PAGE_WIZARD_STEPS.PAGE_TYPE,
                    name: 'se.cms.addpagewizard.pagetype.tabname',
                    title: 'se.cms.addpagewizard.pagetype.title',
                    component: PageTypeStepComponent
                },
                {
                    id: _this.ADD_PAGE_WIZARD_STEPS.PAGE_TEMPLATE,
                    name: 'se.cms.addpagewizard.pagetemplate.tabname',
                    title: 'se.cms.addpagewizard.pagetype.title',
                    component: PageTemplateStepComponent
                },
                {
                    id: _this.ADD_PAGE_WIZARD_STEPS.PAGE_DISPLAY_CONDITION,
                    name: 'se.cms.addpagewizard.pageconditions.tabname',
                    title: 'se.cms.addpagewizard.pagetype.title',
                    component: PageDisplayConditionStepComponent
                },
                {
                    id: _this.ADD_PAGE_WIZARD_STEPS.PAGE_INFO,
                    name: 'se.cms.addpagewizard.pageinfo.tabname',
                    title: 'se.cms.addpagewizard.pagetype.title',
                    component: PageInfoStepComponent
                }
            ]
        }); };
        this.getRestrictionTypes = function () {
            return _this.restrictionTypesService.getRestrictionTypesByPageType(_this.getPageTypeCode());
        };
        this.getSupportedRestrictionTypes = function () {
            return _this.restrictionsService.getSupportedRestrictionTypeCodes();
        };
        this.variationResult = function (displayConditionResult) {
            _this.pageBuilder.displayConditionSelected(displayConditionResult);
        };
        var restrictionsEditorFunctionBindingsClosure = {}; // bound in the view for restrictions step
        this.uriContext = this.wizardManager.properties.uriContext;
        this.callbacks = {};
        this.restrictionStepProperties = {
            id: 'restrictionsStepId',
            name: 'se.cms.restrictions.editor.tab',
            title: 'se.cms.addpagewizard.pagetype.title',
            component: PageRestrictionsStepComponent
        };
        this.restrictionsEditorFunctionBindings = restrictionsEditorFunctionBindingsClosure;
        this.restrictionsStepHandler = this.restrictionsStepHandlerFactory.createRestrictionsStepHandler(this.wizardManager, restrictionsEditorFunctionBindingsClosure, this.restrictionStepProperties);
        this.pageBuilder = this.pageBuilderFactory.createPageBuilder(this.restrictionsStepHandler, this.uriContext);
        this.saveInProgress = false;
        this.typeChanged = true;
        this.ADD_PAGE_WIZARD_STEPS = {
            PAGE_TYPE: 'pageType',
            PAGE_TEMPLATE: 'pageTemplate',
            PAGE_DISPLAY_CONDITION: 'pageDisplayCondition',
            PAGE_INFO: 'pageInfo',
            PAGE_RESTRICTIONS: this.restrictionsStepHandler.getStepId()
        };
    }
    // Class methods
    /* @ngInject */ AddPageWizardComponent.prototype.typeSelected = function (pageType) {
        this.typeChanged = true;
        this.pageBuilder.pageTypeSelected(pageType);
    };
    AddPageWizardComponent.prototype.typeSelected.$inject = ["pageType"];
    /* @ngInject */ AddPageWizardComponent.prototype.templateSelected = function (pageTemplate) {
        this.pageBuilder.pageTemplateSelected(pageTemplate);
    };
    AddPageWizardComponent.prototype.templateSelected.$inject = ["pageTemplate"];
    /* @ngInject */ AddPageWizardComponent.prototype.getPageTypeCode = function () {
        return this.pageBuilder.getPageTypeCode();
    };
    /* @ngInject */ AddPageWizardComponent.prototype.restrictionsResult = function (data) {
        this.pageBuilder.setRestrictions(data.onlyOneRestrictionMustApply, data.restrictionUuids);
    };
    AddPageWizardComponent.prototype.restrictionsResult.$inject = ["data"];
    /* @ngInject */ AddPageWizardComponent.prototype.isRestrictionsActive = function () {
        if (!this.typeChanged ||
            this.wizardManager.getCurrentStepId() === this.ADD_PAGE_WIZARD_STEPS.PAGE_RESTRICTIONS) {
            this.typeChanged = false;
            return true;
        }
        return false;
    };
    /* @ngInject */ AddPageWizardComponent.prototype.getPageInfo = function () {
        var page = this.pageBuilder.getPage();
        page.uriContext = this.uriContext;
        return page;
    };
    /* @ngInject */ AddPageWizardComponent.prototype.getPageRestrictions = function () {
        return this.pageBuilder.getPageRestrictions();
    };
    /* @ngInject */ AddPageWizardComponent.prototype.getPageInfoStructure = function () {
        return this.pageBuilder.getPageInfoStructure();
    };
    /* @ngInject */ AddPageWizardComponent.prototype.isPageInfoActive = function () {
        return this.wizardManager.getCurrentStepId() === this.ADD_PAGE_WIZARD_STEPS.PAGE_INFO;
    };
    /* @ngInject */ AddPageWizardComponent.prototype.onNext = function () {
        return Promise.resolve(true);
    };
    /* @ngInject */ AddPageWizardComponent.prototype.onCancel = function () {
        return this.confirmationModalService.confirm({
            description: 'se.editor.cancel.confirm'
        });
    };
    /* @ngInject */ AddPageWizardComponent.prototype.isFormValid = function (stepId) {
        switch (stepId) {
            case this.ADD_PAGE_WIZARD_STEPS.PAGE_TYPE:
                return !!this.pageBuilder.getPageTypeCode();
            case this.ADD_PAGE_WIZARD_STEPS.PAGE_TEMPLATE:
                return !!this.pageBuilder.getTemplateUuid();
            case this.ADD_PAGE_WIZARD_STEPS.PAGE_DISPLAY_CONDITION:
                return true;
            case this.ADD_PAGE_WIZARD_STEPS.PAGE_INFO:
                return (!this.saveInProgress &&
                    !!this.callbacks.isDirtyPageInfo &&
                    this.callbacks.isDirtyPageInfo() &&
                    !!this.callbacks.isValidPageInfo &&
                    this.callbacks.isValidPageInfo());
            case this.ADD_PAGE_WIZARD_STEPS.PAGE_RESTRICTIONS:
                return !this.saveInProgress && this.restrictionsStepHandler.isStepValid();
        }
        return false;
    };
    AddPageWizardComponent.prototype.isFormValid.$inject = ["stepId"];
    /* @ngInject */ AddPageWizardComponent.prototype.onDone = function () {
        return __awaiter(this, void 0, void 0, function () {
            var page, pageCreated, exception_1, errors;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.saveInProgress = true;
                        return [4 /*yield*/, this.callbacks.savePageInfo()];
                    case 1:
                        page = _a.sent();
                        lodash.defaultsDeep(page, this.pageBuilder.getPage());
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, this.pageFacade.createPage(page)];
                    case 3:
                        pageCreated = _a.sent();
                        this.pageBuilder.setPageUid(pageCreated.uid);
                        if (pageCreated.typeCode === 'EmailPage') {
                            this.systemEventService.publishAsync(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE, pageCreated);
                            return [2 /*return*/, pageCreated];
                        }
                        return [4 /*yield*/, this.experienceService.loadExperience({
                                siteId: this.uriContext.CURRENT_CONTEXT_SITE_ID,
                                catalogId: this.uriContext.CURRENT_CONTEXT_CATALOG,
                                catalogVersion: this.uriContext.CURRENT_CONTEXT_CATALOG_VERSION,
                                pageId: this.pageBuilder.getPage().uid
                            })];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        exception_1 = _a.sent();
                        this.saveInProgress = false;
                        this.systemEventService.publishAsync(smarteditcommons.GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, {
                            messages: exception_1.error.errors
                        });
                        errors = exception_1.error.errors;
                        if (!errors.find(function (error) { return error.subject.indexOf('restrictions') === 0; })) {
                            this.wizardManager.goToStepWithId(this.ADD_PAGE_WIZARD_STEPS.PAGE_INFO);
                        }
                        // Reject is required to prevent modal wizard from closing when there's an error.
                        return [2 /*return*/, Promise.reject()];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ AddPageWizardComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-add-page-wizard',
            template: ''
        }),
        __param(0, core.Inject(smarteditcommons.WIZARD_MANAGER)),
        __metadata("design:paramtypes", [smarteditcommons.WizardService,
            PageBuilderFactory,
            RestrictionsStepHandlerFactory,
            smarteditcommons.IExperienceService,
            smarteditcommons.IConfirmationModalService,
            smarteditcommons.SystemEventService,
            RestrictionTypesService,
            RestrictionsService,
            PageFacade])
    ], /* @ngInject */ AddPageWizardComponent);
    return /* @ngInject */ AddPageWizardComponent;
}());

var CatalogHomepageDetailsStatus$1;
(function (CatalogHomepageDetailsStatus) {
    CatalogHomepageDetailsStatus["PENDING"] = "PENDING";
    CatalogHomepageDetailsStatus["NO_HOMEPAGE"] = "NO_HOMEPAGE";
    CatalogHomepageDetailsStatus["LOCAL"] = "LOCAL";
    CatalogHomepageDetailsStatus["OLD"] = "OLD";
    CatalogHomepageDetailsStatus["PARENT"] = "PARENT";
})(CatalogHomepageDetailsStatus$1 || (CatalogHomepageDetailsStatus$1 = {}));
window.__smartedit__.addDecoratorPayload("Component", "NewPageDisplayConditionComponent", {
    selector: 'se-new-page-display-condition',
    template: "<div *ngIf=\"isReady\"><div class=\"form-group\"><label for=\"page-condition-selector-id\" class=\"se-control-label\" translate=\"se.cms.page.condition.selection.label\"></label><se-select id=\"page-condition-selector-id\" [model]=\"conditionSelected.label\" (modelChange)=\"onConditionChange($event)\" [fetchStrategy]=\"conditionSelectorFetchStrategy\" [onChange]=\"onDataChange\" [searchEnabled]=\"false\"></se-select><span class=\"se-form-help-message\"><span [translate]=\"conditionSelected.description\"></span></span></div><div *ngIf=\"showPrimarySelector()\" class=\"form-group\"><label for=\"page-condition-primary-selector-id\" class=\"se-control-label\" translate=\"se.cms.page.condition.primary.association.label\"></label><se-select id=\"page-condition-primary-selector-id\" [model]=\"primarySelectedModel\" (modelChange)=\"primarySelectedModelOnChange($event)\" [fetchStrategy]=\"primaryPageChoicesFetchStrategy\" [onChange]=\"onDataChange\"></se-select><span *ngIf=\"primarySelected?.label\" class=\"se-form-help-message\"><span>{{ 'se.cms.page.label.label' | translate }}: {{ primarySelected.label }}</span></span></div><div *ngIf=\"showHomePageWidget()\"><div class=\"fd-form__item\"><input type=\"checkbox\" id=\"set-homepage-checkbox\" class=\"se-component-item--details se-component-homepage__checkbox-input fd-form__control\" name=\"clone-on-drop\" (ngModelChange)=\"onHomePageChange($event)\" [ngModel]=\"homepage\"/> <label class=\"se-control-label se-component-homepage--label fd-form__label\" for=\"set-homepage-checkbox\" translate=\"se.cms.display.conditions.homepage.set\"></label></div><label class=\"se-control-label se-component-homepage--label\" for=\"set-homepage-checkbox\" *ngIf=\"showReplaceLabel\">{{ \"se.cms.display.conditions.homepage.replace\" | translate: { currentHomepage: currentHomePageName } }}</label></div></div>",
    styles: [".se-component-homepage__checkbox-input{margin:0 4px 0 0;outline:0;box-shadow:none}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    providers: [smarteditcommons.L10nPipe]
});
var /* @ngInject */ NewPageDisplayConditionComponent = /** @class */ (function () {
    NewPageDisplayConditionComponent.$inject = ["urlService", "homepageService", "displayConditionsFacade", "translateService", "pageService", "logService", "pageDisplayConditions", "l10n", "cdr"];
    function /* @ngInject */ NewPageDisplayConditionComponent(urlService, homepageService, displayConditionsFacade, translateService, pageService, logService, pageDisplayConditions, l10n, cdr) {
        this.urlService = urlService;
        this.homepageService = homepageService;
        this.displayConditionsFacade = displayConditionsFacade;
        this.translateService = translateService;
        this.pageService = pageService;
        this.logService = logService;
        this.pageDisplayConditions = pageDisplayConditions;
        this.l10n = l10n;
        this.cdr = cdr;
        this.conditions = null;
        this.homepage = false;
        this.homepageDetails = {
            status: CatalogHomepageDetailsStatus$1.PENDING
        };
        this.isReady = false;
        this.primarySelected = null;
        this.primarySelectedModel = null;
        this.showReplaceLabel = false;
    }
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.onDataChange = function () { return _this.dataChanged(); };
        this.conditionSelected = {};
        this.conditionSelectorFetchStrategy = {
            fetchAll: function () {
                return Promise.resolve((_this.conditions || []).map(function (condition) { return ({
                    id: condition.label,
                    label: condition.label
                }); }));
            }
        };
        this.initialConditionSelectedKey =
            this.initialConditionSelectedKey || 'page.displaycondition.primary';
        this.primaryPageChoicesFetchStrategy = {
            fetchEntity: function () {
                return Promise.resolve({
                    id: _this.primarySelected.uid,
                    label: _this.primarySelected.name || _this.primarySelected.label
                });
            },
            fetchPage: function (search, pageSize, currentPage) {
                return _this.displayConditionsFacade.getPrimaryPagesForPageType(_this.pageTypeCode, _this.uriContext, {
                    search: search,
                    pageSize: pageSize,
                    currentPage: currentPage
                });
            }
        };
    };
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.ngOnChanges = function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var hasPageTypeCodeChanged, hasTargetCatalogVersionChanged, context, homepageDetails;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hasPageTypeCodeChanged = !!changes.pageTypeCode &&
                            changes.pageTypeCode.currentValue != changes.pageTypeCode.previousValue;
                        hasTargetCatalogVersionChanged = !!changes.targetCatalogVersion &&
                            !lodash.isEqual(changes.targetCatalogVersion.currentValue, changes.targetCatalogVersion.previousValue);
                        if (!(hasPageTypeCodeChanged || hasTargetCatalogVersionChanged)) return [3 /*break*/, 6];
                        if (!(!this.targetCatalogVersion ||
                            this.isUriContextEqualToCatalogVersion(this.uriContext, this.targetCatalogVersion))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getSelectedPrimaryPageAndDisplayCondition()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        this.getOnlyPrimaryDisplayCondition();
                        _a.label = 3;
                    case 3:
                        context = this.targetCatalogVersion === undefined
                            ? this.uriContext
                            : this.urlService.buildUriContext(this.targetCatalogVersion.siteId, this.targetCatalogVersion.catalogId, this.targetCatalogVersion.version);
                        return [4 /*yield*/, this.homepageService.getHomepageDetailsForContext(context)];
                    case 4:
                        homepageDetails = _a.sent();
                        this.homepageDetails = homepageDetails;
                        return [4 /*yield*/, this.updateHomepageUiProperties()];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 6: return [4 /*yield*/, this.updateHomepageUiProperties()];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    NewPageDisplayConditionComponent.prototype.ngOnChanges.$inject = ["changes"];
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.showPrimarySelector = function () {
        return !(this.conditionSelected && this.conditionSelected.isPrimary);
    };
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.onConditionChange = function (selectedConditionLabel) {
        this.conditionSelected = this.conditions.find(function (condition) { return condition.label === selectedConditionLabel; });
    };
    NewPageDisplayConditionComponent.prototype.onConditionChange.$inject = ["selectedConditionLabel"];
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.onHomePageChange = function (isHomepage) {
        this.homepage = isHomepage;
        this.dataChanged();
    };
    NewPageDisplayConditionComponent.prototype.onHomePageChange.$inject = ["isHomepage"];
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.showHomePageWidget = function () {
        return this.isPrimaryContentPage();
    };
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.primarySelectedModelOnChange = function (uid) {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageService.getPageById(uid)];
                    case 1:
                        page = _a.sent();
                        this.setPrimarySelected(page);
                        this.dataChanged();
                        return [2 /*return*/];
                }
            });
        });
    };
    NewPageDisplayConditionComponent.prototype.primarySelectedModelOnChange.$inject = ["uid"];
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.dataChanged = function () {
        if (!this.isPrimaryContentPage()) {
            this.homepage = undefined;
        }
        this.updateHomepageUiProperties();
        if (this.resultFn) {
            this.resultFn(this.getResults());
        }
    };
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.isPrimaryContentPage = function () {
        var _a;
        return ((_a = this.conditionSelected) === null || _a === void 0 ? void 0 : _a.isPrimary) && this.pageTypeCode === 'ContentPage';
    };
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.updateHomepageUiProperties = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, parentCatalogName, targetCatalogName;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!this.homepage) return [3 /*break*/, 7];
                        _a = this.homepageDetails.status;
                        switch (_a) {
                            case CatalogHomepageDetailsStatus$1.NO_HOMEPAGE: return [3 /*break*/, 1];
                            case CatalogHomepageDetailsStatus$1.PARENT: return [3 /*break*/, 2];
                            case CatalogHomepageDetailsStatus$1.LOCAL: return [3 /*break*/, 4];
                        }
                        return [3 /*break*/, 5];
                    case 1:
                        this.homepageService.sendEventHideReplaceParentHomePageInfo();
                        this.showReplaceLabel = false;
                        return [3 /*break*/, 6];
                    case 2: return [4 /*yield*/, this.getTranslatedNames(this.homepageDetails.parentCatalogName, this.homepageDetails.targetCatalogName)];
                    case 3:
                        _b = _c.sent(), parentCatalogName = _b[0], targetCatalogName = _b[1];
                        this.homepageService.sendEventShowReplaceParentHomePageInfo({
                            description: this.translateService.instant('se.cms.display.conditions.homepage.replace.parent.info.header', {
                                parentCatalogName: parentCatalogName,
                                parentCatalogVersion: this.homepageDetails.parentCatalogVersion,
                                targetCatalogName: targetCatalogName,
                                targetCatalogVersion: this.homepageDetails.targetCatalogVersion
                            })
                        });
                        this.showReplaceLabel = false;
                        return [3 /*break*/, 6];
                    case 4:
                        this.homepageService.sendEventHideReplaceParentHomePageInfo();
                        this.currentHomePageName = this.homepageDetails.currentHomepageName;
                        this.showReplaceLabel = true;
                        return [3 /*break*/, 6];
                    case 5: return [3 /*break*/, 6];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        this.homepageService.sendEventHideReplaceParentHomePageInfo();
                        this.showReplaceLabel = false;
                        _c.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.getTranslatedNames = function (name, secondName) {
        return Promise.all([
            this.l10n.transform(name).pipe(operators.take(1)).toPromise(),
            this.l10n.transform(secondName).pipe(operators.take(1)).toPromise()
        ]);
    };
    NewPageDisplayConditionComponent.prototype.getTranslatedNames.$inject = ["name", "secondName"];
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.getResults = function () {
        var result = {
            homepage: this.homepage,
            isPrimary: this.conditionSelected && this.conditionSelected.isPrimary,
            primaryPage: null
        };
        if (this.conditionSelected && !this.conditionSelected.isPrimary) {
            result.primaryPage = this.primarySelected;
        }
        return result;
    };
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.getSelectedPrimaryPageAndDisplayCondition = function () {
        return __awaiter(this, void 0, void 0, function () {
            var page, primaryPage, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.pageTypeCode) return [3 /*break*/, 8];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, 6, 7]);
                        if (!this.pageUuid) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.pageService.getPageByUuid(this.pageUuid)];
                    case 2:
                        page = _a.sent();
                        return [4 /*yield*/, (!page.defaultPage
                                ? this.pageService.getPrimaryPage(page.uid)
                                : page)];
                    case 3:
                        primaryPage = _a.sent();
                        this.setPrimarySelected(primaryPage);
                        _a.label = 4;
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        error_1 = _a.sent();
                        this.logService.error(error_1);
                        return [3 /*break*/, 7];
                    case 6:
                        this.getAllPrimaryDisplayCondition();
                        return [7 /*endfinally*/];
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        this.getAllPrimaryDisplayCondition();
                        _a.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.getAllPrimaryDisplayCondition = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, 3, 4]);
                        return [4 /*yield*/, this.pageDisplayConditions.getNewPageConditions(this.pageTypeCode, this.uriContext)];
                    case 1:
                        response = _a.sent();
                        if (!response.length) {
                            return [2 /*return*/];
                        }
                        this.conditions = response;
                        this.conditionSelected = this.conditions[0];
                        if (this.conditions.length > 1) {
                            this.conditionSelected = this.conditions.find(function (condition) { return condition.label === _this.initialConditionSelectedKey; });
                        }
                        this.isReady = true;
                        return [3 /*break*/, 4];
                    case 2:
                        error_2 = _a.sent();
                        this.logService.error(error_2);
                        return [3 /*break*/, 4];
                    case 3:
                        if (this.targetCatalogVersion &&
                            !this.isUriContextEqualToCatalogVersion(this.uriContext, this.targetCatalogVersion)) {
                            this.getOnlyPrimaryDisplayCondition();
                        }
                        else {
                            this.dataChanged();
                        }
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.getOnlyPrimaryDisplayCondition = function () {
        this.conditions = [
            {
                description: 'page.displaycondition.primary.description',
                isPrimary: true,
                label: 'page.displaycondition.primary'
            }
        ];
        this.conditionSelected = this.conditions[0];
        this.isReady = true;
        this.dataChanged();
    };
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.isUriContextEqualToCatalogVersion = function (uriContext, catalogVersion) {
        return (uriContext &&
            catalogVersion &&
            catalogVersion.siteId === uriContext.CURRENT_CONTEXT_SITE_ID &&
            catalogVersion.catalogId === uriContext.CURRENT_CONTEXT_CATALOG &&
            catalogVersion.version === uriContext.CURRENT_CONTEXT_CATALOG_VERSION);
    };
    NewPageDisplayConditionComponent.prototype.isUriContextEqualToCatalogVersion.$inject = ["uriContext", "catalogVersion"];
    /* @ngInject */ NewPageDisplayConditionComponent.prototype.setPrimarySelected = function (page) {
        this.primarySelected = page;
        this.primarySelectedModel = page.uid;
    };
    NewPageDisplayConditionComponent.prototype.setPrimarySelected.$inject = ["page"];
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ NewPageDisplayConditionComponent.prototype, "pageTypeCode", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ NewPageDisplayConditionComponent.prototype, "uriContext", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ NewPageDisplayConditionComponent.prototype, "resultFn", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ NewPageDisplayConditionComponent.prototype, "pageUuid", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ NewPageDisplayConditionComponent.prototype, "initialConditionSelectedKey", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ NewPageDisplayConditionComponent.prototype, "targetCatalogVersion", void 0);
    /* @ngInject */ NewPageDisplayConditionComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-new-page-display-condition',
            template: "<div *ngIf=\"isReady\"><div class=\"form-group\"><label for=\"page-condition-selector-id\" class=\"se-control-label\" translate=\"se.cms.page.condition.selection.label\"></label><se-select id=\"page-condition-selector-id\" [model]=\"conditionSelected.label\" (modelChange)=\"onConditionChange($event)\" [fetchStrategy]=\"conditionSelectorFetchStrategy\" [onChange]=\"onDataChange\" [searchEnabled]=\"false\"></se-select><span class=\"se-form-help-message\"><span [translate]=\"conditionSelected.description\"></span></span></div><div *ngIf=\"showPrimarySelector()\" class=\"form-group\"><label for=\"page-condition-primary-selector-id\" class=\"se-control-label\" translate=\"se.cms.page.condition.primary.association.label\"></label><se-select id=\"page-condition-primary-selector-id\" [model]=\"primarySelectedModel\" (modelChange)=\"primarySelectedModelOnChange($event)\" [fetchStrategy]=\"primaryPageChoicesFetchStrategy\" [onChange]=\"onDataChange\"></se-select><span *ngIf=\"primarySelected?.label\" class=\"se-form-help-message\"><span>{{ 'se.cms.page.label.label' | translate }}: {{ primarySelected.label }}</span></span></div><div *ngIf=\"showHomePageWidget()\"><div class=\"fd-form__item\"><input type=\"checkbox\" id=\"set-homepage-checkbox\" class=\"se-component-item--details se-component-homepage__checkbox-input fd-form__control\" name=\"clone-on-drop\" (ngModelChange)=\"onHomePageChange($event)\" [ngModel]=\"homepage\"/> <label class=\"se-control-label se-component-homepage--label fd-form__label\" for=\"set-homepage-checkbox\" translate=\"se.cms.display.conditions.homepage.set\"></label></div><label class=\"se-control-label se-component-homepage--label\" for=\"set-homepage-checkbox\" *ngIf=\"showReplaceLabel\">{{ \"se.cms.display.conditions.homepage.replace\" | translate: { currentHomepage: currentHomePageName } }}</label></div></div>",
            styles: [".se-component-homepage__checkbox-input{margin:0 4px 0 0;outline:0;box-shadow:none}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            providers: [smarteditcommons.L10nPipe]
        }),
        __metadata("design:paramtypes", [smarteditcommons.IUrlService,
            HomepageService,
            DisplayConditionsFacade,
            core$1.TranslateService,
            cmscommons.IPageService,
            smarteditcommons.LogService,
            PageDisplayConditionsService,
            smarteditcommons.L10nPipe,
            core.ChangeDetectorRef])
    ], /* @ngInject */ NewPageDisplayConditionComponent);
    return /* @ngInject */ NewPageDisplayConditionComponent;
}());

var NON_SUPPORTED_TEMPLATES = [
    'layout/landingLayout1Page',
    'layout/landingLayout3Page',
    'layout/landingLayout4Page',
    'layout/landingLayout5Page',
    'layout/landingLayout6Page',
    'layout/landingLayoutPage',
    'account/accountRegisterPage',
    'checkout/checkoutRegisterPage'
];
var /* @ngInject */ PageTemplateService = /** @class */ (function () {
    PageTemplateService.$inject = ["restServiceFactory"];
    function /* @ngInject */ PageTemplateService(restServiceFactory) {
        this.pageTemplateRestService = restServiceFactory.get(cmscommons.PAGE_TEMPLATES_URI);
    }
    /* @ngInject */ PageTemplateService.prototype.getPageTemplatesForType = function (uriContext, pageType) {
        return __awaiter(this, void 0, void 0, function () {
            var params, pageTemplates;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = __assign({ pageTypeCode: pageType, active: true }, uriContext);
                        return [4 /*yield*/, this.pageTemplateRestService.get(params)];
                    case 1:
                        pageTemplates = _a.sent();
                        return [2 /*return*/, {
                                templates: pageTemplates.templates.filter(function (pageTemplate) { return !NON_SUPPORTED_TEMPLATES.includes(pageTemplate.frontEndName); })
                            }];
                }
            });
        });
    };
    PageTemplateService.prototype.getPageTemplatesForType.$inject = ["uriContext", "pageType"];
    /* @ngInject */ PageTemplateService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.IRestServiceFactory])
    ], /* @ngInject */ PageTemplateService);
    return /* @ngInject */ PageTemplateService;
}());

window.__smartedit__.addDecoratorPayload("Component", "SelectPageTemplateComponent", {
    selector: 'se-select-page-template',
    template: "<div class=\"se-page-type-step-template\"><div class=\"se-add-page__sub-header\"><div class=\"se-add-page__sub-header-title\">{{ 'se.cms.addpagewizard.pagetemplate.description' | translate }}</div><div class=\"se-input-group se-page-type-step-template-list-search\"><input type=\"text\" class=\"se-input-group__input-area ySEPage-list-search-input\" placeholder=\"{{ 'se.cms.pagewizard.templatestep.searchplaceholder' | translate }}\" [ngModel]=\"searchString\" (ngModelChange)=\"onSearchChange($event)\" name=\"query\"/> <span class=\"sap-icon--search se-input-group__addon\"></span><div *ngIf=\"searchString\" class=\"se-input-group__addon se-input-group__clear-btn\" (click)=\"clearSearch()\"><span class=\"sap-icon--decline\"></span></div></div></div><div class=\"se-add-page__list fd-menu\" *ngIf=\"pageTemplates.length > 0\"><div *ngFor=\"let template of filteredPageTemplates\" [ngClass]=\"{ 'is-selected': isSelected(template)}\" (click)=\"templateSelected(template)\" class=\"se-add-page__item se-add-page__item--page-template fd-menu__item\"><div class=\"se-add-page__item-title\">{{ template.name }}</div></div></div></div>",
    styles: [".se-add-page__sub-header{padding-bottom:16px;color:#51555a}.se-add-page__sub-header-title{margin-bottom:8px}.se-add-page__list.fd-menu{border-top:1px solid #d9d9d9;padding:0}.se-add-page__item{cursor:pointer}.se-add-page__item--page-template{height:48px;display:flex;flex-direction:row;align-items:center}.se-add-page__item-title{font-weight:700}.se-add-page__item-description{white-space:normal}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ SelectPageTemplateComponent = /** @class */ (function () {
    SelectPageTemplateComponent.$inject = ["pageTemplateService", "cdr"];
    function /* @ngInject */ SelectPageTemplateComponent(pageTemplateService, cdr) {
        this.pageTemplateService = pageTemplateService;
        this.cdr = cdr;
        this.searchString = '';
        this.onTemplateSelected = new core.EventEmitter();
        this.cache = {};
        this.pageTemplates = [];
    }
    /* @ngInject */ SelectPageTemplateComponent.prototype.ngOnChanges = function (changes) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!((_a = changes.pageTypeCode) === null || _a === void 0 ? void 0 : _a.currentValue)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.onInputUpdated()];
                    case 1:
                        _b.sent();
                        this.setDefaultFilteredPageTemplates();
                        this.cdr.detectChanges();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    SelectPageTemplateComponent.prototype.ngOnChanges.$inject = ["changes"];
    /* @ngInject */ SelectPageTemplateComponent.prototype.templateSelected = function (pageTemplate) {
        this.selectedTemplate = pageTemplate;
        this.onTemplateSelected.emit(pageTemplate);
    };
    SelectPageTemplateComponent.prototype.templateSelected.$inject = ["pageTemplate"];
    /* @ngInject */ SelectPageTemplateComponent.prototype.isSelected = function (pageTemplate) {
        var _a;
        return pageTemplate.uid === ((_a = this.selectedTemplate) === null || _a === void 0 ? void 0 : _a.uid);
    };
    SelectPageTemplateComponent.prototype.isSelected.$inject = ["pageTemplate"];
    /* @ngInject */ SelectPageTemplateComponent.prototype.clearSearch = function () {
        this.searchString = '';
        this.setDefaultFilteredPageTemplates();
    };
    /* @ngInject */ SelectPageTemplateComponent.prototype.onSearchChange = function (value) {
        this.searchString = value;
        this.filterByQuery(this.searchString);
    };
    SelectPageTemplateComponent.prototype.onSearchChange.$inject = ["value"];
    /* @ngInject */ SelectPageTemplateComponent.prototype.onInputUpdated = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.clearSearch();
                this.selectedTemplate = null;
                return [2 /*return*/, this.setPageTemplates()];
            });
        });
    };
    /* @ngInject */ SelectPageTemplateComponent.prototype.setPageTemplates = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageTemplates;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.cache[this.pageTypeCode]) {
                            this.pageTemplates = this.cache[this.pageTypeCode];
                            return [2 /*return*/];
                        }
                        this.pageTemplates = [];
                        return [4 /*yield*/, this.pageTemplateService.getPageTemplatesForType(this.uriContext, this.pageTypeCode)];
                    case 1:
                        pageTemplates = _a.sent();
                        this.cache[this.pageTypeCode] = pageTemplates.templates;
                        this.pageTemplates = this.cache[this.pageTypeCode];
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ SelectPageTemplateComponent.prototype.filterByQuery = function (query) {
        if (!query) {
            this.setDefaultFilteredPageTemplates();
            return;
        }
        this.filteredPageTemplates = this.pageTemplates.filter(function (template) {
            var terms = query.split(' ');
            return terms.every(function (term) { return template.name.toLowerCase().includes(term.toLowerCase()); });
        });
    };
    SelectPageTemplateComponent.prototype.filterByQuery.$inject = ["query"];
    /* @ngInject */ SelectPageTemplateComponent.prototype.setDefaultFilteredPageTemplates = function () {
        this.filteredPageTemplates = __spreadArrays(this.pageTemplates);
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ SelectPageTemplateComponent.prototype, "uriContext", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ SelectPageTemplateComponent.prototype, "pageTypeCode", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ SelectPageTemplateComponent.prototype, "onTemplateSelected", void 0);
    /* @ngInject */ SelectPageTemplateComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-select-page-template',
            template: "<div class=\"se-page-type-step-template\"><div class=\"se-add-page__sub-header\"><div class=\"se-add-page__sub-header-title\">{{ 'se.cms.addpagewizard.pagetemplate.description' | translate }}</div><div class=\"se-input-group se-page-type-step-template-list-search\"><input type=\"text\" class=\"se-input-group__input-area ySEPage-list-search-input\" placeholder=\"{{ 'se.cms.pagewizard.templatestep.searchplaceholder' | translate }}\" [ngModel]=\"searchString\" (ngModelChange)=\"onSearchChange($event)\" name=\"query\"/> <span class=\"sap-icon--search se-input-group__addon\"></span><div *ngIf=\"searchString\" class=\"se-input-group__addon se-input-group__clear-btn\" (click)=\"clearSearch()\"><span class=\"sap-icon--decline\"></span></div></div></div><div class=\"se-add-page__list fd-menu\" *ngIf=\"pageTemplates.length > 0\"><div *ngFor=\"let template of filteredPageTemplates\" [ngClass]=\"{ 'is-selected': isSelected(template)}\" (click)=\"templateSelected(template)\" class=\"se-add-page__item se-add-page__item--page-template fd-menu__item\"><div class=\"se-add-page__item-title\">{{ template.name }}</div></div></div></div>",
            styles: [".se-add-page__sub-header{padding-bottom:16px;color:#51555a}.se-add-page__sub-header-title{margin-bottom:8px}.se-add-page__list.fd-menu{border-top:1px solid #d9d9d9;padding:0}.se-add-page__item{cursor:pointer}.se-add-page__item--page-template{height:48px;display:flex;flex-direction:row;align-items:center}.se-add-page__item-title{font-weight:700}.se-add-page__item-description{white-space:normal}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [PageTemplateService, core.ChangeDetectorRef])
    ], /* @ngInject */ SelectPageTemplateComponent);
    return /* @ngInject */ SelectPageTemplateComponent;
}());

/**
 * A service used to retrive all supported page types configured on the platform, and caches them for the duration of the session.
 */
var /* @ngInject */ PageTypeService = /** @class */ (function () {
    PageTypeService.$inject = ["restServiceFactory"];
    function /* @ngInject */ PageTypeService(restServiceFactory) {
        this.pageTypeRestService = restServiceFactory.get(cmscommons.PAGE_TYPES_URI);
    }
    /**
     * Returns a list of page type descriptor objects.
     */
    /* @ngInject */ PageTypeService.prototype.getPageTypes = function () {
        this.pageTypesResponse = this.pageTypesResponse || this.pageTypeRestService.get();
        return this.pageTypesResponse.then(function (response) { return response.pageTypes; });
    };
    /* @ngInject */ PageTypeService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory])
    ], /* @ngInject */ PageTypeService);
    return /* @ngInject */ PageTypeService;
}());

window.__smartedit__.addDecoratorPayload("Component", "SelectPageTypeComponent", {
    selector: 'se-select-page-type',
    template: "<div><div class=\"se-add-page__sub-header\">{{ 'se.cms.addpagewizard.pagetype.description' | translate }}</div><div class=\"se-add-page__list fd-menu\" *ngIf=\"pageTypes.length > 0\"><div class=\"se-add-page__item fd-menu__item\" *ngFor=\"let pageType of pageTypes\" [ngClass]=\"{ 'is-selected': isSelected(pageType)}\" (click)=\"selectType(pageType)\"><div class=\"se-add-page__item-title\">{{ pageType.name | seL10n | async }}</div><div class=\"se-add-page__item-description\">{{ pageType.description | seL10n | async }}</div></div></div></div>",
    styles: [".se-add-page__sub-header{padding-bottom:16px;color:#51555a}.se-add-page__sub-header-title{margin-bottom:8px}.se-add-page__list.fd-menu{border-top:1px solid #d9d9d9;padding:0}.se-add-page__item{cursor:pointer}.se-add-page__item--page-template{height:48px;display:flex;flex-direction:row;align-items:center}.se-add-page__item-title{font-weight:700}.se-add-page__item-description{white-space:normal}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ SelectPageTypeComponent = /** @class */ (function () {
    SelectPageTypeComponent.$inject = ["pageTypeService", "typePermissionsRestService", "cdr"];
    function /* @ngInject */ SelectPageTypeComponent(pageTypeService, typePermissionsRestService, cdr) {
        this.pageTypeService = pageTypeService;
        this.typePermissionsRestService = typePermissionsRestService;
        this.cdr = cdr;
        this.onTypeSelected = new core.EventEmitter();
        this.pageTypes = [];
    }
    /* @ngInject */ SelectPageTypeComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadPageTypes()];
                    case 1:
                        _a.sent();
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ SelectPageTypeComponent.prototype.selectType = function (pageType) {
        this.onTypeSelected.emit(pageType);
    };
    SelectPageTypeComponent.prototype.selectType.$inject = ["pageType"];
    /* @ngInject */ SelectPageTypeComponent.prototype.isSelected = function (pageType) {
        return pageType.code === this.pageTypeCode;
    };
    SelectPageTypeComponent.prototype.isSelected.$inject = ["pageType"];
    /* @ngInject */ SelectPageTypeComponent.prototype.loadPageTypes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageTypes, allPageTypeCodes, createPermissionResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageTypeService.getPageTypes()];
                    case 1:
                        pageTypes = _a.sent();
                        allPageTypeCodes = pageTypes.map(function (pageType) { return pageType.code; });
                        return [4 /*yield*/, this.typePermissionsRestService.hasCreatePermissionForTypes(allPageTypeCodes)];
                    case 2:
                        createPermissionResult = _a.sent();
                        this.pageTypes = pageTypes.filter(function (pageType) { return createPermissionResult[pageType.code]; });
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ SelectPageTypeComponent.prototype, "pageTypeCode", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ SelectPageTypeComponent.prototype, "onTypeSelected", void 0);
    /* @ngInject */ SelectPageTypeComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-select-page-type',
            template: "<div><div class=\"se-add-page__sub-header\">{{ 'se.cms.addpagewizard.pagetype.description' | translate }}</div><div class=\"se-add-page__list fd-menu\" *ngIf=\"pageTypes.length > 0\"><div class=\"se-add-page__item fd-menu__item\" *ngFor=\"let pageType of pageTypes\" [ngClass]=\"{ 'is-selected': isSelected(pageType)}\" (click)=\"selectType(pageType)\"><div class=\"se-add-page__item-title\">{{ pageType.name | seL10n | async }}</div><div class=\"se-add-page__item-description\">{{ pageType.description | seL10n | async }}</div></div></div></div>",
            styles: [".se-add-page__sub-header{padding-bottom:16px;color:#51555a}.se-add-page__sub-header-title{margin-bottom:8px}.se-add-page__list.fd-menu{border-top:1px solid #d9d9d9;padding:0}.se-add-page__item{cursor:pointer}.se-add-page__item--page-template{height:48px;display:flex;flex-direction:row;align-items:center}.se-add-page__item-title{font-weight:700}.se-add-page__item-description{white-space:normal}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [PageTypeService,
            cmscommons.TypePermissionsRestService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ SelectPageTypeComponent);
    return /* @ngInject */ SelectPageTypeComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "SelectTargetCatalogVersionComponent", {
    selector: 'se-select-target-catalog-version',
    template: "<div class=\"target-catalog-version-selector-wrapper form-group\"><label for=\"target-catalog-version-selector-id\" class=\"se-control-label\" translate=\"se.cms.clonepagewizard.options.targetcatalogversion.label\"></label><se-select *ngIf=\"!!catalogVersions.length\" id=\"se-catalog-version-selector-dropdown\" [(model)]=\"selectedCatalogVersion\" [fetchStrategy]=\"catalogVersionSelectorFetchStrategy\" [onChange]=\"onSelectionChange\" [searchEnabled]=\"false\" (getApi)=\"setSelectApi($event)\"></se-select><div *ngIf=\"catalogVersionContainsPageWithSameLabel\"><span class=\"help-block\" translate=\"se.cms.clonepagewizard.options.targetcatalogversion.label.exists.message\"></span></div><div *ngIf=\"pageAlreadyExists()\"><span class=\"help-block\" translate=\"se.cms.clonepagewizard.options.targetcatalogversion.pagetype.exists.message\"></span></div></div>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ SelectTargetCatalogVersionComponent = /** @class */ (function () {
    SelectTargetCatalogVersionComponent.$inject = ["pageFacade", "catalogVersionRestService", "catalogService", "pageService", "cdr"];
    function /* @ngInject */ SelectTargetCatalogVersionComponent(pageFacade, catalogVersionRestService, catalogService, pageService, cdr) {
        this.pageFacade = pageFacade;
        this.catalogVersionRestService = catalogVersionRestService;
        this.catalogService = catalogService;
        this.pageService = pageService;
        this.cdr = cdr;
        this.catalogVersions = [];
        this.selectedCatalogVersion = null;
        this.catalogVersionContainsPageWithSameLabel = false;
        this.catalogVersionContainsPageWithSameTypeCode = false;
        this.onTargetCatalogVersionSelected = new core.EventEmitter();
    }
    /* @ngInject */ SelectTargetCatalogVersionComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.catalogVersionSelectorFetchStrategy = {
                            fetchAll: function () {
                                return Promise.resolve((_this.catalogVersions || []).map(function (catalogVersion) { return ({
                                    id: catalogVersion.uuid,
                                    label: catalogVersion.name
                                }); }));
                            }
                        };
                        this.onSelectionChange = function () { return _this.selectionChangeHandler(); };
                        return [4 /*yield*/, this.setupCatalogVersions()];
                    case 1:
                        _a.sent();
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ SelectTargetCatalogVersionComponent.prototype.setSelectApi = function (api) {
        this.selectApi = api;
    };
    SelectTargetCatalogVersionComponent.prototype.setSelectApi.$inject = ["api"];
    /* @ngInject */ SelectTargetCatalogVersionComponent.prototype.pageAlreadyExists = function () {
        return (this.catalogVersionContainsPageWithSameTypeCode &&
            !this.catalogVersionContainsPageWithSameLabel);
    };
    /* @ngInject */ SelectTargetCatalogVersionComponent.prototype.setupCatalogVersions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var targets, catalogVersions, uuid_1, currentCatalogVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogVersionRestService.getCloneableTargets(this.uriContext)];
                    case 1:
                        targets = _a.sent();
                        catalogVersions = targets.versions;
                        if (!!lodash.isEmpty(catalogVersions)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.catalogService.getCatalogVersionUUid(this.uriContext)];
                    case 2:
                        uuid_1 = _a.sent();
                        currentCatalogVersion = catalogVersions.find(function (catalogVersion) { return catalogVersion.uuid === uuid_1; });
                        if (currentCatalogVersion) {
                            this.selectedCatalogVersion = currentCatalogVersion.uuid;
                        }
                        else {
                            this.selectedCatalogVersion = catalogVersions[0].uuid;
                        }
                        this.catalogVersions = catalogVersions;
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ SelectTargetCatalogVersionComponent.prototype.selectionChangeHandler = function () {
        return __awaiter(this, void 0, void 0, function () {
            var catalogVersion, pageExists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.selectedCatalogVersion) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.catalogService.getCatalogVersionByUuid(this.selectedCatalogVersion)];
                    case 1:
                        catalogVersion = _a.sent();
                        return [4 /*yield*/, this.determinePageExists(catalogVersion)];
                    case 2:
                        pageExists = _a.sent();
                        this.onTargetCatalogVersionSelected.emit(catalogVersion);
                        this.catalogVersionContainsPageWithSameLabel = pageExists;
                        this.catalogVersionContainsPageWithSameTypeCode = pageExists;
                        this.cdr.detectChanges();
                        this.updateSelectValidationState();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ SelectTargetCatalogVersionComponent.prototype.determinePageExists = function (catalogVersion) {
        if (this.pageTypeCode === 'ContentPage') {
            return this.determineContentPageWithLabelExists(catalogVersion);
        }
        return this.determinePrimaryPageForLabelExists(catalogVersion);
    };
    SelectTargetCatalogVersionComponent.prototype.determinePageExists.$inject = ["catalogVersion"];
    /* @ngInject */ SelectTargetCatalogVersionComponent.prototype.determineContentPageWithLabelExists = function (catalogVersion) {
        return this.pageFacade.contentPageWithLabelExists(this.pageLabel, catalogVersion.catalogId, catalogVersion.version);
    };
    SelectTargetCatalogVersionComponent.prototype.determineContentPageWithLabelExists.$inject = ["catalogVersion"];
    /* @ngInject */ SelectTargetCatalogVersionComponent.prototype.determinePrimaryPageForLabelExists = function (catalogVersion) {
        var _a;
        var uriContextForSelectedCatalogVersion = (_a = {},
            _a[smarteditcommons.PAGE_CONTEXT_SITE_ID] = catalogVersion.siteId,
            _a[cmscommons.PAGE_CONTEXT_CATALOG] = catalogVersion.catalogId,
            _a[cmscommons.PAGE_CONTEXT_CATALOG_VERSION] = catalogVersion.version,
            _a);
        return this.pageService.primaryPageForPageTypeExists(this.pageTypeCode, uriContextForSelectedCatalogVersion);
    };
    SelectTargetCatalogVersionComponent.prototype.determinePrimaryPageForLabelExists.$inject = ["catalogVersion"];
    /* @ngInject */ SelectTargetCatalogVersionComponent.prototype.updateSelectValidationState = function () {
        if (!this.selectApi) {
            return;
        }
        if (this.catalogVersionContainsPageWithSameLabel ||
            this.catalogVersionContainsPageWithSameTypeCode) {
            this.selectApi.setValidationState(smarteditcommons.VALIDATION_MESSAGE_TYPES.WARNING);
        }
        else {
            this.selectApi.resetValidationState();
        }
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ SelectTargetCatalogVersionComponent.prototype, "uriContext", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ SelectTargetCatalogVersionComponent.prototype, "pageTypeCode", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ SelectTargetCatalogVersionComponent.prototype, "pageLabel", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ SelectTargetCatalogVersionComponent.prototype, "onTargetCatalogVersionSelected", void 0);
    /* @ngInject */ SelectTargetCatalogVersionComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-select-target-catalog-version',
            template: "<div class=\"target-catalog-version-selector-wrapper form-group\"><label for=\"target-catalog-version-selector-id\" class=\"se-control-label\" translate=\"se.cms.clonepagewizard.options.targetcatalogversion.label\"></label><se-select *ngIf=\"!!catalogVersions.length\" id=\"se-catalog-version-selector-dropdown\" [(model)]=\"selectedCatalogVersion\" [fetchStrategy]=\"catalogVersionSelectorFetchStrategy\" [onChange]=\"onSelectionChange\" [searchEnabled]=\"false\" (getApi)=\"setSelectApi($event)\"></se-select><div *ngIf=\"catalogVersionContainsPageWithSameLabel\"><span class=\"help-block\" translate=\"se.cms.clonepagewizard.options.targetcatalogversion.label.exists.message\"></span></div><div *ngIf=\"pageAlreadyExists()\"><span class=\"help-block\" translate=\"se.cms.clonepagewizard.options.targetcatalogversion.pagetype.exists.message\"></span></div></div>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [PageFacade,
            CatalogVersionRestService,
            smarteditcommons.ICatalogService,
            cmscommons.IPageService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ SelectTargetCatalogVersionComponent);
    return /* @ngInject */ SelectTargetCatalogVersionComponent;
}());

var ClonePageBuilder = /** @class */ (function () {
    function ClonePageBuilder(restrictionsStepHandler, basePageUUID, uriContext, contextAwarePageStructureService, typeStructureRestService, cmsitemsRestService, catalogService, pageInfoService) {
        this.restrictionsStepHandler = restrictionsStepHandler;
        this.basePageUUID = basePageUUID;
        this.uriContext = uriContext;
        this.contextAwarePageStructureService = contextAwarePageStructureService;
        this.typeStructureRestService = typeStructureRestService;
        this.cmsitemsRestService = cmsitemsRestService;
        this.catalogService = catalogService;
        this.pageInfoService = pageInfoService;
        this.basePage = {};
        this.pageData = {};
        this.pageInfoStructure = {};
        this.basePageInfoAvailable = false;
        this.componentCloneOption = '';
    }
    ClonePageBuilder.prototype.getPageTypeCode = function () {
        return this.pageData.typeCode;
    };
    ClonePageBuilder.prototype.getPageTemplate = function () {
        return this.pageData.template;
    };
    ClonePageBuilder.prototype.getPageLabel = function () {
        return this.pageData.label;
    };
    ClonePageBuilder.prototype.getBasePageUuid = function () {
        return this.basePage.uuid;
    };
    ClonePageBuilder.prototype.getPageInfo = function () {
        return this.pageData;
    };
    ClonePageBuilder.prototype.getBasePageInfo = function () {
        return this.basePage;
    };
    ClonePageBuilder.prototype.getPageProperties = function () {
        return {
            type: this.pageData.type,
            typeCode: this.pageData.typeCode,
            template: this.pageData.template,
            onlyOneRestrictionMustApply: this.pageData.onlyOneRestrictionMustApply,
            catalogVersion: this.pageData.catalogVersion
        };
    };
    ClonePageBuilder.prototype.getPageInfoStructure = function () {
        return this.pageInfoStructure;
    };
    ClonePageBuilder.prototype.getPageRestrictions = function () {
        return this.pageData.restrictions || [];
    };
    ClonePageBuilder.prototype.getComponentCloneOption = function () {
        return this.componentCloneOption;
    };
    ClonePageBuilder.prototype.displayConditionSelected = function (displayConditionResult) {
        return __awaiter(this, void 0, void 0, function () {
            var isPrimaryPage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isPrimaryPage = displayConditionResult.isPrimary;
                        this.pageData.defaultPage = isPrimaryPage;
                        this.pageData.homepage = displayConditionResult.homepage;
                        if (isPrimaryPage) {
                            this.pageData.label = this.basePage.label;
                            if (this.pageData.restrictions) {
                                delete this.pageData.restrictions;
                            }
                            this.restrictionsStepHandler.hideStep();
                        }
                        else {
                            this.pageData.label = displayConditionResult.primaryPage
                                ? displayConditionResult.primaryPage.label
                                : '';
                            this.restrictionsStepHandler.showStep();
                        }
                        this.pageData.uid = '';
                        return [4 /*yield*/, this.updatePageInfoFields()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ClonePageBuilder.prototype.onTargetCatalogVersionSelected = function (targetCatalogVersion) {
        this.targetCatalogVersion = targetCatalogVersion;
        this.pageData.catalogVersion = targetCatalogVersion.uuid;
    };
    ClonePageBuilder.prototype.componentCloneOptionSelected = function (cloneOptionResult) {
        this.componentCloneOption = cloneOptionResult;
    };
    ClonePageBuilder.prototype.restrictionsSelected = function (onlyOneRestrictionMustApply, restrictions) {
        this.pageData.onlyOneRestrictionMustApply = onlyOneRestrictionMustApply;
        this.pageData.restrictions = restrictions;
    };
    ClonePageBuilder.prototype.getTargetCatalogVersion = function () {
        return this.targetCatalogVersion;
    };
    ClonePageBuilder.prototype.isBasePageInfoAvailable = function () {
        return this.basePageInfoAvailable;
    };
    ClonePageBuilder.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageUUID, uuid, page, structure;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPageUUID(this.basePageUUID)];
                    case 1:
                        pageUUID = _a.sent();
                        return [4 /*yield*/, this.catalogService.getCatalogVersionUUid(this.uriContext)];
                    case 2:
                        uuid = _a.sent();
                        return [4 /*yield*/, this.cmsitemsRestService.getById(pageUUID)];
                    case 3:
                        page = _a.sent();
                        this.basePage = lodash.cloneDeep(page);
                        this.pageData = lodash.cloneDeep(this.basePage);
                        this.pageData.catalogVersion = uuid;
                        this.pageData.pageUuid = this.basePage.uuid;
                        delete this.pageData.uuid;
                        this.basePageInfoAvailable = true;
                        this.pageData.template = this.basePage.masterTemplateId;
                        return [4 /*yield*/, this.typeStructureRestService.getStructureByTypeAndMode(this.pageData.typeCode, 'DEFAULT', true)];
                    case 4:
                        structure = (_a.sent());
                        this.pageData.type = structure.type;
                        return [2 /*return*/];
                }
            });
        });
    };
    ClonePageBuilder.prototype.getPageUUID = function (pageUUID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, !smarteditcommons.stringUtils.isBlank(pageUUID) ? pageUUID : this.pageInfoService.getPageUUID()];
            });
        });
    };
    ClonePageBuilder.prototype.updatePageInfoFields = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageInfoFields;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof this.pageData.defaultPage === 'undefined') {
                            return [2 /*return*/];
                        }
                        if (!this.pageData.typeCode) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.contextAwarePageStructureService.getPageStructureForNewPage(this.pageData.typeCode, this.pageData.defaultPage)];
                    case 1:
                        pageInfoFields = _a.sent();
                        this.pageInfoStructure = pageInfoFields;
                        return [3 /*break*/, 3];
                    case 2:
                        this.pageInfoStructure = {};
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return ClonePageBuilder;
}());
var /* @ngInject */ ClonePageBuilderFactory = /** @class */ (function () {
    ClonePageBuilderFactory.$inject = ["contextAwarePageStructureService", "typeStructureRestService", "cmsitemsRestService", "catalogService", "pageInfoService", "pageService"];
    function /* @ngInject */ ClonePageBuilderFactory(contextAwarePageStructureService, typeStructureRestService, cmsitemsRestService, catalogService, pageInfoService, pageService) {
        this.contextAwarePageStructureService = contextAwarePageStructureService;
        this.typeStructureRestService = typeStructureRestService;
        this.cmsitemsRestService = cmsitemsRestService;
        this.catalogService = catalogService;
        this.pageInfoService = pageInfoService;
        this.pageService = pageService;
    }
    /* @ngInject */ ClonePageBuilderFactory.prototype.createClonePageBuilder = function (restrictionsStepHandler, basePageUUID, uriContext) {
        return new ClonePageBuilder(restrictionsStepHandler, basePageUUID, uriContext, this.contextAwarePageStructureService, this.typeStructureRestService, this.cmsitemsRestService, this.catalogService, this.pageInfoService);
    };
    ClonePageBuilderFactory.prototype.createClonePageBuilder.$inject = ["restrictionsStepHandler", "basePageUUID", "uriContext"];
    /* @ngInject */ ClonePageBuilderFactory = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [ContextAwarePageStructureService,
            TypeStructureRestService,
            cmscommons.CmsitemsRestService,
            smarteditcommons.ICatalogService,
            smarteditcommons.IPageInfoService,
            cmscommons.IPageService])
    ], /* @ngInject */ ClonePageBuilderFactory);
    return /* @ngInject */ ClonePageBuilderFactory;
}());

window.__smartedit__.addDecoratorPayload("Component", "ClonePageAlertComponent", {
    selector: 'se-clone-page-alert',
    template: "\n        <se-actionable-alert\n            [description]=\"description\"\n            [descriptionDetails]=\"descriptionDetails\"\n            [hyperlinkLabel]=\"hyperlinkLabel\"\n            (hyperLinkClick)=\"onClick()\"\n        ></se-actionable-alert>\n    ",
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    providers: [smarteditcommons.L10nPipe]
});
var /* @ngInject */ ClonePageAlertComponent = /** @class */ (function () {
    ClonePageAlertComponent.$inject = ["alertRef", "experienceService", "cdr", "l10n"];
    function /* @ngInject */ ClonePageAlertComponent(alertRef, experienceService, cdr, l10n) {
        this.alertRef = alertRef;
        this.experienceService = experienceService;
        this.cdr = cdr;
        this.l10n = l10n;
        this.description = 'se.cms.clonepage.alert.info.description';
        this.hyperlinkLabel = 'se.cms.clonepage.alert.info.hyperlink';
    }
    /* @ngInject */ ClonePageAlertComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        (_c = this.alertRef.data, this.clonedPageInfo = _c.clonedPageInfo, this.catalogVersion = _c.catalogVersion);
                        this.description = 'se.cms.clonepage.alert.info.description';
                        _a = this;
                        _b = {};
                        return [4 /*yield*/, this.getTranslatedName(this.catalogVersion.catalogName)];
                    case 1:
                        _a.descriptionDetails = (_b.catalogName = _d.sent(),
                            _b.catalogVersion = this.catalogVersion.version,
                            _b);
                        this.hyperlinkLabel = 'se.cms.clonepage.alert.info.hyperlink';
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ ClonePageAlertComponent.prototype.onClick = function () {
        if (smarteditcommons.stringUtils.isBlank(this.clonedPageInfo.uid)) {
            throw new Error("ClonePageAlertService.displayClonePageAlert - missing required parameter 'uid'");
        }
        this.experienceService.loadExperience({
            siteId: this.catalogVersion.siteId,
            catalogId: this.catalogVersion.catalogId,
            catalogVersion: this.catalogVersion.version,
            pageId: this.clonedPageInfo.uid
        });
    };
    /* @ngInject */ ClonePageAlertComponent.prototype.getTranslatedName = function (name) {
        return this.l10n.transform(name).pipe(operators.take(1)).toPromise();
    };
    ClonePageAlertComponent.prototype.getTranslatedName.$inject = ["name"];
    /* @ngInject */ ClonePageAlertComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-clone-page-alert',
            template: "\n        <se-actionable-alert\n            [description]=\"description\"\n            [descriptionDetails]=\"descriptionDetails\"\n            [hyperlinkLabel]=\"hyperlinkLabel\"\n            (hyperLinkClick)=\"onClick()\"\n        ></se-actionable-alert>\n    ",
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            providers: [smarteditcommons.L10nPipe]
        }),
        __metadata("design:paramtypes", [core$2.AlertRef,
            smarteditcommons.IExperienceService,
            core.ChangeDetectorRef,
            smarteditcommons.L10nPipe])
    ], /* @ngInject */ ClonePageAlertComponent);
    return /* @ngInject */ ClonePageAlertComponent;
}());

var /* @ngInject */ ClonePageAlertService = /** @class */ (function () {
    ClonePageAlertService.$inject = ["actionableAlertService", "catalogService"];
    function /* @ngInject */ ClonePageAlertService(actionableAlertService, catalogService) {
        this.actionableAlertService = actionableAlertService;
        this.catalogService = catalogService;
    }
    /**
     * Displays an alert containing an hyperlink allowing for the user
     * to navigate to the newly cloned page.
     */
    /* @ngInject */ ClonePageAlertService.prototype.displayClonePageAlert = function (clonedPageInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var catalogVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.getCatalogVersionByUuid(clonedPageInfo.catalogVersion)];
                    case 1:
                        catalogVersion = _a.sent();
                        return [2 /*return*/, this.actionableAlertService.displayActionableAlert({
                                component: ClonePageAlertComponent,
                                mousePersist: true,
                                data: {
                                    catalogVersion: catalogVersion,
                                    clonedPageInfo: clonedPageInfo
                                }
                            })];
                }
            });
        });
    };
    ClonePageAlertService.prototype.displayClonePageAlert.$inject = ["clonedPageInfo"];
    /* @ngInject */ ClonePageAlertService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [ActionableAlertService,
            smarteditcommons.ICatalogService])
    ], /* @ngInject */ ClonePageAlertService);
    return /* @ngInject */ ClonePageAlertService;
}());

window.__smartedit__.addDecoratorPayload("Component", "ClonePageOptionsStepComponent", {
    selector: 'se-clone-page-options-step',
    template: "\n        <se-event-message\n            class=\"existing-homepage__ymessage\"\n            [showEvent]=\"'CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO'\"\n            [hideEvent]=\"'CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO'\"\n        >\n        </se-event-message>\n\n        <se-select-target-catalog-version\n            *ngIf=\"wizardApi.isBasePageInfoAvailable()\"\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            [pageLabel]=\"wizardApi.getPageLabel()\"\n            [uriContext]=\"wizardApi.uriContext\"\n            (onTargetCatalogVersionSelected)=\"wizardApi.onTargetCatalogVersionSelected($event)\"\n        >\n        </se-select-target-catalog-version>\n        <se-new-page-display-condition\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            [uriContext]=\"wizardApi.uriContext\"\n            [resultFn]=\"wizardApi.variationResult\"\n            [initialConditionSelectedKey]=\"'page.displaycondition.variation'\"\n            [pageUuid]=\"wizardApi.getBasePageUuid()\"\n            [targetCatalogVersion]=\"wizardApi.getTargetCatalogVersion()\"\n        >\n        </se-new-page-display-condition>\n\n        <se-component-clone-option-form\n            (onSelectionChange)=\"wizardApi.triggerUpdateCloneOptionResult($event)\"\n        ></se-component-clone-option-form>\n    "
});
var /* @ngInject */ ClonePageOptionsStepComponent = /** @class */ (function () {
    ClonePageOptionsStepComponent.$inject = ["wizardApi"];
    function /* @ngInject */ ClonePageOptionsStepComponent(wizardApi) {
        this.wizardApi = wizardApi;
    }
    /* @ngInject */ ClonePageOptionsStepComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-clone-page-options-step',
            template: "\n        <se-event-message\n            class=\"existing-homepage__ymessage\"\n            [showEvent]=\"'CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO'\"\n            [hideEvent]=\"'CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO'\"\n        >\n        </se-event-message>\n\n        <se-select-target-catalog-version\n            *ngIf=\"wizardApi.isBasePageInfoAvailable()\"\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            [pageLabel]=\"wizardApi.getPageLabel()\"\n            [uriContext]=\"wizardApi.uriContext\"\n            (onTargetCatalogVersionSelected)=\"wizardApi.onTargetCatalogVersionSelected($event)\"\n        >\n        </se-select-target-catalog-version>\n        <se-new-page-display-condition\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            [uriContext]=\"wizardApi.uriContext\"\n            [resultFn]=\"wizardApi.variationResult\"\n            [initialConditionSelectedKey]=\"'page.displaycondition.variation'\"\n            [pageUuid]=\"wizardApi.getBasePageUuid()\"\n            [targetCatalogVersion]=\"wizardApi.getTargetCatalogVersion()\"\n        >\n        </se-new-page-display-condition>\n\n        <se-component-clone-option-form\n            (onSelectionChange)=\"wizardApi.triggerUpdateCloneOptionResult($event)\"\n        ></se-component-clone-option-form>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.WIZARD_API)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ ClonePageOptionsStepComponent);
    return /* @ngInject */ ClonePageOptionsStepComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "ClonePageRestrictionsStepComponent", {
    selector: 'se-clone-page-options-step',
    template: "\n        <span *ngIf=\"wizardApi.isRestrictionsActive()\" class=\"se-clone-page-restriction-step\">\n            <div *ngIf=\"wizardApi.getPageRestrictions().length > 1\">\n                <se-page-restrictions-info-message></se-page-restrictions-info-message>\n            </div>\n\n            <se-restrictions-editor\n                [editable]=\"true\"\n                [(resetFn)]=\"wizardApi.restrictionsEditorFunctionBindings.reset\"\n                [(cancelFn)]=\"wizardApi.restrictionsEditorFunctionBindings.cancel\"\n                [(isDirtyFn)]=\"wizardApi.restrictionsEditorFunctionBindings.isDirty\"\n                (onRestrictionsChange)=\"wizardApi.restrictionsResult($event)\"\n                [getRestrictionTypes]=\"wizardApi.getRestrictionTypes\"\n                [getSupportedRestrictionTypes]=\"wizardApi.getSupportedRestrictionTypes\"\n                [item]=\"wizardApi.getBasePageInfo()\"\n                [restrictionUuids]=\"wizardApi.getPageRestrictions()\"\n            >\n            </se-restrictions-editor>\n        </span>\n    "
});
var /* @ngInject */ ClonePageRestrictionsStepComponent = /** @class */ (function () {
    ClonePageRestrictionsStepComponent.$inject = ["wizardApi"];
    function /* @ngInject */ ClonePageRestrictionsStepComponent(wizardApi) {
        this.wizardApi = wizardApi;
    }
    /* @ngInject */ ClonePageRestrictionsStepComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-clone-page-options-step',
            template: "\n        <span *ngIf=\"wizardApi.isRestrictionsActive()\" class=\"se-clone-page-restriction-step\">\n            <div *ngIf=\"wizardApi.getPageRestrictions().length > 1\">\n                <se-page-restrictions-info-message></se-page-restrictions-info-message>\n            </div>\n\n            <se-restrictions-editor\n                [editable]=\"true\"\n                [(resetFn)]=\"wizardApi.restrictionsEditorFunctionBindings.reset\"\n                [(cancelFn)]=\"wizardApi.restrictionsEditorFunctionBindings.cancel\"\n                [(isDirtyFn)]=\"wizardApi.restrictionsEditorFunctionBindings.isDirty\"\n                (onRestrictionsChange)=\"wizardApi.restrictionsResult($event)\"\n                [getRestrictionTypes]=\"wizardApi.getRestrictionTypes\"\n                [getSupportedRestrictionTypes]=\"wizardApi.getSupportedRestrictionTypes\"\n                [item]=\"wizardApi.getBasePageInfo()\"\n                [restrictionUuids]=\"wizardApi.getPageRestrictions()\"\n            >\n            </se-restrictions-editor>\n        </span>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.WIZARD_API)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ ClonePageRestrictionsStepComponent);
    return /* @ngInject */ ClonePageRestrictionsStepComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "ClonePageInfoStepComponent", {
    selector: 'se-clone-page-info-step',
    template: "\n        <se-component-clone-info-form\n            *ngIf=\"wizardApi.isPageInfoActive()\"\n            [structure]=\"wizardApi.getPageInfoStructure()\"\n            [content]=\"wizardApi.getPageInfo()\"\n            [(submit)]=\"wizardApi.callbacks.savePageInfo\"\n            [(reset)]=\"wizardApi.callbacks.resetPageInfo\"\n            [(isDirty)]=\"wizardApi.callbacks.isDirtyPageInfo\"\n            [(isValid)]=\"wizardApi.callbacks.isValidPageInfo\"\n            [pageTemplate]=\"wizardApi.getPageTemplate()\"\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            [uriContext]=\"wizardApi.uriContext\"\n            [targetCatalogVersion]=\"wizardApi.getTargetCatalogVersion()\"\n        >\n        </se-component-clone-info-form>\n    "
});
var /* @ngInject */ ClonePageInfoStepComponent = /** @class */ (function () {
    ClonePageInfoStepComponent.$inject = ["wizardApi"];
    function /* @ngInject */ ClonePageInfoStepComponent(wizardApi) {
        this.wizardApi = wizardApi;
    }
    /* @ngInject */ ClonePageInfoStepComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-clone-page-info-step',
            template: "\n        <se-component-clone-info-form\n            *ngIf=\"wizardApi.isPageInfoActive()\"\n            [structure]=\"wizardApi.getPageInfoStructure()\"\n            [content]=\"wizardApi.getPageInfo()\"\n            [(submit)]=\"wizardApi.callbacks.savePageInfo\"\n            [(reset)]=\"wizardApi.callbacks.resetPageInfo\"\n            [(isDirty)]=\"wizardApi.callbacks.isDirtyPageInfo\"\n            [(isValid)]=\"wizardApi.callbacks.isValidPageInfo\"\n            [pageTemplate]=\"wizardApi.getPageTemplate()\"\n            [pageTypeCode]=\"wizardApi.getPageTypeCode()\"\n            [uriContext]=\"wizardApi.uriContext\"\n            [targetCatalogVersion]=\"wizardApi.getTargetCatalogVersion()\"\n        >\n        </se-component-clone-info-form>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.WIZARD_API)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ ClonePageInfoStepComponent);
    return /* @ngInject */ ClonePageInfoStepComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "ClonePageWizardComponent", {
    selector: 'se-clone-page-wizard',
    template: ''
});
var /* @ngInject */ ClonePageWizardComponent = /** @class */ (function () {
    ClonePageWizardComponent.$inject = ["wizardManager", "clonePageBuilderFactory", "restrictionsStepHandlerFactory", "experienceService", "confirmationModalService", "systemEventService", "restrictionTypesService", "restrictionsService", "sharedDataService", "clonePageAlertService", "alertService", "pageFacade", "syncPollingService"];
    function /* @ngInject */ ClonePageWizardComponent(wizardManager, clonePageBuilderFactory, restrictionsStepHandlerFactory, experienceService, confirmationModalService, systemEventService, restrictionTypesService, restrictionsService, sharedDataService, clonePageAlertService, alertService, pageFacade, syncPollingService) {
        var _this = this;
        this.wizardManager = wizardManager;
        this.clonePageBuilderFactory = clonePageBuilderFactory;
        this.restrictionsStepHandlerFactory = restrictionsStepHandlerFactory;
        this.experienceService = experienceService;
        this.confirmationModalService = confirmationModalService;
        this.systemEventService = systemEventService;
        this.restrictionTypesService = restrictionTypesService;
        this.restrictionsService = restrictionsService;
        this.sharedDataService = sharedDataService;
        this.clonePageAlertService = clonePageAlertService;
        this.alertService = alertService;
        this.pageFacade = pageFacade;
        this.syncPollingService = syncPollingService;
        // Enumerable methods
        // This way of defining method creates a public field in class instead of prototype method
        // which allows then to be reassigned/extended in ModalWizardTemplateComponent#assignAngularController
        this.getWizardConfig = function () { return ({
            isFormValid: function (stepId) { return _this.isFormValid(stepId); },
            onNext: function () { return _this.onNext(); },
            onDone: function () { return _this.onDone(); },
            onCancel: function () { return _this.onCancel(); },
            steps: [
                {
                    id: _this.CLONE_PAGE_WIZARD_STEPS.PAGE_CLONE_OPTIONS,
                    name: 'se.cms.clonepagewizard.pagecloneoptions.tabname',
                    title: 'se.cms.clonepagewizard.pageclone.title',
                    component: ClonePageOptionsStepComponent
                },
                {
                    id: _this.CLONE_PAGE_WIZARD_STEPS.PAGE_INFO,
                    name: 'se.cms.clonepagewizard.pageinfo.tabname',
                    title: 'se.cms.clonepagewizard.pageclone.title',
                    component: ClonePageInfoStepComponent
                }
            ]
        }); };
        this.getRestrictionTypes = function () {
            return _this.restrictionTypesService.getRestrictionTypesByPageType(_this.getPageTypeCode());
        };
        this.getSupportedRestrictionTypes = function () {
            return _this.restrictionsService.getSupportedRestrictionTypeCodes();
        };
        this.variationResult = function (displayConditionResult) {
            _this.infoChanged = true;
            _this.pageBuilder.displayConditionSelected(displayConditionResult);
        };
        this.basePageUUID = this.wizardManager.properties.basePageUUID;
        this.callbacks = {};
        this.uriContext = this.wizardManager.properties.uriContext;
        this.restrictionStepProperties = {
            id: 'restrictionsStepId',
            name: 'se.cms.restrictions.editor.tab',
            title: 'se.cms.clonepagewizard.pageclone.title',
            component: ClonePageRestrictionsStepComponent
        };
        // bound in the view for restrictions step
        var restrictionsEditorFunctionBindingsClosure = {};
        this.restrictionsEditorFunctionBindings = restrictionsEditorFunctionBindingsClosure;
        this.cloneInProgress = false;
        this.infoChanged = true;
        this.typeChanged = true;
        this.restrictionsStepHandler = this.restrictionsStepHandlerFactory.createRestrictionsStepHandler(this.wizardManager, this.restrictionsEditorFunctionBindings, this.restrictionStepProperties);
        this.pageBuilder = this.clonePageBuilderFactory.createClonePageBuilder(this.restrictionsStepHandler, this.basePageUUID, this.uriContext);
        this.pageBuilder.init();
        this.CLONE_PAGE_WIZARD_STEPS = {
            PAGE_CLONE_OPTIONS: 'cloneOptions',
            PAGE_INFO: 'pageInfo',
            PAGE_RESTRICTIONS: this.restrictionStepProperties.id
        };
    }
    // Class Methods
    /* @ngInject */ ClonePageWizardComponent.prototype.getPageTypeCode = function () {
        return this.pageBuilder.getPageTypeCode();
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.getPageLabel = function () {
        return this.pageBuilder.getPageLabel();
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.getBasePageUuid = function () {
        return this.pageBuilder.getBasePageUuid();
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.getPageTemplate = function () {
        return this.pageBuilder.getPageTemplate();
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.getPageInfo = function () {
        var page = this.pageBuilder.getPageInfo();
        page.uriContext = this.uriContext;
        return page;
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.getBasePageInfo = function () {
        var page = this.pageBuilder.getBasePageInfo();
        page.uriContext = this.uriContext;
        return page;
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.getPageRestrictions = function () {
        return this.pageBuilder.getPageRestrictions();
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.onTargetCatalogVersionSelected = function (catalogVersion) {
        this.pageBuilder.onTargetCatalogVersionSelected(catalogVersion);
    };
    ClonePageWizardComponent.prototype.onTargetCatalogVersionSelected.$inject = ["catalogVersion"];
    /* @ngInject */ ClonePageWizardComponent.prototype.triggerUpdateCloneOptionResult = function (cloneOptionResult) {
        this.pageBuilder.componentCloneOptionSelected(cloneOptionResult);
    };
    ClonePageWizardComponent.prototype.triggerUpdateCloneOptionResult.$inject = ["cloneOptionResult"];
    /* @ngInject */ ClonePageWizardComponent.prototype.getPageInfoStructure = function () {
        return this.pageBuilder.getPageInfoStructure();
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.restrictionsResult = function (data) {
        this.pageBuilder.restrictionsSelected(data.onlyOneRestrictionMustApply, data.restrictionUuids);
    };
    ClonePageWizardComponent.prototype.restrictionsResult.$inject = ["data"];
    /* @ngInject */ ClonePageWizardComponent.prototype.isRestrictionsActive = function () {
        if (!this.typeChanged ||
            this.wizardManager.getCurrentStepId() === this.CLONE_PAGE_WIZARD_STEPS.PAGE_RESTRICTIONS) {
            this.typeChanged = false;
            return true;
        }
        return false;
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.isPageInfoActive = function () {
        if (!this.infoChanged ||
            this.wizardManager.getCurrentStepId() === this.CLONE_PAGE_WIZARD_STEPS.PAGE_INFO) {
            this.infoChanged = false;
            return true;
        }
        return false;
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.getTargetCatalogVersion = function () {
        return this.pageBuilder.getTargetCatalogVersion();
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.isBasePageInfoAvailable = function () {
        return this.pageBuilder.isBasePageInfoAvailable();
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.onCancel = function () {
        return this.confirmationModalService.confirm({
            description: 'se.editor.cancel.confirm'
        });
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.isFormValid = function (stepId) {
        switch (stepId) {
            case this.CLONE_PAGE_WIZARD_STEPS.PAGE_CLONE_OPTIONS:
                // This step has no required inputs. However we set the valid status as soon as the data is fetched
                // to avoid modal NEXT button enabled status to be true before content is actually loaded.
                return this.isBasePageInfoAvailable();
            case this.CLONE_PAGE_WIZARD_STEPS.PAGE_INFO:
                return (!this.cloneInProgress &&
                    !!this.callbacks.isValidPageInfo &&
                    this.callbacks.isValidPageInfo());
            case this.CLONE_PAGE_WIZARD_STEPS.PAGE_RESTRICTIONS:
                return !this.cloneInProgress && this.pageBuilder.getPageRestrictions().length > 0;
        }
        return false;
    };
    ClonePageWizardComponent.prototype.isFormValid.$inject = ["stepId"];
    /* @ngInject */ ClonePageWizardComponent.prototype.onNext = function () {
        return true;
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.onDone = function () {
        return __awaiter(this, void 0, void 0, function () {
            var page, payload, experience, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.cloneInProgress = true;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 5, , 6]);
                        return [4 /*yield*/, this.callbacks.savePageInfo()];
                    case 2:
                        page = _b.sent();
                        payload = this.preparePagePayload(page);
                        if (this.pageBuilder.getTargetCatalogVersion()) {
                            payload.siteId = this.pageBuilder.getTargetCatalogVersion().siteId;
                            payload.catalogId = this.pageBuilder.getTargetCatalogVersion().catalogId;
                            payload.version = this.pageBuilder.getTargetCatalogVersion().version;
                        }
                        return [4 /*yield*/, this.sharedDataService.get(smarteditcommons.EXPERIENCE_STORAGE_KEY)];
                    case 3:
                        experience = (_b.sent());
                        return [4 /*yield*/, this.createPage(payload, experience)];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        _a = _b.sent();
                        // re-enable the button
                        this.cloneInProgress = false;
                        // prevent closing modal when there's an error
                        return [2 /*return*/, Promise.reject()];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ ClonePageWizardComponent.prototype.createPage = function (payload, experience) {
        return __awaiter(this, void 0, void 0, function () {
            var response, exception_1, errors;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.pageFacade.createPageForSite(payload, payload.siteId)];
                    case 1:
                        response = _a.sent();
                        this.syncPollingService.getSyncStatus(payload.pageUuid, this.uriContext, true);
                        if (experience.catalogDescriptor.catalogVersionUuid === response.catalogVersion) {
                            this.experienceService.loadExperience({
                                siteId: payload.siteId,
                                catalogId: payload.catalogId,
                                catalogVersion: payload.version,
                                pageId: response.uid
                            });
                        }
                        else {
                            this.clonePageAlertService.displayClonePageAlert(response);
                        }
                        return [2 /*return*/, this.alertService.showSuccess({
                                message: 'se.cms.clonepage.alert.success'
                            })];
                    case 2:
                        exception_1 = _a.sent();
                        this.cloneInProgress = false; // re-enable the button
                        this.systemEventService.publishAsync(smarteditcommons.GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, {
                            messages: exception_1.error.errors
                        });
                        errors = exception_1.error.errors;
                        if (!errors.find(function (error) { return error.subject.indexOf('restrictions') === 0; })) {
                            this.wizardManager.goToStepWithId(this.CLONE_PAGE_WIZARD_STEPS.PAGE_INFO);
                        }
                        return [2 /*return*/, Promise.reject()];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ClonePageWizardComponent.prototype.createPage.$inject = ["payload", "experience"];
    /* @ngInject */ ClonePageWizardComponent.prototype.preparePagePayload = function (page) {
        var newClonePage = lodash.cloneDeep(page);
        // set page info properties
        lodash.merge(newClonePage, this.pageBuilder.getPageProperties());
        // set clone option
        newClonePage.cloneComponents = this.pageBuilder.getComponentCloneOption() === 'clone';
        newClonePage.itemtype = page.typeCode;
        // set linkComponents to [].
        // As when clone page,
        // the link component should remain refer to old page.
        if (newClonePage.linkComponents && newClonePage.linkComponents.length > 0) {
            newClonePage.linkComponents = [];
        }
        if (this.isRestrictionsActive()) {
            // set restrictions
            newClonePage.restrictions = this.pageBuilder.getPageRestrictions();
        }
        return newClonePage;
    };
    ClonePageWizardComponent.prototype.preparePagePayload.$inject = ["page"];
    /* @ngInject */ ClonePageWizardComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-clone-page-wizard',
            template: ''
        }),
        __param(0, core.Inject(smarteditcommons.WIZARD_MANAGER)),
        __metadata("design:paramtypes", [smarteditcommons.WizardService,
            ClonePageBuilderFactory,
            RestrictionsStepHandlerFactory,
            smarteditcommons.IExperienceService,
            smarteditcommons.IConfirmationModalService,
            smarteditcommons.SystemEventService,
            RestrictionTypesService,
            RestrictionsService,
            smarteditcommons.ISharedDataService,
            ClonePageAlertService,
            smarteditcommons.IAlertService,
            PageFacade,
            cmscommons.ISyncPollingService])
    ], /* @ngInject */ ClonePageWizardComponent);
    return /* @ngInject */ ClonePageWizardComponent;
}());

var /* @ngInject */ ClonePageWizardService = /** @class */ (function () {
    ClonePageWizardService.$inject = ["modalWizard", "catalogService", "pageFacade"];
    function /* @ngInject */ ClonePageWizardService(modalWizard, catalogService, pageFacade) {
        this.modalWizard = modalWizard;
        this.catalogService = catalogService;
        this.pageFacade = pageFacade;
    }
    /**
     * When called, this method opens a modal window containing a wizard to clone an existing page.
     *
     * @param pageData An object containing the pageData when the clone page wizard is opened from the page list.
     * @returns A promise that will resolve when the modal wizard is closed or reject if it's canceled.
     *
     */
    /* @ngInject */ ClonePageWizardService.prototype.openClonePageWizard = function (pageData) {
        return __awaiter(this, void 0, void 0, function () {
            var uriContext, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!pageData) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.catalogService.retrieveUriContext()];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.pageFacade.retrievePageUriContext()];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        uriContext = _a;
                        return [2 /*return*/, this.modalWizard.open({
                                component: ClonePageWizardComponent,
                                properties: {
                                    uriContext: uriContext,
                                    basePageUUID: pageData ? pageData.uuid : undefined
                                }
                            })];
                }
            });
        });
    };
    ClonePageWizardService.prototype.openClonePageWizard.$inject = ["pageData"];
    /* @ngInject */ ClonePageWizardService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.ModalWizard,
            smarteditcommons.ICatalogService,
            PageFacade])
    ], /* @ngInject */ ClonePageWizardService);
    return /* @ngInject */ ClonePageWizardService;
}());

window.__smartedit__.addDecoratorPayload("Component", "ComponentCloneInfoFormComponent", {
    selector: 'se-component-clone-info-form',
    template: "<se-message *ngIf=\"catalogVersionContainsPageWithSameTypeCode\" type=\"warning\"><span se-message-description translate=\"se.cms.clonepagewizard.pageinfo.targetcatalogversion.pagetype.exists.message\" [translateParams]=\"{ typeCode: pageTypeCode }\"></span></se-message><se-generic-editor [id]=\"genericEditorId\" [structure]=\"structure\" [content]=\"content\" [(submit)]=\"submitInternal\" [(reset)]=\"resetInternal\" [(isDirty)]=\"isDirtyInternal\" [(isValid)]=\"isValidInternal\" (getApi)=\"setGenericEditorApi($event)\"></se-generic-editor>"
});
var /* @ngInject */ ComponentCloneInfoFormComponent = /** @class */ (function () {
    ComponentCloneInfoFormComponent.$inject = ["translateService", "languageService", "pageFacade", "pageService", "systemEventService"];
    function /* @ngInject */ ComponentCloneInfoFormComponent(translateService, languageService, pageFacade, pageService, systemEventService) {
        this.translateService = translateService;
        this.languageService = languageService;
        this.pageFacade = pageFacade;
        this.pageService = pageService;
        this.systemEventService = systemEventService;
        this.genericEditorId = 'COMPONENT_CLONE_INFO_FORM_GENERIC_ID';
        this.isDirtyChange = new core.EventEmitter();
        this.isValidChange = new core.EventEmitter();
        this.submitChange = new core.EventEmitter();
        this.resetChange = new core.EventEmitter();
    }
    /* @ngInject */ ComponentCloneInfoFormComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uriContextForSelectedCatalogVersion, pageExists;
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.pageLabel = null;
                        this.catalogVersionContainsPageWithSameTypeCode = false;
                        if (!(this.pageTypeCode !== 'ContentPage' &&
                            this.targetCatalogVersion &&
                            !this.isUriContextEqualToCatalogVersion(this.uriContext, this.targetCatalogVersion))) return [3 /*break*/, 2];
                        uriContextForSelectedCatalogVersion = (_a = {},
                            _a[smarteditcommons.PAGE_CONTEXT_SITE_ID] = this.targetCatalogVersion.siteId,
                            _a[cmscommons.PAGE_CONTEXT_CATALOG] = this.targetCatalogVersion.catalogId,
                            _a[cmscommons.PAGE_CONTEXT_CATALOG_VERSION] = this.targetCatalogVersion.version,
                            _a);
                        return [4 /*yield*/, this.pageService.primaryPageForPageTypeExists(this.pageTypeCode, uriContextForSelectedCatalogVersion)];
                    case 1:
                        pageExists = _b.sent();
                        this.catalogVersionContainsPageWithSameTypeCode = pageExists;
                        _b.label = 2;
                    case 2:
                        setTimeout(function () {
                            _this.isDirtyChange.emit(function () { return _this.isDirtyInternal && _this.isDirtyInternal(); });
                            _this.isValidChange.emit(function () { return _this.isValidInternal && _this.isValidInternal(); });
                            _this.submitChange.emit(function () { return _this.submitInternal && _this.submitInternal(); });
                            _this.resetChange.emit(function () { return _this.resetInternal && _this.resetInternal(); });
                        });
                        this.genericEditorLoadEventUnsubscribe = this.systemEventService.subscribe(smarteditcommons.GENERIC_EDITOR_LOADED_EVENT, function (_eventId, editorId) { return _this.handleWarningMessage(editorId); });
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ ComponentCloneInfoFormComponent.prototype.ngOnDestroy = function () {
        if (this.genericEditorLoadEventUnsubscribe) {
            this.genericEditorLoadEventUnsubscribe();
        }
    };
    /* @ngInject */ ComponentCloneInfoFormComponent.prototype.setGenericEditorApi = function (api) {
        var _this = this;
        this.pageInfoEditorApi = api;
        if (this.targetCatalogVersion &&
            !this.isUriContextEqualToCatalogVersion(this.uriContext, this.targetCatalogVersion)) {
            this.pageInfoEditorApi.getLanguages = function () {
                return _this.languageService.getLanguagesForSite(_this.targetCatalogVersion.siteId);
            };
        }
    };
    ComponentCloneInfoFormComponent.prototype.setGenericEditorApi.$inject = ["api"];
    /* @ngInject */ ComponentCloneInfoFormComponent.prototype.isUriContextEqualToCatalogVersion = function (uriContext, catalogVersion) {
        return (uriContext &&
            catalogVersion &&
            catalogVersion.siteId === uriContext.CURRENT_CONTEXT_SITE_ID &&
            catalogVersion.catalogId === uriContext.CURRENT_CONTEXT_CATALOG &&
            catalogVersion.version === uriContext.CURRENT_CONTEXT_CATALOG_VERSION);
    };
    ComponentCloneInfoFormComponent.prototype.isUriContextEqualToCatalogVersion.$inject = ["uriContext", "catalogVersion"];
    /* @ngInject */ ComponentCloneInfoFormComponent.prototype.handleWarningMessage = function (editorId) {
        return __awaiter(this, void 0, void 0, function () {
            var content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (editorId !== this.genericEditorId) {
                            return [2 /*return*/];
                        }
                        if (!(this.pageTypeCode === 'ContentPage' &&
                            this.targetCatalogVersion &&
                            this.pageInfoEditorApi &&
                            !this.isUriContextEqualToCatalogVersion(this.uriContext, this.targetCatalogVersion))) return [3 /*break*/, 2];
                        content = this.pageInfoEditorApi.getContent();
                        if (!(content && content.label !== this.pageLabel)) return [3 /*break*/, 2];
                        this.pageLabel = content.label;
                        return [4 /*yield*/, this.toggleWarningMessage()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ComponentCloneInfoFormComponent.prototype.handleWarningMessage.$inject = ["editorId"];
    /* @ngInject */ ComponentCloneInfoFormComponent.prototype.toggleWarningMessage = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageExists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageFacade.contentPageWithLabelExists(this.pageLabel, this.targetCatalogVersion.catalogId, this.targetCatalogVersion.version)];
                    case 1:
                        pageExists = _a.sent();
                        if (pageExists) {
                            this.systemEventService.publishAsync(smarteditcommons.GENERIC_EDITOR_UNRELATED_VALIDATION_MESSAGES_EVENT, {
                                messages: [
                                    {
                                        subject: 'label',
                                        message: this.translateService.instant('se.cms.clonepagewizard.pageinfo.targetcatalogversion.label.exists.message'),
                                        type: 'Warning'
                                    }
                                ]
                            });
                        }
                        else {
                            this.pageInfoEditorApi.clearMessages();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "content", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "pageTemplate", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "pageTypeCode", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "structure", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "targetCatalogVersion", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "uriContext", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "submit", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "reset", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "isDirty", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Function)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "isValid", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "isDirtyChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "isValidChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "submitChange", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ ComponentCloneInfoFormComponent.prototype, "resetChange", void 0);
    /* @ngInject */ ComponentCloneInfoFormComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-component-clone-info-form',
            template: "<se-message *ngIf=\"catalogVersionContainsPageWithSameTypeCode\" type=\"warning\"><span se-message-description translate=\"se.cms.clonepagewizard.pageinfo.targetcatalogversion.pagetype.exists.message\" [translateParams]=\"{ typeCode: pageTypeCode }\"></span></se-message><se-generic-editor [id]=\"genericEditorId\" [structure]=\"structure\" [content]=\"content\" [(submit)]=\"submitInternal\" [(reset)]=\"resetInternal\" [(isDirty)]=\"isDirtyInternal\" [(isValid)]=\"isValidInternal\" (getApi)=\"setGenericEditorApi($event)\"></se-generic-editor>"
        }),
        __metadata("design:paramtypes", [core$1.TranslateService,
            smarteditcommons.LanguageService,
            PageFacade,
            cmscommons.IPageService,
            smarteditcommons.SystemEventService])
    ], /* @ngInject */ ComponentCloneInfoFormComponent);
    return /* @ngInject */ ComponentCloneInfoFormComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "ComponentCloneOptionFormComponent", {
    selector: 'se-component-clone-option-form',
    template: "<label for=\"components-cloned-selector-id\" class=\"se-control-label\"><span translate=\"se.cms.clonepagewizard.options.title\"></span><se-help><span translate=\"se.cms.clonepagewizard.options.tooltip\"></span></se-help></label><div id=\"components-cloned-selector-id\"><div class=\"se-form-control-row\"><input class=\"components-cloned-option-id fd-form__control\" type=\"radio\" name=\"componentsclone\" id=\"reference-cloning\" [(ngModel)]=\"componentInSlotOption\" (click)=\"updateComponentInSlotOption(CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.REFERENCE_EXISTING)\" [value]=\"CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.REFERENCE_EXISTING\"/> <label for=\"reference-cloning\" translate=\"se.cms.clonepagewizard.options.existing\"></label></div><div class=\"se-form-control-row\"><input class=\"components-cloned-option-id fd-form__control\" type=\"radio\" id=\"deep-cloning\" name=\"componentsclone\" [(ngModel)]=\"componentInSlotOption\" (click)=\"updateComponentInSlotOption(CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.CLONE)\" [value]=\"CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.CLONE\"/> <label for=\"deep-cloning\" translate=\"se.cms.clonepagewizard.options.copies\"></label></div></div>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ ComponentCloneOptionFormComponent = /** @class */ (function () {
    function /* @ngInject */ ComponentCloneOptionFormComponent() {
        this.CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION = {
            REFERENCE_EXISTING: 'reference',
            CLONE: 'clone'
        };
        this.onSelectionChange = new core.EventEmitter();
    }
    /* @ngInject */ ComponentCloneOptionFormComponent.prototype.ngOnInit = function () {
        this.componentInSlotOption = this.CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.REFERENCE_EXISTING;
        this.onSelectionChange.emit(this.componentInSlotOption);
    };
    /* @ngInject */ ComponentCloneOptionFormComponent.prototype.updateComponentInSlotOption = function (option) {
        this.onSelectionChange.emit(option);
    };
    ComponentCloneOptionFormComponent.prototype.updateComponentInSlotOption.$inject = ["option"];
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ ComponentCloneOptionFormComponent.prototype, "onSelectionChange", void 0);
    /* @ngInject */ ComponentCloneOptionFormComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-component-clone-option-form',
            template: "<label for=\"components-cloned-selector-id\" class=\"se-control-label\"><span translate=\"se.cms.clonepagewizard.options.title\"></span><se-help><span translate=\"se.cms.clonepagewizard.options.tooltip\"></span></se-help></label><div id=\"components-cloned-selector-id\"><div class=\"se-form-control-row\"><input class=\"components-cloned-option-id fd-form__control\" type=\"radio\" name=\"componentsclone\" id=\"reference-cloning\" [(ngModel)]=\"componentInSlotOption\" (click)=\"updateComponentInSlotOption(CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.REFERENCE_EXISTING)\" [value]=\"CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.REFERENCE_EXISTING\"/> <label for=\"reference-cloning\" translate=\"se.cms.clonepagewizard.options.existing\"></label></div><div class=\"se-form-control-row\"><input class=\"components-cloned-option-id fd-form__control\" type=\"radio\" id=\"deep-cloning\" name=\"componentsclone\" [(ngModel)]=\"componentInSlotOption\" (click)=\"updateComponentInSlotOption(CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.CLONE)\" [value]=\"CLONE_COMPONENTS_IN_CONTENT_SLOTS_OPTION.CLONE\"/> <label for=\"deep-cloning\" translate=\"se.cms.clonepagewizard.options.copies\"></label></div></div>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [])
    ], /* @ngInject */ ComponentCloneOptionFormComponent);
    return /* @ngInject */ ComponentCloneOptionFormComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "DisplayConditionsPageInfoComponent", {
    selector: 'se-display-conditions-page-info',
    template: "<div class=\"se-edit-page-info__display-conditions\"><div class=\"se-edit-page-info-display-conditions__basic-info\"><div><label class=\"se-control-label\" translate=\"se.cms.pagelist.headerpagename\"></label><div class=\"form-readonly-text form-readonly-text__tight dc-page-name\">{{ pageName }}</div></div><div><label class=\"se-control-label\" translate=\"se.cms.pagelist.headerpagetype\"></label><div class=\"form-readonly-text form-readonly-text__tight dc-page-type\">{{ pageType }}</div></div></div><label class=\"se-control-label\"><span translate=\"se.cms.display.conditions.label\"></span><se-help><span [translate]=\"getPageDisplayConditionDescriptionI18nKey()\"></span></se-help></label><p class=\"form-readonly-text form-readonly-text__tight dc-page-display-condition\" [translate]=\"getPageDisplayConditionI18nKey()\"></p></div>",
    styles: [".se-edit-page-info__display-conditions{margin-bottom:16px}.se-edit-page-info-display-conditions__basic-info{display:grid;grid-template-columns:repeat(2,1fr);margin-bottom:16px}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ DisplayConditionsPageInfoComponent = /** @class */ (function () {
    function /* @ngInject */ DisplayConditionsPageInfoComponent() {
    }
    /* @ngInject */ DisplayConditionsPageInfoComponent.prototype.getPageDisplayConditionI18nKey = function () {
        return this.isPrimary
            ? 'se.cms.display.conditions.primary.id'
            : 'se.cms.display.conditions.variation.id';
    };
    /* @ngInject */ DisplayConditionsPageInfoComponent.prototype.getPageDisplayConditionDescriptionI18nKey = function () {
        return this.isPrimary
            ? 'se.cms.display.conditions.primary.description'
            : 'se.cms.display.conditions.variation.description';
    };
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ DisplayConditionsPageInfoComponent.prototype, "isPrimary", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ DisplayConditionsPageInfoComponent.prototype, "pageName", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ DisplayConditionsPageInfoComponent.prototype, "pageType", void 0);
    /* @ngInject */ DisplayConditionsPageInfoComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-display-conditions-page-info',
            template: "<div class=\"se-edit-page-info__display-conditions\"><div class=\"se-edit-page-info-display-conditions__basic-info\"><div><label class=\"se-control-label\" translate=\"se.cms.pagelist.headerpagename\"></label><div class=\"form-readonly-text form-readonly-text__tight dc-page-name\">{{ pageName }}</div></div><div><label class=\"se-control-label\" translate=\"se.cms.pagelist.headerpagetype\"></label><div class=\"form-readonly-text form-readonly-text__tight dc-page-type\">{{ pageType }}</div></div></div><label class=\"se-control-label\"><span translate=\"se.cms.display.conditions.label\"></span><se-help><span [translate]=\"getPageDisplayConditionDescriptionI18nKey()\"></span></se-help></label><p class=\"form-readonly-text form-readonly-text__tight dc-page-display-condition\" [translate]=\"getPageDisplayConditionI18nKey()\"></p></div>",
            styles: [".se-edit-page-info__display-conditions{margin-bottom:16px}.se-edit-page-info-display-conditions__basic-info{display:grid;grid-template-columns:repeat(2,1fr);margin-bottom:16px}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        })
    ], /* @ngInject */ DisplayConditionsPageInfoComponent);
    return /* @ngInject */ DisplayConditionsPageInfoComponent;
}());

/*
 * Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
 */
window.__smartedit__.addDecoratorPayload("Component", "CreationDateRendererComponent", {
    selector: 'se-creation-date-renderer',
    template: "<span>{{ item.creationDate | date: 'short' }}</span>"
});
var /* @ngInject */ CreationDateRendererComponent = /** @class */ (function () {
    CreationDateRendererComponent.$inject = ["cellData"];
    function /* @ngInject */ CreationDateRendererComponent(cellData) {
        this.cellData = cellData;
        this.item = this.cellData.item;
    }
    /* @ngInject */ CreationDateRendererComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-creation-date-renderer',
            template: "<span>{{ item.creationDate | date: 'short' }}</span>"
        }),
        __param(0, core.Inject(smarteditcommons.CLIENT_PAGED_LIST_CELL_COMPONENT_DATA_TOKEN)),
        __metadata("design:paramtypes", [Object])
    ], /* @ngInject */ CreationDateRendererComponent);
    return /* @ngInject */ CreationDateRendererComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "DisplayConditionsPageVariationsComponent", {
    selector: 'se-display-conditions-page-variations',
    template: "<div class=\"form-group dc-page-variations\"><label class=\"se-control-label control-label__margin\"><span translate=\"se.cms.display.conditions.variation.pages.title\"></span><se-help *ngIf=\"variations.length > 0\"><span translate=\"se.cms.display.conditions.variations.description\"></span></se-help></label><div *ngIf=\"variations.length === 0\" class=\"dc-no-variations form-readonly-text form-readonly-text__tight form-readonly-text__inline\" translate=\"se.cms.display.conditions.no.variations\"></div><div *ngIf=\"variations.length > 0\"><se-client-paged-list [items]=\"variations\" [keys]=\"keys\" [itemsPerPage]=\"itemsPerPage\" class=\"dc-page-variations-list\"></se-client-paged-list></div></div>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ DisplayConditionsPageVariationsComponent = /** @class */ (function () {
    function /* @ngInject */ DisplayConditionsPageVariationsComponent() {
        this.itemsPerPage = 3;
        this.keys = [
            {
                property: 'pageName',
                i18n: 'se.cms.display.conditions.header.page.name'
            },
            {
                property: 'creationDate',
                i18n: 'se.cms.display.conditions.header.creation.date',
                component: CreationDateRendererComponent
            },
            {
                property: 'restrictions',
                i18n: 'se.cms.display.conditions.header.restrictions'
            }
        ];
    }
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ DisplayConditionsPageVariationsComponent.prototype, "variations", void 0);
    /* @ngInject */ DisplayConditionsPageVariationsComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-display-conditions-page-variations',
            template: "<div class=\"form-group dc-page-variations\"><label class=\"se-control-label control-label__margin\"><span translate=\"se.cms.display.conditions.variation.pages.title\"></span><se-help *ngIf=\"variations.length > 0\"><span translate=\"se.cms.display.conditions.variations.description\"></span></se-help></label><div *ngIf=\"variations.length === 0\" class=\"dc-no-variations form-readonly-text form-readonly-text__tight form-readonly-text__inline\" translate=\"se.cms.display.conditions.no.variations\"></div><div *ngIf=\"variations.length > 0\"><se-client-paged-list [items]=\"variations\" [keys]=\"keys\" [itemsPerPage]=\"itemsPerPage\" class=\"dc-page-variations-list\"></se-client-paged-list></div></div>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [])
    ], /* @ngInject */ DisplayConditionsPageVariationsComponent);
    return /* @ngInject */ DisplayConditionsPageVariationsComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "DisplayConditionsPrimaryPageComponent", {
    selector: 'se-display-conditions-primary-page',
    template: "<div class=\"form-group form-group__inline\"><label class=\"se-control-label control-label__margin\" translate=\"se.cms.display.conditions.primary.page.label\"></label><div *ngIf=\"readOnly\" class=\"dc-associated-primary-page form-readonly-text form-readonly-text__tight\">{{ associatedPrimaryPage?.name }}</div><div *ngIf=\"!readOnly\"><se-select id=\"display-conditions-primary-association-selector\" [model]=\"associatedPrimaryPageUid\" (modelChange)=\"associatedPrimaryPageUidOnChange($event)\" [fetchStrategy]=\"fetchStrategy\"></se-select><span *ngIf=\"associatedPrimaryPage?.name\" class=\"se-form-help-message\"><span>{{ 'se.cms.page.label.label' | translate }}: {{ associatedPrimaryPage.label }}</span></span></div></div>"
});
var /* @ngInject */ DisplayConditionsPrimaryPageComponent = /** @class */ (function () {
    DisplayConditionsPrimaryPageComponent.$inject = ["pageService", "displayConditionsFacade"];
    function /* @ngInject */ DisplayConditionsPrimaryPageComponent(pageService, displayConditionsFacade) {
        var _this = this;
        this.pageService = pageService;
        this.displayConditionsFacade = displayConditionsFacade;
        this.associatedPrimaryPageUid = null;
        this.onPrimaryPageSelect = new core.EventEmitter();
        this.fetchStrategy = {
            fetchEntity: function () {
                return Promise.resolve({
                    id: _this.associatedPrimaryPage.uid,
                    label: _this.associatedPrimaryPage.name
                });
            },
            fetchPage: function (search, pageSize, currentPage) {
                return _this.displayConditionsFacade.getPrimaryPagesForPageType(_this.pageType, null, {
                    search: search,
                    pageSize: pageSize,
                    currentPage: currentPage
                });
            }
        };
    }
    /* @ngInject */ DisplayConditionsPrimaryPageComponent.prototype.ngOnChanges = function (changes) {
        var associatedPrimaryPageChange = changes.associatedPrimaryPage;
        if (associatedPrimaryPageChange && !!associatedPrimaryPageChange.currentValue) {
            this.setAssociatedPrimaryPageSelected(associatedPrimaryPageChange.currentValue);
        }
    };
    DisplayConditionsPrimaryPageComponent.prototype.ngOnChanges.$inject = ["changes"];
    /* @ngInject */ DisplayConditionsPrimaryPageComponent.prototype.associatedPrimaryPageUidOnChange = function (uid) {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageService.getPageById(uid)];
                    case 1:
                        page = _a.sent();
                        this.setAssociatedPrimaryPageSelected(page);
                        this.onPrimaryPageSelect.emit(this.associatedPrimaryPage);
                        return [2 /*return*/];
                }
            });
        });
    };
    DisplayConditionsPrimaryPageComponent.prototype.associatedPrimaryPageUidOnChange.$inject = ["uid"];
    /* @ngInject */ DisplayConditionsPrimaryPageComponent.prototype.setAssociatedPrimaryPageSelected = function (page) {
        this.associatedPrimaryPage = page;
        this.associatedPrimaryPageUid = page.uid;
    };
    DisplayConditionsPrimaryPageComponent.prototype.setAssociatedPrimaryPageSelected.$inject = ["page"];
    __decorate([
        core.Input(),
        __metadata("design:type", Boolean)
    ], /* @ngInject */ DisplayConditionsPrimaryPageComponent.prototype, "readOnly", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ DisplayConditionsPrimaryPageComponent.prototype, "associatedPrimaryPage", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", String)
    ], /* @ngInject */ DisplayConditionsPrimaryPageComponent.prototype, "pageType", void 0);
    __decorate([
        core.Output(),
        __metadata("design:type", core.EventEmitter)
    ], /* @ngInject */ DisplayConditionsPrimaryPageComponent.prototype, "onPrimaryPageSelect", void 0);
    /* @ngInject */ DisplayConditionsPrimaryPageComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-display-conditions-primary-page',
            template: "<div class=\"form-group form-group__inline\"><label class=\"se-control-label control-label__margin\" translate=\"se.cms.display.conditions.primary.page.label\"></label><div *ngIf=\"readOnly\" class=\"dc-associated-primary-page form-readonly-text form-readonly-text__tight\">{{ associatedPrimaryPage?.name }}</div><div *ngIf=\"!readOnly\"><se-select id=\"display-conditions-primary-association-selector\" [model]=\"associatedPrimaryPageUid\" (modelChange)=\"associatedPrimaryPageUidOnChange($event)\" [fetchStrategy]=\"fetchStrategy\"></se-select><span *ngIf=\"associatedPrimaryPage?.name\" class=\"se-form-help-message\"><span>{{ 'se.cms.page.label.label' | translate }}: {{ associatedPrimaryPage.label }}</span></span></div></div>"
        }),
        __metadata("design:paramtypes", [cmscommons.IPageService,
            DisplayConditionsFacade])
    ], /* @ngInject */ DisplayConditionsPrimaryPageComponent);
    return /* @ngInject */ DisplayConditionsPrimaryPageComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "HomepageIconComponent", {
    selector: 'se-homepage-icon',
    template: "<se-tooltip *ngIf=\"isVisible()\" [isChevronVisible]=\"true\" [triggers]=\"['mouseenter', 'mouseleave']\"><span se-tooltip-trigger class=\"sap-icon--home se-homepage-icon\" [ngClass]=\"getIconClass()\"></span> <span se-tooltip-body [translate]=\"getTooltipMessage()\"></span></se-tooltip>",
    styles: [".se-homepage-icon{margin-right:4px}.se-homepage-icon--current{color:#0a6ed1}.se-homepage-icon--old{color:#32363a}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ HomepageIconComponent = /** @class */ (function () {
    HomepageIconComponent.$inject = ["homepageService", "cdr"];
    function /* @ngInject */ HomepageIconComponent(homepageService, cdr) {
        this.homepageService = homepageService;
        this.cdr = cdr;
    }
    /* @ngInject */ HomepageIconComponent.prototype.ngOnChanges = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.cmsPage && !this.uriContext) {
                            return [2 /*return*/];
                        }
                        _a = this;
                        return [4 /*yield*/, this.homepageService.getHomepageType(this.cmsPage, this.uriContext)];
                    case 1:
                        _a.type = _b.sent();
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ HomepageIconComponent.prototype.isVisible = function () {
        return !!this.type;
    };
    /* @ngInject */ HomepageIconComponent.prototype.getIconClass = function () {
        return {
            'se-homepage-icon--current': this.type === exports.HomepageType.CURRENT,
            'se-homepage-icon--old': this.type === exports.HomepageType.OLD
        };
    };
    /* @ngInject */ HomepageIconComponent.prototype.getTooltipMessage = function () {
        var state = this.getHomepageState(this.type);
        return "se.cms.homepage.tooltip.message." + state;
    };
    /* @ngInject */ HomepageIconComponent.prototype.getHomepageState = function (type) {
        return exports.HomepageType.CURRENT === type ? 'current' : 'previous';
    };
    HomepageIconComponent.prototype.getHomepageState.$inject = ["type"];
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ HomepageIconComponent.prototype, "cmsPage", void 0);
    __decorate([
        core.Input(),
        __metadata("design:type", Object)
    ], /* @ngInject */ HomepageIconComponent.prototype, "uriContext", void 0);
    /* @ngInject */ HomepageIconComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-homepage-icon',
            template: "<se-tooltip *ngIf=\"isVisible()\" [isChevronVisible]=\"true\" [triggers]=\"['mouseenter', 'mouseleave']\"><span se-tooltip-trigger class=\"sap-icon--home se-homepage-icon\" [ngClass]=\"getIconClass()\"></span> <span se-tooltip-body [translate]=\"getTooltipMessage()\"></span></se-tooltip>",
            styles: [".se-homepage-icon{margin-right:4px}.se-homepage-icon--current{color:#0a6ed1}.se-homepage-icon--old{color:#32363a}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [HomepageService, core.ChangeDetectorRef])
    ], /* @ngInject */ HomepageIconComponent);
    return /* @ngInject */ HomepageIconComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "RestorePageItemComponent", {
    selector: 'se-restore-page-item',
    template: "<div *seHasOperationPermission=\"restorePagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"restorePage()\"><span [translate]=\"'se.cms.actionitem.page.restore'\"></span></a></div>"
});
var /* @ngInject */ RestorePageItemComponent = /** @class */ (function () {
    RestorePageItemComponent.$inject = ["managePageService", "dropdownMenuData"];
    function /* @ngInject */ RestorePageItemComponent(managePageService, dropdownMenuData) {
        this.managePageService = managePageService;
        this.dropdownMenuData = dropdownMenuData;
    }
    /* @ngInject */ RestorePageItemComponent.prototype.ngOnInit = function () {
        this.pageInfo = this.dropdownMenuData.selectedItem;
        this.restorePagePermission = [
            {
                names: ['se.restore.page.type'],
                context: {
                    typeCode: this.pageInfo.typeCode
                }
            }
        ];
    };
    /* @ngInject */ RestorePageItemComponent.prototype.restorePage = function () {
        this.managePageService.restorePage(this.pageInfo);
    };
    /* @ngInject */ RestorePageItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-restore-page-item',
            template: "<div *seHasOperationPermission=\"restorePagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"restorePage()\"><span [translate]=\"'se.cms.actionitem.page.restore'\"></span></a></div>"
        }),
        __param(1, core.Inject(smarteditcommons.DROPDOWN_MENU_ITEM_DATA)),
        __metadata("design:paramtypes", [ManagePageService, Object])
    ], /* @ngInject */ RestorePageItemComponent);
    return /* @ngInject */ RestorePageItemComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "UpdatePageStatusComponent", {
    selector: 'se-update-page-status',
    template: "<div *ngIf=\"showButton\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"onClickOnSync()\"><span [translate]=\"'se.cms.actionitem.page.sync'\"></span></a></div>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ UpdatePageStatusComponent = /** @class */ (function () {
    UpdatePageStatusComponent.$inject = ["cdr", "managePageService", "cmsitemsRestService", "catalogService", "crossFrameEventService", "dropdownMenuData"];
    function /* @ngInject */ UpdatePageStatusComponent(cdr, managePageService, cmsitemsRestService, catalogService, crossFrameEventService, dropdownMenuData) {
        this.cdr = cdr;
        this.managePageService = managePageService;
        this.cmsitemsRestService = cmsitemsRestService;
        this.catalogService = catalogService;
        this.crossFrameEventService = crossFrameEventService;
        this.dropdownMenuData = dropdownMenuData;
        this.showButton = false;
    }
    /* @ngInject */ UpdatePageStatusComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.pageInfo = this.dropdownMenuData.selectedItem;
                        return [4 /*yield*/, this.setButtonVisibility()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ UpdatePageStatusComponent.prototype.onClickOnSync = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.managePageService.trashPageInActiveCatalogVersion(this.pageInfo.uid)];
                    case 1:
                        _a.sent();
                        this.crossFrameEventService.publish(cmscommons.EVENT_PAGE_STATUS_UPDATED_IN_ACTIVE_CV);
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ UpdatePageStatusComponent.prototype.setButtonVisibility = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.doesPageExistInActiveCatalogVersion()];
                    case 1:
                        _a.showButton = _b.sent();
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ UpdatePageStatusComponent.prototype.doesPageExistInActiveCatalogVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uriContext, activeVersion, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.retrieveUriContext()];
                    case 1:
                        uriContext = _a.sent();
                        return [4 /*yield*/, this.catalogService.getContentCatalogActiveVersion(uriContext)];
                    case 2:
                        activeVersion = _a.sent();
                        return [4 /*yield*/, this.cmsitemsRestService.get({
                                pageSize: 1,
                                currentPage: 0,
                                typeCode: 'AbstractPage',
                                fields: 'BASIC',
                                itemSearchParams: "uid:" + this.pageInfo.uid,
                                catalogId: uriContext.CONTEXT_CATALOG,
                                catalogVersion: activeVersion
                            })];
                    case 3:
                        result = _a.sent();
                        return [2 /*return*/, result.pagination.totalCount === 1];
                }
            });
        });
    };
    /* @ngInject */ UpdatePageStatusComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-update-page-status',
            template: "<div *ngIf=\"showButton\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"onClickOnSync()\"><span [translate]=\"'se.cms.actionitem.page.sync'\"></span></a></div>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(5, core.Inject(smarteditcommons.DROPDOWN_MENU_ITEM_DATA)),
        __metadata("design:paramtypes", [core.ChangeDetectorRef,
            ManagePageService,
            cmscommons.CmsitemsRestService,
            smarteditcommons.ICatalogService,
            smarteditcommons.CrossFrameEventService, Object])
    ], /* @ngInject */ UpdatePageStatusComponent);
    return /* @ngInject */ UpdatePageStatusComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PermanentlyDeletePageItemComponent", {
    selector: 'se-permanently-delete-page-item',
    template: "<div *seHasOperationPermission=\"permanentlyDeletePagePermission\"><div class=\"se-dropdown-item__delete-wrapper\"><div class=\"se-dropdown-item__delete-link-wrapper\" [ngClass]=\"{'se-dropdown-item__delete-link-wrapper--disabled': isDeleteButtonDisabled()}\"><a class=\"se-dropdown-item se-dropdown-item__delete fd-menu__item\" [ngClass]=\"{'se-dropdown-item--disabled': isDeleteButtonDisabled()}\" (click)=\"permanentlyDelete()\"><span [translate]=\"'se.cms.actionitem.page.permanently.delete'\"></span></a></div><se-tooltip class=\"se-dropdown-item__delete-page-popover\" *ngIf=\"isDeleteButtonDisabled()\" [placement]=\"'left'\" [triggers]=\"['mouseenter', 'mouseleave']\" [isChevronVisible]=\"true\" [appendTo]=\"'body'\"><span se-tooltip-trigger class=\"sap-icon--message-error\"></span> <span se-tooltip-body [translate]=\"'se.cms.actionitem.page.permanently.delete.blocked'\"></span></se-tooltip></div></div>",
    styles: [".se-dropdown-item__delete-wrapper{display:flex;flex-direction:row;align-items:center;width:100%}.se-dropdown-item__delete-page-popover{margin-right:16px}.se-dropdown-item__delete-page-popover .sap-icon--message-error{color:#0a6ed1}.se-dropdown-item__delete-link-wrapper{width:100%}.se-dropdown-item__delete-link-wrapper--disabled{cursor:not-allowed}"]
});
var /* @ngInject */ PermanentlyDeletePageItemComponent = /** @class */ (function () {
    PermanentlyDeletePageItemComponent.$inject = ["managePageService", "cmsitemsRestService", "catalogService", "crossFrameEventService", "dropdownMenuData"];
    function /* @ngInject */ PermanentlyDeletePageItemComponent(managePageService, cmsitemsRestService, catalogService, crossFrameEventService, dropdownMenuData) {
        this.managePageService = managePageService;
        this.cmsitemsRestService = cmsitemsRestService;
        this.catalogService = catalogService;
        this.crossFrameEventService = crossFrameEventService;
        this.dropdownMenuData = dropdownMenuData;
        this.isDeletable = false;
    }
    /* @ngInject */ PermanentlyDeletePageItemComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.pageInfo = this.dropdownMenuData.selectedItem;
                        this.permanentlyDeletePagePermission = [
                            {
                                names: ['se.permanently.delete.page.type'],
                                context: {
                                    typeCode: this.pageInfo.typeCode
                                }
                            }
                        ];
                        this.unregPageSyncStatusUpdate = this.crossFrameEventService.subscribe(cmscommons.EVENT_PAGE_STATUS_UPDATED_IN_ACTIVE_CV, this.fetchPageDeletableConditions.bind(this));
                        return [4 /*yield*/, this.fetchPageDeletableConditions()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PermanentlyDeletePageItemComponent.prototype.ngOnDestroy = function () {
        this.unregPageSyncStatusUpdate();
    };
    /* @ngInject */ PermanentlyDeletePageItemComponent.prototype.permanentlyDelete = function () {
        if (this.isDeletable) {
            this.managePageService.hardDeletePage(this.pageInfo);
        }
    };
    /* @ngInject */ PermanentlyDeletePageItemComponent.prototype.isDeleteButtonDisabled = function () {
        return !this.isDeletable;
    };
    /* @ngInject */ PermanentlyDeletePageItemComponent.prototype.fetchPageDeletableConditions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uriContext, activeVersion, cmsItemResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.retrieveUriContext()];
                    case 1:
                        uriContext = _a.sent();
                        return [4 /*yield*/, this.catalogService.getContentCatalogActiveVersion(uriContext)];
                    case 2:
                        activeVersion = _a.sent();
                        return [4 /*yield*/, this.cmsitemsRestService.get({
                                pageSize: 1,
                                currentPage: 0,
                                typeCode: 'AbstractPage',
                                fields: 'BASIC',
                                itemSearchParams: "uid:" + this.pageInfo.uid,
                                catalogId: uriContext.CURRENT_CONTEXT_CATALOG,
                                catalogVersion: activeVersion
                            })];
                    case 3:
                        cmsItemResult = _a.sent();
                        this.isDeletable =
                            cmsItemResult.pagination.totalCount === 0 ||
                                cmsItemResult.response[0].pageStatus === cmscommons.CMSPageStatus.DELETED;
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PermanentlyDeletePageItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-permanently-delete-page-item',
            template: "<div *seHasOperationPermission=\"permanentlyDeletePagePermission\"><div class=\"se-dropdown-item__delete-wrapper\"><div class=\"se-dropdown-item__delete-link-wrapper\" [ngClass]=\"{'se-dropdown-item__delete-link-wrapper--disabled': isDeleteButtonDisabled()}\"><a class=\"se-dropdown-item se-dropdown-item__delete fd-menu__item\" [ngClass]=\"{'se-dropdown-item--disabled': isDeleteButtonDisabled()}\" (click)=\"permanentlyDelete()\"><span [translate]=\"'se.cms.actionitem.page.permanently.delete'\"></span></a></div><se-tooltip class=\"se-dropdown-item__delete-page-popover\" *ngIf=\"isDeleteButtonDisabled()\" [placement]=\"'left'\" [triggers]=\"['mouseenter', 'mouseleave']\" [isChevronVisible]=\"true\" [appendTo]=\"'body'\"><span se-tooltip-trigger class=\"sap-icon--message-error\"></span> <span se-tooltip-body [translate]=\"'se.cms.actionitem.page.permanently.delete.blocked'\"></span></se-tooltip></div></div>",
            styles: [".se-dropdown-item__delete-wrapper{display:flex;flex-direction:row;align-items:center;width:100%}.se-dropdown-item__delete-page-popover{margin-right:16px}.se-dropdown-item__delete-page-popover .sap-icon--message-error{color:#0a6ed1}.se-dropdown-item__delete-link-wrapper{width:100%}.se-dropdown-item__delete-link-wrapper--disabled{cursor:not-allowed}"]
        }),
        __param(4, core.Inject(smarteditcommons.DROPDOWN_MENU_ITEM_DATA)),
        __metadata("design:paramtypes", [ManagePageService,
            cmscommons.CmsitemsRestService,
            smarteditcommons.ICatalogService,
            smarteditcommons.CrossFrameEventService, Object])
    ], /* @ngInject */ PermanentlyDeletePageItemComponent);
    return /* @ngInject */ PermanentlyDeletePageItemComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "EditPageItemComponent", {
    selector: 'se-edit-page-item',
    template: "<div *seHasOperationPermission=\"editPagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"onClickOnEdit()\"><span class=\"se-dropdown-item--label\" translate=\"se.cms.actionitem.page.edit\"></span></a></div>"
});
var /* @ngInject */ EditPageItemComponent = /** @class */ (function () {
    EditPageItemComponent.$inject = ["dropdownMenuData", "pageInfoMenuService"];
    function /* @ngInject */ EditPageItemComponent(dropdownMenuData, pageInfoMenuService) {
        this.dropdownMenuData = dropdownMenuData;
        this.pageInfoMenuService = pageInfoMenuService;
    }
    /* @ngInject */ EditPageItemComponent.prototype.ngOnInit = function () {
        this.pageInfo = this.dropdownMenuData.selectedItem;
        this.editPagePermission = [
            {
                names: ['se.edit.page.type'],
                context: {
                    typeCode: this.pageInfo.typeCode
                }
            },
            {
                names: ['se.act.on.page.in.workflow'],
                context: {
                    pageInfo: this.pageInfo
                }
            }
        ];
    };
    /* @ngInject */ EditPageItemComponent.prototype.onClickOnEdit = function () {
        return this.pageInfoMenuService.openPageEditor(this.pageInfo);
    };
    /* @ngInject */ EditPageItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-edit-page-item',
            template: "<div *seHasOperationPermission=\"editPagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"onClickOnEdit()\"><span class=\"se-dropdown-item--label\" translate=\"se.cms.actionitem.page.edit\"></span></a></div>"
        }),
        __param(0, core.Inject(smarteditcommons.DROPDOWN_MENU_ITEM_DATA)),
        __metadata("design:paramtypes", [Object, PageInfoMenuService])
    ], /* @ngInject */ EditPageItemComponent);
    return /* @ngInject */ EditPageItemComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "ClonePageItemComponent", {
    selector: 'se-clone-page-item',
    template: "<div *seHasOperationPermission=\"clonePagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"onClickOnClone()\"><span class=\"se-dropdown-item--label\" translate=\"se.cms.actionitem.page.clone\"></span></a></div>"
});
var /* @ngInject */ ClonePageItemComponent = /** @class */ (function () {
    ClonePageItemComponent.$inject = ["dropdownMenuData", "clonePageWizardService"];
    function /* @ngInject */ ClonePageItemComponent(dropdownMenuData, clonePageWizardService) {
        this.dropdownMenuData = dropdownMenuData;
        this.clonePageWizardService = clonePageWizardService;
    }
    /* @ngInject */ ClonePageItemComponent.prototype.ngOnInit = function () {
        this.pageInfo = this.dropdownMenuData.selectedItem;
        this.clonePagePermission = [
            {
                names: ['se.clone.page.type'],
                context: {
                    typeCode: this.pageInfo.typeCode
                }
            }
        ];
    };
    /* @ngInject */ ClonePageItemComponent.prototype.onClickOnClone = function () {
        this.clonePageWizardService.openClonePageWizard(this.pageInfo);
    };
    /* @ngInject */ ClonePageItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-clone-page-item',
            template: "<div *seHasOperationPermission=\"clonePagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"onClickOnClone()\"><span class=\"se-dropdown-item--label\" translate=\"se.cms.actionitem.page.clone\"></span></a></div>"
        }),
        __param(0, core.Inject(smarteditcommons.DROPDOWN_MENU_ITEM_DATA)),
        __metadata("design:paramtypes", [Object, ClonePageWizardService])
    ], /* @ngInject */ ClonePageItemComponent);
    return /* @ngInject */ ClonePageItemComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "DeletePageItemComponent", {
    selector: 'se-delete-page-item',
    template: "<div *seHasOperationPermission=\"deletePagePermission\"><div class=\"se-dropdown-item__delete-wrapper\"><div class=\"se-dropdown-item__delete-link-wrapper\" [ngClass]=\"{'se-dropdown-item__delete-link-wrapper--disabled': !isDeletePageEnabled}\"><a class=\"se-dropdown-item se-dropdown-item__delete fd-menu__item\" [ngClass]=\"{'se-dropdown-item--disabled': !isDeletePageEnabled}\" (click)=\"isDeletePageEnabled && onClickOnDeletePage()\"><span class=\"se-dropdown-item--label\" translate=\"se.cms.actionitem.page.trash\"></span></a></div><se-tooltip *ngIf=\"!isDeletePageEnabled\" class=\"se-dropdown-item__delete-page-popover\" [placement]=\"'left'\" [triggers]=\"['mouseenter', 'mouseleave']\" [isChevronVisible]=\"true\" [appendTo]=\"'body'\"><span se-tooltip-trigger class=\"sap-icon--message-error\"></span><div se-tooltip-body class=\"popover-tooltip\"><span [translate]=\"tooltipMessage\"></span></div></se-tooltip></div></div>",
    styles: [".se-dropdown-item__delete-wrapper{display:flex;flex-direction:row;align-items:center;width:100%}.se-dropdown-item__delete-page-popover{margin-right:16px}.se-dropdown-item__delete-page-popover .sap-icon--message-error{color:#0a6ed1}.se-dropdown-item__delete-link-wrapper{width:100%}.se-dropdown-item__delete-link-wrapper--disabled{cursor:not-allowed}"]
});
var /* @ngInject */ DeletePageItemComponent = /** @class */ (function () {
    DeletePageItemComponent.$inject = ["dropdownMenuData", "managePageService", "systemEventService", "catalogService"];
    function /* @ngInject */ DeletePageItemComponent(dropdownMenuData, managePageService, systemEventService, catalogService) {
        this.dropdownMenuData = dropdownMenuData;
        this.managePageService = managePageService;
        this.systemEventService = systemEventService;
        this.catalogService = catalogService;
        this.isDeletePageEnabled = false;
        this.tooltipMessage = 'se.cms.tooltip.movetotrash';
    }
    /* @ngInject */ DeletePageItemComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.pageInfo = this.dropdownMenuData.selectedItem;
                        return [4 /*yield*/, this.getDisableDeleteTooltipMessage()];
                    case 1:
                        _a.sent();
                        this.setDeletePermissions();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ DeletePageItemComponent.prototype.onClickOnDeletePage = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uriContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.retrieveUriContext()];
                    case 1:
                        uriContext = _a.sent();
                        return [4 /*yield*/, this.managePageService.softDeletePage(this.pageInfo, uriContext)];
                    case 2:
                        _a.sent();
                        this.systemEventService.publishAsync(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE);
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ DeletePageItemComponent.prototype.setDeletePermissions = function () {
        this.deletePagePermission = [
            {
                names: ['se.delete.page.type'],
                context: {
                    typeCode: this.pageInfo.typeCode
                }
            },
            {
                names: ['se.act.on.page.in.workflow'],
                context: {
                    pageInfo: this.pageInfo
                }
            }
        ];
    };
    /* @ngInject */ DeletePageItemComponent.prototype.getDisableDeleteTooltipMessage = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uriContext, isEnabled, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.catalogService.retrieveUriContext()];
                    case 1:
                        uriContext = _b.sent();
                        return [4 /*yield*/, this.managePageService.isPageTrashable(this.pageInfo, uriContext)];
                    case 2:
                        isEnabled = _b.sent();
                        this.isDeletePageEnabled = isEnabled;
                        if (this.isDeletePageEnabled) {
                            this.tooltipMessage = null;
                            return [2 /*return*/];
                        }
                        _a = this;
                        return [4 /*yield*/, this.managePageService.getDisabledTrashTooltipMessage(this.pageInfo, uriContext)];
                    case 3:
                        _a.tooltipMessage = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ DeletePageItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-delete-page-item',
            template: "<div *seHasOperationPermission=\"deletePagePermission\"><div class=\"se-dropdown-item__delete-wrapper\"><div class=\"se-dropdown-item__delete-link-wrapper\" [ngClass]=\"{'se-dropdown-item__delete-link-wrapper--disabled': !isDeletePageEnabled}\"><a class=\"se-dropdown-item se-dropdown-item__delete fd-menu__item\" [ngClass]=\"{'se-dropdown-item--disabled': !isDeletePageEnabled}\" (click)=\"isDeletePageEnabled && onClickOnDeletePage()\"><span class=\"se-dropdown-item--label\" translate=\"se.cms.actionitem.page.trash\"></span></a></div><se-tooltip *ngIf=\"!isDeletePageEnabled\" class=\"se-dropdown-item__delete-page-popover\" [placement]=\"'left'\" [triggers]=\"['mouseenter', 'mouseleave']\" [isChevronVisible]=\"true\" [appendTo]=\"'body'\"><span se-tooltip-trigger class=\"sap-icon--message-error\"></span><div se-tooltip-body class=\"popover-tooltip\"><span [translate]=\"tooltipMessage\"></span></div></se-tooltip></div></div>",
            styles: [".se-dropdown-item__delete-wrapper{display:flex;flex-direction:row;align-items:center;width:100%}.se-dropdown-item__delete-page-popover{margin-right:16px}.se-dropdown-item__delete-page-popover .sap-icon--message-error{color:#0a6ed1}.se-dropdown-item__delete-link-wrapper{width:100%}.se-dropdown-item__delete-link-wrapper--disabled{cursor:not-allowed}"]
        }),
        __param(0, core.Inject(smarteditcommons.DROPDOWN_MENU_ITEM_DATA)),
        __metadata("design:paramtypes", [Object, ManagePageService,
            smarteditcommons.SystemEventService,
            smarteditcommons.ICatalogService])
    ], /* @ngInject */ DeletePageItemComponent);
    return /* @ngInject */ DeletePageItemComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "SyncPageItemComponent", {
    selector: 'se-sync-page-item',
    template: "<div *seHasOperationPermission=\"syncPagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"sync()\" translate=\"se.cms.actionitem.page.sync\"></a></div>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ SyncPageItemComponent = /** @class */ (function () {
    SyncPageItemComponent.$inject = ["dropdownMenuData", "catalogService", "systemEventService", "modalService", "logService"];
    function /* @ngInject */ SyncPageItemComponent(dropdownMenuData, catalogService, systemEventService, modalService, logService) {
        this.dropdownMenuData = dropdownMenuData;
        this.catalogService = catalogService;
        this.systemEventService = systemEventService;
        this.modalService = modalService;
        this.logService = logService;
    }
    /* @ngInject */ SyncPageItemComponent.prototype.ngOnInit = function () {
        this.pageInfo = this.dropdownMenuData.selectedItem;
        this.syncPagePermission = [
            {
                names: ['se.act.on.page.in.workflow'],
                context: {
                    pageInfo: this.pageInfo
                }
            }
        ];
    };
    /* @ngInject */ SyncPageItemComponent.prototype.sync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uriContext, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.retrieveUriContext()];
                    case 1:
                        uriContext = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.modalService
                                .open({
                                component: PageSynchronizationPanelModalComponent,
                                templateConfig: {
                                    title: 'se.cms.synchronization.pagelist.modal.title.prefix',
                                    titleSuffix: 'se.cms.pageeditormodal.editpagetab.title'
                                },
                                config: {
                                    modalPanelClass: 'modal-md'
                                },
                                data: {
                                    cmsPage: this.pageInfo,
                                    uriContext: uriContext
                                }
                            })
                                .afterClosed.toPromise()];
                    case 3:
                        _a.sent();
                        this.systemEventService.publishAsync(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE);
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        this.logService.debug('Page Synchronization Panel Modal dismissed', error_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ SyncPageItemComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-sync-page-item',
            template: "<div *seHasOperationPermission=\"syncPagePermission\"><a class=\"se-dropdown-item fd-menu__item\" (click)=\"sync()\" translate=\"se.cms.actionitem.page.sync\"></a></div>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(0, core.Inject(smarteditcommons.DROPDOWN_MENU_ITEM_DATA)),
        __metadata("design:paramtypes", [Object, smarteditcommons.ICatalogService,
            smarteditcommons.SystemEventService,
            smarteditcommons.IModalService,
            smarteditcommons.LogService])
    ], /* @ngInject */ SyncPageItemComponent);
    return /* @ngInject */ SyncPageItemComponent;
}());

var /* @ngInject */ AddPageWizardService = /** @class */ (function () {
    AddPageWizardService.$inject = ["modalWizard", "catalogService"];
    function /* @ngInject */ AddPageWizardService(modalWizard, catalogService) {
        this.modalWizard = modalWizard;
        this.catalogService = catalogService;
    }
    /* @ngInject */ AddPageWizardService.prototype.openAddPageWizard = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uriContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.retrieveUriContext()];
                    case 1:
                        uriContext = _a.sent();
                        return [2 /*return*/, this.modalWizard.open({
                                component: AddPageWizardComponent,
                                properties: {
                                    uriContext: uriContext
                                }
                            })];
                }
            });
        });
    };
    /* @ngInject */ AddPageWizardService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.ModalWizard, smarteditcommons.ICatalogService])
    ], /* @ngInject */ AddPageWizardService);
    return /* @ngInject */ AddPageWizardService;
}());

window.__smartedit__.addDecoratorPayload("Component", "TrashListDropdownItemsWrapperComponent", {
    selector: 'se-trash-list-dropdown-items-wrapper',
    template: "<div\n        *seHasOperationPermission=\"'se.edit.page'\"\n        class=\"paged-list-table__body__td paged-list-table__body__td-menu\"\n    >\n        <se-dropdown-menu\n            [dropdownItems]=\"dropdownItems\"\n            [selectedItem]=\"item\"\n            class=\"pull-right\"\n        ></se-dropdown-menu>\n    </div>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var TrashListDropdownItemsWrapperComponent = /** @class */ (function () {
    function TrashListDropdownItemsWrapperComponent(route, data, catalogVersionPermissionService, cdr) {
        this.route = route;
        this.data = data;
        this.catalogVersionPermissionService = catalogVersionPermissionService;
        this.cdr = cdr;
        this.dropdownItems = [];
        this.loaded = false;
    }
    TrashListDropdownItemsWrapperComponent.prototype.ngOnInit = function () {
        return this.setDropdownItems();
    };
    TrashListDropdownItemsWrapperComponent.prototype.setDropdownItems = function () {
        return __awaiter(this, void 0, void 0, function () {
            var canSynchronize;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.item = this.data.item;
                        return [4 /*yield*/, this.catalogVersionPermissionService.hasSyncPermissionToActiveCatalogVersion(this.route.snapshot.params.catalogId, this.route.snapshot.params.catalogVersion)];
                    case 1:
                        canSynchronize = _a.sent();
                        this.addDropdownItem(RestorePageItemComponent);
                        if (canSynchronize) {
                            this.addDropdownItem(UpdatePageStatusComponent);
                        }
                        this.addDropdownItem(PermanentlyDeletePageItemComponent);
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    TrashListDropdownItemsWrapperComponent.prototype.addDropdownItem = function (item) {
        this.dropdownItems = this.dropdownItems.concat({
            component: item
        });
    };
    TrashListDropdownItemsWrapperComponent = __decorate([
        core.Component({
            selector: 'se-trash-list-dropdown-items-wrapper',
            template: "<div\n        *seHasOperationPermission=\"'se.edit.page'\"\n        class=\"paged-list-table__body__td paged-list-table__body__td-menu\"\n    >\n        <se-dropdown-menu\n            [dropdownItems]=\"dropdownItems\"\n            [selectedItem]=\"item\"\n            class=\"pull-right\"\n        ></se-dropdown-menu>\n    </div>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(1, core.Inject(smarteditcommons.DATA_TABLE_COMPONENT_DATA)),
        __metadata("design:paramtypes", [router.ActivatedRoute, Object, smarteditcommons.ICatalogVersionPermissionService,
            core.ChangeDetectorRef])
    ], TrashListDropdownItemsWrapperComponent);
    return TrashListDropdownItemsWrapperComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "BaseWrapperComponent", {
    template: ''
});
var BaseWrapperComponent = /** @class */ (function () {
    function BaseWrapperComponent(data) {
        this.data = data;
    }
    BaseWrapperComponent.prototype.ngOnInit = function () {
        this.item = this.data.item;
    };
    BaseWrapperComponent = __decorate([
        core.Component({
            template: ''
        }),
        __param(0, core.Inject(smarteditcommons.DATA_TABLE_COMPONENT_DATA)),
        __metadata("design:paramtypes", [Object])
    ], BaseWrapperComponent);
    return BaseWrapperComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "ModifiedTimeWrapperComponent", {
    selector: 'se-modified-time-wrapper',
    template: "<div>{{ item.modifiedtime | date: 'short' }}</div>"
});
var ModifiedTimeWrapperComponent = /** @class */ (function (_super) {
    __extends(ModifiedTimeWrapperComponent, _super);
    function ModifiedTimeWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModifiedTimeWrapperComponent = __decorate([
        core.Component({
            selector: 'se-modified-time-wrapper',
            template: "<div>{{ item.modifiedtime | date: 'short' }}</div>"
        })
    ], ModifiedTimeWrapperComponent);
    return ModifiedTimeWrapperComponent;
}(BaseWrapperComponent));

window.__smartedit__.addDecoratorPayload("Component", "NumberOfRestrictionsWrapperComponent", {
    selector: 'se-number-of-restrictions-wrapper',
    template: "<se-restrictions-viewer [restrictions]=\"item.restrictions\"></se-restrictions-viewer>"
});
var NumberOfRestrictionsWrapperComponent = /** @class */ (function (_super) {
    __extends(NumberOfRestrictionsWrapperComponent, _super);
    function NumberOfRestrictionsWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberOfRestrictionsWrapperComponent = __decorate([
        core.Component({
            selector: 'se-number-of-restrictions-wrapper',
            template: "<se-restrictions-viewer [restrictions]=\"item.restrictions\"></se-restrictions-viewer>"
        })
    ], NumberOfRestrictionsWrapperComponent);
    return NumberOfRestrictionsWrapperComponent;
}(BaseWrapperComponent));

window.__smartedit__.addDecoratorPayload("Component", "PageStatusWrapperComponent", {
    selector: 'se-page-status-wrapper',
    template: "<div>\n        <se-page-display-status\n            [cmsPage]=\"item\"\n            [showLastSyncTime]=\"false\"\n        ></se-page-display-status>\n    </div>"
});
var PageStatusWrapperComponent = /** @class */ (function (_super) {
    __extends(PageStatusWrapperComponent, _super);
    function PageStatusWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PageStatusWrapperComponent = __decorate([
        core.Component({
            selector: 'se-page-status-wrapper',
            template: "<div>\n        <se-page-display-status\n            [cmsPage]=\"item\"\n            [showLastSyncTime]=\"false\"\n        ></se-page-display-status>\n    </div>"
        })
    ], PageStatusWrapperComponent);
    return PageStatusWrapperComponent;
}(BaseWrapperComponent));

window.__smartedit__.addDecoratorPayload("Component", "PageNameWrapperComponent", {
    selector: 'se-page-name-wrapper',
    template: "\n        <a href=\"\" (click)=\"goToPage($event)\">\n            <se-homepage-icon\n                class=\"homepage-icon__page-list\"\n                [cmsPage]=\"item\"\n                [uriContext]=\"uriContext\"\n            ></se-homepage-icon>\n            {{ item.name }}\n        </a>\n    "
});
var PageNameWrapperComponent = /** @class */ (function () {
    function PageNameWrapperComponent(data, route, experienceService, urlService) {
        this.data = data;
        this.route = route;
        this.experienceService = experienceService;
        this.urlService = urlService;
    }
    PageNameWrapperComponent.prototype.ngOnInit = function () {
        var _a;
        this.item = this.data.item;
        (_a = this.route.snapshot.params, this.siteUid = _a.siteId, this.catalogId = _a.catalogId, this.catalogVersion = _a.catalogVersion);
        this.uriContext = lodash.merge(this.urlService.buildUriContext(this.siteUid, this.catalogId, this.catalogVersion), this.urlService.buildPageUriContext(this.siteUid, this.catalogId, this.catalogVersion));
    };
    PageNameWrapperComponent.prototype.goToPage = function (event) {
        event.preventDefault();
        if (this.item.uid) {
            this.experienceService.loadExperience({
                siteId: this.siteUid,
                catalogId: this.catalogId,
                catalogVersion: this.catalogVersion,
                pageId: this.item.uid
            });
        }
    };
    PageNameWrapperComponent = __decorate([
        core.Component({
            selector: 'se-page-name-wrapper',
            template: "\n        <a href=\"\" (click)=\"goToPage($event)\">\n            <se-homepage-icon\n                class=\"homepage-icon__page-list\"\n                [cmsPage]=\"item\"\n                [uriContext]=\"uriContext\"\n            ></se-homepage-icon>\n            {{ item.name }}\n        </a>\n    "
        }),
        __param(0, core.Inject(smarteditcommons.DATA_TABLE_COMPONENT_DATA)),
        __metadata("design:paramtypes", [Object, router.ActivatedRoute,
            smarteditcommons.IExperienceService,
            smarteditcommons.IUrlService])
    ], PageNameWrapperComponent);
    return PageNameWrapperComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageListDropdownItemsWrapperComponent", {
    selector: 'se-page-list-dropdown-items-wrapper',
    template: "<div\n        *seHasOperationPermission=\"'se.edit.page'\"\n        class=\"paged-list-table__body__td paged-list-table__body__td-menu\"\n    >\n        <se-dropdown-menu\n            [dropdownItems]=\"dropdownItems\"\n            [selectedItem]=\"item\"\n            class=\"pull-right\"\n        ></se-dropdown-menu>\n    </div>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var PageListDropdownItemsWrapperComponent = /** @class */ (function () {
    function PageListDropdownItemsWrapperComponent(route, data, catalogVersionPermissionService, managePageService, cdr) {
        this.route = route;
        this.data = data;
        this.catalogVersionPermissionService = catalogVersionPermissionService;
        this.managePageService = managePageService;
        this.cdr = cdr;
        this.dropdownItems = [];
    }
    PageListDropdownItemsWrapperComponent.prototype.ngOnInit = function () {
        return this.setDropdownItems();
    };
    PageListDropdownItemsWrapperComponent.prototype.setDropdownItems = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, catalogId, catalogVersion, _b, hasSyncPermission, hasClonePermission;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.item = this.data.item;
                        _a = this.route.snapshot.params, catalogId = _a.catalogId, catalogVersion = _a.catalogVersion;
                        return [4 /*yield*/, Promise.all([
                                this.catalogVersionPermissionService.hasSyncPermissionToActiveCatalogVersion(catalogId, catalogVersion),
                                /**
                                 * Normally we would use something like `isPermitted` from PermissionService but as we are in pages
                                 * which are container (outer) part of app and PermissionService uses some data retrieved from inner
                                 * (which in this case can be also obtained from outer) we had to use methods available in outer
                                 * to see if the clone button can be cloned or not.
                                 *
                                 * Using here PermissionService.isPermitted will throw error
                                 * as there is no iframe in Pages site
                                 */
                                this.managePageService.isPageCloneable(this.data.item.uuid, this.data.item.catalogVersion)
                            ])];
                    case 1:
                        _b = _c.sent(), hasSyncPermission = _b[0], hasClonePermission = _b[1];
                        this.addDropdownItem(EditPageItemComponent);
                        if (hasSyncPermission) {
                            this.addDropdownItem(SyncPageItemComponent);
                        }
                        if (hasClonePermission) {
                            this.addDropdownItem(ClonePageItemComponent);
                        }
                        this.addDropdownItem(DeletePageItemComponent);
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    PageListDropdownItemsWrapperComponent.prototype.addDropdownItem = function (item) {
        this.dropdownItems = this.dropdownItems.concat({
            component: item
        });
    };
    PageListDropdownItemsWrapperComponent = __decorate([
        core.Component({
            selector: 'se-page-list-dropdown-items-wrapper',
            template: "<div\n        *seHasOperationPermission=\"'se.edit.page'\"\n        class=\"paged-list-table__body__td paged-list-table__body__td-menu\"\n    >\n        <se-dropdown-menu\n            [dropdownItems]=\"dropdownItems\"\n            [selectedItem]=\"item\"\n            class=\"pull-right\"\n        ></se-dropdown-menu>\n    </div>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __param(1, core.Inject(smarteditcommons.DATA_TABLE_COMPONENT_DATA)),
        __metadata("design:paramtypes", [router.ActivatedRoute, Object, smarteditcommons.ICatalogVersionPermissionService,
            ManagePageService,
            core.ChangeDetectorRef])
    ], PageListDropdownItemsWrapperComponent);
    return PageListDropdownItemsWrapperComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PageListComponent", {
    selector: 'se-page-list',
    template: "<div class=\"se-page-list\"><se-toolbar cssClass=\"se-toolbar--shell\" imageRoot=\"imageRoot\" toolbarName=\"smartEditHeaderToolbar\"></se-toolbar><se-toolbar cssClass=\"se-toolbar--shell se-toolbar--shortcut\" imageRoot=\"imageRoot\" toolbarName=\"smartEditPagesToolbar\"></se-toolbar><div *ngIf=\"isReady\"><div class=\"se-page-list__header\"><span class=\"se-page-list__catalog-name\" translate=\"se.cms.pagelist.title\"></span><p class=\"se-page-list__sub-title\">{{ catalogName | seL10n | async }} - {{ catalogVersion }}</p></div><div class=\"se-page-list__body\"><div class=\"se-page-list__table-header\"><span class=\"se-paged-list__page-count-wrapper\"><span class=\"span-page-list__page-count-text\" translate=\"se.pagelist.countsearchresult\"></span> <span>&nbsp;</span> <span class=\"se-page-list__page-count\">({{ count }})</span></span><div class=\"se-page-list__table-header--right\"><div class=\"fd-form__group se-page-list__search\"><div class=\"se-input-group\"><input type=\"search\" class=\"se-input-group__input-area ySEPage-list-search-input\" maxlength=\"255\" name=\"query\" [ngModel]=\"query\" (ngModelChange)=\"onQueryChange($event)\" [placeholder]=\"'se.cms.pagelist.searchplaceholder' | translate\"/> <span class=\"sap-icon--search se-input-group__addon\"></span><div *ngIf=\"query\" aria-label=\"clear\" class=\"se-input-group__addon se-input-group__clear-btn\" (click)=\"reset()\"><span class=\"sap-icon--decline\"></span></div></div></div><button class=\"fd-button se-page-list__add\" (click)=\"openAddPageWizard()\" translate=\"se.cms.addpagewizard.addpage\"></button></div></div><div class=\"se-page-list__table-body\"><se-dynamic-paged-list [config]=\"pageListConfig\" [mask]=\"query\" (getApi)=\"getApi($event);\" (onItemsUpdate)=\"onPageItemsUpdate($event.pagination)\"></se-dynamic-paged-list></div></div></div></div>",
    styles: [".se-page-list{background-color:#edeff0;min-height:100vh;height:100%}.se-page-list__page-link-anchor{text-decoration:none!important;color:#51555a}.se-page-list__page-link-anchor:hover{color:#0a6ed1}.se-page-list__header{padding:16px 30px;background-color:#fff}.se-page-list__page-link-icon{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#51555a}.se-page-list__catalog-name{font-size:1.7142857143rem;line-height:1.3333333333;font-weight:400;display:block;margin-bottom:4px}.se-page-list__sub-title{color:#6a6d70}.se-page-list__body{padding:20px 20px 70px}.se-page-list__page-link--left{cursor:pointer}.se-page-list__page-link--left .se-page-list__page-link-anchor{margin-left:3px}.se-page-list__page-link--right{cursor:pointer}.se-page-list__page-link--right .se-page-list__page-link-anchor{margin-right:3px}.se-page-list__table-header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;background-color:#fff;height:56px;padding:20px;border-radius:4px 4px 0 0}.se-page-list__table-header--right{display:flex;flex-direction:row;align-items:center}.se-page-list__table-header .se-paged-list__page-count-wrapper{font-size:1.1428571429rem;line-height:1.25;font-weight:400;margin-right:auto}.se-page-list__table-body{padding-bottom:16px}.se-page-list__table-body .se-data-table__arrow{margin-left:2px}.se-page-list__table-body .se-paged-list-item{cursor:default}.se-page-list__search{margin-right:16px;width:380px}.se-page-list__add{text-transform:capitalize}.se-paged-list__header{font-size:1rem;line-height:1.4285714286;font-weight:400}.se-paged-list__header-dropdownitems,.se-paged-list__header-pageStatus,.se-paged-list__header-syncStatus{cursor:default}.se-paged-list-item-name a{text-decoration:none!important}.se-sync-btn__status--done{color:#0a7e3e}.se-sync-btn__status--not{color:#e9730c}.ySmartEditTrashPageToolbar{background-color:#fff}.fd-table td.se-paged-list-item-numberOfRestrictions,.fd-table td.se-paged-list-item-syncStatus,.fd-table th.se-paged-list__header-numberOfRestrictions,.fd-table th.se-paged-list__header-syncStatus{text-align:center}.fd-table td.se-paged-list-item-syncStatus{font-size:1.1428571429rem;line-height:1.25;font-weight:400}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    encapsulation: core.ViewEncapsulation.None
});
var /* @ngInject */ PageListComponent = /** @class */ (function () {
    PageListComponent.$inject = ["activatedRoute", "urlService", "catalogService", "addPageWizardService", "systemEventService", "cdr"];
    function /* @ngInject */ PageListComponent(activatedRoute, urlService, catalogService, addPageWizardService, systemEventService, cdr) {
        var _this = this;
        this.activatedRoute = activatedRoute;
        this.urlService = urlService;
        this.catalogService = catalogService;
        this.addPageWizardService = addPageWizardService;
        this.systemEventService = systemEventService;
        this.cdr = cdr;
        var params = this.activatedRoute.snapshot.params;
        this.isReady = false;
        this.count = 0;
        this.catalogId = params.catalogId;
        this.catalogVersion = params.catalogVersion;
        this.siteUid = params.siteId;
        this.catalogName = {};
        this.pageUriContext = this.urlService.buildPageUriContext(this.siteUid, this.catalogId, this.catalogVersion);
        this.uriContext = this.urlService.buildUriContext(this.siteUid, this.catalogId, this.catalogVersion);
        this.pageListConfig = {
            sortBy: 'name',
            reversed: false,
            itemsPerPage: 10,
            displayCount: true,
            injectedContext: {},
            keys: [],
            queryParams: {
                catalogId: this.catalogId,
                catalogVersion: this.catalogVersion,
                typeCode: 'AbstractPage',
                itemSearchParams: 'pageStatus:active',
                fields: 'PAGE_LIST'
            },
            renderers: {},
            uri: cmscommons.cmsitemsUri
        };
        this.query = '';
        this.querySubject$ = new rxjs.Subject();
        this.querySubscription = this.querySubject$
            .pipe(operators.debounceTime(500), operators.distinctUntilChanged())
            .subscribe(function (newValue) {
            _this.query = newValue;
            _this.cdr.detectChanges();
        });
    }
    /* @ngInject */ PageListComponent.prototype.ngOnInit = function () {
        return this.initialize();
    };
    /* @ngInject */ PageListComponent.prototype.ngOnDestroy = function () {
        this.eventUnsubscribe();
        this.querySubscription.unsubscribe();
    };
    /* @ngInject */ PageListComponent.prototype.onPageItemsUpdate = function (pagination) {
        this.count = pagination.totalCount;
    };
    PageListComponent.prototype.onPageItemsUpdate.$inject = ["pagination"];
    /* @ngInject */ PageListComponent.prototype.onContentCatalogUpdate = function () {
        if (this.dynamicPagedListApi) {
            this.dynamicPagedListApi.reloadItems();
        }
    };
    /* @ngInject */ PageListComponent.prototype.onQueryChange = function (value) {
        this.querySubject$.next(value);
    };
    PageListComponent.prototype.onQueryChange.$inject = ["value"];
    /* @ngInject */ PageListComponent.prototype.getApi = function (api) {
        this.dynamicPagedListApi = api;
    };
    PageListComponent.prototype.getApi.$inject = ["api"];
    /* @ngInject */ PageListComponent.prototype.openAddPageWizard = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.addPageWizardService.openAddPageWizard()];
                    case 1:
                        _a.sent();
                        this.dynamicPagedListApi.reloadItems();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageListComponent.prototype.reset = function () {
        this.query = '';
    };
    /* @ngInject */ PageListComponent.prototype.retrieveCatalogName = function () {
        return __awaiter(this, void 0, void 0, function () {
            var catalogs;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.getContentCatalogsForSite(this.siteUid)];
                    case 1:
                        catalogs = _a.sent();
                        this.catalogName = catalogs.find(function (catalog) { return catalog.catalogId === _this.catalogId; }).name;
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageListComponent.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isNonActive;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.isContentCatalogVersionNonActive()];
                    case 1:
                        isNonActive = _a.sent();
                        this.pageListConfig.keys = [
                            {
                                property: 'name',
                                i18n: 'se.cms.pagelist.headerpagename',
                                sortable: true,
                                component: PageNameWrapperComponent
                            },
                            {
                                property: 'uid',
                                i18n: 'se.cms.pagelist.headerpageid',
                                sortable: true
                            },
                            {
                                property: 'itemtype',
                                i18n: 'se.cms.pagelist.headerpagetype',
                                sortable: true
                            },
                            {
                                property: 'label',
                                i18n: 'se.cms.pagelist.headerpagelable',
                                sortable: false
                            },
                            {
                                property: 'masterTemplateId',
                                i18n: 'se.cms.pagelist.headerpagetemplate',
                                sortable: false
                            },
                            {
                                property: 'numberOfRestrictions',
                                i18n: 'se.cms.pagelist.headerrestrictions',
                                sortable: false,
                                component: NumberOfRestrictionsWrapperComponent
                            }
                        ];
                        if (isNonActive) {
                            this.pageListConfig.keys.push({
                                property: 'pageStatus',
                                i18n: 'se.cms.pagelist.headerpagestatus',
                                sortable: false,
                                component: PageStatusWrapperComponent
                            });
                        }
                        this.pageListConfig.keys.push({
                            property: 'dropdownitems',
                            i18n: '',
                            sortable: false,
                            component: PageListDropdownItemsWrapperComponent
                        });
                        return [4 /*yield*/, this.retrieveCatalogName()];
                    case 2:
                        _a.sent();
                        this.eventUnsubscribe = this.systemEventService.subscribe(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE, function () { return _this.onContentCatalogUpdate(); });
                        this.isReady = true;
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ PageListComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-page-list',
            template: "<div class=\"se-page-list\"><se-toolbar cssClass=\"se-toolbar--shell\" imageRoot=\"imageRoot\" toolbarName=\"smartEditHeaderToolbar\"></se-toolbar><se-toolbar cssClass=\"se-toolbar--shell se-toolbar--shortcut\" imageRoot=\"imageRoot\" toolbarName=\"smartEditPagesToolbar\"></se-toolbar><div *ngIf=\"isReady\"><div class=\"se-page-list__header\"><span class=\"se-page-list__catalog-name\" translate=\"se.cms.pagelist.title\"></span><p class=\"se-page-list__sub-title\">{{ catalogName | seL10n | async }} - {{ catalogVersion }}</p></div><div class=\"se-page-list__body\"><div class=\"se-page-list__table-header\"><span class=\"se-paged-list__page-count-wrapper\"><span class=\"span-page-list__page-count-text\" translate=\"se.pagelist.countsearchresult\"></span> <span>&nbsp;</span> <span class=\"se-page-list__page-count\">({{ count }})</span></span><div class=\"se-page-list__table-header--right\"><div class=\"fd-form__group se-page-list__search\"><div class=\"se-input-group\"><input type=\"search\" class=\"se-input-group__input-area ySEPage-list-search-input\" maxlength=\"255\" name=\"query\" [ngModel]=\"query\" (ngModelChange)=\"onQueryChange($event)\" [placeholder]=\"'se.cms.pagelist.searchplaceholder' | translate\"/> <span class=\"sap-icon--search se-input-group__addon\"></span><div *ngIf=\"query\" aria-label=\"clear\" class=\"se-input-group__addon se-input-group__clear-btn\" (click)=\"reset()\"><span class=\"sap-icon--decline\"></span></div></div></div><button class=\"fd-button se-page-list__add\" (click)=\"openAddPageWizard()\" translate=\"se.cms.addpagewizard.addpage\"></button></div></div><div class=\"se-page-list__table-body\"><se-dynamic-paged-list [config]=\"pageListConfig\" [mask]=\"query\" (getApi)=\"getApi($event);\" (onItemsUpdate)=\"onPageItemsUpdate($event.pagination)\"></se-dynamic-paged-list></div></div></div></div>",
            styles: [".se-page-list{background-color:#edeff0;min-height:100vh;height:100%}.se-page-list__page-link-anchor{text-decoration:none!important;color:#51555a}.se-page-list__page-link-anchor:hover{color:#0a6ed1}.se-page-list__header{padding:16px 30px;background-color:#fff}.se-page-list__page-link-icon{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#51555a}.se-page-list__catalog-name{font-size:1.7142857143rem;line-height:1.3333333333;font-weight:400;display:block;margin-bottom:4px}.se-page-list__sub-title{color:#6a6d70}.se-page-list__body{padding:20px 20px 70px}.se-page-list__page-link--left{cursor:pointer}.se-page-list__page-link--left .se-page-list__page-link-anchor{margin-left:3px}.se-page-list__page-link--right{cursor:pointer}.se-page-list__page-link--right .se-page-list__page-link-anchor{margin-right:3px}.se-page-list__table-header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;background-color:#fff;height:56px;padding:20px;border-radius:4px 4px 0 0}.se-page-list__table-header--right{display:flex;flex-direction:row;align-items:center}.se-page-list__table-header .se-paged-list__page-count-wrapper{font-size:1.1428571429rem;line-height:1.25;font-weight:400;margin-right:auto}.se-page-list__table-body{padding-bottom:16px}.se-page-list__table-body .se-data-table__arrow{margin-left:2px}.se-page-list__table-body .se-paged-list-item{cursor:default}.se-page-list__search{margin-right:16px;width:380px}.se-page-list__add{text-transform:capitalize}.se-paged-list__header{font-size:1rem;line-height:1.4285714286;font-weight:400}.se-paged-list__header-dropdownitems,.se-paged-list__header-pageStatus,.se-paged-list__header-syncStatus{cursor:default}.se-paged-list-item-name a{text-decoration:none!important}.se-sync-btn__status--done{color:#0a7e3e}.se-sync-btn__status--not{color:#e9730c}.ySmartEditTrashPageToolbar{background-color:#fff}.fd-table td.se-paged-list-item-numberOfRestrictions,.fd-table td.se-paged-list-item-syncStatus,.fd-table th.se-paged-list__header-numberOfRestrictions,.fd-table th.se-paged-list__header-syncStatus{text-align:center}.fd-table td.se-paged-list-item-syncStatus{font-size:1.1428571429rem;line-height:1.25;font-weight:400}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            encapsulation: core.ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [router.ActivatedRoute,
            smarteditcommons.IUrlService,
            smarteditcommons.ICatalogService,
            AddPageWizardService,
            smarteditcommons.SystemEventService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ PageListComponent);
    return /* @ngInject */ PageListComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "PagesLinkComponent", {
    selector: 'se-pages-link',
    template: "<div class=\"se-page-list__page-link--left\" (click)=\"backToPagelist()\"><span class=\"se-page-list__page-link-icon icon-navigation-left-arrow\"></span> <a class=\"se-page-list__page-link-anchor\">{{ 'se.cms.back.to.pagelist' | translate }}</a></div>",
    styles: [".se-page-list{background-color:#edeff0;min-height:100vh;height:100%}.se-page-list__page-link-anchor{text-decoration:none!important;color:#51555a}.se-page-list__page-link-anchor:hover{color:#0a6ed1}.se-page-list__header{padding:16px 30px;background-color:#fff}.se-page-list__page-link-icon{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#51555a}.se-page-list__catalog-name{font-size:1.7142857143rem;line-height:1.3333333333;font-weight:400;display:block;margin-bottom:4px}.se-page-list__sub-title{color:#6a6d70}.se-page-list__body{padding:20px 20px 70px}.se-page-list__page-link--left{cursor:pointer}.se-page-list__page-link--left .se-page-list__page-link-anchor{margin-left:3px}.se-page-list__page-link--right{cursor:pointer}.se-page-list__page-link--right .se-page-list__page-link-anchor{margin-right:3px}.se-page-list__table-header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;background-color:#fff;height:56px;padding:20px;border-radius:4px 4px 0 0}.se-page-list__table-header--right{display:flex;flex-direction:row;align-items:center}.se-page-list__table-header .se-paged-list__page-count-wrapper{font-size:1.1428571429rem;line-height:1.25;font-weight:400;margin-right:auto}.se-page-list__table-body{padding-bottom:16px}.se-page-list__table-body .se-data-table__arrow{margin-left:2px}.se-page-list__table-body .se-paged-list-item{cursor:default}.se-page-list__search{margin-right:16px;width:380px}.se-page-list__add{text-transform:capitalize}.se-paged-list__header{font-size:1rem;line-height:1.4285714286;font-weight:400}.se-paged-list__header-dropdownitems,.se-paged-list__header-pageStatus,.se-paged-list__header-syncStatus{cursor:default}.se-paged-list-item-name a{text-decoration:none!important}.se-sync-btn__status--done{color:#0a7e3e}.se-sync-btn__status--not{color:#e9730c}.ySmartEditTrashPageToolbar{background-color:#fff}.fd-table td.se-paged-list-item-numberOfRestrictions,.fd-table td.se-paged-list-item-syncStatus,.fd-table th.se-paged-list__header-numberOfRestrictions,.fd-table th.se-paged-list__header-syncStatus{text-align:center}.fd-table td.se-paged-list-item-syncStatus{font-size:1.1428571429rem;line-height:1.25;font-weight:400}"]
});
var /* @ngInject */ PagesLinkComponent = /** @class */ (function () {
    PagesLinkComponent.$inject = ["route", "seRouting"];
    function /* @ngInject */ PagesLinkComponent(route, seRouting) {
        this.route = route;
        this.seRouting = seRouting;
    }
    /* @ngInject */ PagesLinkComponent.prototype.ngOnInit = function () {
        this.siteId = this.route.snapshot.params.siteId;
        this.catalogId = this.route.snapshot.params.catalogId;
        this.catalogVersion = this.route.snapshot.params.catalogVersion;
    };
    /* @ngInject */ PagesLinkComponent.prototype.backToPagelist = function () {
        this.seRouting.go(("" + smarteditcommons.NG_ROUTE_PREFIX + cmscommons.PAGE_LIST_PATH)
            .replace(':siteId', this.siteId)
            .replace(':catalogId', this.catalogId)
            .replace(':catalogVersion', this.catalogVersion));
    };
    /* @ngInject */ PagesLinkComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-pages-link',
            template: "<div class=\"se-page-list__page-link--left\" (click)=\"backToPagelist()\"><span class=\"se-page-list__page-link-icon icon-navigation-left-arrow\"></span> <a class=\"se-page-list__page-link-anchor\">{{ 'se.cms.back.to.pagelist' | translate }}</a></div>",
            styles: [".se-page-list{background-color:#edeff0;min-height:100vh;height:100%}.se-page-list__page-link-anchor{text-decoration:none!important;color:#51555a}.se-page-list__page-link-anchor:hover{color:#0a6ed1}.se-page-list__header{padding:16px 30px;background-color:#fff}.se-page-list__page-link-icon{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#51555a}.se-page-list__catalog-name{font-size:1.7142857143rem;line-height:1.3333333333;font-weight:400;display:block;margin-bottom:4px}.se-page-list__sub-title{color:#6a6d70}.se-page-list__body{padding:20px 20px 70px}.se-page-list__page-link--left{cursor:pointer}.se-page-list__page-link--left .se-page-list__page-link-anchor{margin-left:3px}.se-page-list__page-link--right{cursor:pointer}.se-page-list__page-link--right .se-page-list__page-link-anchor{margin-right:3px}.se-page-list__table-header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;background-color:#fff;height:56px;padding:20px;border-radius:4px 4px 0 0}.se-page-list__table-header--right{display:flex;flex-direction:row;align-items:center}.se-page-list__table-header .se-paged-list__page-count-wrapper{font-size:1.1428571429rem;line-height:1.25;font-weight:400;margin-right:auto}.se-page-list__table-body{padding-bottom:16px}.se-page-list__table-body .se-data-table__arrow{margin-left:2px}.se-page-list__table-body .se-paged-list-item{cursor:default}.se-page-list__search{margin-right:16px;width:380px}.se-page-list__add{text-transform:capitalize}.se-paged-list__header{font-size:1rem;line-height:1.4285714286;font-weight:400}.se-paged-list__header-dropdownitems,.se-paged-list__header-pageStatus,.se-paged-list__header-syncStatus{cursor:default}.se-paged-list-item-name a{text-decoration:none!important}.se-sync-btn__status--done{color:#0a7e3e}.se-sync-btn__status--not{color:#e9730c}.ySmartEditTrashPageToolbar{background-color:#fff}.fd-table td.se-paged-list-item-numberOfRestrictions,.fd-table td.se-paged-list-item-syncStatus,.fd-table th.se-paged-list__header-numberOfRestrictions,.fd-table th.se-paged-list__header-syncStatus{text-align:center}.fd-table td.se-paged-list-item-syncStatus{font-size:1.1428571429rem;line-height:1.25;font-weight:400}"]
        }),
        __metadata("design:paramtypes", [router.ActivatedRoute, smarteditcommons.SmarteditRoutingService])
    ], /* @ngInject */ PagesLinkComponent);
    return /* @ngInject */ PagesLinkComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "RestrictionsModalComponent", {
    selector: 'se-restrictions-modal',
    template: "<div class=\"se-restrictions-list fd-menu__list fd-menu__list--separated\"><div class=\"se-restriction__item fd-menu__item\" *ngFor=\"let restriction of restrictions\"><div class=\"se-restrictions-list__item-content\"><div class=\"se-restriction__item-name\">{{ restriction.name }}</div><div class=\"se-restriction__item-type-and-id\">{{ restriction.type | seL10n | async }}</div><div class=\"se-restriction__item-description\">{{ restriction.description }}</div></div></div></div>",
    styles: ["#restrictions-label{display:none}.se-restriction__select{text-transform:capitalize;width:100%}.se-restrictions-list__item-content{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;cursor:default;flex-grow:1}#userGroups-selector .se-generic-editor-multiple-dropdown__match li[draggable=true]{display:flex;flex-direction:row;align-items:center;justify-content:center;display:inline-flex!important;border:1px solid #d9d9d9;margin:4px 0 4px 8px;padding:4px 8px;border-radius:4px;background-color:var(--fd-token-background-color);color:#51555a;min-height:28px}"]
});
var RestrictionsModalComponent = /** @class */ (function () {
    function RestrictionsModalComponent(modalRef, cmsitemsRestService, cdr) {
        this.modalRef = modalRef;
        this.cmsitemsRestService = cmsitemsRestService;
        this.cdr = cdr;
    }
    RestrictionsModalComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var restrictionsData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cmsitemsRestService.getByIdsNoCache(this.modalRef.data.modalData, 'FULL')];
                    case 1:
                        restrictionsData = _a.sent();
                        this.restrictions = (restrictionsData.response
                            ? restrictionsData.response
                            : [restrictionsData]);
                        this.cdr.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    RestrictionsModalComponent = __decorate([
        core.Component({
            selector: 'se-restrictions-modal',
            template: "<div class=\"se-restrictions-list fd-menu__list fd-menu__list--separated\"><div class=\"se-restriction__item fd-menu__item\" *ngFor=\"let restriction of restrictions\"><div class=\"se-restrictions-list__item-content\"><div class=\"se-restriction__item-name\">{{ restriction.name }}</div><div class=\"se-restriction__item-type-and-id\">{{ restriction.type | seL10n | async }}</div><div class=\"se-restriction__item-description\">{{ restriction.description }}</div></div></div></div>",
            styles: ["#restrictions-label{display:none}.se-restriction__select{text-transform:capitalize;width:100%}.se-restrictions-list__item-content{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;word-break:break-all;cursor:default;flex-grow:1}#userGroups-selector .se-generic-editor-multiple-dropdown__match li[draggable=true]{display:flex;flex-direction:row;align-items:center;justify-content:center;display:inline-flex!important;border:1px solid #d9d9d9;margin:4px 0 4px 8px;padding:4px 8px;border-radius:4px;background-color:var(--fd-token-background-color);color:#51555a;min-height:28px}"]
        }),
        __metadata("design:paramtypes", [core$2.ModalRef,
            cmscommons.CmsitemsRestService,
            core.ChangeDetectorRef])
    ], RestrictionsModalComponent);
    return RestrictionsModalComponent;
}());

window.__smartedit__.addDecoratorPayload("Component", "RestrictionsViewerComponent", {
    selector: 'se-restrictions-viewer',
    template: "<div *ngIf=\"restrictions?.length > 0; else noRestrictions\"><a href=\"\" class=\"show-restrictions-btn\" (click)=\"showRestrictions($event)\">{{restrictions.length}}</a></div><ng-template #noRestrictions><div>-</div></ng-template>",
    changeDetection: core.ChangeDetectionStrategy.OnPush
});
var /* @ngInject */ RestrictionsViewerComponent = /** @class */ (function () {
    RestrictionsViewerComponent.$inject = ["modalService", "logService"];
    function /* @ngInject */ RestrictionsViewerComponent(modalService, logService) {
        this.modalService = modalService;
        this.logService = logService;
    }
    /* @ngInject */ RestrictionsViewerComponent.prototype.showRestrictions = function (event) {
        var _this = this;
        event.preventDefault();
        return this.modalService
            .open({
            component: RestrictionsModalComponent,
            data: this.restrictions,
            templateConfig: {
                title: 'se.cms.restrictionsviewer.title',
                isDismissButtonVisible: true
            },
            config: {
                modalPanelClass: 'modal-md'
            }
        })
            .afterClosed.toPromise()
            .catch(function () {
            _this.logService.warn('RestrictionsViewer - modal closed without any action');
        });
    };
    RestrictionsViewerComponent.prototype.showRestrictions.$inject = ["event"];
    __decorate([
        core.Input(),
        __metadata("design:type", Array)
    ], /* @ngInject */ RestrictionsViewerComponent.prototype, "restrictions", void 0);
    /* @ngInject */ RestrictionsViewerComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-restrictions-viewer',
            template: "<div *ngIf=\"restrictions?.length > 0; else noRestrictions\"><a href=\"\" class=\"show-restrictions-btn\" (click)=\"showRestrictions($event)\">{{restrictions.length}}</a></div><ng-template #noRestrictions><div>-</div></ng-template>",
            changeDetection: core.ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [smarteditcommons.ModalService, smarteditcommons.LogService])
    ], /* @ngInject */ RestrictionsViewerComponent);
    return /* @ngInject */ RestrictionsViewerComponent;
}());

/**
 * Module containing all the components and services necessary to manage a page.
 */
var PageComponentsModule = /** @class */ (function () {
    function PageComponentsModule() {
    }
    PageComponentsModule = __decorate([
        core.NgModule({
            imports: [
                common.CommonModule,
                smarteditcommons.L10nPipeModule,
                forms.FormsModule,
                smarteditcommons.TranslationModule.forChild(),
                smarteditcommons.HasOperationPermissionDirectiveModule,
                smarteditcommons.TooltipModule,
                WorkflowModule,
                smarteditcommons.SharedComponentsModule,
                smarteditcommons.SelectModule,
                smarteditcommons.SeGenericEditorModule,
                PageRestrictionsModule,
                smarteditcontainer.ToolbarModule,
                smarteditcommons.ClientPagedListModule,
                core$2.PopoverModule
            ],
            providers: [
                ContextAwarePageStructureService,
                PageBuilderFactory,
                PageEditorModalService,
                PageEditorModalConfigService,
                PageInfoMenuService,
                ClonePageBuilderFactory,
                ClonePageWizardService
            ],
            declarations: [
                UpdatePageStatusComponent,
                RestorePageItemComponent,
                PermanentlyDeletePageItemComponent,
                PagesLinkComponent,
                RestrictionsViewerComponent,
                RestrictionsModalComponent,
                NumberOfRestrictionsWrapperComponent,
                PageStatusWrapperComponent,
                ModifiedTimeWrapperComponent,
                TrashListDropdownItemsWrapperComponent,
                SelectPageTemplateComponent,
                SelectPageTypeComponent,
                SyncPageItemComponent,
                DeletePageToolbarItemComponent,
                HomepageIconComponent,
                AddPageWizardComponent,
                PageTypeStepComponent,
                PageTemplateStepComponent,
                PageDisplayConditionStepComponent,
                PageInfoStepComponent,
                PageRestrictionsStepComponent,
                ClonePageWizardComponent,
                ClonePageOptionsStepComponent,
                ClonePageRestrictionsStepComponent,
                SelectTargetCatalogVersionComponent,
                NewPageDisplayConditionComponent,
                ComponentCloneOptionFormComponent,
                ComponentCloneInfoFormComponent,
                ClonePageInfoStepComponent,
                EditPageItemComponent,
                ClonePageItemComponent,
                DeletePageItemComponent,
                PageListLinkComponent,
                PageListComponent,
                PageNameWrapperComponent,
                PageListDropdownItemsWrapperComponent,
                TrashLinkComponent,
                DisplayConditionsPrimaryPageComponent,
                DisplayConditionsPageInfoComponent,
                DisplayConditionsPageVariationsComponent,
                CreationDateRendererComponent,
                DisplayConditionsEditorComponent,
                PageInfoMenuComponent
            ],
            entryComponents: [
                UpdatePageStatusComponent,
                RestorePageItemComponent,
                PermanentlyDeletePageItemComponent,
                PagesLinkComponent,
                RestrictionsViewerComponent,
                RestrictionsModalComponent,
                NumberOfRestrictionsWrapperComponent,
                PageStatusWrapperComponent,
                ModifiedTimeWrapperComponent,
                TrashListDropdownItemsWrapperComponent,
                SelectPageTemplateComponent,
                SelectPageTypeComponent,
                SyncPageItemComponent,
                DeletePageToolbarItemComponent,
                HomepageIconComponent,
                AddPageWizardComponent,
                PageTypeStepComponent,
                PageTemplateStepComponent,
                PageDisplayConditionStepComponent,
                PageInfoStepComponent,
                PageRestrictionsStepComponent,
                ClonePageWizardComponent,
                ClonePageOptionsStepComponent,
                ClonePageRestrictionsStepComponent,
                SelectTargetCatalogVersionComponent,
                NewPageDisplayConditionComponent,
                ComponentCloneOptionFormComponent,
                ComponentCloneInfoFormComponent,
                ClonePageInfoStepComponent,
                EditPageItemComponent,
                ClonePageItemComponent,
                DeletePageItemComponent,
                PageListLinkComponent,
                PageNameWrapperComponent,
                PageListDropdownItemsWrapperComponent,
                TrashLinkComponent,
                DisplayConditionsPrimaryPageComponent,
                DisplayConditionsPageInfoComponent,
                DisplayConditionsPageVariationsComponent,
                CreationDateRendererComponent,
                DisplayConditionsEditorComponent,
                PageInfoMenuComponent
            ],
            exports: [HomepageIconComponent]
        })
    ], PageComponentsModule);
    return PageComponentsModule;
}());

window.__smartedit__.addDecoratorPayload("Component", "TrashedPageListComponent", {
    selector: 'se-trashed-page-list',
    template: "<div class=\"se-page-list\"><se-toolbar cssClass=\"se-toolbar--shell\" imageRoot=\"imageRoot\" toolbarName=\"smartEditHeaderToolbar\"></se-toolbar><se-toolbar cssClass=\"se-toolbar--shell ySmartEditTrashPageToolbar\" imageRoot=\"imageRoot\" toolbarName=\"smartEditTrashPageToolbar\"></se-toolbar><div class=\"se-page-list__header\"><span class=\"se-page-list__catalog-name\" translate=\"se.cms.trashedpagelist.title\"></span><p class=\"se-page-list__sub-title\">{{ catalogName | seL10n | async }} - {{ catalogVersion }}</p></div><div class=\"se-page-list__body\"><div class=\"se-page-list__table-header\"><span class=\"se-paged-list__page-count-wrapper\"><span class=\"span-page-list__page-count-text\" translate=\"se.pagelist.countsearchresult\"></span> <span>&nbsp;</span> <span class=\"se-page-list__page-count\">({{ count }})</span></span><div class=\"fd-form__group se-page-list__search\"><div class=\"se-input-group\"><input type=\"search\" class=\"se-input-group__input-area ySEPage-list-search-input\" placeholder=\"{{ 'se.cms.pagelist.searchplaceholder' | translate }}\" [ngModel]=\"mask\" (ngModelChange)=\"onMaskChange($event)\" name=\"mask\"/> <span class=\"sap-icon--search se-input-group__addon\"></span><div *ngIf=\"mask\" aria-label=\"clear\" class=\"se-input-group__addon se-input-group__clear-btn\" (click)=\"reset()\"><span class=\"sap-icon--decline\"></span></div></div></div></div><div class=\"se-page-list__table-body\"><se-dynamic-paged-list class=\"se-trashed-pages\" [config]=\"trashedPageListConfig\" [mask]=\"mask\" (getApi)=\"getApi($event);\" (onItemsUpdate)=\"onPageItemsUpdate($event.pagination)\"></se-dynamic-paged-list></div></div></div>",
    styles: [".se-page-list{background-color:#edeff0;min-height:100vh;height:100%}.se-page-list__page-link-anchor{text-decoration:none!important;color:#51555a}.se-page-list__page-link-anchor:hover{color:#0a6ed1}.se-page-list__header{padding:16px 30px;background-color:#fff}.se-page-list__page-link-icon{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#51555a}.se-page-list__catalog-name{font-size:1.7142857143rem;line-height:1.3333333333;font-weight:400;display:block;margin-bottom:4px}.se-page-list__sub-title{color:#6a6d70}.se-page-list__body{padding:20px 20px 70px}.se-page-list__page-link--left{cursor:pointer}.se-page-list__page-link--left .se-page-list__page-link-anchor{margin-left:3px}.se-page-list__page-link--right{cursor:pointer}.se-page-list__page-link--right .se-page-list__page-link-anchor{margin-right:3px}.se-page-list__table-header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;background-color:#fff;height:56px;padding:20px;border-radius:4px 4px 0 0}.se-page-list__table-header--right{display:flex;flex-direction:row;align-items:center}.se-page-list__table-header .se-paged-list__page-count-wrapper{font-size:1.1428571429rem;line-height:1.25;font-weight:400;margin-right:auto}.se-page-list__table-body{padding-bottom:16px}.se-page-list__table-body .se-data-table__arrow{margin-left:2px}.se-page-list__table-body .se-paged-list-item{cursor:default}.se-page-list__search{margin-right:16px;width:380px}.se-page-list__add{text-transform:capitalize}.se-paged-list__header{font-size:1rem;line-height:1.4285714286;font-weight:400}.se-paged-list__header-dropdownitems,.se-paged-list__header-pageStatus,.se-paged-list__header-syncStatus{cursor:default}.se-paged-list-item-name a{text-decoration:none!important}.se-sync-btn__status--done{color:#0a7e3e}.se-sync-btn__status--not{color:#e9730c}.ySmartEditTrashPageToolbar{background-color:#fff}.fd-table td.se-paged-list-item-numberOfRestrictions,.fd-table td.se-paged-list-item-syncStatus,.fd-table th.se-paged-list__header-numberOfRestrictions,.fd-table th.se-paged-list__header-syncStatus{text-align:center}.fd-table td.se-paged-list-item-syncStatus{font-size:1.1428571429rem;line-height:1.25;font-weight:400}"],
    changeDetection: core.ChangeDetectionStrategy.OnPush,
    encapsulation: core.ViewEncapsulation.None
});
var /* @ngInject */ TrashedPageListComponent = /** @class */ (function () {
    TrashedPageListComponent.$inject = ["catalogService", "route", "urlService", "systemEventService", "cdr"];
    function /* @ngInject */ TrashedPageListComponent(catalogService, route, urlService, systemEventService, cdr) {
        this.catalogService = catalogService;
        this.route = route;
        this.urlService = urlService;
        this.systemEventService = systemEventService;
        this.cdr = cdr;
        this.mask = '';
        this.dropdownItems = [];
        this.count = 0;
        this.maskSubject$ = new Subject.Subject();
    }
    /* @ngInject */ TrashedPageListComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.initialize()];
                    case 1:
                        _a.sent();
                        this.unsubscribeEventListener = this.systemEventService.subscribe(smarteditcommons.EVENT_CONTENT_CATALOG_UPDATE, this.onContentCatalogUpdate.bind(this));
                        this.maskSubscription = this.maskSubject$
                            .pipe(operators$1.debounceTime(500), operators$1.distinctUntilChanged())
                            .subscribe(function (newValue) {
                            _this.mask = newValue;
                            _this.cdr.detectChanges();
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ TrashedPageListComponent.prototype.ngOnDestroy = function () {
        this.unsubscribeEventListener();
        this.maskSubscription.unsubscribe();
    };
    /* @ngInject */ TrashedPageListComponent.prototype.onMaskChange = function (newValue) {
        this.maskSubject$.next(newValue);
    };
    TrashedPageListComponent.prototype.onMaskChange.$inject = ["newValue"];
    /* @ngInject */ TrashedPageListComponent.prototype.onPageItemsUpdate = function (pagination) {
        this.count = pagination.totalCount;
    };
    TrashedPageListComponent.prototype.onPageItemsUpdate.$inject = ["pagination"];
    /* @ngInject */ TrashedPageListComponent.prototype.reset = function () {
        this.mask = '';
    };
    /* @ngInject */ TrashedPageListComponent.prototype.getApi = function ($api) {
        this.dynamicPagedListApi = $api;
    };
    TrashedPageListComponent.prototype.getApi.$inject = ["$api"];
    /* @ngInject */ TrashedPageListComponent.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.setSiteParams();
                this.setUriContext();
                this.setTrashedListConfigBasis();
                this.setTrashedListColumns();
                return [2 /*return*/, this.setCatalogName()];
            });
        });
    };
    /* @ngInject */ TrashedPageListComponent.prototype.onContentCatalogUpdate = function () {
        if (this.dynamicPagedListApi) {
            this.dynamicPagedListApi.reloadItems();
        }
    };
    /* @ngInject */ TrashedPageListComponent.prototype.setSiteParams = function () {
        this.siteUID = this.route.snapshot.params.siteId;
        this.catalogId = this.route.snapshot.params.catalogId;
        this.catalogVersion = this.route.snapshot.params.catalogVersion;
    };
    /* @ngInject */ TrashedPageListComponent.prototype.setUriContext = function () {
        this.uriContext = this.urlService.buildUriContext(this.siteUID, this.catalogId, this.catalogVersion);
    };
    /* @ngInject */ TrashedPageListComponent.prototype.setTrashedListConfigBasis = function () {
        this.trashedPageListConfig = {
            sortBy: 'name',
            reversed: false,
            itemsPerPage: 10,
            displayCount: true,
            uri: cmscommons.cmsitemsUri,
            queryParams: {
                catalogId: this.catalogId,
                catalogVersion: this.catalogVersion,
                typeCode: 'AbstractPage',
                itemSearchParams: 'pageStatus:deleted'
            },
            keys: [],
            renderers: {},
            injectedContext: {}
        };
    };
    /* @ngInject */ TrashedPageListComponent.prototype.setCatalogName = function () {
        return __awaiter(this, void 0, void 0, function () {
            var catalogs;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.catalogService.getContentCatalogsForSite(this.siteUID)];
                    case 1:
                        catalogs = _a.sent();
                        this.catalogName = catalogs.find(function (catalog) { return catalog.catalogId === _this.catalogId; }).name;
                        return [2 /*return*/];
                }
            });
        });
    };
    /* @ngInject */ TrashedPageListComponent.prototype.setTrashedListColumns = function () {
        this.trashedPageListConfig.keys = [
            {
                property: 'name',
                i18n: 'se.cms.pagelist.headerpagename',
                sortable: true
            },
            {
                property: 'uid',
                i18n: 'se.cms.pagelist.headerpageid',
                sortable: true
            },
            {
                property: 'itemtype',
                i18n: 'se.cms.pagelist.headerpagetype',
                sortable: true
            },
            {
                property: 'label',
                i18n: 'se.cms.pagelist.headerpagelable',
                sortable: false
            },
            {
                property: 'numberOfRestrictions',
                i18n: 'se.cms.pagelist.headerrestrictions',
                sortable: false,
                component: NumberOfRestrictionsWrapperComponent
            },
            {
                property: 'modifiedtime',
                i18n: 'se.cms.trashedpagelist.trashed.date',
                sortable: true,
                component: ModifiedTimeWrapperComponent
            },
            {
                property: 'pageStatus',
                i18n: 'se.cms.pagelist.headerpagestatus',
                sortable: false,
                component: PageStatusWrapperComponent
            },
            {
                property: 'dropdownitems',
                i18n: '',
                sortable: false,
                component: TrashListDropdownItemsWrapperComponent
            }
        ];
    };
    /* @ngInject */ TrashedPageListComponent = __decorate([
        smarteditcommons.SeDowngradeComponent(),
        core.Component({
            selector: 'se-trashed-page-list',
            template: "<div class=\"se-page-list\"><se-toolbar cssClass=\"se-toolbar--shell\" imageRoot=\"imageRoot\" toolbarName=\"smartEditHeaderToolbar\"></se-toolbar><se-toolbar cssClass=\"se-toolbar--shell ySmartEditTrashPageToolbar\" imageRoot=\"imageRoot\" toolbarName=\"smartEditTrashPageToolbar\"></se-toolbar><div class=\"se-page-list__header\"><span class=\"se-page-list__catalog-name\" translate=\"se.cms.trashedpagelist.title\"></span><p class=\"se-page-list__sub-title\">{{ catalogName | seL10n | async }} - {{ catalogVersion }}</p></div><div class=\"se-page-list__body\"><div class=\"se-page-list__table-header\"><span class=\"se-paged-list__page-count-wrapper\"><span class=\"span-page-list__page-count-text\" translate=\"se.pagelist.countsearchresult\"></span> <span>&nbsp;</span> <span class=\"se-page-list__page-count\">({{ count }})</span></span><div class=\"fd-form__group se-page-list__search\"><div class=\"se-input-group\"><input type=\"search\" class=\"se-input-group__input-area ySEPage-list-search-input\" placeholder=\"{{ 'se.cms.pagelist.searchplaceholder' | translate }}\" [ngModel]=\"mask\" (ngModelChange)=\"onMaskChange($event)\" name=\"mask\"/> <span class=\"sap-icon--search se-input-group__addon\"></span><div *ngIf=\"mask\" aria-label=\"clear\" class=\"se-input-group__addon se-input-group__clear-btn\" (click)=\"reset()\"><span class=\"sap-icon--decline\"></span></div></div></div></div><div class=\"se-page-list__table-body\"><se-dynamic-paged-list class=\"se-trashed-pages\" [config]=\"trashedPageListConfig\" [mask]=\"mask\" (getApi)=\"getApi($event);\" (onItemsUpdate)=\"onPageItemsUpdate($event.pagination)\"></se-dynamic-paged-list></div></div></div>",
            styles: [".se-page-list{background-color:#edeff0;min-height:100vh;height:100%}.se-page-list__page-link-anchor{text-decoration:none!important;color:#51555a}.se-page-list__page-link-anchor:hover{color:#0a6ed1}.se-page-list__header{padding:16px 30px;background-color:#fff}.se-page-list__page-link-icon{font-size:.8571428571rem;line-height:1.3333333333;font-weight:400;color:#51555a}.se-page-list__catalog-name{font-size:1.7142857143rem;line-height:1.3333333333;font-weight:400;display:block;margin-bottom:4px}.se-page-list__sub-title{color:#6a6d70}.se-page-list__body{padding:20px 20px 70px}.se-page-list__page-link--left{cursor:pointer}.se-page-list__page-link--left .se-page-list__page-link-anchor{margin-left:3px}.se-page-list__page-link--right{cursor:pointer}.se-page-list__page-link--right .se-page-list__page-link-anchor{margin-right:3px}.se-page-list__table-header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;background-color:#fff;height:56px;padding:20px;border-radius:4px 4px 0 0}.se-page-list__table-header--right{display:flex;flex-direction:row;align-items:center}.se-page-list__table-header .se-paged-list__page-count-wrapper{font-size:1.1428571429rem;line-height:1.25;font-weight:400;margin-right:auto}.se-page-list__table-body{padding-bottom:16px}.se-page-list__table-body .se-data-table__arrow{margin-left:2px}.se-page-list__table-body .se-paged-list-item{cursor:default}.se-page-list__search{margin-right:16px;width:380px}.se-page-list__add{text-transform:capitalize}.se-paged-list__header{font-size:1rem;line-height:1.4285714286;font-weight:400}.se-paged-list__header-dropdownitems,.se-paged-list__header-pageStatus,.se-paged-list__header-syncStatus{cursor:default}.se-paged-list-item-name a{text-decoration:none!important}.se-sync-btn__status--done{color:#0a7e3e}.se-sync-btn__status--not{color:#e9730c}.ySmartEditTrashPageToolbar{background-color:#fff}.fd-table td.se-paged-list-item-numberOfRestrictions,.fd-table td.se-paged-list-item-syncStatus,.fd-table th.se-paged-list__header-numberOfRestrictions,.fd-table th.se-paged-list__header-syncStatus{text-align:center}.fd-table td.se-paged-list-item-syncStatus{font-size:1.1428571429rem;line-height:1.25;font-weight:400}"],
            changeDetection: core.ChangeDetectionStrategy.OnPush,
            encapsulation: core.ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [smarteditcommons.ICatalogService,
            router.ActivatedRoute,
            smarteditcommons.IUrlService,
            smarteditcommons.SystemEventService,
            core.ChangeDetectorRef])
    ], /* @ngInject */ TrashedPageListComponent);
    return /* @ngInject */ TrashedPageListComponent;
}());

var TrashedPageListModule = /** @class */ (function () {
    function TrashedPageListModule() {
    }
    TrashedPageListModule = __decorate([
        core.NgModule({
            imports: [
                common.CommonModule,
                smarteditcommons.SeTranslationModule.forChild(),
                forms.FormsModule,
                smarteditcontainer.ToolbarModule,
                smarteditcommons.L10nPipeModule,
                smarteditcommons.DynamicPagedListModule
            ],
            declarations: [TrashedPageListComponent]
        })
    ], TrashedPageListModule);
    return TrashedPageListModule;
}());

var /* @ngInject */ PageContentSlotsComponentsRestService = /** @class */ (function (_super) {
    __extends(/* @ngInject */ PageContentSlotsComponentsRestService, _super);
    function /* @ngInject */ PageContentSlotsComponentsRestService() {
        return _super.call(this) || this;
    }
    /* @ngInject */ PageContentSlotsComponentsRestService = __decorate([
        smarteditcommons.GatewayProxied('clearCache', 'getSlotsToComponentsMapForPageUid'),
        smarteditcommons.SeDowngradeService(cmscommons.IPageContentSlotsComponentsRestService),
        __metadata("design:paramtypes", [])
    ], /* @ngInject */ PageContentSlotsComponentsRestService);
    return /* @ngInject */ PageContentSlotsComponentsRestService;
}(cmscommons.IPageContentSlotsComponentsRestService));

/**
 * Provides REST API for the CMS fallbacks endpoint.
 *
 * Used to fetch Primary Pages IDs for Variation Pages.
 */
var /* @ngInject */ PagesFallbacksRestService = /** @class */ (function () {
    PagesFallbacksRestService.$inject = ["restServiceFactory"];
    function /* @ngInject */ PagesFallbacksRestService(restServiceFactory) {
        this.restServiceFactory = restServiceFactory;
        this.fallbacksForPageIdResource = restServiceFactory.get(this.getUri());
    }
    /* @ngInject */ PagesFallbacksRestService.prototype.getFallbacksForPageId = function (pageId) {
        return this.fallbacksForPageIdResource.get({ pageId: pageId }).then(function (response) { return response.uids; });
    };
    PagesFallbacksRestService.prototype.getFallbacksForPageId.$inject = ["pageId"];
    /* @ngInject */ PagesFallbacksRestService.prototype.getFallbacksForPageIdAndContext = function (pageId, uriContext) {
        var uri = this.getUri(uriContext[smarteditcommons.CONTEXT_SITE_ID], uriContext[smarteditcommons.CONTEXT_CATALOG], uriContext[smarteditcommons.CONTEXT_CATALOG_VERSION]);
        var resource = this.restServiceFactory.get(uri);
        return resource.get({ pageId: pageId }).then(function (response) { return response.uids; });
    };
    PagesFallbacksRestService.prototype.getFallbacksForPageIdAndContext.$inject = ["pageId", "uriContext"];
    /* @ngInject */ PagesFallbacksRestService.prototype.getUri = function (siteId, catalogId, catalogVersionId) {
        if (siteId === void 0) { siteId = smarteditcommons.PAGE_CONTEXT_SITE_ID; }
        if (catalogId === void 0) { catalogId = smarteditcommons.PAGE_CONTEXT_CATALOG; }
        if (catalogVersionId === void 0) { catalogVersionId = smarteditcommons.PAGE_CONTEXT_CATALOG_VERSION; }
        return "/cmswebservices/v1/sites/" + siteId + "/catalogs/" + catalogId + "/versions/" + catalogVersionId + "/pages/:pageId/fallbacks";
    };
    PagesFallbacksRestService.prototype.getUri.$inject = ["siteId", "catalogId", "catalogVersionId"];
    /* @ngInject */ PagesFallbacksRestService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory])
    ], /* @ngInject */ PagesFallbacksRestService);
    return /* @ngInject */ PagesFallbacksRestService;
}());

/** Provides REST services for the CMS pages rest endpoint. */
var /* @ngInject */ PagesRestService = /** @class */ (function () {
    PagesRestService.$inject = ["restServiceFactory"];
    function /* @ngInject */ PagesRestService(restServiceFactory) {
        this.restServiceFactory = restServiceFactory;
        this.URI = "/cmswebservices/v1/sites/" + smarteditcommons.PAGE_CONTEXT_SITE_ID + "/catalogs/" + smarteditcommons.PAGE_CONTEXT_CATALOG + "/versions/" + smarteditcommons.PAGE_CONTEXT_CATALOG_VERSION + "/pages/:pageUid";
    }
    /**
     * Fetches a list of pages for a given array of UIDs.
     * It uses the current site, catalog and catalog version from the session.
     *
     * @returns A promise resolving to a list of pages, or an empty list.
     */
    /* @ngInject */ PagesRestService.prototype.get = function (uids) {
        return this.restServiceFactory
            .get(this.URI, 'pageUid')
            .get({ uids: uids })
            .then(function (response) { return response.pages; });
    };
    PagesRestService.prototype.get.$inject = ["uids"];
    /**
     * Fetches a page for a given UID.
     * It uses the current site, catalog and catalog version from the session.
     *
     * @param pageUid A page UID of the page to fetch
     */
    /* @ngInject */ PagesRestService.prototype.getById = function (pageUid) {
        return this.restServiceFactory.get(this.URI, 'pageUid').get({ pageUid: pageUid });
    };
    PagesRestService.prototype.getById.$inject = ["pageUid"];
    /**
     * Updates a page for a given site, catalog, and catalog version.
     * It uses the current site, catalog and catalog version from the session.
     *
     * @param pageUid The page UID of the page to update.
     * @param payload The page object to be applied to the page resource as it exists on the backend.
     *
     * @returns A promise that resolves to a JSON object representing the updated page.
     */
    /* @ngInject */ PagesRestService.prototype.update = function (pageUid, payload) {
        var uri = new smarteditcommons.URIBuilder(this.URI).replaceParams(payload).build();
        var extendedParams = lodash.assign({
            pageUid: pageUid
        }, payload);
        return this.restServiceFactory.get(uri, 'pageUid').update(extendedParams);
    };
    PagesRestService.prototype.update.$inject = ["pageUid", "payload"];
    /* @ngInject */ PagesRestService = __decorate([
        smarteditcommons.SeDowngradeService(),
        __metadata("design:paramtypes", [smarteditcommons.RestServiceFactory])
    ], /* @ngInject */ PagesRestService);
    return /* @ngInject */ PagesRestService;
}());

var /* @ngInject */ ComponentSharedService = /** @class */ (function (_super) {
    __extends(/* @ngInject */ ComponentSharedService, _super);
    function /* @ngInject */ ComponentSharedService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /* @ngInject */ ComponentSharedService = __decorate([
        smarteditcommons.SeDowngradeService(cmscommons.IComponentSharedService),
        smarteditcommons.GatewayProxied()
    ], /* @ngInject */ ComponentSharedService);
    return /* @ngInject */ ComponentSharedService;
}(cmscommons.IComponentSharedService));

var /* @ngInject */ ContextAwareEditableItemService = /** @class */ (function (_super) {
    __extends(/* @ngInject */ ContextAwareEditableItemService, _super);
    ContextAwareEditableItemService.$inject = ["workflowService", "pageService"];
    function /* @ngInject */ ContextAwareEditableItemService(workflowService, pageService) {
        var _this = _super.call(this) || this;
        _this.workflowService = workflowService;
        _this.pageService = pageService;
        return _this;
    }
    /* @ngInject */ ContextAwareEditableItemService.prototype.isItemEditable = function (itemUid) {
        return __awaiter(this, void 0, void 0, function () {
            var workflowEditableItems, item, editable;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.workflowService.getWorkflowEditableItems([
                            itemUid
                        ])];
                    case 1:
                        workflowEditableItems = _a.sent();
                        item = workflowEditableItems.find(function (data) { return data.uid === itemUid; });
                        if (!item.editableInWorkflow) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.editableInCurrentPageContext(item.editableInWorkflow)];
                    case 2:
                        editable = _a.sent();
                        return [2 /*return*/, item.editableByUser && editable];
                    case 3: return [2 /*return*/, item.editableByUser];
                }
            });
        });
    };
    ContextAwareEditableItemService.prototype.isItemEditable.$inject = ["itemUid"];
    /**
     * Verifies whether the item's active workflow equals to the workflow of page currently in preview.
     */
    /* @ngInject */ ContextAwareEditableItemService.prototype.editableInCurrentPageContext = function (editableInWorkflow) {
        return __awaiter(this, void 0, void 0, function () {
            var pageInfo, activeWorkflow, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.pageService.getCurrentPageInfo()];
                    case 1:
                        pageInfo = _b.sent();
                        return [4 /*yield*/, this.workflowService.getActiveWorkflowForPageUuid(pageInfo.uid)];
                    case 2:
                        activeWorkflow = _b.sent();
                        return [2 /*return*/, activeWorkflow !== null && activeWorkflow.workflowCode === editableInWorkflow];
                    case 3:
                        _a = _b.sent();
                        return [2 /*return*/, true];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ContextAwareEditableItemService.prototype.editableInCurrentPageContext.$inject = ["editableInWorkflow"];
    /* @ngInject */ ContextAwareEditableItemService = __decorate([
        smarteditcommons.SeDowngradeService(cmscommons.IContextAwareEditableItemService),
        smarteditcommons.GatewayProxied(),
        __metadata("design:paramtypes", [WorkflowService, cmscommons.IPageService])
    ], /* @ngInject */ ContextAwareEditableItemService);
    return /* @ngInject */ ContextAwareEditableItemService;
}(cmscommons.IContextAwareEditableItemService));

/**
 * Guard that prevents unauthorized user from navigating to Storefront Page.
 *
 * @internal
 * @ignore
 */
var /* @ngInject */ ExperienceGuard = /** @class */ (function () {
    ExperienceGuard.$inject = ["catalogAwareRouteResolverHelper", "routing"];
    function /* @ngInject */ ExperienceGuard(catalogAwareRouteResolverHelper, routing) {
        this.catalogAwareRouteResolverHelper = catalogAwareRouteResolverHelper;
        this.routing = routing;
    }
    /**
     * It will redirect current user to the Landing Page if the user doesn't have a read permission to the current catalog version.
     */
    /* @ngInject */ ExperienceGuard.prototype.canActivate = function (route) {
        var _this = this;
        return this.catalogAwareRouteResolverHelper
            .experienceFromPathResolve(route.params)
            .catch(function () {
            _this.routing.go(smarteditcommons.NG_ROUTE_PREFIX);
            return false;
        });
    };
    ExperienceGuard.prototype.canActivate.$inject = ["route"];
    var _a;
    /* @ngInject */ ExperienceGuard = __decorate([
        core.Injectable(),
        __metadata("design:paramtypes", [typeof (_a = typeof smarteditcontainer.CatalogAwareRouteResolverHelper !== "undefined" && smarteditcontainer.CatalogAwareRouteResolverHelper) === "function" ? _a : Object, smarteditcommons.SmarteditRoutingService])
    ], /* @ngInject */ ExperienceGuard);
    return /* @ngInject */ ExperienceGuard;
}());

var /* @ngInject */ PageService = /** @class */ (function (_super) {
    __extends(/* @ngInject */ PageService, _super);
    PageService.$inject = ["pagesRestService", "pagesFallbacksRestService", "pagesVariationsRestService", "pageInfoService", "cmsitemsRestService", "experienceService", "urlService"];
    function /* @ngInject */ PageService(pagesRestService, pagesFallbacksRestService, pagesVariationsRestService, pageInfoService, cmsitemsRestService, experienceService, urlService) {
        var _this = _super.call(this) || this;
        _this.pagesRestService = pagesRestService;
        _this.pagesFallbacksRestService = pagesFallbacksRestService;
        _this.pagesVariationsRestService = pagesVariationsRestService;
        _this.pageInfoService = pageInfoService;
        _this.cmsitemsRestService = cmsitemsRestService;
        _this.experienceService = experienceService;
        _this.urlService = urlService;
        return _this;
    }
    /* @ngInject */ PageService.prototype.getPageByUuid = function (pageUuid) {
        return this.cmsitemsRestService.getById(pageUuid);
    };
    PageService.prototype.getPageByUuid.$inject = ["pageUuid"];
    /* @ngInject */ PageService.prototype.getCurrentPageInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageUUID;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 1:
                        pageUUID = _a.sent();
                        return [2 /*return*/, this.cmsitemsRestService.getById(pageUUID)];
                }
            });
        });
    };
    /* @ngInject */ PageService.prototype.getPageById = function (pageUid) {
        return this.pagesRestService.getById(pageUid);
    };
    PageService.prototype.getPageById.$inject = ["pageUid"];
    /* @ngInject */ PageService.prototype.getCurrentPageInfoByVersion = function (versionId) {
        return __awaiter(this, void 0, void 0, function () {
            var pageUUID;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pageInfoService.getPageUUID()];
                    case 1:
                        pageUUID = _a.sent();
                        return [2 /*return*/, this.cmsitemsRestService.getByIdAndVersion(pageUUID, versionId)];
                }
            });
        });
    };
    PageService.prototype.getCurrentPageInfoByVersion.$inject = ["versionId"];
    /* @ngInject */ PageService.prototype.primaryPageForPageTypeExists = function (pageTypeCode, uriParams) {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPaginatedPrimaryPagesForPageType(pageTypeCode, uriParams, {
                            search: null,
                            pageSize: 1,
                            currentPage: 0
                        })];
                    case 1:
                        page = _a.sent();
                        return [2 /*return*/, page.response.length > 0];
                }
            });
        });
    };
    PageService.prototype.primaryPageForPageTypeExists.$inject = ["pageTypeCode", "uriParams"];
    /* @ngInject */ PageService.prototype.getPaginatedPrimaryPagesForPageType = function (pageTypeCode, uriParams, fetchPageParams) {
        var itemSearchParams = 'defaultPage:true,pageStatus:ACTIVE';
        var extendedParams = lodash.assign({}, uriParams || {}, fetchPageParams || {}, {
            typeCode: pageTypeCode,
            itemSearchParams: itemSearchParams
        });
        if (extendedParams.search) {
            extendedParams.mask = extendedParams.search;
            delete extendedParams.search;
        }
        if (!lodash.isNumber(extendedParams.pageSize)) {
            extendedParams.pageSize = 10;
        }
        if (!lodash.isNumber(extendedParams.currentPage)) {
            extendedParams.currentPage = 0;
        }
        return this.cmsitemsRestService.get(extendedParams);
    };
    PageService.prototype.getPaginatedPrimaryPagesForPageType.$inject = ["pageTypeCode", "uriParams", "fetchPageParams"];
    /* @ngInject */ PageService.prototype.isPagePrimary = function (pageUid) {
        return __awaiter(this, void 0, void 0, function () {
            var fallbacks;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pagesFallbacksRestService.getFallbacksForPageId(pageUid)];
                    case 1:
                        fallbacks = _a.sent();
                        return [2 /*return*/, fallbacks.length === 0];
                }
            });
        });
    };
    PageService.prototype.isPagePrimary.$inject = ["pageUid"];
    /* @ngInject */ PageService.prototype.isPagePrimaryWithContext = function (pageUid, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var fallbacks;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pagesFallbacksRestService.getFallbacksForPageIdAndContext(pageUid, uriContext)];
                    case 1:
                        fallbacks = _a.sent();
                        return [2 /*return*/, fallbacks.length === 0];
                }
            });
        });
    };
    PageService.prototype.isPagePrimaryWithContext.$inject = ["pageUid", "uriContext"];
    /* @ngInject */ PageService.prototype.getPrimaryPage = function (variationPageId) {
        return __awaiter(this, void 0, void 0, function () {
            var fallbacks;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pagesFallbacksRestService.getFallbacksForPageId(variationPageId)];
                    case 1:
                        fallbacks = _a.sent();
                        return [2 /*return*/, fallbacks[0]
                                ? this.pagesRestService.getById(fallbacks[0])
                                : Promise.resolve(null)];
                }
            });
        });
    };
    PageService.prototype.getPrimaryPage.$inject = ["variationPageId"];
    /* @ngInject */ PageService.prototype.getVariationPages = function (primaryPageId) {
        return __awaiter(this, void 0, void 0, function () {
            var variationPageIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pagesVariationsRestService.getVariationsForPrimaryPageId(primaryPageId)];
                    case 1:
                        variationPageIds = _a.sent();
                        return [2 /*return*/, variationPageIds.length > 0
                                ? this.pagesRestService.get(variationPageIds)
                                : Promise.resolve([])];
                }
            });
        });
    };
    PageService.prototype.getVariationPages.$inject = ["primaryPageId"];
    /* @ngInject */ PageService.prototype.updatePageById = function (pageUid, payload) {
        return __awaiter(this, void 0, void 0, function () {
            var originalPage, originalPagePayload;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pagesRestService.getById(pageUid)];
                    case 1:
                        originalPage = _a.sent();
                        originalPagePayload = smarteditcommons.objectUtils.copy(originalPage);
                        payload = __assign(__assign({}, originalPagePayload), payload);
                        return [2 /*return*/, this.pagesRestService.update(pageUid, payload)];
                }
            });
        });
    };
    PageService.prototype.updatePageById.$inject = ["pageUid", "payload"];
    /* @ngInject */ PageService.prototype.forcePageApprovalStatus = function (newPageStatus) {
        return __awaiter(this, void 0, void 0, function () {
            var pageInfo, clonePageInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCurrentPageInfo()];
                    case 1:
                        pageInfo = _a.sent();
                        clonePageInfo = Object.assign({}, pageInfo);
                        clonePageInfo.approvalStatus = newPageStatus;
                        clonePageInfo.identifier = pageInfo.uuid;
                        return [2 /*return*/, this.cmsitemsRestService.update(clonePageInfo)];
                }
            });
        });
    };
    PageService.prototype.forcePageApprovalStatus.$inject = ["newPageStatus"];
    /* @ngInject */ PageService.prototype.isPageApproved = function (pageParam) {
        return __awaiter(this, void 0, void 0, function () {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof pageParam === 'string')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getPageByUuid(pageParam)];
                    case 1:
                        page = _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        page = pageParam;
                        _a.label = 3;
                    case 3: return [2 /*return*/, page.approvalStatus === cmscommons.CmsApprovalStatus.APPROVED];
                }
            });
        });
    };
    PageService.prototype.isPageApproved.$inject = ["pageParam"];
    /* @ngInject */ PageService.prototype.buildUriContextForCurrentPage = function (siteId, catalogId, catalogVersion) {
        return __awaiter(this, void 0, void 0, function () {
            var uriContext, experience;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uriContext = {};
                        if (siteId && catalogId && catalogVersion) {
                            uriContext = this.urlService.buildUriContext(siteId, catalogId, catalogVersion);
                        }
                        if (!lodash.isEmpty(uriContext)) {
                            return [2 /*return*/, uriContext];
                        }
                        return [4 /*yield*/, this.experienceService.getCurrentExperience()];
                    case 1:
                        experience = _a.sent();
                        return [2 /*return*/, this.urlService.buildUriContext(experience.pageContext.siteId, experience.pageContext.catalogId, experience.pageContext.catalogVersion)];
                }
            });
        });
    };
    PageService.prototype.buildUriContextForCurrentPage.$inject = ["siteId", "catalogId", "catalogVersion"];
    __decorate([
        smarteditcommons.Cached({ actions: [smarteditcommons.rarelyChangingContent], tags: [smarteditcommons.pageEvictionTag] }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], /* @ngInject */ PageService.prototype, "getPageByUuid", null);
    __decorate([
        smarteditcommons.Cached({ actions: [smarteditcommons.rarelyChangingContent], tags: [smarteditcommons.pageEvictionTag, smarteditcommons.pageChangeEvictionTag] }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], /* @ngInject */ PageService.prototype, "getCurrentPageInfo", null);
    /* @ngInject */ PageService = __decorate([
        smarteditcommons.SeDowngradeService(cmscommons.IPageService),
        smarteditcommons.GatewayProxied(),
        __metadata("design:paramtypes", [PagesRestService,
            PagesFallbacksRestService,
            PagesVariationsRestService,
            smarteditcommons.IPageInfoService,
            cmscommons.CmsitemsRestService,
            smarteditcommons.IExperienceService,
            smarteditcommons.IUrlService])
    ], /* @ngInject */ PageService);
    return /* @ngInject */ PageService;
}(cmscommons.IPageService));

var /* @ngInject */ RemoveComponentService = /** @class */ (function (_super) {
    __extends(/* @ngInject */ RemoveComponentService, _super);
    function /* @ngInject */ RemoveComponentService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /* @ngInject */ RemoveComponentService = __decorate([
        smarteditcommons.GatewayProxied('removeComponent'),
        smarteditcommons.SeDowngradeService(cmscommons.IRemoveComponentService)
    ], /* @ngInject */ RemoveComponentService);
    return /* @ngInject */ RemoveComponentService;
}(cmscommons.IRemoveComponentService));

var /* @ngInject */ SlotRestrictionsService = /** @class */ (function (_super) {
    __extends(/* @ngInject */ SlotRestrictionsService, _super);
    function /* @ngInject */ SlotRestrictionsService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /* @ngInject */ SlotRestrictionsService = __decorate([
        smarteditcommons.SeDowngradeService(cmscommons.ISlotRestrictionsService),
        smarteditcommons.GatewayProxied('getAllComponentTypesSupportedOnPage', 'getSlotRestrictions')
    ], /* @ngInject */ SlotRestrictionsService);
    return /* @ngInject */ SlotRestrictionsService;
}(cmscommons.ISlotRestrictionsService));

var /* @ngInject */ SyncPollingService = /** @class */ (function (_super) {
    __extends(/* @ngInject */ SyncPollingService, _super);
    SyncPollingService.$inject = ["logService", "pageInfoService", "experienceService", "catalogService", "synchronizationResourceService", "crossFrameEventService", "systemEventService", "timerService"];
    function /* @ngInject */ SyncPollingService(logService, pageInfoService, experienceService, catalogService, synchronizationResourceService, crossFrameEventService, systemEventService, timerService) {
        var _this = _super.call(this) || this;
        _this.logService = logService;
        _this.pageInfoService = pageInfoService;
        _this.experienceService = experienceService;
        _this.catalogService = catalogService;
        _this.synchronizationResourceService = synchronizationResourceService;
        _this.crossFrameEventService = crossFrameEventService;
        _this.systemEventService = systemEventService;
        _this.timerService = timerService;
        _this.SYNC_POLLING_THROTTLE = 500;
        _this.syncStatus = {};
        _this.triggers = new Set();
        _this.syncPollingTimer = null;
        _this.refreshInterval = null;
        _this.syncPageObservableMap = new Map();
        _this.initSyncPolling();
        return _this;
    }
    /* @ngInject */ SyncPollingService.prototype.performSync = function (array, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var currentPageFromActiveCatalog, activeVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isCurrentPageFromActiveCatalog()];
                    case 1:
                        currentPageFromActiveCatalog = _a.sent();
                        if (currentPageFromActiveCatalog) {
                            return [2 /*return*/, Promise.reject()];
                        }
                        return [4 /*yield*/, this.catalogService.getContentCatalogActiveVersion(uriContext)];
                    case 2:
                        activeVersion = _a.sent();
                        return [2 /*return*/, this.synchronizationResourceService
                                .getPageSynchronizationPostRestService(uriContext)
                                .save({
                                target: activeVersion,
                                items: array
                            })];
                }
            });
        });
    };
    SyncPollingService.prototype.performSync.$inject = ["array", "uriContext"];
    /* @ngInject */ SyncPollingService.prototype.getSyncStatus = function (pageUUID, uriContext, forceGetSynchronization) {
        return __awaiter(this, void 0, void 0, function () {
            var _pageUUID, _a, syncStatus, syncPollingType, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (forceGetSynchronization) {
                            this.clearSyncPageObservableMap();
                        }
                        if (this.syncStatus[pageUUID] &&
                            pageUUID === this.syncStatus[pageUUID].itemId &&
                            !forceGetSynchronization) {
                            return [2 /*return*/, this.syncStatus[pageUUID]];
                        }
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.getPageUUID(pageUUID)];
                    case 2:
                        _pageUUID = _c.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _c.sent();
                        this.logService.error('syncPollingService::getSyncStatus - failed call to getPageUUID');
                        this.syncPollingTimer.stop();
                        return [2 /*return*/, this.fetchSyncStatus(pageUUID, uriContext)];
                    case 4:
                        _c.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.fetchSyncStatus(_pageUUID, uriContext)];
                    case 5:
                        syncStatus = _c.sent();
                        syncPollingType = this.getSyncPollingTypeFromInterval(this.refreshInterval);
                        this.startSync(syncPollingType);
                        return [2 /*return*/, syncStatus];
                    case 6:
                        _b = _c.sent();
                        this.logService.error('syncPollingService::getSyncStatus - failed call to fetchSyncStatus');
                        return [2 /*return*/, Promise.reject()];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    SyncPollingService.prototype.getSyncStatus.$inject = ["pageUUID", "uriContext", "forceGetSynchronization"];
    /* @ngInject */ SyncPollingService.prototype.fetchSyncStatus = function (_pageUUID, uriContext) {
        return __awaiter(this, void 0, void 0, function () {
            var pageUUID, currentPageFromActiveCatalog, activeVersion, uniqueKeyForPage, syncPageObservable, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, this.getPageUUID(_pageUUID)];
                    case 1:
                        pageUUID = _a.sent();
                        if (!pageUUID) {
                            return [2 /*return*/, {}];
                        }
                        return [4 /*yield*/, this.isCurrentPageFromActiveCatalog()];
                    case 2:
                        currentPageFromActiveCatalog = _a.sent();
                        if (currentPageFromActiveCatalog) {
                            return [2 /*return*/, Promise.reject()];
                        }
                        return [4 /*yield*/, this.catalogService.getContentCatalogActiveVersion(uriContext)];
                    case 3:
                        activeVersion = _a.sent();
                        uniqueKeyForPage = smarteditcommons.stringUtils.encode(pageUUID);
                        syncPageObservable = this.syncPageObservableMap.get(uniqueKeyForPage);
                        // Re-use pre-existing Observable to avoid concurrent HTTP call to the same synchronization url.
                        return [2 /*return*/, syncPageObservable
                                ? syncPageObservable.toPromise()
                                : this.fetchPageSynchronization(activeVersion, pageUUID, uriContext).toPromise()];
                    case 4:
                        err_1 = _a.sent();
                        this.stopSync();
                        this.logService.warn(err_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SyncPollingService.prototype.fetchSyncStatus.$inject = ["_pageUUID", "uriContext"];
    /*
     * This method is used to change the speed (up/down) of the sync polling. EventId could be syncPollingSpeedUp or syncPollingSlowDown.
     * If multiple services are changing the speed of the polling and in order to differentiate between them 'key' must to be used and it should be unique among the services.
     * For example: key could be servicePrefix + pageUuid/itemId
     * If at least one service needs fast polling, refreshInterval will be set to fast polling. If none of them needs fast polling, refreshInterval will be set to slow polling.
     */
    /* @ngInject */ SyncPollingService.prototype.changePollingSpeed = function (eventId, key) {
        if (eventId === cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.SPEED_UP) {
            this.syncStatus = {};
            if (key && !this.triggers.has(key)) {
                this.triggers.add(key);
            }
            this.refreshInterval = cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.FAST_POLLING_TIME;
        }
        else {
            if (key) {
                this.triggers.delete(key);
            }
            if (this.triggers.size === 0) {
                this.refreshInterval = cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.SLOW_POLLING_TIME;
            }
        }
        this.syncPollingTimer.restart(this.refreshInterval);
    };
    SyncPollingService.prototype.changePollingSpeed.$inject = ["eventId", "key"];
    /* @ngInject */ SyncPollingService.prototype.fetchPageSynchronization = function (activeVersion, pageUUID, uriContext) {
        var syncObservable = rxjs.from(this.getPageSlotSyncStatus(uriContext, pageUUID, activeVersion));
        var uniqueKeyForPage = smarteditcommons.stringUtils.encode(pageUUID);
        this.syncPageObservableMap.set(uniqueKeyForPage, syncObservable);
        return syncObservable.pipe(operators$1.share());
    };
    SyncPollingService.prototype.fetchPageSynchronization.$inject = ["activeVersion", "pageUUID", "uriContext"];
    /* @ngInject */ SyncPollingService.prototype.getPageSlotSyncStatus = function (uriContext, pageUUID, activeVersion) {
        return __awaiter(this, void 0, void 0, function () {
            var syncStatus, lastSyncStatus;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.synchronizationResourceService
                            .getPageSynchronizationGetRestService(uriContext)
                            .get({
                            pageUid: pageUUID,
                            target: activeVersion
                        })];
                    case 1:
                        syncStatus = _a.sent();
                        lastSyncStatus = this.syncStatus[syncStatus.itemId];
                        if (JSON.stringify(syncStatus) !== JSON.stringify(lastSyncStatus)) {
                            this.crossFrameEventService.publish(cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.FAST_FETCH, syncStatus);
                            if (!lastSyncStatus ||
                                syncStatus.lastModifiedDate !== lastSyncStatus.lastModifiedDate ||
                                syncStatus.status !== lastSyncStatus.status) {
                                this.crossFrameEventService.publish(cmscommons.CMSITEMS_UPDATE_EVENT);
                                this.crossFrameEventService.publish(smarteditcommons.EVENTS.PAGE_UPDATED, {
                                    uuid: pageUUID
                                });
                            }
                        }
                        this.syncStatus[syncStatus.itemId] = syncStatus;
                        this.clearSyncPageObservableMap();
                        return [2 /*return*/, syncStatus];
                }
            });
        });
    };
    SyncPollingService.prototype.getPageSlotSyncStatus.$inject = ["uriContext", "pageUUID", "activeVersion"];
    /* @ngInject */ SyncPollingService.prototype.stopSync = function () {
        if (this.syncPollingTimer.isActive()) {
            this.syncPollingTimer.stop();
        }
        this.clearSyncStatus();
    };
    /* @ngInject */ SyncPollingService.prototype.startSync = function (syncPollingType) {
        if (!this.syncPollingTimer.isActive()) {
            this.changePollingSpeed(syncPollingType || cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.SLOW_DOWN);
        }
    };
    SyncPollingService.prototype.startSync.$inject = ["syncPollingType"];
    /* @ngInject */ SyncPollingService.prototype.initSyncPolling = function () {
        var _this = this;
        this.refreshInterval = cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.SLOW_POLLING_TIME;
        /**
         * When multiple items needs sync polling at different paces (either slow or fast),
         * triggers array makes sure to set to fast polling even if any one of them needs fast polling.
         */
        this.triggers.clear();
        this.syncStatus = {};
        var changePolling = this.changePollingSpeed.bind(this);
        this.systemEventService.subscribe(cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.SPEED_UP, changePolling);
        this.systemEventService.subscribe(cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.SLOW_DOWN, changePolling);
        this.crossFrameEventService.subscribe(cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.FETCH_SYNC_STATUS_ONCE, function (eventId, pageUUID) {
            _this.fetchSyncStatus(pageUUID);
        });
        this.crossFrameEventService.subscribe(smarteditcommons.OVERLAY_RERENDERED_EVENT, lodash.throttle(function () {
            if (_this.syncPollingTimer.isActive()) {
                _this.fetchSyncStatus();
            }
        }, this.SYNC_POLLING_THROTTLE));
        this.crossFrameEventService.subscribe(smarteditcommons.EVENTS.PAGE_CHANGE, function () {
            _this.clearSyncStatus();
            _this.clearSyncPageObservableMap();
        });
        this.crossFrameEventService.subscribe(cmscommons.DEFAULT_SYNCHRONIZATION_EVENT.CATALOG_SYNCHRONIZED, function () {
            _this.syncStatus = {};
            _this.fetchSyncStatus();
        });
        // fetchSyncStatus callback uses current page uuid by default
        this.syncPollingTimer = this.timerService.createTimer(function () { return _this.fetchSyncStatus(); }, this.refreshInterval);
        // start sync polling if it is a storefront page
        if (smarteditcommons.windowUtils.getGatewayTargetFrame()) {
            var syncPollingType = this.getSyncPollingTypeFromInterval(this.refreshInterval);
            this.startSync(syncPollingType);
        }
    };
    /* @ngInject */ SyncPollingService.prototype.clearSyncPageObservableMap = function () {
        this.syncPageObservableMap.clear();
    };
    /* @ngInject */ SyncPollingService.prototype.clearSyncStatus = function () {
        this.syncStatus = {};
    };
    /* @ngInject */ SyncPollingService.prototype.getPageUUID = function (_pageUUID) {
        return !smarteditcommons.stringUtils.isBlank(_pageUUID)
            ? Promise.resolve(_pageUUID)
            : this.pageInfoService.getPageUUID();
    };
    SyncPollingService.prototype.getPageUUID.$inject = ["_pageUUID"];
    /* @ngInject */ SyncPollingService.prototype.isCurrentPageFromActiveCatalog = function () {
        return __awaiter(this, void 0, void 0, function () {
            var currentExperience;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.experienceService.getCurrentExperience()];
                    case 1:
                        currentExperience = _a.sent();
                        return [2 /*return*/, currentExperience.pageContext
                                ? currentExperience.pageContext.active
                                : currentExperience.catalogDescriptor.active];
                }
            });
        });
    };
    /* @ngInject */ SyncPollingService.prototype.getSyncPollingTypeFromInterval = function (interval) {
        return interval === cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.FAST_POLLING_TIME
            ? cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.SPEED_UP
            : cmscommons.DEFAULT_SYNCHRONIZATION_POLLING.SLOW_DOWN;
    };
    SyncPollingService.prototype.getSyncPollingTypeFromInterval.$inject = ["interval"];
    __decorate([
        smarteditcommons.InvalidateCache(cmscommons.cmsitemsEvictionTag),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array, Object]),
        __metadata("design:returntype", Promise)
    ], /* @ngInject */ SyncPollingService.prototype, "performSync", null);
    /* @ngInject */ SyncPollingService = __decorate([
        smarteditcommons.SeDowngradeService(cmscommons.ISyncPollingService),
        smarteditcommons.GatewayProxied('getSyncStatus', 'fetchSyncStatus', 'changePollingSpeed', 'registerSyncPollingEvents', 'performSync'),
        __metadata("design:paramtypes", [smarteditcommons.LogService,
            smarteditcommons.IPageInfoService,
            smarteditcommons.IExperienceService,
            smarteditcommons.ICatalogService,
            cmscommons.SynchronizationResourceService,
            smarteditcommons.CrossFrameEventService,
            smarteditcommons.SystemEventService,
            smarteditcommons.TimerService])
    ], /* @ngInject */ SyncPollingService);
    return /* @ngInject */ SyncPollingService;
}(cmscommons.ISyncPollingService));

var CmssmarteditContainerModule = /** @class */ (function () {
    function CmssmarteditContainerModule() {
    }
    CmssmarteditContainerModule = __decorate([
        smarteditcommons.SeEntryModule('cmssmarteditContainer'),
        core.NgModule({
            imports: [
                cmscommons.CmsCommonsModule,
                platformBrowser.BrowserModule,
                _static.UpgradeModule,
                smarteditcommons.SharedComponentsModule,
                smarteditcommons.SeGenericEditorModule,
                smarteditcommons.MessageModule,
                smarteditcommons.TooltipModule,
                WorkflowModule,
                VersioningModule,
                SynchronizationModule,
                smarteditcommons.SeTranslationModule.forChild(),
                smarteditcommons.L10nPipeModule,
                NavigationModule,
                GenericEditorWidgetsModule$1,
                MediaModule,
                PageComponentsModule,
                TrashedPageListModule,
                RestrictionsModule,
                CmsComponentsModule,
                forms.FormsModule,
                // Routes are "flat" because there are routes registered also in smarteditcontainer.ts
                // And they conflict each (overriding themselves)
                smarteditcommons.SeRouteService.provideNgRoute([
                    {
                        path: "" + smarteditcommons.NG_ROUTE_PREFIX + cmscommons.TRASHED_PAGE_LIST_PATH,
                        component: TrashedPageListComponent,
                        canActivate: [ExperienceGuard]
                    },
                    {
                        path: "" + smarteditcommons.NG_ROUTE_PREFIX + cmscommons.PAGE_LIST_PATH,
                        component: PageListComponent,
                        canActivate: [ExperienceGuard],
                        titleI18nKey: 'se.cms.pagelist.title',
                        priority: 20
                    },
                    {
                        path: "" + smarteditcommons.NG_ROUTE_PREFIX + cmscommons.NAVIGATION_MANAGEMENT_PAGE_PATH,
                        component: NavigationManagementPageComponent,
                        titleI18nKey: 'se.cms.toolbaritem.navigationmenu.name',
                        canActivate: [ExperienceGuard],
                        priority: 10
                    }
                ], { useHash: true, initialNavigation: true, onSameUrlNavigation: 'reload' })
            ],
            providers: [
                PageRestrictionsRestService,
                PageRestrictionsCriteriaService,
                ExperienceGuard,
                ActionableAlertService,
                PageRestrictionsCriteriaService,
                PageRestoredAlertService,
                PageRestoreModalService,
                HomepageService,
                ManagePageService,
                PageTypesRestrictionTypesRestService,
                PageTypesRestrictionTypesService,
                RestrictionTypesRestService,
                RestrictionTypesService,
                ProductCategoryService,
                CatalogVersionRestService,
                PagesRestService,
                PagesVariationsRestService,
                PagesFallbacksRestService,
                PageTypeService,
                StructuresRestService,
                StructureModeManagerFactory,
                TypeStructureRestService,
                RestrictionsService,
                PageRestrictionsService,
                GenericEditorModalService,
                RestrictionsStepHandlerFactory,
                PageFacade,
                PageDisplayConditionsService,
                PageTemplateService,
                DisplayConditionsFacade,
                CmsDragAndDropService,
                DisplayConditionsEditorModel,
                ContextAwareCatalogService,
                RulesAndPermissionsRegistrationService,
                AddPageWizardService,
                ClonePageAlertService,
                {
                    provide: http.HTTP_INTERCEPTORS,
                    useClass: cmscommons.VersionExperienceInterceptor,
                    multi: true
                },
                {
                    provide: http.HTTP_INTERCEPTORS,
                    useClass: smarteditcommons.ResponseAdapterInterceptor,
                    multi: true
                },
                {
                    provide: cmscommons.IPageContentSlotsComponentsRestService,
                    useClass: PageContentSlotsComponentsRestService
                },
                {
                    provide: cmscommons.ISyncPollingService,
                    useClass: SyncPollingService
                },
                {
                    provide: cmscommons.IRemoveComponentService,
                    useClass: RemoveComponentService
                },
                {
                    provide: cmscommons.IPageService,
                    useClass: PageService
                },
                {
                    provide: cmscommons.IContextAwareEditableItemService,
                    useClass: ContextAwareEditableItemService
                },
                {
                    provide: cmscommons.IEditorModalService,
                    useClass: EditorModalService
                },
                {
                    provide: cmscommons.IComponentVisibilityAlertService,
                    useClass: ComponentVisibilityAlertService
                },
                {
                    provide: cmscommons.IComponentSharedService,
                    useClass: ComponentSharedService
                },
                {
                    provide: cmscommons.ISlotRestrictionsService,
                    useClass: SlotRestrictionsService
                },
                smarteditcommons.moduleUtils.bootstrap(function (toolbarServiceFactory, rulesAndPermissionsRegistrationService) {
                    var smartEditTrashPageToolbarService = toolbarServiceFactory.getToolbarService('smartEditTrashPageToolbar');
                    smartEditTrashPageToolbarService.addItems([
                        {
                            key: 'se.cms.pages.list.link',
                            type: smarteditcommons.ToolbarItemType.TEMPLATE,
                            component: PagesLinkComponent,
                            priority: 1,
                            section: smarteditcommons.ToolbarSection.left
                        }
                    ]);
                    rulesAndPermissionsRegistrationService.register();
                }, [smarteditcommons.IToolbarServiceFactory, RulesAndPermissionsRegistrationService])
            ],
            declarations: [
                GenericEditorModalComponent,
                PageRestoredAlertComponent,
                ClonePageAlertComponent,
                SingleActiveCatalogAwareItemSelectorComponent,
                SingeActiveCatalogAwareItemSelectorItemRendererComponent,
                LinkToggleComponent,
                InfoPageNameComponent,
                PageTypeEditorComponent
            ],
            entryComponents: [
                GenericEditorModalComponent,
                PageRestoredAlertComponent,
                ClonePageAlertComponent,
                SingleActiveCatalogAwareItemSelectorComponent,
                SingeActiveCatalogAwareItemSelectorItemRendererComponent,
                LinkToggleComponent,
                InfoPageNameComponent,
                PageTypeEditorComponent
            ]
        })
    ], CmssmarteditContainerModule);
    return CmssmarteditContainerModule;
}());

exports.ActionableAlertService = ActionableAlertService;
exports.CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO = CMS_EVENT_HIDE_REPLACE_PARENT_HOMEPAGE_INFO;
exports.CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO = CMS_EVENT_SHOW_REPLACE_PARENT_HOMEPAGE_INFO;
exports.CmsDragAndDropService = CmsDragAndDropService;
exports.CmsDropdownItemComponent = CmsDropdownItemComponent;
exports.CmsSmarteditServicesModule = CmsSmarteditServicesModule;
exports.CmssmarteditContainer = CmssmarteditContainer;
exports.CmssmarteditContainerModule = CmssmarteditContainerModule;
exports.ComponentMenuModule = ComponentMenuModule;
exports.ComponentMenuService = ComponentMenuService;
exports.ComponentRestrictionsEditorComponent = ComponentRestrictionsEditorComponent;
exports.ComponentVisibilityAlertService = ComponentVisibilityAlertService;
exports.ContextAwareCatalogService = ContextAwareCatalogService;
exports.ContextAwarePageStructureService = ContextAwarePageStructureService;
exports.DisplayConditionsEditorModel = DisplayConditionsEditorModel;
exports.ENABLE_CLONE_ON_DROP = ENABLE_CLONE_ON_DROP;
exports.EditorModalService = EditorModalService;
exports.GenericEditorModalService = GenericEditorModalService;
exports.HomepageService = HomepageService;
exports.PRODUCT_CATEGORY_RESOURCE_BASE_URI = PRODUCT_CATEGORY_RESOURCE_BASE_URI;
exports.PRODUCT_CATEGORY_RESOURCE_URI = PRODUCT_CATEGORY_RESOURCE_URI;
exports.PRODUCT_CATEGORY_SEARCH_RESOURCE_URI = PRODUCT_CATEGORY_SEARCH_RESOURCE_URI;
exports.PageDisplayConditionsService = PageDisplayConditionsService;
exports.PageRestoredAlertService = PageRestoredAlertService;
exports.PageRestrictionsEditorComponent = PageRestrictionsEditorComponent;
exports.PageRestrictionsModule = PageRestrictionsModule;
exports.ProductCategoryService = ProductCategoryService;
exports.RulesAndPermissionsRegistrationService = RulesAndPermissionsRegistrationService;
exports.SelectComponentTypeModalComponent = SelectComponentTypeModalComponent;
exports.SubTypeSelectorComponent = SubTypeSelectorComponent;
